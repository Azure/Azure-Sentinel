{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Infoblox",
    "comments": "Solution template for Infoblox"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Infoblox Lookup Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    },
    "workbook2-name": {
      "type": "string",
      "defaultValue": "Infoblox Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "_solutionName": "Infoblox",
    "_solutionVersion": "3.0.0",
    "solutionId": "infoblox.infoblox-app-for-microsoft-sentinel",
    "_solutionId": "[variables('solutionId')]",
    "uiConfigId1": "InfobloxDataConnector",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "InfobloxDataConnector",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "uiConfigId2": "InfobloxSOCInsightsDataConnector_AMA",
    "_uiConfigId2": "[variables('uiConfigId2')]",
    "dataConnectorContentId2": "InfobloxSOCInsightsDataConnector_AMA",
    "_dataConnectorContentId2": "[variables('dataConnectorContentId2')]",
    "dataConnectorId2": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
    "_dataConnectorId2": "[variables('dataConnectorId2')]",
    "dataConnectorTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId2'))))]",
    "dataConnectorVersion2": "1.0.0",
    "_dataConnectorcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId2'),'-', variables('dataConnectorVersion2'))))]",
    "uiConfigId3": "InfobloxSOCInsightsDataConnector_API",
    "_uiConfigId3": "[variables('uiConfigId3')]",
    "dataConnectorContentId3": "InfobloxSOCInsightsDataConnector_API",
    "_dataConnectorContentId3": "[variables('dataConnectorContentId3')]",
    "dataConnectorId3": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId3'))]",
    "_dataConnectorId3": "[variables('dataConnectorId3')]",
    "dataConnectorTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId3'))))]",
    "dataConnectorVersion3": "1.0.0",
    "_dataConnectorcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId3'),'-', variables('dataConnectorVersion3'))))]",
    "uiConfigId4": "InfobloxSOCInsightsDataConnector_Legacy",
    "_uiConfigId4": "[variables('uiConfigId4')]",
    "dataConnectorContentId4": "InfobloxSOCInsightsDataConnector_Legacy",
    "_dataConnectorContentId4": "[variables('dataConnectorContentId4')]",
    "dataConnectorId4": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId4'))]",
    "_dataConnectorId4": "[variables('dataConnectorId4')]",
    "dataConnectorTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId4'))))]",
    "dataConnectorVersion4": "1.0.0",
    "_dataConnectorcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId4'),'-', variables('dataConnectorVersion4'))))]",
    "uiConfigId5": "InfobloxCloudDataConnectorAma",
    "_uiConfigId5": "[variables('uiConfigId5')]",
    "dataConnectorContentId5": "InfobloxCloudDataConnectorAma",
    "_dataConnectorContentId5": "[variables('dataConnectorContentId5')]",
    "dataConnectorId5": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId5'))]",
    "_dataConnectorId5": "[variables('dataConnectorId5')]",
    "dataConnectorTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId5'))))]",
    "dataConnectorVersion5": "1.0.0",
    "_dataConnectorcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId5'),'-', variables('dataConnectorVersion5'))))]",
    "workbookVersion1": "1.0",
    "workbookContentId1": "InfobloxLookupWorkbook",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "workbookVersion2": "1.0",
    "workbookContentId2": "InfobloxWorkbook",
    "workbookId2": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId2'))]",
    "workbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId2'))))]",
    "_workbookContentId2": "[variables('workbookContentId2')]",
    "_workbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId2'),'-', variables('workbookVersion2'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.0",
      "_analyticRulecontentId1": "a5e2df87-f0c9-4540-8715-96e71b608986",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'a5e2df87-f0c9-4540-8715-96e71b608986')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('a5e2df87-f0c9-4540-8715-96e71b608986')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','a5e2df87-f0c9-4540-8715-96e71b608986','-', '1.0.0')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.0.0",
      "_analyticRulecontentId2": "d04f1963-df27-4127-b1ec-3d37148d65be",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'd04f1963-df27-4127-b1ec-3d37148d65be')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('d04f1963-df27-4127-b1ec-3d37148d65be')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','d04f1963-df27-4127-b1ec-3d37148d65be','-', '1.0.0')))]"
    },
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','InfobloxCDC_SOCInsights')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxCDC_SOCInsights')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxCDC_SOCInsights-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "InfobloxCDC_SOCInsights-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','InfobloxInsight')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsight')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxInsight-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "InfobloxInsight-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','InfobloxInsightAssets')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightAssets')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxInsightAssets-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "InfobloxInsightAssets-Parser"
    },
    "parserObject4": {
      "_parserName4": "[concat(parameters('workspace'),'/','InfobloxInsightComments')]",
      "_parserId4": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightComments')]",
      "parserTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxInsightComments-Parser')))]",
      "parserVersion4": "1.0.0",
      "parserContentId4": "InfobloxInsightComments-Parser"
    },
    "parserObject5": {
      "_parserName5": "[concat(parameters('workspace'),'/','InfobloxInsightEvents')]",
      "_parserId5": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightEvents')]",
      "parserTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxInsightEvents-Parser')))]",
      "parserVersion5": "1.0.0",
      "parserContentId5": "InfobloxInsightEvents-Parser"
    },
    "parserObject6": {
      "_parserName6": "[concat(parameters('workspace'),'/','InfobloxInsightIndicators')]",
      "_parserId6": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightIndicators')]",
      "parserTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('InfobloxInsightIndicators-Parser')))]",
      "parserVersion6": "1.0.0",
      "parserContentId6": "InfobloxInsightIndicators-Parser"
    },
    "Infoblox Block Allow IP Domain": "Infoblox Block Allow IP Domain",
    "_Infoblox Block Allow IP Domain": "[variables('Infoblox Block Allow IP Domain')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "Infoblox Block Allow IP Domain",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "Infoblox Block Allow IP Domain Incident Based": "Infoblox Block Allow IP Domain Incident Based",
    "_Infoblox Block Allow IP Domain Incident Based": "[variables('Infoblox Block Allow IP Domain Incident Based')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "Infoblox Block Allow IP Domain Incident Based",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "InfoBlox Config Insight Details": "InfoBlox Config Insight Details",
    "_InfoBlox Config Insight Details": "[variables('InfoBlox Config Insight Details')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "InfoBlox Config Insight Details",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "Infoblox Config Insights": "Infoblox Config Insights",
    "_Infoblox Config Insights": "[variables('Infoblox Config Insights')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "Infoblox Config Insights",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "Infoblox Data Connector Trigger Sync": "Infoblox Data Connector Trigger Sync",
    "_Infoblox Data Connector Trigger Sync": "[variables('Infoblox Data Connector Trigger Sync')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "Infoblox Data Connector Trigger Sync",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "Infoblox DHCP Lookup": "Infoblox DHCP Lookup",
    "_Infoblox DHCP Lookup": "[variables('Infoblox DHCP Lookup')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "Infoblox DHCP Lookup",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "Infoblox Get IP Space Data": "Infoblox Get IP Space Data",
    "_Infoblox Get IP Space Data": "[variables('Infoblox Get IP Space Data')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "Infoblox Get IP Space Data",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "_playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "Infoblox Get Service Name": "Infoblox Get Service Name",
    "_Infoblox Get Service Name": "[variables('Infoblox Get Service Name')]",
    "playbookVersion8": "1.0",
    "playbookContentId8": "Infoblox Get Service Name",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "_playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "Infoblox IPAM Lookup": "Infoblox IPAM Lookup",
    "_Infoblox IPAM Lookup": "[variables('Infoblox IPAM Lookup')]",
    "playbookVersion9": "1.0",
    "playbookContentId9": "Infoblox IPAM Lookup",
    "_playbookContentId9": "[variables('playbookContentId9')]",
    "playbookId9": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId9'))]",
    "playbookTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId9'))))]",
    "_playbookcontentProductId9": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId9'),'-', variables('playbookVersion9'))))]",
    "Infoblox SOC Get Insight Details": "Infoblox SOC Get Insight Details",
    "_Infoblox SOC Get Insight Details": "[variables('Infoblox SOC Get Insight Details')]",
    "playbookVersion10": "1.0",
    "playbookContentId10": "Infoblox SOC Get Insight Details",
    "_playbookContentId10": "[variables('playbookContentId10')]",
    "playbookId10": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId10'))]",
    "playbookTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId10'))))]",
    "_playbookcontentProductId10": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId10'),'-', variables('playbookVersion10'))))]",
    "Infoblox SOC Get Open Insights API": "Infoblox SOC Get Open Insights API",
    "_Infoblox SOC Get Open Insights API": "[variables('Infoblox SOC Get Open Insights API')]",
    "playbookVersion11": "1.0",
    "playbookContentId11": "Infoblox SOC Get Open Insights API",
    "_playbookContentId11": "[variables('playbookContentId11')]",
    "playbookId11": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId11'))]",
    "playbookTemplateSpecName11": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId11'))))]",
    "_playbookcontentProductId11": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId11'),'-', variables('playbookVersion11'))))]",
    "Infoblox SOC Import Indicators TI": "Infoblox SOC Import Indicators TI",
    "_Infoblox SOC Import Indicators TI": "[variables('Infoblox SOC Import Indicators TI')]",
    "playbookVersion12": "1.0",
    "playbookContentId12": "Infoblox SOC Import Indicators TI",
    "_playbookContentId12": "[variables('playbookContentId12')]",
    "playbookId12": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId12'))]",
    "playbookTemplateSpecName12": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId12'))))]",
    "_playbookcontentProductId12": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId12'),'-', variables('playbookVersion12'))))]",
    "Infoblox TIDE Lookup": "Infoblox TIDE Lookup",
    "_Infoblox TIDE Lookup": "[variables('Infoblox TIDE Lookup')]",
    "playbookVersion13": "1.0",
    "playbookContentId13": "Infoblox TIDE Lookup",
    "_playbookContentId13": "[variables('playbookContentId13')]",
    "playbookId13": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId13'))]",
    "playbookTemplateSpecName13": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId13'))))]",
    "_playbookcontentProductId13": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId13'),'-', variables('playbookVersion13'))))]",
    "Infoblox TIDE Lookup Incident Based": "Infoblox TIDE Lookup Incident Based",
    "_Infoblox TIDE Lookup Incident Based": "[variables('Infoblox TIDE Lookup Incident Based')]",
    "playbookVersion14": "1.0",
    "playbookContentId14": "Infoblox TIDE Lookup Incident Based",
    "_playbookContentId14": "[variables('playbookContentId14')]",
    "playbookId14": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId14'))]",
    "playbookTemplateSpecName14": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId14'))))]",
    "_playbookcontentProductId14": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId14'),'-', variables('playbookVersion14'))))]",
    "Infoblox TIDE Lookup Incident Comment Based": "Infoblox TIDE Lookup Incident Comment Based",
    "_Infoblox TIDE Lookup Incident Comment Based": "[variables('Infoblox TIDE Lookup Incident Comment Based')]",
    "playbookVersion15": "1.0",
    "playbookContentId15": "Infoblox TIDE Lookup Incident Comment Based",
    "_playbookContentId15": "[variables('playbookContentId15')]",
    "playbookId15": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId15'))]",
    "playbookTemplateSpecName15": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId15'))))]",
    "_playbookcontentProductId15": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId15'),'-', variables('playbookVersion15'))))]",
    "Infoblox TimeRangeBased DHCP Lookup": "Infoblox TimeRangeBased DHCP Lookup",
    "_Infoblox TimeRangeBased DHCP Lookup": "[variables('Infoblox TimeRangeBased DHCP Lookup')]",
    "playbookVersion16": "1.0",
    "playbookContentId16": "Infoblox TimeRangeBased DHCP Lookup",
    "_playbookContentId16": "[variables('playbookContentId16')]",
    "playbookId16": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId16'))]",
    "playbookTemplateSpecName16": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId16'))))]",
    "_playbookcontentProductId16": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId16'),'-', variables('playbookVersion16'))))]",
    "Infoblox Get Host Name": "Infoblox Get Host Name",
    "_Infoblox Get Host Name": "[variables('Infoblox Get Host Name')]",
    "playbookVersion17": "1.0",
    "playbookContentId17": "Infoblox Get Host Name",
    "_playbookContentId17": "[variables('playbookContentId17')]",
    "playbookId17": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId17'))]",
    "playbookTemplateSpecName17": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId17'))))]",
    "_playbookcontentProductId17": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId17'),'-', variables('playbookVersion17'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]",
    "InfobloxInsightID": "InfobloxInsightID",
    "_Infoblox_Insight_ID": "[variables('InfobloxInsightID')]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Infoblox Data Connector via REST API (using Azure Functions)",
                  "publisher": "Infoblox",
                  "descriptionMarkdown": "The Infoblox Data Connector allows you to easily connect your Infoblox TIDE data and Dossier data with Microsoft Sentinel. By connecting your data to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
                  "graphQueries": [
                    {
                      "metricName": "Failed Indicator time range received",
                      "legend": "Failed_Range_To_Ingest",
                      "baseQuery": "Failed_Range_To_Ingest_CL"
                    },
                    {
                      "metricName": "Failed Indicators Range data received",
                      "legend": "Infoblox_Failed_Indicators",
                      "baseQuery": "Infoblox_Failed_Indicators_CL"
                    },
                    {
                      "metricName": "Dossier whois source data received",
                      "legend": "dossier_whois",
                      "baseQuery": "dossier_whois_CL"
                    },
                    {
                      "metricName": "Dossier whitelist source data received",
                      "legend": "dossier_whitelist",
                      "baseQuery": "dossier_whitelist_CL"
                    },
                    {
                      "metricName": "Dossier tld risk source data received",
                      "legend": "dossier_tld_risk",
                      "baseQuery": "dossier_tld_risk_CL"
                    },
                    {
                      "metricName": "Dossier threat actor source data received",
                      "legend": "dossier_threat_actor",
                      "baseQuery": "dossier_threat_actor_CL"
                    },
                    {
                      "metricName": "Dossier rpz feeds records source data received",
                      "legend": "dossier_rpz_feeds_records",
                      "baseQuery": "dossier_rpz_feeds_records_CL"
                    },
                    {
                      "metricName": "Dossier rpz feeds source data received",
                      "legend": "dossier_rpz_feeds",
                      "baseQuery": "dossier_rpz_feeds_CL"
                    },
                    {
                      "metricName": "Dossier nameserver matches source data received",
                      "legend": "dossier_nameserver_matches",
                      "baseQuery": "dossier_nameserver_matches_CL"
                    },
                    {
                      "metricName": "Dossier nameserver source data received",
                      "legend": "dossier_nameserver",
                      "baseQuery": "dossier_nameserver_CL"
                    },
                    {
                      "metricName": "Dossier malware analysis v3 source data received",
                      "legend": "dossier_malware_analysis_v3",
                      "baseQuery": "dossier_malware_analysis_v3_CL"
                    },
                    {
                      "metricName": "Dossier inforank source data received",
                      "legend": "dossier_inforank",
                      "baseQuery": "dossier_inforank_CL"
                    },
                    {
                      "metricName": "Dossier infoblox web cat source data received",
                      "legend": "dossier_infoblox_web_cat",
                      "baseQuery": "dossier_infoblox_web_cat_CL"
                    },
                    {
                      "metricName": "Dossier geo source data received",
                      "legend": "dossier_geo",
                      "baseQuery": "dossier_geo_CL"
                    },
                    {
                      "metricName": "Dossier dns source data received",
                      "legend": "dossier_dns",
                      "baseQuery": "dossier_dns_CL"
                    },
                    {
                      "metricName": "Dossier atp threat source data received",
                      "legend": "dossier_atp_threat",
                      "baseQuery": "dossier_atp_threat_CL"
                    },
                    {
                      "metricName": "Dossier atp source data received",
                      "legend": "dossier_atp",
                      "baseQuery": "dossier_atp_CL"
                    },
                    {
                      "metricName": "Dossier ptr source data received",
                      "legend": "dossier_ptr",
                      "baseQuery": "dossier_ptr_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Failed Indicator time range received",
                      "query": "Failed_Range_To_Ingest_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Failed Indicators Range Data",
                      "query": "Infoblox_Failed_Indicators_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier whois data source",
                      "query": "dossier_whois_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier whitelist data source",
                      "query": "dossier_whitelist_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier tld risk data source",
                      "query": "dossier_tld_risk_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier threat actor data source",
                      "query": "dossier_threat_actor_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier rpz feeds records data source",
                      "query": "dossier_rpz_feeds_records_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier rpz feeds data source",
                      "query": "dossier_rpz_feeds_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier nameserver matches data source",
                      "query": "dossier_nameserver_matches_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier nameserver data source",
                      "query": "dossier_nameserver_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier malware analysis v3 data source",
                      "query": "dossier_malware_analysis_v3_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier inforank data source",
                      "query": "dossier_inforank_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier infoblox web cat data source",
                      "query": "dossier_infoblox_web_cat_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier geo data source",
                      "query": "dossier_geo_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier dns data source",
                      "query": "dossier_dns_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier atp threat data source",
                      "query": "dossier_atp_threat_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier atp data source",
                      "query": "dossier_atp_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Dossier ptr data source",
                      "query": "dossier_ptr_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "Failed_Range_To_Ingest_CL",
                      "lastDataReceivedQuery": "Failed_Range_To_Ingest_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "Infoblox_Failed_Indicators_CL",
                      "lastDataReceivedQuery": "Infoblox_Failed_Indicators_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_whois_CL",
                      "lastDataReceivedQuery": "dossier_whois_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_whitelist_CL",
                      "lastDataReceivedQuery": "dossier_whitelist_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_tld_risk_CL",
                      "lastDataReceivedQuery": "dossier_tld_risk_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_threat_actor_CL",
                      "lastDataReceivedQuery": "dossier_threat_actor_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_rpz_feeds_records_CL",
                      "lastDataReceivedQuery": "dossier_rpz_feeds_records_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_rpz_feeds_CL",
                      "lastDataReceivedQuery": "dossier_rpz_feeds_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_nameserver_matches_CL",
                      "lastDataReceivedQuery": "dossier_nameserver_matches_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_nameserver_CL",
                      "lastDataReceivedQuery": "dossier_nameserver_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_malware_analysis_v3_CL",
                      "lastDataReceivedQuery": "dossier_malware_analysis_v3_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_inforank_CL",
                      "lastDataReceivedQuery": "dossier_inforank_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_infoblox_web_cat_CL",
                      "lastDataReceivedQuery": "dossier_infoblox_web_cat_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_geo_CL",
                      "lastDataReceivedQuery": "dossier_geo_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_dns_CL",
                      "lastDataReceivedQuery": "dossier_dns_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_atp_threat_CL",
                      "lastDataReceivedQuery": "dossier_atp_threat_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_atp_CL",
                      "lastDataReceivedQuery": "dossier_atp_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    },
                    {
                      "name": "dossier_ptr_CL",
                      "lastDataReceivedQuery": "dossier_ptr_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Failed_Range_To_Ingest_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Infoblox_Failed_Indicators_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_whois_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_whitelist_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_tld_risk_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_threat_actor_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_rpz_feeds_records_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_rpz_feeds_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_nameserver_matches_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_nameserver_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_malware_analysis_v3_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_inforank_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_infoblox_web_cat_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_geo_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_dns_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_atp_threat_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_atp_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "dossier_ptr_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Azure Subscription",
                        "description": "Azure Subscription with owner role is required to register an application in Microsoft Entra ID and assign role of contributor to app in resource group."
                      },
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "REST API Credentials/permissions",
                        "description": "**Infoblox API Key** is required.  See the documentation to learn more about API on the [Rest API reference](https://csp.infoblox.com/apidoc?url=https://csp.infoblox.com/apidoc/docs/Infrastructure#/Services/ServicesRead)"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the Infoblox API to create Threat Indicators for TIDE and pull Dossier data into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": "**STEP 1 - App Registration steps for the Application in Microsoft Entra ID**\n\n This integration requires an App registration in the Azure portal. Follow the steps in this section to create a new application in Microsoft Entra ID:\n 1. Sign in to the [Azure portal](https://portal.azure.com/).\n 2. Search for and select **Microsoft Entra ID**.\n 3. Under **Manage**, select **App registrations > New registration**.\n 4. Enter a display **Name** for your application.\n 5. Select **Register** to complete the initial app registration.\n 6. When registration finishes, the Azure portal displays the app registration's Overview pane. You see the **Application (client) ID** and **Tenant ID**. The client ID and Tenant ID is required as configuration parameters for the execution of the TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app)"
                    },
                    {
                      "description": "**STEP 2 - Add a client secret for application in Microsoft Entra ID**\n\n Sometimes called an application password, a client secret is a string value required for the execution of TriggersSync playbook. Follow the steps in this section to create a new Client Secret:\n 1. In the Azure portal, in **App registrations**, select your application.\n 2. Select **Certificates & secrets > Client secrets > New client secret**.\n 3. Add a description for your client secret.\n 4. Select an expiration for the secret or specify a custom lifetime. Limit is 24 months.\n 5. Select **Add**. \n 6. *Record the secret's value for use in your client application code. This secret value is never displayed again after you leave this page.* The secret value is required as configuration parameter for the execution of TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret)"
                    },
                    {
                      "description": "**STEP 3 - Assign role of Contributor to application in Microsoft Entra ID**\n\n Follow the steps in this section to assign the role:\n 1. In the Azure portal, Go to **Resource Group** and select your resource group.\n 2. Go to **Access control (IAM)** from left panel.\n 3. Click on **Add**, and then select **Add role assignment**.\n 4. Select **Contributor** as role and click on next.\n 5. In **Assign access to**, select `User, group, or service principal`.\n 6. Click on **add members** and type **your app name** that you have created and select it.\n 7. Now click on **Review + assign** and then again click on **Review + assign**. \n\n> **Reference link:** [https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal](https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal)"
                    },
                    {
                      "description": "**STEP 4 - Steps to generate the Infoblox API Credentials**\n\n Follow these instructions to generate Infoblox API Key.\n In the [Infoblox Cloud Services Portal](https://csp.infoblox.com/atlas/app/welcome), generate an API Key and copy it somewhere safe to use in the next step. You can find instructions on how to create API keys [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/230394187/How+Do+I+Create+an+API+Key%3F)."
                    },
                    {
                      "description": "**STEP 5 - Steps to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Infoblox data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Infoblox API Authorization Credentials",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Infoblox Data connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-infoblox-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tAzure Tenant Id \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tInfoblox API Token \n\t\tInfoblox Base URL \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tLog Level (Default: INFO) \n\t\tConfidence \n\t\tThreat Level \n\t\tApp Insights Workspace Resource ID \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Azure Resource Manager (ARM) Template"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Infoblox Data Connector via REST API (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Infoblox Data Connector via REST API (using Azure Functions)",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The Infoblox Data Connector allows you to easily connect your Infoblox TIDE data and Dossier data with Microsoft Sentinel. By connecting your data to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
          "graphQueries": [
            {
              "metricName": "Failed Indicator time range received",
              "legend": "Failed_Range_To_Ingest",
              "baseQuery": "Failed_Range_To_Ingest_CL"
            },
            {
              "metricName": "Failed Indicators Range data received",
              "legend": "Infoblox_Failed_Indicators",
              "baseQuery": "Infoblox_Failed_Indicators_CL"
            },
            {
              "metricName": "Dossier whois source data received",
              "legend": "dossier_whois",
              "baseQuery": "dossier_whois_CL"
            },
            {
              "metricName": "Dossier whitelist source data received",
              "legend": "dossier_whitelist",
              "baseQuery": "dossier_whitelist_CL"
            },
            {
              "metricName": "Dossier tld risk source data received",
              "legend": "dossier_tld_risk",
              "baseQuery": "dossier_tld_risk_CL"
            },
            {
              "metricName": "Dossier threat actor source data received",
              "legend": "dossier_threat_actor",
              "baseQuery": "dossier_threat_actor_CL"
            },
            {
              "metricName": "Dossier rpz feeds records source data received",
              "legend": "dossier_rpz_feeds_records",
              "baseQuery": "dossier_rpz_feeds_records_CL"
            },
            {
              "metricName": "Dossier rpz feeds source data received",
              "legend": "dossier_rpz_feeds",
              "baseQuery": "dossier_rpz_feeds_CL"
            },
            {
              "metricName": "Dossier nameserver matches source data received",
              "legend": "dossier_nameserver_matches",
              "baseQuery": "dossier_nameserver_matches_CL"
            },
            {
              "metricName": "Dossier nameserver source data received",
              "legend": "dossier_nameserver",
              "baseQuery": "dossier_nameserver_CL"
            },
            {
              "metricName": "Dossier malware analysis v3 source data received",
              "legend": "dossier_malware_analysis_v3",
              "baseQuery": "dossier_malware_analysis_v3_CL"
            },
            {
              "metricName": "Dossier inforank source data received",
              "legend": "dossier_inforank",
              "baseQuery": "dossier_inforank_CL"
            },
            {
              "metricName": "Dossier infoblox web cat source data received",
              "legend": "dossier_infoblox_web_cat",
              "baseQuery": "dossier_infoblox_web_cat_CL"
            },
            {
              "metricName": "Dossier geo source data received",
              "legend": "dossier_geo",
              "baseQuery": "dossier_geo_CL"
            },
            {
              "metricName": "Dossier dns source data received",
              "legend": "dossier_dns",
              "baseQuery": "dossier_dns_CL"
            },
            {
              "metricName": "Dossier atp threat source data received",
              "legend": "dossier_atp_threat",
              "baseQuery": "dossier_atp_threat_CL"
            },
            {
              "metricName": "Dossier atp source data received",
              "legend": "dossier_atp",
              "baseQuery": "dossier_atp_CL"
            },
            {
              "metricName": "Dossier ptr source data received",
              "legend": "dossier_ptr",
              "baseQuery": "dossier_ptr_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "Failed_Range_To_Ingest_CL",
              "lastDataReceivedQuery": "Failed_Range_To_Ingest_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "Infoblox_Failed_Indicators_CL",
              "lastDataReceivedQuery": "Infoblox_Failed_Indicators_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_whois_CL",
              "lastDataReceivedQuery": "dossier_whois_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_whitelist_CL",
              "lastDataReceivedQuery": "dossier_whitelist_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_tld_risk_CL",
              "lastDataReceivedQuery": "dossier_tld_risk_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_threat_actor_CL",
              "lastDataReceivedQuery": "dossier_threat_actor_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_rpz_feeds_records_CL",
              "lastDataReceivedQuery": "dossier_rpz_feeds_records_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_rpz_feeds_CL",
              "lastDataReceivedQuery": "dossier_rpz_feeds_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_nameserver_matches_CL",
              "lastDataReceivedQuery": "dossier_nameserver_matches_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_nameserver_CL",
              "lastDataReceivedQuery": "dossier_nameserver_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_malware_analysis_v3_CL",
              "lastDataReceivedQuery": "dossier_malware_analysis_v3_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_inforank_CL",
              "lastDataReceivedQuery": "dossier_inforank_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_infoblox_web_cat_CL",
              "lastDataReceivedQuery": "dossier_infoblox_web_cat_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_geo_CL",
              "lastDataReceivedQuery": "dossier_geo_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_dns_CL",
              "lastDataReceivedQuery": "dossier_dns_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_atp_threat_CL",
              "lastDataReceivedQuery": "dossier_atp_threat_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_atp_CL",
              "lastDataReceivedQuery": "dossier_atp_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            },
            {
              "name": "dossier_ptr_CL",
              "lastDataReceivedQuery": "dossier_ptr_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Failed_Range_To_Ingest_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Infoblox_Failed_Indicators_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_whois_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_whitelist_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_tld_risk_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_threat_actor_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_rpz_feeds_records_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_rpz_feeds_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_nameserver_matches_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_nameserver_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_malware_analysis_v3_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_inforank_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_infoblox_web_cat_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_geo_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_dns_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_atp_threat_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_atp_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "dossier_ptr_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Failed Indicator time range received",
              "query": "Failed_Range_To_Ingest_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Failed Indicators Range Data",
              "query": "Infoblox_Failed_Indicators_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier whois data source",
              "query": "dossier_whois_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier whitelist data source",
              "query": "dossier_whitelist_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier tld risk data source",
              "query": "dossier_tld_risk_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier threat actor data source",
              "query": "dossier_threat_actor_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier rpz feeds records data source",
              "query": "dossier_rpz_feeds_records_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier rpz feeds data source",
              "query": "dossier_rpz_feeds_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier nameserver matches data source",
              "query": "dossier_nameserver_matches_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier nameserver data source",
              "query": "dossier_nameserver_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier malware analysis v3 data source",
              "query": "dossier_malware_analysis_v3_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier inforank data source",
              "query": "dossier_inforank_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier infoblox web cat data source",
              "query": "dossier_infoblox_web_cat_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier geo data source",
              "query": "dossier_geo_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier dns data source",
              "query": "dossier_dns_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier atp threat data source",
              "query": "dossier_atp_threat_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier atp data source",
              "query": "dossier_atp_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Dossier ptr data source",
              "query": "dossier_ptr_CL\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Azure Subscription",
                "description": "Azure Subscription with owner role is required to register an application in Microsoft Entra ID and assign role of contributor to app in resource group."
              },
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "REST API Credentials/permissions",
                "description": "**Infoblox API Key** is required.  See the documentation to learn more about API on the [Rest API reference](https://csp.infoblox.com/apidoc?url=https://csp.infoblox.com/apidoc/docs/Infrastructure#/Services/ServicesRead)"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Infoblox API to create Threat Indicators for TIDE and pull Dossier data into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": "**STEP 1 - App Registration steps for the Application in Microsoft Entra ID**\n\n This integration requires an App registration in the Azure portal. Follow the steps in this section to create a new application in Microsoft Entra ID:\n 1. Sign in to the [Azure portal](https://portal.azure.com/).\n 2. Search for and select **Microsoft Entra ID**.\n 3. Under **Manage**, select **App registrations > New registration**.\n 4. Enter a display **Name** for your application.\n 5. Select **Register** to complete the initial app registration.\n 6. When registration finishes, the Azure portal displays the app registration's Overview pane. You see the **Application (client) ID** and **Tenant ID**. The client ID and Tenant ID is required as configuration parameters for the execution of the TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app)"
            },
            {
              "description": "**STEP 2 - Add a client secret for application in Microsoft Entra ID**\n\n Sometimes called an application password, a client secret is a string value required for the execution of TriggersSync playbook. Follow the steps in this section to create a new Client Secret:\n 1. In the Azure portal, in **App registrations**, select your application.\n 2. Select **Certificates & secrets > Client secrets > New client secret**.\n 3. Add a description for your client secret.\n 4. Select an expiration for the secret or specify a custom lifetime. Limit is 24 months.\n 5. Select **Add**. \n 6. *Record the secret's value for use in your client application code. This secret value is never displayed again after you leave this page.* The secret value is required as configuration parameter for the execution of TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret)"
            },
            {
              "description": "**STEP 3 - Assign role of Contributor to application in Microsoft Entra ID**\n\n Follow the steps in this section to assign the role:\n 1. In the Azure portal, Go to **Resource Group** and select your resource group.\n 2. Go to **Access control (IAM)** from left panel.\n 3. Click on **Add**, and then select **Add role assignment**.\n 4. Select **Contributor** as role and click on next.\n 5. In **Assign access to**, select `User, group, or service principal`.\n 6. Click on **add members** and type **your app name** that you have created and select it.\n 7. Now click on **Review + assign** and then again click on **Review + assign**. \n\n> **Reference link:** [https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal](https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal)"
            },
            {
              "description": "**STEP 4 - Steps to generate the Infoblox API Credentials**\n\n Follow these instructions to generate Infoblox API Key.\n In the [Infoblox Cloud Services Portal](https://csp.infoblox.com/atlas/app/welcome), generate an API Key and copy it somewhere safe to use in the next step. You can find instructions on how to create API keys [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/230394187/How+Do+I+Create+an+API+Key%3F)."
            },
            {
              "description": "**STEP 5 - Steps to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Infoblox data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Infoblox API Authorization Credentials",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Infoblox Data connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-infoblox-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tAzure Tenant Id \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tInfoblox API Token \n\t\tInfoblox Base URL \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tLog Level (Default: INFO) \n\t\tConfidence \n\t\tThreat Level \n\t\tApp Insights Workspace Resource ID \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Azure Resource Manager (ARM) Template"
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId2')]",
                  "title": "[Recommended] Infoblox SOC Insight Data Connector via AMA",
                  "publisher": "Infoblox",
                  "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log. \n\nThis data connector ingests Infoblox SOC Insight CDC logs into your Log Analytics Workspace using the new Azure Monitor Agent. Learn more about ingesting using the new Azure Monitor Agent [here](https://learn.microsoft.com/azure/sentinel/connect-cef-ama). **Microsoft recommends using this Data Connector.**",
                  "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "InfobloxCDC_SOCInsights",
                      "baseQuery": "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Return all logs involving DNS Tunneling",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatType == \"DNS Tunneling\""
                    },
                    {
                      "description": "Return all logs involving a configuration issue",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatClass == \"TI-CONFIGURATIONISSUE\""
                    },
                    {
                      "description": "Return all high threat level logs",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatLevel == \"High\""
                    },
                    {
                      "description": "Return raised status logs",
                      "query": "InfobloxCDC_SOCInsights\n| where Status == \"RAISED\""
                    },
                    {
                      "description": "Return logs involving a high amount of unblocked DNS hits",
                      "query": "InfobloxCDC_SOCInsights\n| where NotBlockedCount >= 100"
                    },
                    {
                      "description": "Return each Insight by ThreatFamily",
                      "query": "InfobloxCDC_SOCInsights\n| summarize dcount(InfobloxInsightID) by ThreatFamily"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "CommonSecurityLog (InfobloxCDC_SOCInsights)",
                      "lastDataReceivedQuery": "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "description": "To collect data from non-Azure VMs, they must have Azure Arc installed and enabled. [Learn more](https://docs.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-install?tabs=ARMAgentPowerShell,PowerShellWindows,PowerShellWindowsArc,CLIWindows,CLIWindowsArc)"
                      },
                      {
                        "description": "Common Event Format (CEF) via AMA and Syslog via AMA data connectors must be installed. [Learn more](https://learn.microsoft.com/azure/sentinel/connect-cef-ama#open-the-connector-page-and-create-the-dcr)"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Workspace Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "Workspace Keys"
                    },
                    {
                      "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
                      "title": "Parsers"
                    },
                    {
                      "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights).",
                      "title": "SOC Insights"
                    },
                    {
                      "description": ">This data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of BloxOne Threat Defense, access to an appropriate BloxOne Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements.",
                      "instructions": [
                        {
                          "parameters": {
                            "title": "Follow the steps below to configure this data connector",
                            "instructionSteps": [
                              {
                                "title": "A. Configure the Common Event Format (CEF) via AMA data connector",
                                "description": "_Note: CEF logs are collected only from Linux Agents_\n\n1. Navigate to your **Microsoft Sentinel workspace > Data connectors** blade.\n\n2. Search for the **Common Event Format (CEF) via AMA** data connector and open it.\n\n3. Ensure there is no existing DCR configured to collect required facility of logs as it may cause log duplication. Create a new **DCR (Data Collection Rule)**.\n\n\t_Note: It is recommended to install the AMA agent v1.27 at minimum. [Learn more](https://learn.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-manage?tabs=azure-portal ) and ensure there is no duplicate DCR as it can cause log duplication._\n\n4. Run the command provided in the **Common Event Format (CEF) via AMA** data connector page to configure the CEF collector on the machine."
                              },
                              {
                                "title": "B. Within the Infoblox Cloud Services Portal, configure Infoblox BloxOne to send CEF Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent",
                                "description": "Follow the steps below to configure the Infoblox CDC to send BloxOne data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select the **Internal Notifications** Log Type.\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate."
                              },
                              {
                                "title": "C. Validate connection",
                                "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\nIt may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n 1. Make sure that you have Python on your machine using the following command: python -version\n\n2. You must have elevated permissions (sudo) on your machine",
                                "instructions": [
                                  {
                                    "parameters": {
                                      "label": "Run the following command to validate your connectivity:",
                                      "value": "sudo wget -O Sentinel_AMA_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Sentinel_AMA_troubleshoot.py&&sudo python Sentinel_AMA_troubleshoot.py --cef"
                                    },
                                    "type": "CopyableLabel"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ],
                      "title": "Infoblox Cloud Data Connector"
                    },
                    {
                      "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
                      "title": "2. Secure your machine "
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
                "contentId": "[variables('_dataConnectorContentId2')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "contentKind": "DataConnector",
        "displayName": "[Recommended] Infoblox SOC Insight Data Connector via AMA",
        "contentProductId": "[variables('_dataConnectorcontentProductId2')]",
        "id": "[variables('_dataConnectorcontentProductId2')]",
        "version": "[variables('dataConnectorVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId2')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion2')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "[Recommended] Infoblox SOC Insight Data Connector via AMA",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log. \n\nThis data connector ingests Infoblox SOC Insight CDC logs into your Log Analytics Workspace using the new Azure Monitor Agent. Learn more about ingesting using the new Azure Monitor Agent [here](https://learn.microsoft.com/azure/sentinel/connect-cef-ama). **Microsoft recommends using this Data Connector.**",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "InfobloxCDC_SOCInsights",
              "baseQuery": "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)"
            }
          ],
          "dataTypes": [
            {
              "name": "CommonSecurityLog (InfobloxCDC_SOCInsights)",
              "lastDataReceivedQuery": "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "CommonSecurityLog\n| where DeviceVendor =~ \"Infoblox\" and DeviceProduct =~ \"Data Connector\" and DeviceEventClassID =~ \"BloxOne-InsightsNotification-Log\"\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Return all logs involving DNS Tunneling",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatType == \"DNS Tunneling\""
            },
            {
              "description": "Return all logs involving a configuration issue",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatClass == \"TI-CONFIGURATIONISSUE\""
            },
            {
              "description": "Return all high threat level logs",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatLevel == \"High\""
            },
            {
              "description": "Return raised status logs",
              "query": "InfobloxCDC_SOCInsights\n| where Status == \"RAISED\""
            },
            {
              "description": "Return logs involving a high amount of unblocked DNS hits",
              "query": "InfobloxCDC_SOCInsights\n| where NotBlockedCount >= 100"
            },
            {
              "description": "Return each Insight by ThreatFamily",
              "query": "InfobloxCDC_SOCInsights\n| summarize dcount(InfobloxInsightID) by ThreatFamily"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "description": "To collect data from non-Azure VMs, they must have Azure Arc installed and enabled. [Learn more](https://docs.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-install?tabs=ARMAgentPowerShell,PowerShellWindows,PowerShellWindowsArc,CLIWindows,CLIWindowsArc)"
              },
              {
                "description": "Common Event Format (CEF) via AMA and Syslog via AMA data connectors must be installed. [Learn more](https://learn.microsoft.com/azure/sentinel/connect-cef-ama#open-the-connector-page-and-create-the-dcr)"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Workspace Key"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "Workspace Keys"
            },
            {
              "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
              "title": "Parsers"
            },
            {
              "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights).",
              "title": "SOC Insights"
            },
            {
              "description": ">This data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of BloxOne Threat Defense, access to an appropriate BloxOne Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Follow the steps below to configure this data connector",
                    "instructionSteps": [
                      {
                        "title": "A. Configure the Common Event Format (CEF) via AMA data connector",
                        "description": "_Note: CEF logs are collected only from Linux Agents_\n\n1. Navigate to your **Microsoft Sentinel workspace > Data connectors** blade.\n\n2. Search for the **Common Event Format (CEF) via AMA** data connector and open it.\n\n3. Ensure there is no existing DCR configured to collect required facility of logs as it may cause log duplication. Create a new **DCR (Data Collection Rule)**.\n\n\t_Note: It is recommended to install the AMA agent v1.27 at minimum. [Learn more](https://learn.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-manage?tabs=azure-portal ) and ensure there is no duplicate DCR as it can cause log duplication._\n\n4. Run the command provided in the **Common Event Format (CEF) via AMA** data connector page to configure the CEF collector on the machine."
                      },
                      {
                        "title": "B. Within the Infoblox Cloud Services Portal, configure Infoblox BloxOne to send CEF Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent",
                        "description": "Follow the steps below to configure the Infoblox CDC to send BloxOne data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select the **Internal Notifications** Log Type.\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate."
                      },
                      {
                        "title": "C. Validate connection",
                        "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\nIt may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n 1. Make sure that you have Python on your machine using the following command: python -version\n\n2. You must have elevated permissions (sudo) on your machine",
                        "instructions": [
                          {
                            "parameters": {
                              "label": "Run the following command to validate your connectivity:",
                              "value": "sudo wget -O Sentinel_AMA_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Sentinel_AMA_troubleshoot.py&&sudo python Sentinel_AMA_troubleshoot.py --cef"
                            },
                            "type": "CopyableLabel"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "Infoblox Cloud Data Connector"
            },
            {
              "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
              "title": "2. Secure your machine "
            }
          ],
          "id": "[variables('_uiConfigId2')]",
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion3')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId3'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId3')]",
                  "title": "Infoblox SOC Insight Data Connector via REST API",
                  "publisher": "Infoblox",
                  "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
                  "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxInsight.yaml) which is deployed with the Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "InfobloxInsight",
                      "baseQuery": "InfobloxInsight_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Return all logs involving DNS Tunneling",
                      "query": "InfobloxInsight_CL\n| where threatType_s == \"DNS Tunneling\""
                    },
                    {
                      "description": "Return all logs involving a configuration issue",
                      "query": "InfobloxInsight_CL\n| where tClass_s == \"TI-CONFIGURATIONISSUE\""
                    },
                    {
                      "description": "Return count of critical priority insights",
                      "query": "InfobloxInsight_CL\n| where priorityText_s == \"CRITICAL\"\n | summarize dcount(insightId_g) by priorityText_s"
                    },
                    {
                      "description": "Return each spreading insight by ThreatClass",
                      "query": "InfobloxInsight_CL\n| where isnotempty(spreadingDate_t)\n | summarize dcount(insightId_g) by tClass_s"
                    },
                    {
                      "description": "Return each Insight by ThreatFamily",
                      "query": "InfobloxInsight_CL\n| | summarize dcount(insightId_g) by tFamily_s"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "InfobloxInsight_CL",
                      "lastDataReceivedQuery": "InfobloxInsight_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "InfobloxInsight_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Workspace Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "Workspace Keys"
                    },
                    {
                      "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxInsight.yaml) which is deployed with the Microsoft Sentinel Solution.",
                      "title": "Parsers"
                    },
                    {
                      "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights).",
                      "title": "SOC Insights"
                    },
                    {
                      "instructions": [
                        {
                          "parameters": {
                            "instructionSteps": [
                              {
                                "title": "1.  Generate an Infoblox API Key and copy it somewhere safe",
                                "description": "In the [Infoblox Cloud Services Portal](https://csp.infoblox.com/atlas/app/welcome), generate an API Key and copy it somewhere safe to use in the next step. You can find instructions on how to create API keys [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/230394187/How+Do+I+Create+an+API+Key%3F)."
                              },
                              {
                                "title": "2.  Configure the Infoblox-SOC-Get-Open-Insights-API playbook",
                                "description": "Create and configure the **Infoblox-SOC-Get-Open-Insights-API** playbook which is deployed with this solution. Enter your Infoblox API key in the appropriate parameter when prompted."
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ],
                      "title": "Follow the steps below to configure this data connector"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId3'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId3'))]",
                "contentId": "[variables('_dataConnectorContentId3')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId3')]",
        "contentKind": "DataConnector",
        "displayName": "Infoblox SOC Insight Data Connector via REST API",
        "contentProductId": "[variables('_dataConnectorcontentProductId3')]",
        "id": "[variables('_dataConnectorcontentProductId3')]",
        "version": "[variables('dataConnectorVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId3'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId3')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId3'))]",
        "contentId": "[variables('_dataConnectorContentId3')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion3')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId3'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Infoblox SOC Insight Data Connector via REST API",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "InfobloxInsight",
              "baseQuery": "InfobloxInsight_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "InfobloxInsight_CL",
              "lastDataReceivedQuery": "InfobloxInsight_CL\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "InfobloxInsight_CL\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Return all logs involving DNS Tunneling",
              "query": "InfobloxInsight_CL\n| where threatType_s == \"DNS Tunneling\""
            },
            {
              "description": "Return all logs involving a configuration issue",
              "query": "InfobloxInsight_CL\n| where tClass_s == \"TI-CONFIGURATIONISSUE\""
            },
            {
              "description": "Return count of critical priority insights",
              "query": "InfobloxInsight_CL\n| where priorityText_s == \"CRITICAL\"\n | summarize dcount(insightId_g) by priorityText_s"
            },
            {
              "description": "Return each spreading insight by ThreatClass",
              "query": "InfobloxInsight_CL\n| where isnotempty(spreadingDate_t)\n | summarize dcount(insightId_g) by tClass_s"
            },
            {
              "description": "Return each Insight by ThreatFamily",
              "query": "InfobloxInsight_CL\n| | summarize dcount(insightId_g) by tFamily_s"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Workspace Key"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "Workspace Keys"
            },
            {
              "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxInsight.yaml) which is deployed with the Microsoft Sentinel Solution.",
              "title": "Parsers"
            },
            {
              "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights).",
              "title": "SOC Insights"
            },
            {
              "instructions": [
                {
                  "parameters": {
                    "instructionSteps": [
                      {
                        "title": "1.  Generate an Infoblox API Key and copy it somewhere safe",
                        "description": "In the [Infoblox Cloud Services Portal](https://csp.infoblox.com/atlas/app/welcome), generate an API Key and copy it somewhere safe to use in the next step. You can find instructions on how to create API keys [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/230394187/How+Do+I+Create+an+API+Key%3F)."
                      },
                      {
                        "title": "2.  Configure the Infoblox-SOC-Get-Open-Insights-API playbook",
                        "description": "Create and configure the **Infoblox-SOC-Get-Open-Insights-API** playbook which is deployed with this solution. Enter your Infoblox API key in the appropriate parameter when prompted."
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "Follow the steps below to configure this data connector"
            }
          ],
          "id": "[variables('_uiConfigId3')]",
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxInsight.yaml) which is deployed with the Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion4')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId4'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId4')]",
                  "title": "[Deprecated] Infoblox SOC Insight Data Connector via Legacy Agent",
                  "publisher": "Infoblox",
                  "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log. \n\nThis data connector ingests Infoblox SOC Insight CDC logs into your Log Analytics Workspace using the legacy Log Analytics agent.\n\n**Microsoft recommends installation of Infoblox SOC Insight Data Connector via AMA Connector.** The legacy connector uses the Log Analytics agent which is about to be deprecated by **Aug 31, 2024,** and should only be installed where AMA is not supported.\n\n Using MMA and AMA on the same machine can cause log duplication and extra ingestion cost. [More details](https://learn.microsoft.com/en-us/azure/sentinel/ama-migrate).",
                  "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "InfobloxCDC_SOCInsights",
                      "baseQuery": "CommonSecurityLog\n| where DeviceVendor == \"Infoblox\" and DeviceProduct == \"Data Connector\" and DeviceEventClassID == \"BloxOne-InsightsNotification-Log\""
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Return all logs involving DNS Tunneling",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatType == \"DNS Tunneling\""
                    },
                    {
                      "description": "Return all logs involving a configuration issue",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatClass == \"TI-CONFIGURATIONISSUE\""
                    },
                    {
                      "description": "Return all high threat level logs",
                      "query": "InfobloxCDC_SOCInsights\n| where ThreatLevel == \"High\""
                    },
                    {
                      "description": "Return raised status logs",
                      "query": "InfobloxCDC_SOCInsights\n| where Status == \"RAISED\""
                    },
                    {
                      "description": "Return logs involving a high amount of unblocked DNS hits",
                      "query": "InfobloxCDC_SOCInsights\n| where NotBlockedCount >= 100"
                    },
                    {
                      "description": "Return each Insight by ThreatFamily",
                      "query": "InfobloxCDC_SOCInsights\n| summarize dcount(InfobloxInsightID) by ThreatFamily"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "CommonSecurityLog (InfobloxCDC_SOCInsights)",
                      "lastDataReceivedQuery": "InfobloxCDC_SOCInsights\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "InfobloxCDC_SOCInsights\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Workspace Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "Workspace Keys"
                    },
                    {
                      "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
                      "title": "Parsers"
                    },
                    {
                      "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights). ",
                      "title": "SOC Insights"
                    },
                    {
                      "description": ">This data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of BloxOne Threat Defense, access to an appropriate BloxOne Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements.",
                      "title": "Infoblox Cloud Data Connector"
                    },
                    {
                      "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
                      "innerSteps": [
                        {
                          "title": "1.1 Select or create a Linux machine",
                          "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                        },
                        {
                          "title": "1.2 Install the CEF collector on the Linux machine",
                          "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                          "instructions": [
                            {
                              "parameters": {
                                "fillWith": [
                                  "WorkspaceId",
                                  "PrimaryKey"
                                ],
                                "label": "Run the following command to install and apply the CEF collector:",
                                "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                              },
                              "type": "CopyableLabel"
                            }
                          ]
                        }
                      ],
                      "title": "1. Linux Syslog agent configuration"
                    },
                    {
                      "description": "Follow the steps below to configure the Infoblox CDC to send BloxOne data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select the **Internal Notifications** Log Type.\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate.",
                      "title": "2. Within the Infoblox Cloud Services Portal, configure Infoblox BloxOne to send CEF Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent"
                    },
                    {
                      "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version\n\n>2. You must have elevated permissions (sudo) on your machine",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Run the following command to validate your connectivity:",
                            "value": "sudo wget  -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "3. Validate connection"
                    },
                    {
                      "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
                      "title": "4. Secure your machine "
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId4'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId4'))]",
                "contentId": "[variables('_dataConnectorContentId4')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId4')]",
        "contentKind": "DataConnector",
        "displayName": "[Deprecated] Infoblox SOC Insight Data Connector via Legacy Agent",
        "contentProductId": "[variables('_dataConnectorcontentProductId4')]",
        "id": "[variables('_dataConnectorcontentProductId4')]",
        "version": "[variables('dataConnectorVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId4'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId4')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId4'))]",
        "contentId": "[variables('_dataConnectorContentId4')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion4')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId4'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "[Deprecated] Infoblox SOC Insight Data Connector via Legacy Agent",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The Infoblox SOC Insight Data Connector allows you to easily connect your Infoblox BloxOne SOC Insight data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log. \n\nThis data connector ingests Infoblox SOC Insight CDC logs into your Log Analytics Workspace using the legacy Log Analytics agent.\n\n**Microsoft recommends installation of Infoblox SOC Insight Data Connector via AMA Connector.** The legacy connector uses the Log Analytics agent which is about to be deprecated by **Aug 31, 2024,** and should only be installed where AMA is not supported.\n\n Using MMA and AMA on the same machine can cause log duplication and extra ingestion cost. [More details](https://learn.microsoft.com/en-us/azure/sentinel/ama-migrate).",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "InfobloxCDC_SOCInsights",
              "baseQuery": "CommonSecurityLog\n| where DeviceVendor == \"Infoblox\" and DeviceProduct == \"Data Connector\" and DeviceEventClassID == \"BloxOne-InsightsNotification-Log\""
            }
          ],
          "dataTypes": [
            {
              "name": "CommonSecurityLog (InfobloxCDC_SOCInsights)",
              "lastDataReceivedQuery": "InfobloxCDC_SOCInsights\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "InfobloxCDC_SOCInsights\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(3d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Return all logs involving DNS Tunneling",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatType == \"DNS Tunneling\""
            },
            {
              "description": "Return all logs involving a configuration issue",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatClass == \"TI-CONFIGURATIONISSUE\""
            },
            {
              "description": "Return all high threat level logs",
              "query": "InfobloxCDC_SOCInsights\n| where ThreatLevel == \"High\""
            },
            {
              "description": "Return raised status logs",
              "query": "InfobloxCDC_SOCInsights\n| where Status == \"RAISED\""
            },
            {
              "description": "Return logs involving a high amount of unblocked DNS hits",
              "query": "InfobloxCDC_SOCInsights\n| where NotBlockedCount >= 100"
            },
            {
              "description": "Return each Insight by ThreatFamily",
              "query": "InfobloxCDC_SOCInsights\n| summarize dcount(InfobloxInsightID) by ThreatFamily"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": "In order to use the playbooks as part of this solution, find your **Workspace ID** and **Workspace Primary Key** below for your convenience.",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Workspace Key"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "Workspace Keys"
            },
            {
              "description": ">This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution.",
              "title": "Parsers"
            },
            {
              "description": ">This data connector assumes you have access to Infoblox BloxOne Threat Defense SOC Insights. You can find more information about SOC Insights [**here**](https://docs.infoblox.com/space/BloxOneThreatDefense/501514252/SOC+Insights). ",
              "title": "SOC Insights"
            },
            {
              "description": ">This data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of BloxOne Threat Defense, access to an appropriate BloxOne Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements.",
              "title": "Infoblox Cloud Data Connector"
            },
            {
              "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
              "innerSteps": [
                {
                  "title": "1.1 Select or create a Linux machine",
                  "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                },
                {
                  "title": "1.2 Install the CEF collector on the Linux machine",
                  "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                  "instructions": [
                    {
                      "parameters": {
                        "fillWith": [
                          "WorkspaceId",
                          "PrimaryKey"
                        ],
                        "label": "Run the following command to install and apply the CEF collector:",
                        "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                      },
                      "type": "CopyableLabel"
                    }
                  ]
                }
              ],
              "title": "1. Linux Syslog agent configuration"
            },
            {
              "description": "Follow the steps below to configure the Infoblox CDC to send BloxOne data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select the **Internal Notifications** Log Type.\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate.",
              "title": "2. Within the Infoblox Cloud Services Portal, configure Infoblox BloxOne to send CEF Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent"
            },
            {
              "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version\n\n>2. You must have elevated permissions (sudo) on your machine",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Run the following command to validate your connectivity:",
                    "value": "sudo wget  -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "3. Validate connection"
            },
            {
              "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
              "title": "4. Secure your machine "
            }
          ],
          "id": "[variables('_uiConfigId4')]",
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox%20SOC%20Insights/Parsers/InfobloxCDC_SOCInsights.yaml) which is deployed with the Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion5')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId5'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId5')]",
                  "title": "[Recommended] Infoblox Cloud Data Connector via AMA",
                  "publisher": "Infoblox",
                  "descriptionMarkdown": "The Infoblox Cloud Data Connector allows you to easily connect your Infoblox data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "CommonSecurityLog",
                      "baseQuery": "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "CommonSecurityLog",
                      "lastDataReceivedQuery": "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Return all Block DNS Query/Response logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\""
                    },
                    {
                      "description": "Return all DNS Query/Response logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"DNS\""
                    },
                    {
                      "description": "Return all DHCP Query/Response logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"DHCP\""
                    },
                    {
                      "description": "Return all Service Logs Query/Response logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"Service\""
                    },
                    {
                      "description": "Return all Audit Query/Response logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"Audit\""
                    },
                    {
                      "description": "Return all Category Filters security events logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\"\n | where AdditionalExtensions has_cs \"InfobloxRPZ=CAT_\""
                    },
                    {
                      "description": "Return all Application Filters security events logs",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\"\n | where AdditionalExtensions has_cs \"InfobloxRPZ=APP_\""
                    },
                    {
                      "description": "Return Top 10 TD Domains Hit Count",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\" \n| summarize count() by DestinationDnsDomain \n| top 10 by count_ desc"
                    },
                    {
                      "description": "Return Top 10 TD Source IPs Hit Count",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\" \n| summarize count() by SourceIP \n| top 10 by count_ desc"
                    },
                    {
                      "description": "Return Recently Created DHCP Leases",
                      "query": "CommonSecurityLog\n| where DeviceEventClassID == \"DHCP-LEASE-CREATE\""
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**IMPORTANT:** This Microsoft Sentinel data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of Threat Defense, access to an appropriate Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements."
                    },
                    {
                      "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
                      "innerSteps": [
                        {
                          "title": "1.1 Select or create a Linux machine",
                          "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                        },
                        {
                          "title": "1.2 Install the CEF collector on the Linux machine",
                          "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                          "instructions": [
                            {
                              "parameters": {
                                "fillWith": [
                                  "WorkspaceId",
                                  "PrimaryKey"
                                ],
                                "label": "Run the following command to install and apply the CEF collector:",
                                "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                              },
                              "type": "CopyableLabel"
                            }
                          ]
                        }
                      ],
                      "title": "1. Linux Syslog agent configuration"
                    },
                    {
                      "description": "Follow the steps below to configure the Infoblox CDC to send  data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select all desired **log types** you wish to collect. Currently supported log types are:\n      - Threat Defense Query/Response Log\n      - Threat Defense Threat Feeds Hits Log\n      - DDI Query/Response Log\n      - DDI DHCP Lease Log\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate.",
                      "title": "2. Configure Infoblox to send Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent"
                    },
                    {
                      "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version\n\n>2. You must have elevated permissions (sudo) on your machine",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Run the following command to validate your connectivity:",
                            "value": "sudo wget  -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "3. Validate connection"
                    },
                    {
                      "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
                      "title": "4. Secure your machine "
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId5'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId5'))]",
                "contentId": "[variables('_dataConnectorContentId5')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId5')]",
        "contentKind": "DataConnector",
        "displayName": "[Recommended] Infoblox Cloud Data Connector via AMA",
        "contentProductId": "[variables('_dataConnectorcontentProductId5')]",
        "id": "[variables('_dataConnectorcontentProductId5')]",
        "version": "[variables('dataConnectorVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId5'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId5')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId5'))]",
        "contentId": "[variables('_dataConnectorContentId5')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion5')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId5'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "[Recommended] Infoblox Cloud Data Connector via AMA",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The Infoblox Cloud Data Connector allows you to easily connect your Infoblox data with Microsoft Sentinel. By connecting your logs to Microsoft Sentinel, you can take advantage of search & correlation, alerting, and threat intelligence enrichment for each log.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "CommonSecurityLog",
              "baseQuery": "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)"
            }
          ],
          "dataTypes": [
            {
              "name": "CommonSecurityLog",
              "lastDataReceivedQuery": "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "CommonSecurityLog\n |where DeviceVendor =~ 'Infoblox'\n |where DeviceProduct =~ 'Data Connector'\n  |extend sent_by_ama = column_ifexists('CollectorHostName','')\n |where isnotempty(sent_by_ama)\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Return all Block DNS Query/Response logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\""
            },
            {
              "description": "Return all DNS Query/Response logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"DNS\""
            },
            {
              "description": "Return all DHCP Query/Response logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"DHCP\""
            },
            {
              "description": "Return all Service Logs Query/Response logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"Service\""
            },
            {
              "description": "Return all Audit Query/Response logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"Audit\""
            },
            {
              "description": "Return all Category Filters security events logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\"\n | where AdditionalExtensions has_cs \"InfobloxRPZ=CAT_\""
            },
            {
              "description": "Return all Application Filters security events logs",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\"\n | where AdditionalExtensions has_cs \"InfobloxRPZ=APP_\""
            },
            {
              "description": "Return Top 10 TD Domains Hit Count",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\" \n| summarize count() by DestinationDnsDomain \n| top 10 by count_ desc"
            },
            {
              "description": "Return Top 10 TD Source IPs Hit Count",
              "query": "CommonSecurityLog\n| where DeviceEventClassID has_cs \"RPZ\" \n| summarize count() by SourceIP \n| top 10 by count_ desc"
            },
            {
              "description": "Return Recently Created DHCP Leases",
              "query": "CommonSecurityLog\n| where DeviceEventClassID == \"DHCP-LEASE-CREATE\""
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**IMPORTANT:** This Microsoft Sentinel data connector assumes an Infoblox Data Connector host has already been created and configured in the Infoblox Cloud Services Portal (CSP). As the [**Infoblox Data Connector**](https://docs.infoblox.com/display/BloxOneThreatDefense/Deploying+the+Data+Connector+Solution) is a feature of Threat Defense, access to an appropriate Threat Defense subscription is required. See this [**quick-start guide**](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-data-connector.pdf) for more information and licensing requirements."
            },
            {
              "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
              "innerSteps": [
                {
                  "title": "1.1 Select or create a Linux machine",
                  "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                },
                {
                  "title": "1.2 Install the CEF collector on the Linux machine",
                  "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                  "instructions": [
                    {
                      "parameters": {
                        "fillWith": [
                          "WorkspaceId",
                          "PrimaryKey"
                        ],
                        "label": "Run the following command to install and apply the CEF collector:",
                        "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                      },
                      "type": "CopyableLabel"
                    }
                  ]
                }
              ],
              "title": "1. Linux Syslog agent configuration"
            },
            {
              "description": "Follow the steps below to configure the Infoblox CDC to send  data to Microsoft Sentinel via the Linux Syslog agent.\n1. Navigate to **Manage > Data Connector**.\n2. Click the **Destination Configuration** tab at the top.\n3. Click **Create > Syslog**. \n - **Name**: Give the new Destination a meaningful **name**, such as **Microsoft-Sentinel-Destination**.\n - **Description**: Optionally give it a meaningful **description**.\n - **State**: Set the state to **Enabled**.\n - **Format**: Set the format to **CEF**.\n - **FQDN/IP**: Enter the IP address of the Linux device on which the Linux agent is installed.\n - **Port**: Leave the port number at **514**.\n - **Protocol**: Select desired protocol and CA certificate if applicable.\n - Click **Save & Close**.\n4. Click the **Traffic Flow Configuration** tab at the top.\n5. Click **Create**.\n - **Name**: Give the new Traffic Flow a meaningful **name**, such as **Microsoft-Sentinel-Flow**.\n - **Description**: Optionally give it a meaningful **description**. \n - **State**: Set the state to **Enabled**. \n - Expand the **Service Instance** section. \n    - **Service Instance**: Select your desired Service Instance for which the Data Connector service is enabled. \n - Expand the **Source Configuration** section.  \n    - **Source**: Select **BloxOne Cloud Source**. \n    - Select all desired **log types** you wish to collect. Currently supported log types are:\n      - Threat Defense Query/Response Log\n      - Threat Defense Threat Feeds Hits Log\n      - DDI Query/Response Log\n      - DDI DHCP Lease Log\n - Expand the **Destination Configuration** section.  \n    - Select the **Destination** you just created. \n - Click **Save & Close**. \n6. Allow the configuration some time to activate.",
              "title": "2. Configure Infoblox to send Syslog data to the Infoblox Cloud Data Connector to forward to the Syslog agent"
            },
            {
              "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version\n\n>2. You must have elevated permissions (sudo) on your machine",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Run the following command to validate your connectivity:",
                    "value": "sudo wget  -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "3. Validate connection"
            },
            {
              "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
              "title": "4. Secure your machine "
            }
          ],
          "id": "[variables('_uiConfigId5')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox_Lookup_Workbook Workbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "The Infoblox Lookup Workbook provides comprehensive insights through lookups on various data types including IP, Host, URL, Hash, and Email.\nThe workbook features distinct tabs for targeted lookups. \nThe 'TIDE' tab delivers insights from Infoblox TIDE data, while the 'Dossier' tab aggregates information from a range of other third party sources. \nTo obtain detailed insights, enter the relevant data into the specified fields within each tab. \nThis allows users to efficiently gather and analyze critical information."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"8db3a050-3c9c-4e91-ab49-ac4d4768f203\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"TIDE Lookup\",\"subTarget\":\"1\",\"style\":\"link\"},{\"id\":\"42f28d3c-e462-48c4-9ac9-c616a5b7d1b7\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"TIDE Lookup via Incident\",\"subTarget\":\"4\",\"style\":\"link\"},{\"id\":\"718e54eb-4786-4d21-bef1-372877db0a85\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Dossier Lookup\",\"subTarget\":\"2\",\"style\":\"link\"},{\"id\":\"86d6d161-40c8-4d8c-81cd-78aa762610e6\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Dossier Lookup via Incident\",\"subTarget\":\"3\",\"style\":\"link\"}]},\"name\":\"links - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Infoblox-TIDE-Lookup** logic app which is deployed with the Microsoft Sentinel Solution.</br>\\r\\nPlease configure this logic app first and keep it enabled in order to use this workbook.\\r\\n\",\"style\":\"info\"},\"name\":\"text - 5\"},{\"type\":1,\"content\":{\"json\":\"## Infoblox TIDE Lookup\\r\\n---\\r\\n\\r\\n\"},\"name\":\"text - 7\"},{\"type\":1,\"content\":{\"json\":\"## Steps to perform TIDE Lookup using this workbook\\r\\n- This workbook is intended to help perform TIDE Lookup for Indicators.\\r\\n- Select the **Resource Group** and **Subscription ID**.\\r\\n- Select Indicator type from Type filter and provide indicator value corresponding to it's type in the Target parameter.\\r\\n- You will be able to see a lookup panel for that specific indicator. \\r\\n- If lookup information of this target is available in the last 24 hours it will be displayed in the lookup panel.\\r\\n- If there is message like **The query returned no results** on lookup panel, then click on the **GET TIDE DATA** button.\\r\\n- This will execute the **TIDE-Lookup** logic app in the background.\\r\\n- You can check the status of the playbook to identify the TIDE Lookup status.\\r\\n- Click on the refresh button of the lookup panel until you get the TIDE Lookup information.\\r\\n</br>\\r\\n</br>\\r\\n**Note** : In cases where specific indicators may not have lookup information available in Infoblox, users are advised to refer to the Logic App status for further details. \",\"style\":\"upsell\"},\"name\":\"text - 9\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"7783c2b4-a6e6-4117-92ec-a9a751f01465\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SubscriptionId\",\"label\":\"Subscription ID\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| distinct subscriptionId\",\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"4a15b858-69b6-4198-abfd-6af5f187d813\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SentinelResourceGroup\",\"label\":\"Resource Group\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| where subscriptionId == ('{SubscriptionId}')\\r\\n| extend ResourceGroupName = resourceGroup\\r\\n| distinct ResourceGroupName\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"ca226b80-e11b-4cb2-a1ae-3722f60aa4c1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityType\",\"label\":\"Type\",\"type\":2,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[\\\"host\\\", \\\"ip\\\", \\\"url\\\", \\\"hash\\\", \\\"email\\\"]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"9fbfab7b-f382-483b-975c-ab1fe0815b83\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityName\",\"type\":1,\"isGlobal\":true,\"timeContext\":{\"durationMs\":86400000},\"value\":\"\",\"label\":\"Target\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibilities\":[{\"parameterName\":\"SubscriptionId\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"SentinelResourceGroup\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"parameters - 1\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"paragraph\",\"links\":[{\"id\":\"f2242052-b69a-48b7-ac97-1f33d5e58c0f\",\"linkTarget\":\"ArmAction\",\"linkLabel\":\"GET TIDE DATA\",\"style\":\"primary\",\"linkIsContextBlade\":true,\"armActionContext\":{\"path\":\"/subscriptions/{SubscriptionId}/resourceGroups/{SentinelResourceGroup}/providers/Microsoft.Logic/workflows/Infoblox-TIDE-Lookup/triggers/manual/run?api-version=2016-10-01\",\"body\":\"{\\r\\n  \\\"type\\\": \\\"{EntityType}\\\",\\r\\n  \\\"target\\\": \\\"{EntityName}\\\"\\r\\n}\",\"httpMethod\":\"POST\",\"description\":\"# Actions can potentially modify resources.\\n## Please use caution and include a confirmation message in this description when authoring this command.\"}}]},\"conditionalVisibilities\":[{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"EntityType\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"links - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| where type_s == toupper('{EntityType}') and ip_s == '{EntityName}'\\r\\n| project \\r\\n    IP = column_ifexists(\\\"ip_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for ip : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"ip\"},{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend host_s = column_ifexists(\\\"host_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and host_s == '{EntityName}'\\r\\n| project \\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for host : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"host\"},{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend url_s = column_ifexists(\\\"url_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and url_s == '{EntityName}'\\r\\n| project \\r\\n    Url = column_ifexists(\\\"url_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for url : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"url\"},{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend hash_s = column_ifexists(\\\"hash_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and hash_s == '{EntityName}'\\r\\n| project \\r\\n    Hash = column_ifexists(\\\"hash_s\\\",\\\"\\\"),\\r\\n    ['Hash Type'] = column_ifexists(\\\"hash_type_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for hash : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"hash\"},{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend email_s = column_ifexists(\\\"email_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and email_s == '{EntityName}'\\r\\n| project \\r\\n    Email = column_ifexists(\\\"email_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for email : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"email\"},{\"parameterName\":\"EntityName\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"group - 3\",\"styleSettings\":{\"padding\":\"10px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Infoblox-TIDE-Lookup-Via-Incident** playbook which is deployed with the Microsoft Sentinel Solution.</br>\\r\\nPlease configure this logic app first and keep it enabled in order to use this workbook.\\r\\n\\r\\n\",\"style\":\"info\"},\"name\":\"text - 8\"},{\"type\":1,\"content\":{\"json\":\"## Infoblox TIDE Lookup via Incidents\\r\\n---\\r\\n\"},\"name\":\"text - 2\"},{\"type\":1,\"content\":{\"json\":\"## Steps to perform TIDE Lookup via Incident using this workbook\\r\\n- This workbook is intended to help perform TIDE Lookup for Indicators via Incidents.\\r\\n- Select the **Resource Group**, **Subscription ID**, **Workspace** and provide **[Tenant ID](https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant)**.\\r\\n- Select TimeRange and Type for Incidents.\\r\\n- From the **Available Incidents** panel, select any indicator.\\r\\n- You will be able to see a lookup panel for that specific indicator. \\r\\n- If lookup information of this target is available in the last 24 hours it will be displayed in the lookup panel.\\r\\n- If there is message like **The query returned no results** on lookup panel, then click on the **GET TIDE DATA** link to get the TIDE Lookup information for the Indicator of that Incident.\\r\\n- This will execute the **TIDE-Lookup-Via-Incident** logic app in the background.\\r\\n- You can check the status of the playbook to identify the TIDE Lookup status.\\r\\n- Click on the refresh button of the lookup panel until you get the TIDE Lookup information.\\r\\n</br>\\r\\n</br>\\r\\n**Note** :\\r\\n\\t* In cases where specific indicators may not have lookup information available in Infoblox, users are advised to refer to the Logic App status for further details.\\r\\n\\t* Please ensure that you select the workspace where your workbook and playbook are available. Otherwise, the data ingested by the playbook will not be reflected in the drilldown panel.\\r\\n\",\"style\":\"upsell\"},\"name\":\"text - 9\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"7783c2b4-a6e6-4117-92ec-a9a751f01465\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SubscriptionId\",\"label\":\"Subscription ID\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| distinct subscriptionId\",\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"4a15b858-69b6-4198-abfd-6af5f187d813\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SentinelResourceGroup\",\"label\":\"Resource Group\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| where subscriptionId == ('{SubscriptionId}')\\r\\n| extend ResourceGroupName = resourceGroup\\r\\n| distinct ResourceGroupName\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"9e2b01b1-798f-4239-a845-f1a0a3781a99\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspace\",\"type\":5,\"isRequired\":true,\"query\":\"where type =~ \\\"microsoft.operationalinsights/workspaces\\\"\\r\\n| where resourceGroup =~ \\\"{SentinelResourceGroup}\\\"\",\"typeSettings\":{\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"854db66e-d6e4-4ae3-bb16-abc9dcd0a334\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TenantID\",\"label\":\"Tenant ID\",\"type\":1,\"isRequired\":true,\"value\":\"\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"51b0558c-95f7-452c-95c3-c501535f7a92\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000},\"label\":\"Time Range\"},{\"id\":\"ca226b80-e11b-4cb2-a1ae-3722f60aa4c1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"IOCType\",\"label\":\"Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityAlert\\r\\n| mv-expand todynamic(Entities)\\r\\n| where Entities.Type in ('ip','filehash','url','host')\\r\\n| distinct tostring(Entities.Type)\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibilities\":[{\"parameterName\":\"TenantID\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"Workspace\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityIncident\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentName\\r\\n| extend AlertIds = todynamic(AlertIds)\\r\\n| extend AlertId = tostring(AlertIds[0])\\r\\n| join kind=inner (SecurityAlert| project SystemAlertId, Entities) on $left.AlertId == $right.SystemAlertId\\r\\n| mv-expand todynamic(Entities)\\r\\n| extend EntityType = case(Entities.Type =~ \\\"filehash\\\",\\\"hash\\\",Entities.Type)\\r\\n| where isnotempty(EntityType)\\r\\n| where \\\"{IOCType:escapejson}\\\" == '*' or EntityType in ({IOCType})\\r\\n| extend EntityName = case(EntityType =~ \\\"ip\\\", Entities.Address, \\r\\n                            EntityType =~ \\\"hash\\\", Entities.Value,\\r\\n                            EntityType =~ \\\"host\\\", Entities.NetBiosName,\\r\\n                            EntityType =~ \\\"url\\\", Entities.Url,\\r\\n                            \\\"\\\"), ['TIDE Lookup'] = \\\"GET TIDE DATA\\\"\\r\\n| where isnotempty(EntityName)\\r\\n| summarize arg_max(TimeGenerated, *) by EntityName,tostring(EntityType)\\r\\n| project ['IOC Value'] = EntityName, ['IOC Type'] = EntityType, IncidentUrl, ['TIDE Lookup'], IncidentName, Title, Description, Severity, Status, ProviderName, CreatedTime, IncidentNumber, Tasks, Labels, ModifiedBy\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Available Incidents\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportedParameters\":[{\"fieldName\":\"IncidentName\",\"parameterName\":\"IncidentName\"},{\"fieldName\":\"IOC Value\",\"parameterName\":\"EntityName\",\"parameterType\":1},{\"fieldName\":\"IOC Type\",\"parameterName\":\"EntityType\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"IncidentUrl\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open Incident\",\"linkIsContextBlade\":false}},{\"columnMatch\":\"TIDE Lookup\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"ArmAction\",\"linkIsContextBlade\":true,\"armActionContext\":{\"path\":\"/{Workspace}/providers/Microsoft.SecurityInsights/incidents/{IncidentName}/runPlaybook?api-version=2019-01-01-preview\",\"body\":\"{\\r\\n\\r\\n\\\"LogicAppsResourceId\\\":\\\"/subscriptions/{SubscriptionId}/resourceGroups/{SentinelResourceGroup}/providers/Microsoft.Logic/workflows/Infoblox-TIDE-Lookup-Via-Incident\\\",\\r\\n\\r\\n \\\"TenantId\\\":\\\"{TenantID}\\\"\\r\\n\\r\\n}\",\"httpMethod\":\"POST\",\"description\":\"# Actions can potentially modify resources.\\n## Please use caution and include a confirmation message in this description when authoring this command.\"}}}],\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibilities\":[{\"parameterName\":\"TenantID\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"Workspace\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 0\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| where type_s == toupper('{EntityType}') and ip_s == '{EntityName}'\\r\\n| project \\r\\n    IP = column_ifexists(\\\"ip_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for ip : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"ip\"},\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend host_s = column_ifexists(\\\"host_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and host_s == '{EntityName}'\\r\\n| project \\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for host : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"host\"},\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend url_s = column_ifexists(\\\"url_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and url_s == '{EntityName}'\\r\\n| project \\r\\n    Url = column_ifexists(\\\"url_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for url : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"url\"},\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, type_s: string, ip_s: string, host_s:string, url_s:string, hash_s:string, email_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ntide_lookup_data_CL\\r\\n| extend hash_s = column_ifexists(\\\"hash_s\\\",\\\"\\\")\\r\\n| extend type_s = column_ifexists(\\\"type_s\\\",\\\"\\\")\\r\\n| where type_s == toupper('{EntityType}') and hash_s == '{EntityName}'\\r\\n| project \\r\\n    Hash = column_ifexists(\\\"hash_s\\\",\\\"\\\"),\\r\\n    ['Hash Type'] = column_ifexists(\\\"hash_type_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ['Threat Level'] = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lookup for hash : {EntityName}\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"EntityType\",\"comparison\":\"isEqualTo\",\"value\":\"hash\"},\"name\":\"query - 3\",\"styleSettings\":{\"padding\":\"5px\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"4\"},\"name\":\"TIDE Incident Lookup\",\"styleSettings\":{\"padding\":\"10px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Dossier Function App** which is deployed with the Microsoft Sentinel Solution. \\r\\n</br>Please configure this function app first and keep it enabled in order to use this workbook.\\r\\n\",\"style\":\"info\"},\"name\":\"text - 9\"},{\"type\":1,\"content\":{\"json\":\"## Infoblox Dossier Lookup\\r\\n---\"},\"name\":\"text - 7\"},{\"type\":1,\"content\":{\"json\":\"## Steps to perform Dossier Lookup using this workbook\\r\\n- This workbook is intended to help perform Dossier Lookup for Indicators.\\r\\n- Select **Dossier Function App Name** which is deployed with the Microsoft Sentinel Solution.\\r\\n- Select Indicator type from Type filter and provide indicator value corresponding to it's type in the Target parameter.\\r\\n- Click on the **GET DOSSIER DATA** link.\\r\\n- This will execute the function app in the background to get the Dossier Lookup data (You will be redirect in new tab).\\r\\n- You will be able to see a message like **Refresh to check for Dossier data availability**.\\r\\n- Click on the refresh button above the message until you get a message like **Click here to view the data**.\\r\\n- Click on the message **Click here to view the data** and it will display various lookup panels for different source data.\\r\\n</br>\\r\\n</br>\\r\\n**Note** :\\r\\n\\t* The lookup information will be cache for 24 hours in sentinel.</br>\\r\\n\\t* It is suggested to perform a **Hard Refresh** before getting Dossier data for the new target. Otherwise, the source drill down panels will not be populated properly.\\r\\n\",\"style\":\"upsell\"},\"name\":\"text - 10\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"1bc43239-b48a-4894-a7ef-5d9326cfe690\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DurableFunction\",\"label\":\"Dossier Function App Name\",\"type\":5,\"isRequired\":true,\"query\":\"resources\\r\\n| where type contains \\\"microsoft.web/sites\\\"\\r\\n| where name startswith \\\"dossier\\\"\\r\\n| distinct name\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 11\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"ca226b80-e11b-4cb2-a1ae-3722f60aa4c1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"IOCType\",\"label\":\"Type\",\"type\":2,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[\\\"host\\\", \\\"ip\\\", \\\"url\\\", \\\"hash\\\", \\\"email\\\"]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"9fbfab7b-f382-483b-975c-ab1fe0815b83\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"IOCValue\",\"label\":\"Target\",\"type\":1,\"isGlobal\":true,\"timeContext\":{\"durationMs\":86400000},\"value\":\"\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(Dossier_Lookup: string)\\r\\n[\\r\\n \\\"https://{DurableFunction}.azurewebsites.net/api/orchestrators/InfobloxDossierOrchestrator?target={IOCValue}&type={IOCType}\\\"\\r\\n];\\r\\ndummy_table\",\"size\":3,\"timeContext\":{\"durationMs\":86400000},\"exportFieldName\":\"Dossier_Lookup\",\"exportParameterName\":\"Dossier_Lookup\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Dossier_Lookup\",\"formatter\":1,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"GET DOSSIER DATA\"}},\"showBorder\":false,\"sortCriteriaField\":\"export_param\"}},\"customWidth\":\"50\",\"conditionalVisibilities\":[{\"parameterName\":\"IOCValue\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"IOCType\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 10\",\"styleSettings\":{\"maxWidth\":\"20%\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string) [];\\r\\nunion isfuzzy=true dummy_table, dossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_source_s == \\\"atp\\\"\\r\\n| summarize count()\\r\\n| extend status = case(count_ == 0 , \\\"Refresh to check for Dossier data availability\\\",\\\"Click here to view the data\\\")\\r\\n| project status\\r\\n\",\"size\":3,\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"exportFieldName\":\"status\",\"exportParameterName\":\"dossier_status\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"status\",\"formatter\":1},\"showBorder\":false,\"size\":\"auto\"},\"textSettings\":{\"style\":\"editor\"}},\"customWidth\":\"50\",\"conditionalVisibilities\":[{\"parameterName\":\"IOCValue\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"Dossier_Lookup\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 10\",\"styleSettings\":{\"maxWidth\":\"30%\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 13\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelist\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_infoblox_web_cat_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"infoblox_web_cat\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_results_s = column_ifexists(\\\"data_results_s\\\",\\\"\\\")\\r\\n| where isnotempty(data_results_s)\\r\\n| extend data_results_s = parse_json(data_results_s)\\r\\n| mv-expand data_results_s\\r\\n| project ['Web Category'] = data_results_s.name\",\"size\":3,\"title\":\"Web Categories\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Web Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Uncategorized\",\"representation\":\"Normal\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unknown\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"sortOrderField\":2,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"80\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_rpz_feeds_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"rpz_feeds\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (union isfuzzy = true dummy_table, dossier_rpz_feeds_records_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    feed_name = column_ifexists(\\\"feed_name_s\\\",\\\"\\\"),\\r\\n    property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    threat_level = column_ifexists(\\\"threat_level_d\\\", 0)\\r\\n| where isnotempty(class ) or isnotempty(detected ) or isnotempty(expiration ) or isnotempty(feed_name ) or isnotempty(property )\\r\\n|extend Severity = case( tolong(threat_level) >= 75, \\\"High\\\",tolong(threat_level) < 75 and tolong(threat_level) >= 50, \\\"Medium\\\",tolong(threat_level) < 50 and tolong(threat_level) >= 25,\\\"Low\\\",tolong(threat_level) <25 , \\\"Info\\\",\\\"\\\")\\r\\n| project\\r\\n    ['Feed Name'] = feed_name,\\r\\n    ['Threat Level'] = threat_level,\\r\\n    Severity,\\r\\n    Property = property,\\r\\n    Class = class,\\r\\n    Detected = detected,\\r\\n    Expiration = expiration\",\"size\":3,\"showAnalytics\":true,\"title\":\"Active Threat Feeds and Status (RPZ Feeds)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"gray\",\"text\":\"{0}{1}\"}]}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_inforank_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"inforank\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    Domain = column_ifexists(\\\"data_domain_s\\\",\\\"\\\"),\\r\\n    Interval = column_ifexists(\\\"data_interval_s\\\",\\\"\\\"),\\r\\n    Rank = column_ifexists(\\\"data_rank_d\\\",\\\"\\\"),\\r\\n    Message = column_ifexists(\\\"data_message_s\\\",\\\"\\\")\\r\\n| where\\r\\nisnotempty(Domain) or\\r\\nisnotempty(Interval) or\\r\\nisnotempty(Rank) or\\r\\nisnotempty(Message)\\r\\n| project \\r\\n    Domain,\\r\\n    Interval,\\r\\n    Rank,\\r\\n    Message\\r\\n\\r\\n\",\"size\":3,\"title\":\"Inforank Ranking\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_threat_actor_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"threat_actor\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    actor_description = column_ifexists( \\\"data_actor_description_s\\\",\\\"\\\"),\\r\\n    actor_name = column_ifexists( \\\"data_actor_name_s\\\",\\\"\\\"),\\r\\n    purpose = column_ifexists( \\\"data_purpose_s\\\",\\\"\\\"),\\r\\n    related_count = column_ifexists( \\\"data_related_count_s\\\",\\\"\\\"),\\r\\n    ttp = column_ifexists( \\\"data_ttp_s\\\",\\\"\\\"),\\r\\n    Url = strcat('https://csp.infoblox.com/#/security_research/search/auto/','{IOCValue}','/threat-actor')\\r\\n| where\\r\\n    isnotempty(actor_description) or\\r\\n    isnotempty(actor_name) or\\r\\n    isnotempty(purpose) or\\r\\n    isnotempty(ttp)\\r\\n| extend purpose = replace_string(purpose,'\\\"','')\\r\\n| extend purpose = replace_string(purpose,',',', ')\\r\\n| extend  purpose = trim(@\\\"[\\\\[\\\\]]\\\",purpose)\\r\\n| extend ttp = replace_string(ttp,'\\\"','')\\r\\n| extend ttp = replace_string(ttp,',',', ')\\r\\n| extend  ttp = trim(@\\\"[\\\\[\\\\]]\\\",ttp)\\r\\n| project\\r\\n    ['Actor Description'] = actor_description,\\r\\n    ['Actor Name'] = actor_name,\\r\\n    Purpose = purpose,\\r\\n    ['Related Count'] = related_count,\\r\\n    ['CSP Portal'] = Url,\\r\\n    Ttp = ttp\",\"size\":3,\"title\":\"DNS Threat Actor\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"CSP Portal\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"More Detail\"}}]}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12 - Copy\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_geo_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"geo\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend\\r\\n    asn_num = column_ifexists(\\\"data_asn_num_s\\\", \\\"\\\"),\\r\\n    city = column_ifexists(\\\"data_city_s\\\", \\\"\\\"),\\r\\n    country_code = column_ifexists(\\\"data_country_code_s\\\", \\\"\\\"),\\r\\n    country_name = column_ifexists(\\\"data_country_name_s\\\", \\\"\\\"),\\r\\n    isp = column_ifexists(\\\"data_isp_s\\\", \\\"\\\"),\\r\\n    latitude = column_ifexists(\\\"data_latitude_d\\\", \\\"\\\"),\\r\\n    longitude = column_ifexists(\\\"data_longitude_d\\\", \\\"\\\"),\\r\\n    org = column_ifexists(\\\"data_org_s\\\", \\\"\\\"),\\r\\n    postal_code = column_ifexists(\\\"data_postal_code_s\\\", \\\"\\\"),\\r\\n    region = column_ifexists(\\\"data_region_s\\\", \\\"\\\")\\r\\n| where\\r\\n    isnotempty(asn_num) or\\r\\n    isnotempty(city) or\\r\\n    isnotempty(country_code) or\\r\\n    isnotempty(country_name) or\\r\\n    isnotempty(isp) or\\r\\n    isnotempty(latitude) or\\r\\n    isnotempty(longitude) or\\r\\n    isnotempty(org) or\\r\\n    isnotempty(postal_code) or\\r\\n    isnotempty(region)\\r\\n| project \\r\\n    ['Asn Number'] = asn_num,\\r\\n    City = city,\\r\\n    ['Country Code'] = country_code,\\r\\n    ['Country Name'] = country_name,\\r\\n    Isp = isp,\\r\\n    Latitude = latitude,\\r\\n    Longitude = longitude,\\r\\n    Org = org,\\r\\n    ['Postal Code'] = postal_code,\\r\\n    Region = region\",\"size\":3,\"title\":\"Geo Graphic Details\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_tld_risk_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"tld_risk\\\" \\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_matches = column_ifexists(\\\"data_matches_s\\\",\\\"\\\")\\r\\n| mv-expand todynamic(data_matches)\\r\\n| project data_matches\\r\\n| parse-kv data_matches as (confidence:string, popular:string, rare:string, score:string, score_label:string, tld:string) with (pair_delimiter=',', kv_delimiter=':',quote='\\\"')\\r\\n| where\\r\\n    isnotempty(confidence) or\\r\\n    isnotempty(popular) or\\r\\n    isnotempty(rare) or\\r\\n    isnotempty(score) or\\r\\n    isnotempty(score_label) or\\r\\n    isnotempty(tld)\\r\\n| project \\r\\n    ['Score Label'] = score_label,\\r\\n    Score = score,\\r\\n    TLD = tld,\\r\\n    Confidence = confidence,\\r\\n    Popular = popular,\\r\\n    Rare = rare\\r\\n\\r\\n\",\"size\":0,\"title\":\"TLD Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Score Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"redBright\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}]},\"tileSettings\":{\"showBorder\":false}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_nameserver_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"nameserver\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_nameserver_matches_CL) on $left.task_id_g == $right.task_id_g\\r\\n|extend \\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"ns_reputation_confidence_s\\\",\\\"\\\"),\\r\\n    Label = column_ifexists(\\\"ns_reputation_label_s\\\",\\\"\\\"),\\r\\n    malicious_counts = column_ifexists(\\\"ns_reputation_malicious_counts_s\\\",\\\"\\\"),\\r\\n    Popular = column_ifexists(\\\"ns_reputation_popular_s\\\",\\\"\\\"),\\r\\n    Rare = column_ifexists(\\\"ns_reputation_rare_s\\\",\\\"\\\"),\\r\\n    raw_score = column_ifexists(\\\"ns_reputation_raw_score_s\\\",\\\"\\\"),\\r\\n    Score = column_ifexists(\\\"ns_reputation_score_s\\\",\\\"\\\"),\\r\\n    total_counts = column_ifexists(\\\"ns_reputation_total_counts_s\\\",\\\"\\\")\\r\\n| where\\r\\n    isnotempty(Domain) or\\r\\n    isnotempty(Confidence) or\\r\\n    isnotempty(Label) or\\r\\n    isnotempty(malicious_counts) or\\r\\n    isnotempty(Popular) or\\r\\n    isnotempty(Rare) or\\r\\n    isnotempty(raw_score) or\\r\\n    isnotempty(Score) or\\r\\n    isnotempty(total_counts)\\r\\n| project \\r\\n    Domain,\\r\\n    Label,\\r\\n    Score,\\r\\n    Confidence,\\r\\n    Popular,\\r\\n    Rare,\\r\\n    ['Raw Score'] = raw_score,\\r\\n    ['Total Counts'] = total_counts,\\r\\n    ['Malicious Counts'] = malicious_counts\\r\\n\",\"size\":0,\"title\":\"Nameserver Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Very Low Risk\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"sortBy\":[{\"itemKey\":\"Popular\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Popular\",\"sortOrder\":1}]},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 14\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Confidence,\\r\\n    Class,\\r\\n    Detected,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Imported,\\r\\n    Received,\\r\\n    Up,\\r\\n    Expiration,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whois_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"whois\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    RegistrantName = column_ifexists(\\\"data_response_registrant_s\\\",\\\"\\\"),\\r\\n    Nameservers = column_ifexists(\\\"data_response_nameservers_s\\\",\\\"\\\"),\\r\\n    RegistrarEmail = column_ifexists(\\\"data_response_parsed_whois_registrar_abuse_contact_email_s\\\",\\\"\\\"),\\r\\n    RegistrarPhone = column_ifexists(\\\"data_response_parsed_whois_registrar_abuse_contact_phone_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"data_response_parsed_whois_domain_s\\\",\\\"\\\"),\\r\\n    Created = column_ifexists(\\\"data_response_registration_created_t\\\",\\\"\\\"),\\r\\n    Expires = column_ifexists(\\\"data_response_registration_expires_t\\\",\\\"\\\"),\\r\\n    Statuses = column_ifexists(\\\"data_response_registration_statuses_s\\\",\\\"\\\"),\\r\\n    Updated = column_ifexists(\\\"data_response_registration_updated_t\\\",\\\"\\\")\\r\\n| where \\r\\n    isnotempty(RegistrantName) or\\r\\n    isnotempty(Nameservers) or\\r\\n    isnotempty(RegistrarEmail) or\\r\\n    isnotempty(RegistrarPhone) or\\r\\n    isnotempty(Domain) or\\r\\n    isnotempty(Created) or\\r\\n    isnotempty(Expires) or\\r\\n    isnotempty(Statuses) or\\r\\n    isnotempty(Updated)\\r\\n| extend Nameservers = replace_string(Nameservers,'\\\"','')\\r\\n| extend Nameservers = replace_string(Nameservers,',',', ')\\r\\n| extend  Nameservers = trim(@\\\"[\\\\[\\\\]]\\\",Nameservers)\\r\\n| extend Statuses = replace_string(Statuses,'\\\"','')\\r\\n| extend Statuses = replace_string(Statuses,',',', ')\\r\\n| extend  Statuses = trim(@\\\"[\\\\[\\\\]]\\\",Statuses)\\r\\n| project \\r\\n    ['Registrant Name'] = RegistrantName,\\r\\n    Domain,\\r\\n    Statuses,\\r\\n    ['Name Servers'] = Nameservers,\\r\\n    ['Registrar Email'] = RegistrarEmail,\\r\\n    ['Registrar Phone'] = RegistrarPhone,\\r\\n    Created,\\r\\n    Expires,\\r\\n    Updated\",\"size\":3,\"title\":\"Registered Owner (WHOIS)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nlet dns_A_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        A = column_ifexists(\\\"data_A_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_A_s)\\r\\n    | project Type=\\\"A\\\", Value=data_A_s.ip, Reverse=data_A_s.reverse, TTL=data_A_s.ttl;\\r\\nlet dns_AAAA_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        AAAA = column_ifexists(\\\"data_AAAA_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_AAAA_s)\\r\\n    | project Type=\\\"AAAA\\\",Value=data_AAAA_s;\\r\\nlet dns_CERT_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        CERT = column_ifexists(\\\"data_CERT_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_CERT_s)\\r\\n    | project Type=\\\"CERT\\\",Value=data_CERT_s;\\r\\nlet dns_CNAME_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        CNAME = column_ifexists(\\\"data_CNAME_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_CNAME_s)\\r\\n    | project Type=\\\"CNAME\\\",Value=data_CNAME_s;\\r\\nlet dns_HTTPS_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        HTTPS = column_ifexists(\\\"data_HTTPS_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_HTTPS_s)\\r\\n    | project Type=\\\"HTTPS\\\",Value=data_HTTPS_s;\\r\\nlet dns_NS_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        NS = column_ifexists(\\\"data_NS_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_NS_s)\\r\\n    | project Type=\\\"NS\\\",Value=data_NS_s;\\r\\nlet dns_SOA_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        SOA = column_ifexists(\\\"data_SOA_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_SOA_s)\\r\\n    | project Type=\\\"SOA\\\",Value=data_SOA_s;\\r\\nlet dns_MX_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        MX = column_ifexists(\\\"data_MX_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_MX_s)\\r\\n    | project Type=\\\"MX\\\",Value=data_MX_s;\\r\\nlet dns_SVCB_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        SVCB = column_ifexists(\\\"data_SVCB_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_SVCB_s)\\r\\n    | project Type=\\\"SVCB\\\",Value=data_SVCB_s;\\r\\nlet dns_TSIG_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        TSIG = column_ifexists(\\\"data_TSIG_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_TSIG_s)\\r\\n    | project Type=\\\"TSIG\\\",Value=data_TSIG_s;\\r\\nlet dns_TXT_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        TXT = column_ifexists(\\\"data_TXT_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_TXT_s)\\r\\n    | project Type=\\\"TXT\\\",Value=data_TXT_s;\\r\\n union dns_A_data,dns_AAAA_data,dns_CERT_data,\\r\\ndns_CNAME_data,\\r\\ndns_HTTPS_data,\\r\\ndns_NS_data,\\r\\ndns_SOA_data,\\r\\ndns_MX_data,\\r\\ndns_SVCB_data,\\r\\ndns_TSIG_data,\\r\\ndns_TXT_data\\r\\n| where isnotempty( Value) or isnotempty( Reverse) or isnotempty( TTL)\\r\\n| sort by Type asc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Current DNS\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Type\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"20%\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"host\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 7\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelisted\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_ptr_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s == \\\"ip\\\" and params_source_s == \\\"ptr\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend ptr_record = column_ifexists(\\\"data_ptr_record_s\\\",\\\"\\\")\\r\\n| extend ptr_record = case( isempty(ptr_record), \\\"Not Found\\\",ptr_record)\\r\\n| project ptr_record\",\"size\":3,\"title\":\"Domain Name Associated (PTR)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"ptr_record\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unavailable\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"name\":\"query - 1\",\"styleSettings\":{\"maxWidth\":\"20\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\",\"styleSettings\":{\"maxWidth\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 7 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_rpz_feeds_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"rpz_feeds\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (union isfuzzy = true dummy_table, dossier_rpz_feeds_records_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    feed_name = column_ifexists(\\\"feed_name_s\\\",\\\"\\\"),\\r\\n    property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    threat_level = column_ifexists(\\\"threat_level_d\\\", 0)\\r\\n| where isnotempty(class ) or isnotempty(detected ) or isnotempty(expiration ) or isnotempty(feed_name ) or isnotempty(property )\\r\\n|extend Severity = case( tolong(threat_level) >= 75, \\\"High\\\",tolong(threat_level) < 75 and tolong(threat_level) >= 50, \\\"Medium\\\",tolong(threat_level) < 50 and tolong(threat_level) >= 25,\\\"Low\\\",tolong(threat_level) <25 , \\\"Info\\\",\\\"\\\")\\r\\n| project\\r\\n    ['Feed Name'] = feed_name,\\r\\n    ['Threat Level'] = threat_level,\\r\\n    Severity,\\r\\n    Property = property,\\r\\n    Class = class,\\r\\n    Detected = detected,\\r\\n    Expiration = expiration\",\"size\":3,\"showAnalytics\":true,\"title\":\"Active Threat Feeds and Status (RPZ Feeds)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"gray\",\"text\":\"{0}{1}\"}]}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_geo_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"geo\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend\\r\\n    asn_num = column_ifexists(\\\"data_asn_num_s\\\", \\\"\\\"),\\r\\n    city = column_ifexists(\\\"data_city_s\\\", \\\"\\\"),\\r\\n    country_code = column_ifexists(\\\"data_country_code_s\\\", \\\"\\\"),\\r\\n    country_name = column_ifexists(\\\"data_country_name_s\\\", \\\"\\\"),\\r\\n    isp = column_ifexists(\\\"data_isp_s\\\", \\\"\\\"),\\r\\n    latitude = column_ifexists(\\\"data_latitude_d\\\", \\\"\\\"),\\r\\n    longitude = column_ifexists(\\\"data_longitude_d\\\", \\\"\\\"),\\r\\n    org = column_ifexists(\\\"data_org_s\\\", \\\"\\\"),\\r\\n    postal_code = column_ifexists(\\\"data_postal_code_s\\\", \\\"\\\"),\\r\\n    region = column_ifexists(\\\"data_region_s\\\", \\\"\\\")\\r\\n| where\\r\\n    isnotempty(asn_num) or\\r\\n    isnotempty(city) or\\r\\n    isnotempty(country_code) or\\r\\n    isnotempty(country_name) or\\r\\n    isnotempty(isp) or\\r\\n    isnotempty(latitude) or\\r\\n    isnotempty(longitude) or\\r\\n    isnotempty(org) or\\r\\n    isnotempty(postal_code) or\\r\\n    isnotempty(region) \\r\\n| project \\r\\n    ['Asn Number'] = asn_num,\\r\\n    City = city,\\r\\n    ['Country Code'] = country_code,\\r\\n    ['Country Name'] = country_name,\\r\\n    Isp = isp,\\r\\n    Latitude = latitude,\\r\\n    Longitude = longitude,\\r\\n    Org = org,\\r\\n    ['Postal Code'] = postal_code,\\r\\n    Region = region\",\"size\":3,\"title\":\"Geo Graphic Details\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    IP = column_ifexists(\\\"ip_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    Threatlevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    IP,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = Threatlevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whois_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"whois\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\nCountry = column_ifexists(\\\"data_response_ip_response_country_s\\\",\\\"\\\"),\\r\\nHandle = column_ifexists(\\\"data_response_ip_response_handle_s\\\",\\\"\\\"),\\r\\nlast_changed = column_ifexists(\\\"data_response_ip_response_last_changed_t\\\",\\\"\\\"),\\r\\nName = column_ifexists(\\\"data_response_ip_response_name_s\\\",\\\"\\\"),\\r\\nnet_range = column_ifexists(\\\"data_response_ip_response_net_range_s\\\",\\\"\\\"),\\r\\nnet_type = column_ifexists(\\\"data_response_ip_response_net_type_s\\\",\\\"\\\"),\\r\\nParent = column_ifexists(\\\"data_response_ip_response_parent_s\\\",\\\"\\\"),\\r\\nRegistration = column_ifexists(\\\"data_response_ip_response_registration_t\\\",\\\"\\\"),\\r\\nsource_registery = column_ifexists(\\\"data_response_ip_response_source_registery_s\\\",\\\"\\\")\\r\\n| where\\r\\n    isnotempty(Country) or\\r\\n    isnotempty(Handle) or\\r\\n    isnotempty(last_changed) or\\r\\n    isnotempty(Name) or\\r\\n    isnotempty(net_range) or\\r\\n    isnotempty(net_type) or\\r\\n    isnotempty(Parent) or\\r\\n    isnotempty(Registration) or\\r\\n    isnotempty(source_registery)\\r\\n| project \\r\\n    Name,\\r\\n    Country,\\r\\n    Handle,\\r\\n    ['Network Range'] = net_range,\\r\\n    ['Network Type'] = net_type,\\r\\n    Parent,\\r\\n    ['Source Registery'] = source_registery,\\r\\n    ['Last Changed'] = last_changed ,\\r\\n    Registration\",\"size\":3,\"title\":\"Registered Owner (WHOIS)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"ip\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelist\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_infoblox_web_cat_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"infoblox_web_cat\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_results_s = column_ifexists(\\\"data_results_s\\\",\\\"\\\")\\r\\n| where isnotempty(data_results_s)\\r\\n| extend data_results_s = parse_json(data_results_s)\\r\\n| mv-expand data_results_s\\r\\n| project ['Web Category'] = data_results_s.name\",\"size\":3,\"title\":\"Web Categories\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Web Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Uncategorized\",\"representation\":\"Normal\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unknown\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"sortOrderField\":2,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"80\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_tld_risk_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"tld_risk\\\" \\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_matches = column_ifexists(\\\"data_matches_s\\\",\\\"\\\")\\r\\n| mv-expand todynamic(data_matches)\\r\\n| project data_matches\\r\\n| parse-kv data_matches as (confidence:string, popular:string, rare:string, score:string, score_label:string, tld:string) with (pair_delimiter=',', kv_delimiter=':',quote='\\\"')\\r\\n| where\\r\\n    isnotempty(confidence) or\\r\\n    isnotempty(popular) or\\r\\n    isnotempty(rare) or\\r\\n    isnotempty(score) or\\r\\n    isnotempty(score_label) or\\r\\n    isnotempty(tld)\\r\\n| project \\r\\n    ['Score Label'] = score_label,\\r\\n    Score = score,\\r\\n    TLD = tld,\\r\\n    Confidence = confidence,\\r\\n    Popular = popular,\\r\\n    Rare = rare\\r\\n\\r\\n\",\"size\":3,\"title\":\"TLD Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Score Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"redBright\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}]},\"tileSettings\":{\"showBorder\":false}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Url = column_ifexists(\\\"url_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Url,\\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"url\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5 - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 3 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Hash = column_ifexists(\\\"hash_s\\\",\\\"\\\"),\\r\\n    HashType = column_ifexists(\\\"hash_type_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Hash,\\r\\n    ['Hash Type'] = HashType,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"hash\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5 - Copy - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"email\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"email\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Email = column_ifexists(\\\"email_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Email,\\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"email\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 6\"}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"2\"},\"name\":\"group - 3\",\"styleSettings\":{\"padding\":\"10px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Dossier Function App** which is deployed with the Microsoft Sentinel Solution.\\r\\n</br>Please configure this function app first and keep it enabled in order to use this workbook.\\r\\n\",\"style\":\"info\"},\"name\":\"text - 9\"},{\"type\":1,\"content\":{\"json\":\"## Infoblox Dossier Lookup via Incidents\\r\\n---\\r\\n\"},\"name\":\"text - 7\"},{\"type\":1,\"content\":{\"json\":\"## Steps to perform Dossier Lookup via Incident using this workbook\\r\\n- This workbook is intended to help perform Dossier Lookup for Indicators via Incidents.\\r\\n- Select **Dossier Function App Name** which is deployed with the Microsoft Sentinel Solution.\\r\\n- Select TimeRange and Type for Incidents .\\r\\n- From the **Available Incidents** panel, select any indicator and click on the **GET DOSSIER DATA** link  (You will be redirect in new tab) to get the Dossier Lookup information for the Indicator of that Incident.\\r\\n- This will execute the function app in the background to get the Dossier Lookup data.\\r\\n- You will be able to see a message like **Refresh to check for Dossier data availability**.\\r\\n- Click on the refresh button above the message until you get a message like **Click here to view the data**.\\r\\n- Click on that message and it will display various lookup panels for different source data.\\r\\n</br>\\r\\n</br>\\r\\n**Note** :\\r\\n\\t* The lookup information will be cache for 24 hours in sentinel.</br>\\r\\n\\t* It is suggested to perform a **Hard Refresh** before getting Dossier data for the new target. Otherwise, the source drill down panels will not be populated properly.\",\"style\":\"upsell\"},\"name\":\"text - 10\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"1bc43239-b48a-4894-a7ef-5d9326cfe690\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DurableFunction\",\"label\":\"Dossier Function App Name\",\"type\":5,\"isRequired\":true,\"query\":\"resources\\r\\n| where type contains \\\"microsoft.web/sites\\\"\\r\\n| where name startswith \\\"dossier\\\"\\r\\n| distinct name\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 11\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"de1d2274-20d3-4f7f-81cf-d8df4db9c0ec\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"10e7adfc-f0de-45db-b3e7-1adc0b3fe3b5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Type\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityAlert\\r\\n| mv-expand todynamic(Entities)\\r\\n| where Entities.Type in ('ip','filehash','url','host')\\r\\n| distinct tostring(Entities.Type)\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityIncident\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentName\\r\\n| extend AlertIds = todynamic(AlertIds)\\r\\n| extend AlertId = tostring(AlertIds[0])\\r\\n| join kind=inner (SecurityAlert| project SystemAlertId, Entities) on $left.AlertId == $right.SystemAlertId\\r\\n| mv-expand todynamic(Entities)\\r\\n| extend IOCType = case(Entities.Type =~ \\\"filehash\\\",\\\"hash\\\",Entities.Type)\\r\\n| extend IOCValue = case(IOCType =~ \\\"ip\\\", Entities.Address, \\r\\n                            IOCType =~ \\\"hash\\\", Entities.Value,\\r\\n                            IOCType =~ \\\"host\\\", Entities.NetBiosName,\\r\\n                            IOCType =~ \\\"url\\\", Entities.Url,\\r\\n                            \\\"\\\")\\r\\n|extend ['Dossier Lookup'] =strcat('https://','{DurableFunction}','.azurewebsites.net/api/orchestrators/InfobloxDossierOrchestrator?target=',IOCValue,'&type=',IOCType)\\r\\n| where isnotempty(IOCType) and isnotempty(IOCValue)\\r\\n| where \\\"{Type:escapejson}\\\" == '*' or IOCType in ({Type})\\r\\n| summarize arg_max(TimeGenerated, *) by ['IOC Value'] = IOCValue,['IOC Type'] = tostring(IOCType)\\r\\n| project ['IOC Value'], ['IOC Type'], IncidentUrl, ['Dossier Lookup'], IncidentName, Title, Description, Severity, Status, ProviderName, CreatedTime, IncidentNumber, Tasks, Labels, ModifiedBy\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Available Incidents\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportedParameters\":[{\"fieldName\":\"IOC Value\",\"parameterName\":\"IOCValue\",\"parameterType\":1},{\"fieldName\":\"IOC Type\",\"parameterName\":\"IOCType\",\"parameterType\":1},{\"fieldName\":\"Dossier Lookup\",\"parameterName\":\"Dossier_Lookup\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"IncidentUrl\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open Incident\"}},{\"columnMatch\":\"Dossier Lookup\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"GET DOSSIER DATA\"}}],\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"DurableFunction\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 0\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string) [];\\r\\nunion isfuzzy=true dummy_table, dossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_source_s == \\\"atp\\\"\\r\\n| summarize count()\\r\\n| extend status = case(count_ == 0 , \\\"Refresh to check for Dossier data availability\\\",\\\"Click here to view the data\\\")\\r\\n| project status\\r\\n\",\"size\":3,\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"exportFieldName\":\"status\",\"exportParameterName\":\"dossier_status\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"status\",\"formatter\":1},\"showBorder\":false,\"size\":\"auto\"},\"textSettings\":{\"style\":\"editor\"}},\"customWidth\":\"50\",\"conditionalVisibilities\":[{\"parameterName\":\"IOCValue\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"Dossier_Lookup\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 10\",\"styleSettings\":{\"maxWidth\":\"30%\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 13\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelist\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_infoblox_web_cat_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"infoblox_web_cat\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_results_s = column_ifexists(\\\"data_results_s\\\",\\\"\\\")\\r\\n| where isnotempty(data_results_s)\\r\\n| extend data_results_s = parse_json(data_results_s)\\r\\n| mv-expand data_results_s\\r\\n| project ['Web Category'] = data_results_s.name\",\"size\":3,\"title\":\"Web Categories\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Web Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Uncategorized\",\"representation\":\"Normal\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unknown\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"sortOrderField\":2,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"80\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_rpz_feeds_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"rpz_feeds\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (union isfuzzy = true dummy_table, dossier_rpz_feeds_records_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    feed_name = column_ifexists(\\\"feed_name_s\\\",\\\"\\\"),\\r\\n    property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    threat_level = column_ifexists(\\\"threat_level_d\\\", 0)\\r\\n| where isnotempty(class ) or isnotempty(detected ) or isnotempty(expiration ) or isnotempty(feed_name ) or isnotempty(property )\\r\\n|extend Severity = case( tolong(threat_level) >= 75, \\\"High\\\",tolong(threat_level) < 75 and tolong(threat_level) >= 50, \\\"Medium\\\",tolong(threat_level) < 50 and tolong(threat_level) >= 25,\\\"Low\\\",tolong(threat_level) <25 , \\\"Info\\\",\\\"\\\")\\r\\n| project\\r\\n    ['Feed Name'] = feed_name,\\r\\n    ['Threat Level'] = threat_level,\\r\\n    Severity,\\r\\n    Property = property,\\r\\n    Class = class,\\r\\n    Detected = detected,\\r\\n    Expiration = expiration\",\"size\":3,\"showAnalytics\":true,\"title\":\"Active Threat Feeds and Status (RPZ Feeds)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"gray\",\"text\":\"{0}{1}\"}]}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_inforank_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"inforank\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    Domain = column_ifexists(\\\"data_domain_s\\\",\\\"\\\"),\\r\\n    Interval = column_ifexists(\\\"data_interval_s\\\",\\\"\\\"),\\r\\n    Rank = column_ifexists(\\\"data_rank_d\\\",\\\"\\\"),\\r\\n    Message = column_ifexists(\\\"data_message_s\\\",\\\"\\\")\\r\\n| where\\r\\nisnotempty(Domain) or\\r\\nisnotempty(Interval) or\\r\\nisnotempty(Rank) or\\r\\nisnotempty(Message)\\r\\n| project \\r\\n    Domain,\\r\\n    Interval,\\r\\n    Rank,\\r\\n    Message\\r\\n\\r\\n\",\"size\":3,\"title\":\"Inforank Ranking\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_threat_actor_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"threat_actor\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    actor_description = column_ifexists( \\\"data_actor_description_s\\\",\\\"\\\"),\\r\\n    actor_name = column_ifexists( \\\"data_actor_name_s\\\",\\\"\\\"),\\r\\n    purpose = column_ifexists( \\\"data_purpose_s\\\",\\\"\\\"),\\r\\n    related_count = column_ifexists( \\\"data_related_count_s\\\",\\\"\\\"),\\r\\n    ttp = column_ifexists( \\\"data_ttp_s\\\",\\\"\\\"),\\r\\n    Url = strcat('https://csp.infoblox.com/#/security_research/search/auto/','{IOCValue}','/threat-actor')\\r\\n| where\\r\\n    isnotempty(actor_description) or\\r\\n    isnotempty(actor_name) or\\r\\n    isnotempty(purpose) or\\r\\n    isnotempty(ttp)\\r\\n| extend purpose = replace_string(purpose,'\\\"','')\\r\\n| extend purpose = replace_string(purpose,',',', ')\\r\\n| extend  purpose = trim(@\\\"[\\\\[\\\\]]\\\",purpose)\\r\\n| extend ttp = replace_string(ttp,'\\\"','')\\r\\n| extend ttp = replace_string(ttp,',',', ')\\r\\n| extend  ttp = trim(@\\\"[\\\\[\\\\]]\\\",ttp)\\r\\n| project\\r\\n    ['Actor Description'] = actor_description,\\r\\n    ['Actor Name'] = actor_name,\\r\\n    Purpose = purpose,\\r\\n    ['Related Count'] = related_count,\\r\\n    ['CSP Portal'] = Url,\\r\\n    Ttp = ttp\",\"size\":3,\"title\":\"DNS Threat Actor\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"CSP Portal\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"More Detail\"}}]}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12 - Copy\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_geo_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"geo\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend\\r\\n    asn_num = column_ifexists(\\\"data_asn_num_s\\\", \\\"\\\"),\\r\\n    city = column_ifexists(\\\"data_city_s\\\", \\\"\\\"),\\r\\n    country_code = column_ifexists(\\\"data_country_code_s\\\", \\\"\\\"),\\r\\n    country_name = column_ifexists(\\\"data_country_name_s\\\", \\\"\\\"),\\r\\n    isp = column_ifexists(\\\"data_isp_s\\\", \\\"\\\"),\\r\\n    latitude = column_ifexists(\\\"data_latitude_d\\\", \\\"\\\"),\\r\\n    longitude = column_ifexists(\\\"data_longitude_d\\\", \\\"\\\"),\\r\\n    org = column_ifexists(\\\"data_org_s\\\", \\\"\\\"),\\r\\n    postal_code = column_ifexists(\\\"data_postal_code_s\\\", \\\"\\\"),\\r\\n    region = column_ifexists(\\\"data_region_s\\\", \\\"\\\")\\r\\n| where\\r\\n    isnotempty(asn_num) or\\r\\n    isnotempty(city) or\\r\\n    isnotempty(country_code) or\\r\\n    isnotempty(country_name) or\\r\\n    isnotempty(isp) or\\r\\n    isnotempty(latitude) or\\r\\n    isnotempty(longitude) or\\r\\n    isnotempty(org) or\\r\\n    isnotempty(postal_code) or\\r\\n    isnotempty(region)\\r\\n| project \\r\\n    ['Asn Number'] = asn_num,\\r\\n    City = city,\\r\\n    ['Country Code'] = country_code,\\r\\n    ['Country Name'] = country_name,\\r\\n    Isp = isp,\\r\\n    Latitude = latitude,\\r\\n    Longitude = longitude,\\r\\n    Org = org,\\r\\n    ['Postal Code'] = postal_code,\\r\\n    Region = region\",\"size\":3,\"title\":\"Geo Graphic Details\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_tld_risk_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"tld_risk\\\" \\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_matches = column_ifexists(\\\"data_matches_s\\\",\\\"\\\")\\r\\n| mv-expand todynamic(data_matches)\\r\\n| project data_matches\\r\\n| parse-kv data_matches as (confidence:string, popular:string, rare:string, score:string, score_label:string, tld:string) with (pair_delimiter=',', kv_delimiter=':',quote='\\\"')\\r\\n| where\\r\\n    isnotempty(confidence) or\\r\\n    isnotempty(popular) or\\r\\n    isnotempty(rare) or\\r\\n    isnotempty(score) or\\r\\n    isnotempty(score_label) or\\r\\n    isnotempty(tld)\\r\\n| project \\r\\n    ['Score Label'] = score_label,\\r\\n    Score = score,\\r\\n    TLD = tld,\\r\\n    Confidence = confidence,\\r\\n    Popular = popular,\\r\\n    Rare = rare\\r\\n\\r\\n\",\"size\":0,\"title\":\"TLD Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Score Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"redBright\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}]},\"tileSettings\":{\"showBorder\":false}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_nameserver_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"nameserver\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_nameserver_matches_CL) on $left.task_id_g == $right.task_id_g\\r\\n|extend \\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"ns_reputation_confidence_s\\\",\\\"\\\"),\\r\\n    Label = column_ifexists(\\\"ns_reputation_label_s\\\",\\\"\\\"),\\r\\n    malicious_counts = column_ifexists(\\\"ns_reputation_malicious_counts_s\\\",\\\"\\\"),\\r\\n    Popular = column_ifexists(\\\"ns_reputation_popular_s\\\",\\\"\\\"),\\r\\n    Rare = column_ifexists(\\\"ns_reputation_rare_s\\\",\\\"\\\"),\\r\\n    raw_score = column_ifexists(\\\"ns_reputation_raw_score_s\\\",\\\"\\\"),\\r\\n    Score = column_ifexists(\\\"ns_reputation_score_s\\\",\\\"\\\"),\\r\\n    total_counts = column_ifexists(\\\"ns_reputation_total_counts_s\\\",\\\"\\\")\\r\\n| where\\r\\n    isnotempty(Domain) or\\r\\n    isnotempty(Confidence) or\\r\\n    isnotempty(Label) or\\r\\n    isnotempty(malicious_counts) or\\r\\n    isnotempty(Popular) or\\r\\n    isnotempty(Rare) or\\r\\n    isnotempty(raw_score) or\\r\\n    isnotempty(Score) or\\r\\n    isnotempty(total_counts)\\r\\n| project \\r\\n    Domain,\\r\\n    Label,\\r\\n    Score,\\r\\n    Confidence,\\r\\n    Popular,\\r\\n    Rare,\\r\\n    ['Raw Score'] = raw_score,\\r\\n    ['Total Counts'] = total_counts,\\r\\n    ['Malicious Counts'] = malicious_counts\\r\\n\",\"size\":0,\"title\":\"Nameserver Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Very Low Risk\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"sortBy\":[{\"itemKey\":\"Popular\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Popular\",\"sortOrder\":1}]},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 14\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Confidence,\\r\\n    Class,\\r\\n    Detected,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Imported,\\r\\n    Received,\\r\\n    Up,\\r\\n    Expiration,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whois_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"whois\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\n    RegistrantName = column_ifexists(\\\"data_response_registrant_s\\\",\\\"\\\"),\\r\\n    Nameservers = column_ifexists(\\\"data_response_nameservers_s\\\",\\\"\\\"),\\r\\n    RegistrarEmail = column_ifexists(\\\"data_response_parsed_whois_registrar_abuse_contact_email_s\\\",\\\"\\\"),\\r\\n    RegistrarPhone = column_ifexists(\\\"data_response_parsed_whois_registrar_abuse_contact_phone_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"data_response_parsed_whois_domain_s\\\",\\\"\\\"),\\r\\n    Created = column_ifexists(\\\"data_response_registration_created_t\\\",\\\"\\\"),\\r\\n    Expires = column_ifexists(\\\"data_response_registration_expires_t\\\",\\\"\\\"),\\r\\n    Statuses = column_ifexists(\\\"data_response_registration_statuses_s\\\",\\\"\\\"),\\r\\n    Updated = column_ifexists(\\\"data_response_registration_updated_t\\\",\\\"\\\")\\r\\n| where \\r\\n    isnotempty(RegistrantName) or\\r\\n    isnotempty(Nameservers) or\\r\\n    isnotempty(RegistrarEmail) or\\r\\n    isnotempty(RegistrarPhone) or\\r\\n    isnotempty(Domain) or\\r\\n    isnotempty(Created) or\\r\\n    isnotempty(Expires) or\\r\\n    isnotempty(Statuses) or\\r\\n    isnotempty(Updated)\\r\\n| extend Nameservers = replace_string(Nameservers,'\\\"','')\\r\\n| extend Nameservers = replace_string(Nameservers,',',', ')\\r\\n| extend  Nameservers = trim(@\\\"[\\\\[\\\\]]\\\",Nameservers)\\r\\n| extend Statuses = replace_string(Statuses,'\\\"','')\\r\\n| extend Statuses = replace_string(Statuses,',',', ')\\r\\n| extend  Statuses = trim(@\\\"[\\\\[\\\\]]\\\",Statuses)\\r\\n| project \\r\\n    ['Registrant Name'] = RegistrantName,\\r\\n    Domain,\\r\\n    Statuses,\\r\\n    ['Name Servers'] = Nameservers,\\r\\n    ['Registrar Email'] = RegistrarEmail,\\r\\n    ['Registrar Phone'] = RegistrarPhone,\\r\\n    Created,\\r\\n    Expires,\\r\\n    Updated\",\"size\":3,\"title\":\"Registered Owner (WHOIS)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nlet dns_A_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        A = column_ifexists(\\\"data_A_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_A_s)\\r\\n    | project Type=\\\"A\\\", Value=data_A_s.ip, Reverse=data_A_s.reverse, TTL=data_A_s.ttl;\\r\\nlet dns_AAAA_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        AAAA = column_ifexists(\\\"data_AAAA_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_AAAA_s)\\r\\n    | project Type=\\\"AAAA\\\",Value=data_AAAA_s;\\r\\nlet dns_CERT_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        CERT = column_ifexists(\\\"data_CERT_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_CERT_s)\\r\\n    | project Type=\\\"CERT\\\",Value=data_CERT_s;\\r\\nlet dns_CNAME_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        CNAME = column_ifexists(\\\"data_CNAME_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_CNAME_s)\\r\\n    | project Type=\\\"CNAME\\\",Value=data_CNAME_s;\\r\\nlet dns_HTTPS_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        HTTPS = column_ifexists(\\\"data_HTTPS_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_HTTPS_s)\\r\\n    | project Type=\\\"HTTPS\\\",Value=data_HTTPS_s;\\r\\nlet dns_NS_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        NS = column_ifexists(\\\"data_NS_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_NS_s)\\r\\n    | project Type=\\\"NS\\\",Value=data_NS_s;\\r\\nlet dns_SOA_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        SOA = column_ifexists(\\\"data_SOA_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_SOA_s)\\r\\n    | project Type=\\\"SOA\\\",Value=data_SOA_s;\\r\\nlet dns_MX_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        MX = column_ifexists(\\\"data_MX_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_MX_s)\\r\\n    | project Type=\\\"MX\\\",Value=data_MX_s;\\r\\nlet dns_SVCB_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        SVCB = column_ifexists(\\\"data_SVCB_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_SVCB_s)\\r\\n    | project Type=\\\"SVCB\\\",Value=data_SVCB_s;\\r\\nlet dns_TSIG_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        TSIG = column_ifexists(\\\"data_TSIG_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_TSIG_s)\\r\\n    | project Type=\\\"TSIG\\\",Value=data_TSIG_s;\\r\\nlet dns_TXT_data=\\r\\n    union isfuzzy=true dummy_table,\\r\\n    dossier_dns_CL\\r\\n    | where params_target_s == '{IOCValue}' and params_type_s ==\\\"host\\\" and params_source_s == \\\"dns\\\"\\r\\n    | summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n    | extend\\r\\n        TXT = column_ifexists(\\\"data_TXT_s\\\",\\\"\\\")\\r\\n    | mv-expand todynamic(data_TXT_s)\\r\\n    | project Type=\\\"TXT\\\",Value=data_TXT_s;\\r\\n union dns_A_data,dns_AAAA_data,dns_CERT_data,\\r\\ndns_CNAME_data,\\r\\ndns_HTTPS_data,\\r\\ndns_NS_data,\\r\\ndns_SOA_data,\\r\\ndns_MX_data,\\r\\ndns_SVCB_data,\\r\\ndns_TSIG_data,\\r\\ndns_TXT_data\\r\\n| where isnotempty( Value) or isnotempty( Reverse) or isnotempty( TTL)\\r\\n| sort by Type asc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Current DNS\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Type\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"20%\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"host\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 7\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelisted\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_ptr_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s == \\\"ip\\\" and params_source_s == \\\"ptr\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend ptr_record = column_ifexists(\\\"data_ptr_record_s\\\",\\\"\\\")\\r\\n| extend ptr_record = case( isempty(ptr_record), \\\"Not Found\\\",ptr_record)\\r\\n| project ptr_record\",\"size\":3,\"title\":\"Domain Name Associated (PTR)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"ptr_record\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unavailable\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"name\":\"query - 1\",\"styleSettings\":{\"maxWidth\":\"20\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\",\"styleSettings\":{\"maxWidth\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 7 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_rpz_feeds_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"rpz_feeds\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (union isfuzzy = true dummy_table, dossier_rpz_feeds_records_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    feed_name = column_ifexists(\\\"feed_name_s\\\",\\\"\\\"),\\r\\n    property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    threat_level = column_ifexists(\\\"threat_level_d\\\", 0)\\r\\n| where isnotempty(class ) or isnotempty(detected ) or isnotempty(expiration ) or isnotempty(feed_name ) or isnotempty(property )\\r\\n|extend Severity = case( tolong(threat_level) >= 75, \\\"High\\\",tolong(threat_level) < 75 and tolong(threat_level) >= 50, \\\"Medium\\\",tolong(threat_level) < 50 and tolong(threat_level) >= 25,\\\"Low\\\",tolong(threat_level) <25 , \\\"Info\\\",\\\"\\\")\\r\\n| project\\r\\n    ['Feed Name'] = feed_name,\\r\\n    ['Threat Level'] = threat_level,\\r\\n    Severity,\\r\\n    Property = property,\\r\\n    Class = class,\\r\\n    Detected = detected,\\r\\n    Expiration = expiration\",\"size\":3,\"showAnalytics\":true,\"title\":\"Active Threat Feeds and Status (RPZ Feeds)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"gray\",\"text\":\"{0}{1}\"}]}}]}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_geo_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"geo\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend\\r\\n    asn_num = column_ifexists(\\\"data_asn_num_s\\\", \\\"\\\"),\\r\\n    city = column_ifexists(\\\"data_city_s\\\", \\\"\\\"),\\r\\n    country_code = column_ifexists(\\\"data_country_code_s\\\", \\\"\\\"),\\r\\n    country_name = column_ifexists(\\\"data_country_name_s\\\", \\\"\\\"),\\r\\n    isp = column_ifexists(\\\"data_isp_s\\\", \\\"\\\"),\\r\\n    latitude = column_ifexists(\\\"data_latitude_d\\\", \\\"\\\"),\\r\\n    longitude = column_ifexists(\\\"data_longitude_d\\\", \\\"\\\"),\\r\\n    org = column_ifexists(\\\"data_org_s\\\", \\\"\\\"),\\r\\n    postal_code = column_ifexists(\\\"data_postal_code_s\\\", \\\"\\\"),\\r\\n    region = column_ifexists(\\\"data_region_s\\\", \\\"\\\")\\r\\n| where\\r\\n    isnotempty(asn_num) or\\r\\n    isnotempty(city) or\\r\\n    isnotempty(country_code) or\\r\\n    isnotempty(country_name) or\\r\\n    isnotempty(isp) or\\r\\n    isnotempty(latitude) or\\r\\n    isnotempty(longitude) or\\r\\n    isnotempty(org) or\\r\\n    isnotempty(postal_code) or\\r\\n    isnotempty(region) \\r\\n| project \\r\\n    ['Asn Number'] = asn_num,\\r\\n    City = city,\\r\\n    ['Country Code'] = country_code,\\r\\n    ['Country Name'] = country_name,\\r\\n    Isp = isp,\\r\\n    Latitude = latitude,\\r\\n    Longitude = longitude,\\r\\n    Org = org,\\r\\n    ['Postal Code'] = postal_code,\\r\\n    Region = region\",\"size\":3,\"title\":\"Geo Graphic Details\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    IP = column_ifexists(\\\"ip_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    Threatlevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    IP,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = Threatlevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\r\\nlet dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whois_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"ip\\\" and params_source_s == \\\"whois\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend \\r\\nCountry = column_ifexists(\\\"data_response_ip_response_country_s\\\",\\\"\\\"),\\r\\nHandle = column_ifexists(\\\"data_response_ip_response_handle_s\\\",\\\"\\\"),\\r\\nlast_changed = column_ifexists(\\\"data_response_ip_response_last_changed_t\\\",\\\"\\\"),\\r\\nName = column_ifexists(\\\"data_response_ip_response_name_s\\\",\\\"\\\"),\\r\\nnet_range = column_ifexists(\\\"data_response_ip_response_net_range_s\\\",\\\"\\\"),\\r\\nnet_type = column_ifexists(\\\"data_response_ip_response_net_type_s\\\",\\\"\\\"),\\r\\nParent = column_ifexists(\\\"data_response_ip_response_parent_s\\\",\\\"\\\"),\\r\\nRegistration = column_ifexists(\\\"data_response_ip_response_registration_t\\\",\\\"\\\"),\\r\\nsource_registery = column_ifexists(\\\"data_response_ip_response_source_registery_s\\\",\\\"\\\")\\r\\n| where\\r\\n    isnotempty(Country) or\\r\\n    isnotempty(Handle) or\\r\\n    isnotempty(last_changed) or\\r\\n    isnotempty(Name) or\\r\\n    isnotempty(net_range) or\\r\\n    isnotempty(net_type) or\\r\\n    isnotempty(Parent) or\\r\\n    isnotempty(Registration) or\\r\\n    isnotempty(source_registery)\\r\\n| project \\r\\n    Name,\\r\\n    Country,\\r\\n    Handle,\\r\\n    ['Network Range'] = net_range,\\r\\n    ['Network Type'] = net_type,\\r\\n    Parent,\\r\\n    ['Source Registery'] = source_registery,\\r\\n    ['Last Changed'] = last_changed ,\\r\\n    Registration\",\"size\":3,\"title\":\"Registered Owner (WHOIS)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"ip\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_whitelist_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"whitelist\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_whitelisted_b = column_ifexists(\\\"data_whitelisted_b\\\",\\\"\\\")\\r\\n| where isnotempty(data_whitelisted_b)\\r\\n| project tostring(data_whitelisted_b)\",\"size\":3,\"title\":\"Whitelist\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"data_whitelisted_b\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"False\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"20\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_infoblox_web_cat_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"infoblox_web_cat\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_results_s = column_ifexists(\\\"data_results_s\\\",\\\"\\\")\\r\\n| where isnotempty(data_results_s)\\r\\n| extend data_results_s = parse_json(data_results_s)\\r\\n| mv-expand data_results_s\\r\\n| project ['Web Category'] = data_results_s.name\",\"size\":3,\"title\":\"Web Categories\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Web Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Uncategorized\",\"representation\":\"Normal\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Found\",\"representation\":\"Unknown\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"sortOrderField\":2,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"maxWidth\":\"80\"}}]},\"customWidth\":\"0\",\"name\":\"group - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_tld_risk_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"tld_risk\\\" \\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_matches = column_ifexists(\\\"data_matches_s\\\",\\\"\\\")\\r\\n| mv-expand todynamic(data_matches)\\r\\n| project data_matches\\r\\n| parse-kv data_matches as (confidence:string, popular:string, rare:string, score:string, score_label:string, tld:string) with (pair_delimiter=',', kv_delimiter=':',quote='\\\"')\\r\\n| where\\r\\n    isnotempty(confidence) or\\r\\n    isnotempty(popular) or\\r\\n    isnotempty(rare) or\\r\\n    isnotempty(score) or\\r\\n    isnotempty(score_label) or\\r\\n    isnotempty(tld)\\r\\n| project \\r\\n    ['Score Label'] = score_label,\\r\\n    Score = score,\\r\\n    TLD = tld,\\r\\n    Confidence = confidence,\\r\\n    Popular = popular,\\r\\n    Rare = rare\\r\\n\\r\\n\",\"size\":3,\"title\":\"TLD Reputation\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Score Label\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High Risk\",\"representation\":\"redBright\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Moderate Risk\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low Risk\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}]},\"tileSettings\":{\"showBorder\":false}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"url\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Url = column_ifexists(\\\"url_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Url,\\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"url\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5 - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 3 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_malware_analysis_v3_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"malware_analysis_v3\\\"| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| extend data_info = column_ifexists(\\\"data_info_s\\\",\\\"\\\"), data_reason = column_ifexists(\\\"data_reason_s\\\",\\\"\\\"), Status = column_ifexists(\\\"status_s\\\",\\\"\\\")\\r\\n| where Status == \\\"error\\\"\\r\\n| project Information = data_info, Reason = data_reason\",\"size\":3,\"title\":\"VirusTotal\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"hash\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Hash = column_ifexists(\\\"hash_s\\\",\\\"\\\"),\\r\\n    HashType = column_ifexists(\\\"hash_type_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Hash,\\r\\n    ['Hash Type'] = HashType,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"hash\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 5 - Copy - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"loadType\":\"always\",\"items\":[{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"email\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\")\\r\\n| where todatetime(Expiration) >= now()\\r\\n| distinct ['Threat Property'] = Property\",\"size\":3,\"title\":\"Threat Property\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"Threat Property\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"}]}},\"showBorder\":true,\"size\":\"auto\"}},\"customWidth\":\"0\",\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, params_source_s: string, params_target_s:string, params_type_s:string, task_id_g:string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\ndossier_atp_CL\\r\\n| where params_target_s == '{IOCValue}' and params_type_s ==\\\"email\\\" and params_source_s == \\\"atp\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by params_target_s\\r\\n| join kind=inner (dossier_atp_threat_CL) on $left.task_id_g == $right.task_id_g\\r\\n| extend \\r\\n    Email = column_ifexists(\\\"email_s\\\",\\\"\\\"),\\r\\n    Host = column_ifexists(\\\"host_s\\\",\\\"\\\"),\\r\\n    Domain = column_ifexists(\\\"domain_s\\\",\\\"\\\"),\\r\\n    TLD = column_ifexists(\\\"tld_s\\\",\\\"\\\"),\\r\\n    Profile = column_ifexists(\\\"profile_s\\\",\\\"\\\"),\\r\\n    Property = column_ifexists(\\\"property_s\\\",\\\"\\\"),\\r\\n    Class = column_ifexists(\\\"class_s\\\",\\\"\\\"),\\r\\n    Confidence = column_ifexists(\\\"confidence_d\\\",\\\"\\\"),\\r\\n    ThreatLevel = column_ifexists(\\\"threat_level_d\\\",\\\"\\\"),\\r\\n    Detected = column_ifexists(\\\"detected_t\\\",\\\"\\\"),\\r\\n    Received = column_ifexists(\\\"received_t\\\",\\\"\\\"),\\r\\n    Imported = column_ifexists(\\\"imported_t\\\",\\\"\\\"),\\r\\n    Expiration = column_ifexists(\\\"expiration_t\\\",\\\"\\\"),\\r\\n    Up = column_ifexists(\\\"up_s\\\",\\\"\\\"),\\r\\n    Dga = column_ifexists(\\\"dga_s\\\",\\\"\\\"),\\r\\n    Notes = column_ifexists(\\\"extended_notes_s\\\",\\\"\\\")\\r\\n| project \\r\\n    Email,\\r\\n    Host,\\r\\n    Domain,\\r\\n    TLD,\\r\\n    Profile,\\r\\n    Property,\\r\\n    Class,\\r\\n    Confidence,\\r\\n    ['Threat Level'] = ThreatLevel,\\r\\n    Detected,\\r\\n    Received,\\r\\n    Imported,\\r\\n    Expiration,\\r\\n    Up,\\r\\n    Dga,\\r\\n    Notes\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Details (ATP)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"},\"name\":\"query - 12\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibilities\":[{\"parameterName\":\"IOCType\",\"comparison\":\"isEqualTo\",\"value\":\"email\"},{\"parameterName\":\"dossier_status\",\"comparison\":\"isEqualTo\",\"value\":\"Click here to view the data\"}],\"name\":\"group - 6\"}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"3\"},\"name\":\"group - 2\",\"styleSettings\":{\"padding\":\"10px\"}}],\"fromTemplateId\":\"sentinel-Infoblox | Infoblox Lookup Workbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=InfobloxLookupWorkbook; logoFileName=infoblox_logo.svg; description=The Infoblox Lookup Workbook provides comprehensive insights through lookups on various data types including IP, Host, URL, Hash, and Email.\nThe workbook features distinct tabs for targeted lookups. \nThe 'TIDE' tab delivers insights from Infoblox TIDE data, while the 'Dossier' tab aggregates information from a range of other third party sources. \nTo obtain detailed insights, enter the relevant data into the specified fields within each tab. \nThis allows users to efficiently gather and analyze critical information.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0; title=Infoblox Lookup Workbook; templateRelativePath=Infoblox_Lookup_Workbook.json; subtitle=Efficiently Gather and Analyze Critical Information of TIDE and Dossier with Targeted Lookups; provider=Infoblox}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "dossier_whois_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_whitelist_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_tld_risk_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_threat_actor_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_rpz_feeds_records_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_rpz_feeds_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_nameserver_matches_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_nameserver_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_malware_analysis_v3_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_inforank_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_infoblox_web_cat_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_geo_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_dns_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_atp_threat_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_atp_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "dossier_ptr_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "tide_lookup_data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityAlert",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityIncident",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxDataConnector",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox_Workbook Workbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId2')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "The Infoblox Workbook is a detailed analytical tool comprising six tabs: SOC Insights, Config Insights, Blocked DNS, DNS, DHCP, Service Log, Audit and Threat Intelligence. \nIt fetches data from Common Event Format (CEF) logs to provide standardized and comprehensive insights into network security and operations. \nEach tab focuses on specific areas such as overall security metrics, blocked DNS requests, DNS activities, DHCP allocations, various service logs, and a combination of audit records with threat intelligence. \nThis workbook enables efficient monitoring and proactive management of network security and performance."
              },
              "properties": {
                "displayName": "[parameters('workbook2-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"370d206d-18b1-43d4-a170-71a4a12ba9b2\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"SOC Insights Overview\",\"subTarget\":\"6\",\"style\":\"link\"},{\"id\":\"63a011d0-c970-408d-b027-a8579848a6fd\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Config Insights Overview\",\"subTarget\":\"8\",\"style\":\"link\"},{\"id\":\"f8b51e3b-e4b2-4ba4-9a9c-bedea05a1ee7\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Blocked Traffic Overview\",\"subTarget\":\"4\",\"style\":\"link\"},{\"id\":\"d3af8e0b-806c-4f1f-b006-845c842bc2fc\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"DNS Overview\",\"subTarget\":\"1\",\"style\":\"link\"},{\"id\":\"dbd0c004-e0b4-446c-91cd-5a5af3f6e16e\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"DHCP Overview\",\"subTarget\":\"2\",\"style\":\"link\"},{\"id\":\"41df2b27-5f91-4a8b-adcb-e7997f86d6d6\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Audit Log Overview\",\"subTarget\":\"3\",\"style\":\"link\"},{\"id\":\"4f1a6ec7-3d56-4f50-8045-34adbb8d92d0\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Service Log Overview\",\"subTarget\":\"5\",\"style\":\"link\"},{\"id\":\"ffabdc7f-2cb7-40fc-a883-d82609bba051\",\"cellValue\":\"Parameter\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Threat Intelligence Overview\",\"subTarget\":\"7\",\"style\":\"link\"}]},\"name\":\"links - 1\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"e1e015ea-e688-48be-ac2b-846fe98be48e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000}},{\"id\":\"9f36e52f-3282-4976-9187-7b3f551d91e9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"User\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(SourceUserName)\\r\\n| distinct SourceUserName\\r\\n| sort by SourceUserName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"4bf79012-0d96-4024-8cb6-0b9c0d9407ef\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"HostName\",\"label\":\"Host Name\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where isnotempty(SourceHostName) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\n| distinct SourceHostName\\r\\n| sort by SourceHostName desc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"8b364f17-07f7-4403-8086-26bf36c92536\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Asset\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName)\\r\\n| where isnotempty(DeviceName) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\n| distinct DeviceName\\r\\n| sort by DeviceName desc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"66255f50-472e-4295-8d64-6b9fa2e3c887\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SLD\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\n| extend DestinationDnsDomain = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\", SecondLevelDomain)\\r\\n| where isnotempty(SecondLevelDomain)\\r\\n| distinct SecondLevelDomain\\r\\n| order by SecondLevelDomain \\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"f0a80c9f-a800-4958-b51c-4b38bfaf6624\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ResponseCode\",\"label\":\"Response Code\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSRCode: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode)\\r\\n| where isnotempty(InfobloxDNSRCode) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\n| distinct InfobloxDNSRCode\\r\\n| sort by InfobloxDNSRCode asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"aeb144ce-64b1-45ba-85d9-f0a2da9a69d3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"RecordType\",\"label\":\"Record Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType)\\r\\n| where isnotempty(InfobloxDNSQType) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\n| distinct InfobloxDNSQType\\r\\n| sort by InfobloxDNSQType asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(DestinationDnsDomain)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count = count() by DestinationDnsDomain\\r\\n| project-rename ['Destination Dns Domain'] = DestinationDnsDomain\\r\\n| project ['Destination Dns Domain'], Count\\r\\n| sort by Count desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Most Requested FQDNs\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"Destination Dns Domain\",\"exportParameterName\":\"DestinationDnsDomain\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"Most Requested FQDNs\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"0\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Most Requested FQDNs' grid to see 'Top 10 Devices'\"},\"conditionalVisibility\":{\"parameterName\":\"DestinationDnsDomain\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 18\",\"styleSettings\":{\"margin\":\"5px\"}}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 20\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"72d2b1bd-300c-4f3e-b4ca-4dcaec96fb3a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TopDevices\",\"type\":1,\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| where DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(DeviceName)\\r\\n| summarize Count = count() by DeviceName\\r\\n| top 10 by Count desc\\r\\n| summarize DeviceList = make_list(DeviceName)\\r\\n\\r\\n\",\"timeContext\":{\"durationMs\":1209600000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"102ee8fc-7658-4bca-82f3-54ed66d2ba9d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TopMAC\",\"type\":1,\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\" and DestinationDnsDomain == ('{DestinationDnsDomain}') \\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(SourceMACAddress)\\r\\n| summarize Count = count() by SourceMACAddress\\r\\n| top 10 by Count desc\\r\\n| summarize DeviceList = make_list(SourceMACAddress)\\r\\n\\r\\n\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"4c59d86e-9130-41a4-ba95-4e7974e4de06\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FirstDevice\",\"type\":1,\"query\":\"print (todynamic('{TopDevices}')[0])\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"0f1d8907-d375-4db8-a5c9-f9d7390d8f7f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SecondDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[1]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"bd2a1987-e9ba-42ac-9856-a8c781ebb332\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ThirdDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[2]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"04910ee0-5aa4-4897-82d6-15167ad50e01\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FourthDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[3]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"9a023fc0-b8b3-4e1e-9d9c-2c5c511cf32f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FifthDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[4]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"5619aab8-f9b6-4218-9315-c6741facf4eb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SixthDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[5]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"4dd8c03f-0ec4-494c-a237-ff5c9ab73f8f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SeventhDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[6]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"1a2455e4-36ec-46c9-bb3f-395ff1186abb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EightDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[7]\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"72b22373-007c-4d10-bbdd-bdac49ea666c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"NinethDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[8]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"eb44f209-d53b-488f-8275-05294b57b1c6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TenthDevice\",\"type\":1,\"query\":\"print todynamic('{TopDevices}')[9]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"bb6a7aa4-0cf3-49d4-9649-179f6d60af71\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FirstMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[0]\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"571e7afc-50fc-4f35-a7cf-c1d23a00effe\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SecondMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[1]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"00dca50c-6034-4a97-b1b0-da773ed535e7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ThirdMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[2]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"05752a54-7398-4373-9d67-bc5ce96c32a1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FourthMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[3]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"42233555-d975-4e88-b62e-2a53e728ae38\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"FifthMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[4]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"3a0eea52-845c-4347-b01b-6f4531de2d5c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SixthMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[5]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"29854b31-e4cd-4157-94d4-c0c3fef6f9a2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SeventhMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[6]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"959fdc81-126b-44f9-8a82-753bc8d5bebd\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EightMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[7]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"78b51494-7bb5-4a7d-ab01-67483568319d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"NinethMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[8]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"b66ac0ed-09b2-49e1-bead-88c1a1145f70\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TenthMAC\",\"type\":1,\"query\":\"print todynamic('{TopMAC}')[9]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"Hide\",\"comparison\":\"isNotEqualTo\"},\"name\":\"parameters - 18\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Top 10 Devices for Domain : {DestinationDnsDomain}\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{FirstDevice}')\\r\\n| summarize Count = count() by SourceIP\\r\\n| render piechart with(title=tostring(todynamic('{TopDevices}')[0]))\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {FirstDevice} , MAC : {FirstMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"FirstDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 18\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{SecondDevice}') \\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {SecondDevice} , MAC : {SecondMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"ySettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SecondDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 1\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{ThirdDevice}') \\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {ThirdDevice} , MAC : {ThirdMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"ThirdDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{FourthDevice}') \\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {FourthDevice} , MAC : {FourthMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"FourthDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{FifthDevice}') \\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {FifthDevice} , MAC : {FifthMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"FifthDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{SixthDevice}') \\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {SixthDevice} , MAC : {SixthMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SixthDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{SeventhDevice}') \\r\\n| summarize Count = count() by SourceIP\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {SeventhDevice} , MAC : {SeventhMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SeventhDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 6\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{EightDevice}') \\r\\n| summarize Count = count() by SourceIP\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {EightDevice} , MAC : {EightMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"EightDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{NinethDevice}') \\r\\n| summarize Count = count() by SourceIP\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {NinethDevice} , MAC : {NinethMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"NinethDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 8\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand DestinationDnsDomain == ('{DestinationDnsDomain}')\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand DeviceName == ('{TenthDevice}') \\r\\n| summarize Count = count() by SourceIP\",\"size\":4,\"showAnalytics\":true,\"title\":\"Device : {TenthDevice} , MAC : {TenthMAC}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"TenthDevice\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 9\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"DestinationDnsDomain\",\"comparison\":\"isNotEqualTo\"},\"name\":\"group - 19\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(SourceUserName)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD})) \\r\\n| project-rename User = SourceUserName\\r\\n| summarize Count = count() by User\\r\\n| project User, Count\\r\\n| sort by Count desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"DNS Requests Count by Users\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"User\",\"exportParameterName\":\"SourceUserName\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\",\"compositeBarSettings\":{\"labelText\":\"\"}}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"Top Users\",\"styleSettings\":{\"margin\":\"5px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'DNS Requests Count by Users' grid to see 'Overall DNS Requests made by User' and 'Top 10 Requested Domains by User'\"},\"conditionalVisibility\":{\"parameterName\":\"SourceUserName\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 19\",\"styleSettings\":{\"margin\":\"5px\"}}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 19\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string,\\r\\nInfobloxDNSView:string, InfobloxDNSQClass:string, InfobloxDNSQFlags:string, InfobloxAnCount:string, InfobloxNsCount:string, \\r\\nInfobloxArCount:string, InfobloxB1ConnectionType:string, InfobloxB1OPHName:string, InfobloxB1OPHIPAddress:string, InfobloxB1Network:string, \\r\\nInfobloxB1SrcOSVersion:string, InfobloxB1DHCPFingerprint:string, InfobloxB1DNSTags:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand SourceUserName == ('{SourceUserName}')\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| project-rename User = SourceUserName, ['Host Name'] = SourceHostName, ['Query Type'] = InfobloxDNSQType, ['Response Type'] = InfobloxDNSRCode, Location = InfobloxB1Region, ['DNS View'] = InfobloxDNSView, ['DNS Query Class'] = InfobloxDNSQClass, ['DNS Query Flags'] = InfobloxDNSQFlags, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint, ['DNS Response Record Count'] = InfobloxAnCount, ['DNS Response Authoritative Count'] = InfobloxNsCount, ['DNS Response Additional Record Count'] = InfobloxArCount, ['Connection Type'] = InfobloxB1ConnectionType, ['Infoblox HostName'] = InfobloxB1OPHName, ['Infoblox HostIP'] = InfobloxB1OPHIPAddress, Network = InfobloxB1Network, ['Source OS Version'] = InfobloxB1SrcOSVersion, ['DNS Tags'] = InfobloxB1DNSTags, ['Date Time'] = TimeGenerated, ['Device Name'] = DeviceName, ['Device Address'] = DeviceAddress, ['Source IP'] = SourceIP, ['Source Port'] = SourcePort, ['Destination Dns Domain'] = DestinationDnsDomain, ['Additional Extensions'] = AdditionalExtensions, ['Device Event Class ID'] = DeviceEventClassID, ['Application Protocol'] = ApplicationProtocol, ['Log Severity'] = LogSeverity\\r\\n| project ['Date Time'], User,  ['Host Name'], ['Device Name'], ['Device Address'], ['Source IP'], ['Source Port'], Activity, toint(['Log Severity']), ['Destination Dns Domain'], ['Query Type'], ['Response Type'], Location, ['DHCP Fingerprint'], ['DNS View'], ['DNS Query Class'], ['DNS Query Flags'], ['DNS Response Record Count'], ['DNS Response Authoritative Count'], ['DNS Response Additional Record Count'], ['Connection Type'], ['Infoblox HostName'], ['Infoblox HostIP'], Network, ['Source OS Version'], ['DNS Tags'], ['Additional Extensions'], Protocol, ['Device Event Class ID'], ['Application Protocol']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Overall DNS Requests made by User : {SourceUserName}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Log Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"LogSeverity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"SourceUserName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 15\",\"styleSettings\":{\"margin\":\"5px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand SourceUserName == ('{SourceUserName}')\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count = count() by DestinationDnsDomain\\r\\n| top 10 by Count\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 Requested Domains by User : {SourceUserName}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]},\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"DestinationDnsDomain\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"group\":\"DestinationDnsDomain\",\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"SourceUserName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 8\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"68px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(InfobloxDNSRCode)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize count() by InfobloxDNSRCode\",\"size\":3,\"showAnalytics\":true,\"title\":\"Response Types\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"series\",\"exportParameterName\":\"Response_Type\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"gridSettings\":{\"rowLimit\":10000},\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"100\",\"name\":\"query - 9\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"68px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Types of Response' pie chart to see 'DNS Requests' and 'Top 20 Devices'\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"Response_Type\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 17\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string,\\r\\n InfobloxDNSView:string, InfobloxDNSQClass:string, InfobloxDNSQFlags:string, InfobloxAnCount:string, InfobloxNsCount:string,\\r\\n  InfobloxArCount:string, InfobloxB1ConnectionType:string, InfobloxB1OPHName:string, InfobloxB1OPHIPAddress:string, InfobloxB1Network:string,\\r\\n   InfobloxB1SrcOSVersion:string, InfobloxB1DHCPFingerprint:string, InfobloxB1DNSTags:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand InfobloxDNSRCode == ('{Response_Type}')\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| project-rename User = SourceUserName, ['Host Name'] = SourceHostName, ['Query Type'] = InfobloxDNSQType, ['Response Type'] = InfobloxDNSRCode, Location = InfobloxB1Region, ['DNS View'] = InfobloxDNSView, ['DNS Query Class'] = InfobloxDNSQClass, ['DNS Query Flags'] = InfobloxDNSQFlags, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint, ['DNS Response Record Count'] = InfobloxAnCount, ['DNS Response Authoritative Count'] = InfobloxNsCount, ['DNS Response Additional Record Count'] = InfobloxArCount, ['Connection Type'] = InfobloxB1ConnectionType, ['Infoblox HostName'] = InfobloxB1OPHName, ['Infoblox HostIP'] = InfobloxB1OPHIPAddress, Network = InfobloxB1Network, ['Source OS Version'] = InfobloxB1SrcOSVersion, ['DNS Tags'] = InfobloxB1DNSTags, ['Date Time'] = TimeGenerated, ['Device Name'] = DeviceName, ['Device Address'] = DeviceAddress, ['Source IP'] = SourceIP, ['Source Port'] = SourcePort, ['Destination Dns Domain'] = DestinationDnsDomain, ['Additional Extensions'] = AdditionalExtensions, ['Device Event Class ID'] = DeviceEventClassID, ['Application Protocol'] = ApplicationProtocol, ['Log Severity'] = LogSeverity\\r\\n| project ['Date Time'], User,  ['Host Name'], ['Device Name'], ['Device Address'], ['Source IP'], ['Source Port'], Activity, toint(['Log Severity']), ['Destination Dns Domain'], ['Query Type'], ['Response Type'], Location, ['DHCP Fingerprint'], ['DNS View'], ['DNS Query Class'], ['DNS Query Flags'], ['DNS Response Record Count'], ['DNS Response Authoritative Count'], ['DNS Response Additional Record Count'], ['Connection Type'], ['Infoblox HostName'], ['Infoblox HostIP'], Network, ['Source OS Version'], ['DNS Tags'], ['Additional Extensions'], Protocol, ['Device Event Class ID'], ['Application Protocol']\",\"size\":0,\"showAnalytics\":true,\"title\":\"{Response_Type} DNS Requests\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Log Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"LogSeverity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"Response_Type\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 16\",\"styleSettings\":{\"padding\":\"17px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand InfobloxDNSRCode == ('{Response_Type}')\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count = count() by DeviceName\\r\\n| top 20 by Count\\r\\n\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 20 Devices for {Response_Type} DNS Request\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":20,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"Response_Type\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 17\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(InfobloxDNSQType)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize count() by InfobloxDNSQType\\r\\n\\r\\n\",\"size\":3,\"showAnalytics\":true,\"title\":\"Query Types\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"name\":\"query - 10\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"68px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(InfobloxDNSRCode)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| sort by TimeGenerated asc\\r\\n| make-series Count = count() default = 0 on TimeGenerated from ago(1d) to now() step 1h by InfobloxDNSRCode\",\"size\":0,\"title\":\"Overall Queries Per Hour\",\"timeContext\":{\"durationMs\":86400000},\"exportFieldName\":\"x\",\"exportParameterName\":\"QPS_Time\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"showLegend\":true,\"showDataPoints\":true,\"xSettings\":{\"label\":\"Time\"}}},\"customWidth\":\"100\",\"name\":\"query - 11\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"18px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Overall Queries Per Hour' bar chart to see 'Queries Per Minutes'\"},\"conditionalVisibility\":{\"parameterName\":\"QPS_Time\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 20\",\"styleSettings\":{\"margin\":\"5px\"}}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 21\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Gridtimestring = tostring('{QPS_Time}');\\r\\nlet Gridtime = todatetime(substring(Gridtimestring, indexof(Gridtimestring, \\\" \\\"), indexof(Gridtimestring, \\\"GMT\\\") - 1 - indexof(Gridtimestring, \\\" \\\"))) -5h - 30m;\\r\\n\\r\\nCommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(InfobloxDNSRCode)\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| where TimeGenerated between (Gridtime - 30m .. Gridtime + 30m)\\r\\n| sort by TimeGenerated asc\\r\\n| make-series Count = count() default = 0 on bin(TimeGenerated, 1m) from (Gridtime - 30m) to (Gridtime + 30m) step 1m by InfobloxDNSRCode\",\"size\":0,\"showAnalytics\":true,\"title\":\"Overall Queries Per Minute\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"gridSettings\":{\"rowLimit\":10000},\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Count\",\"color\":\"blueDark\"}]}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"QPS_Time\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 13\",\"styleSettings\":{\"margin\":\"5px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Gridtimestring = tostring('{QPS_Time}');\\r\\nlet Gridtime = todatetime(substring(Gridtimestring, indexof(Gridtimestring, \\\" \\\"), indexof(Gridtimestring, \\\"GMT\\\") - 1 - indexof(Gridtimestring, \\\" \\\"))) -5h - 30m;\\r\\n\\r\\nCommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand isnotempty(InfobloxDNSQType)\\r\\nand TimeGenerated between ((Gridtime - 30m) .. (Gridtime + 30m))\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count = count() by DeviceName\",\"size\":3,\"showAnalytics\":true,\"title\":\"Overall Query by Devices per hour\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"QPS_Time\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 17\",\"styleSettings\":{\"padding\":\"52px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxDNSRCode:string, InfobloxB1Region:string,\\r\\n InfobloxDNSView:string, InfobloxDNSQClass:string, InfobloxDNSQFlags:string, InfobloxAnCount:string, InfobloxNsCount:string,\\r\\n  InfobloxArCount:string, InfobloxB1ConnectionType:string, InfobloxB1OPHName:string, InfobloxB1OPHIPAddress:string, InfobloxB1Network:string,\\r\\n   InfobloxB1SrcOSVersion:string, InfobloxB1DHCPFingerprint:string, InfobloxB1DNSTags:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName), InfobloxDNSRCode = trim(@\\\"\\\\s\\\", InfobloxDNSRCode), InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), DestinationDnsDomain = trim(@\\\"\\\\s\\\", DestinationDnsDomain), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand (('{RecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({RecordType}))\\r\\nand (('{ResponseCode:escapjson}') == \\\"*\\\" or InfobloxDNSRCode in~ ({ResponseCode}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| project-rename User = SourceUserName, ['Host Name'] = SourceHostName, ['Query Type'] = InfobloxDNSQType, ['Response Type'] = InfobloxDNSRCode, Location = InfobloxB1Region, ['DNS View'] = InfobloxDNSView, ['DNS Query Class'] = InfobloxDNSQClass, ['DNS Query Flags'] = InfobloxDNSQFlags, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint, ['DNS Response Record Count'] = InfobloxAnCount, ['DNS Response Authoritative Count'] = InfobloxNsCount, ['DNS Response Additional Record Count'] = InfobloxArCount, ['Connection Type'] = InfobloxB1ConnectionType, ['Infoblox HostName'] = InfobloxB1OPHName, ['Infoblox HostIP'] = InfobloxB1OPHIPAddress, Network = InfobloxB1Network, ['Source OS Version'] = InfobloxB1SrcOSVersion, ['DNS Tags'] = InfobloxB1DNSTags, ['Date Time'] = TimeGenerated, ['Device Name'] = DeviceName, ['Device Address'] = DeviceAddress, ['Source IP'] = SourceIP, ['Source Port'] = SourcePort, ['Destination Dns Domain'] = DestinationDnsDomain, ['Additional Extensions'] = AdditionalExtensions, ['Device Event Class ID'] = DeviceEventClassID, ['Application Protocol'] = ApplicationProtocol, ['Log Severity'] = LogSeverity\\r\\n| project ['Date Time'], User,  ['Host Name'], ['Device Name'], ['Device Address'], ['Source IP'], ['Source Port'], Activity, toint(['Log Severity']), ['Destination Dns Domain'], ['Query Type'], ['Response Type'], Location, ['DHCP Fingerprint'], ['DNS View'], ['DNS Query Class'], ['DNS Query Flags'], ['DNS Response Record Count'], ['DNS Response Authoritative Count'], ['DNS Response Additional Record Count'], ['Connection Type'], ['Infoblox HostName'], ['Infoblox HostIP'], Network, ['Source OS Version'], ['DNS Tags'], ['Additional Extensions'], Protocol, ['Device Event Class ID'], ['Application Protocol']\",\"size\":0,\"showAnalytics\":true,\"title\":\"DNS Requests\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Log Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"LogSeverity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxAnCount\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"yellowGreenBlue\"}},{\"columnMatch\":\"InfobloxNsCount\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"yellowOrangeBrown\"}},{\"columnMatch\":\"InfobloxArCount\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"SourceUserName\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"!=\",\"representation\":\"brown\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 14\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 15\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"Main Group\",\"styleSettings\":{\"margin\":\"5px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Infoblox-Get-IP-Space-Data** logic app which is deployed with the Microsoft Sentinel Solution.</br>\\r\\nPlease configure this logic app first and keep it enabled in order to use this workbook.\",\"style\":\"info\"},\"name\":\"text - 15\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"4abe4038-7e69-4b2c-9ec2-e1f9311e96be\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000}},{\"id\":\"379d941d-6191-494d-b518-caf9e0d8ce55\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DHCPServer\",\"label\":\"DHCP Server\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" and DeviceProduct == \\\"Data Connector\\\" and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string) with (kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID)\\r\\n| where isnotempty(InfobloxHostID) \\r\\n| distinct InfobloxHostID\\r\\n| sort by InfobloxHostID asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"68911f86-d896-407d-9a0b-07934f997037\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"HostName\",\"label\":\"Host Name\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" and DeviceProduct == \\\"Data Connector\\\" and DeviceEventClassID has_cs \\\"DHCP\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string) with (kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID)\\r\\n| where isnotempty(SourceHostName) and (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer}))\\r\\n| distinct SourceHostName\\r\\n| sort by SourceHostName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"c5628a47-4153-4808-a618-9a06d560428b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"MAC\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" and DeviceProduct == \\\"Data Connector\\\" and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string) with (kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress), InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID)\\r\\n| where isnotempty(SourceMACAddress) and (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer}))\\r\\n| distinct SourceMACAddress\\r\\n| sort by SourceMACAddress asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"053f6da7-3bb9-4f9f-9bc5-ec09a9723f52\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"IP_Space\",\"label\":\"IP Space\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxIPSpace: string, InfobloxHostID: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where isnotempty(name_s)\\r\\n| distinct name_s\\r\\n| order by name_s asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID == \\\"DHCP-LEASE-DELETE\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize dcount(SourceIP)\",\"size\":3,\"showAnalytics\":true,\"title\":\"Released DHCP Leases (Unique IPs)\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"rowLimit\":200,\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"dcount_SourceIP\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"green\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Released DHCP Leases (Unique IPs)\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID == \\\"DHCP-LEASE-DELETE\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize count()\",\"size\":3,\"showAnalytics\":true,\"title\":\"Released DHCP Leases\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"rowLimit\":200,\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Released DHCP Leases\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID in (\\\"DHCP-LEASE-CREATE\\\", \\\"DHCP-LEASE-UPDATE\\\")\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize dcount(SourceIP)\",\"size\":3,\"showAnalytics\":true,\"title\":\"New / Updated DHCP Leases (Unique IPs)\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"rowLimit\":200,\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"dcount_SourceIP\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"magenta\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Updated DHCP Leases (Unique IPs)\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\" \\r\\n    and DeviceEventClassID in (\\\"DHCP-LEASE-CREATE\\\", \\\"DHCP-LEASE-UPDATE\\\")\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize count()\",\"size\":3,\"showAnalytics\":true,\"title\":\"New / Updated DHCP Leases \",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"rowLimit\":200,\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"InfobloxThreatLevel\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"greenDark\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Updated DHCP Leases \",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| make-series Hits = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by InfobloxLeaseOp\",\"size\":0,\"showAnalytics\":true,\"title\":\"DHCP Leases over Time\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"linechart\",\"chartSettings\":{\"showLegend\":true}},\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName})) \\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| extend InfobloxLeaseOp = trim(@\\\"\\\\s\\\", InfobloxLeaseOp)\\r\\n| where isnotempty(InfobloxLeaseOp)\\r\\n| summarize count() by InfobloxLeaseOp\",\"size\":3,\"showAnalytics\":true,\"title\":\"DHCP Activity Summary\",\"showRefreshButton\":true,\"exportFieldName\":\"series\",\"exportParameterName\":\"Lease\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"100\",\"name\":\"query - 2\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"51px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'DHCP Activity Summary' pie chart to see 'DHCP Lease for Activity'\"},\"conditionalVisibility\":{\"parameterName\":\"Lease\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand isnotempty(SourceMACAddress)\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize Count = count() by SourceMACAddress\\r\\n| top 10 by Count desc\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 MAC Address\",\"showRefreshButton\":true,\"exportFieldName\":\"series\",\"exportParameterName\":\"Pie_MAC\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]},\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"100\",\"name\":\"query - 6\",\"styleSettings\":{\"padding\":\"53px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Top 10 MAC Address' pie chart to see 'Source IPs for MAC'\"},\"conditionalVisibility\":{\"parameterName\":\"Pie_MAC\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 15\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string, InfobloxSubnet: string,\\r\\nInfobloxRangeStart: string, InfobloxRangeEnd: string, InfobloxLeaseOp: string, InfobloxClientID: string,\\r\\nInfobloxDUID: string, InfobloxLifetime: string,InfobloxLeaseUUID: string, InfobloxFingerprintPr: string,\\r\\nInfobloxFingerprint: string ) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName),\\r\\nSourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress), InfobloxLeaseOp = trim(@\\\"\\\\s\\\", InfobloxLeaseOp)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName})) \\r\\nand InfobloxLeaseOp == ('{Lease}')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space})) and isnotempty(trim(@\\\"\\\\s\\\", InfobloxLeaseOp))\\r\\n| project-rename ['Date Time'] = TimeGenerated, ['DHCP Server'] = InfobloxHostID, ['Host Name'] = SourceHostName, ['MAC Address'] = SourceMACAddress, ['Source IP'] = SourceIP, ['Log Severity'] = LogSeverity, ['IP Space'] = name_s, ['Collector Host Name'] = CollectorHostName, ['Application Protocol'] = ApplicationProtocol, Subnet = InfobloxSubnet, ['Range Start'] = InfobloxRangeStart, ['Range End'] = InfobloxRangeEnd, ['Lease Op'] = InfobloxLeaseOp, ['Client ID'] = InfobloxClientID, Lifetime = InfobloxLifetime, ['Lease UUID'] = InfobloxLeaseUUID, FingerprintPr = InfobloxFingerprintPr, Fingerprint = InfobloxFingerprint\\r\\n| project ['Date Time'], ['DHCP Server'], ['Host Name'], ['MAC Address'], ['Source IP'], ['Log Severity'], Activity, ['IP Space'], Computer, ['Collector Host Name'], ['Application Protocol'], Subnet, ['Range Start'], ['Range End'], ['Lease Op'], ['Client ID'], Lifetime, ['Lease UUID'], FingerprintPr, Fingerprint\",\"size\":0,\"showAnalytics\":true,\"title\":\"DHCP Lease for Activity : {Lease}\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}],\"rowLimit\":10000,\"filter\":true}},\"customWidth\":\"100\",\"conditionalVisibility\":{\"parameterName\":\"Lease\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxLeaseOp: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand SourceMACAddress == ('{Pie_MAC}')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| make-series Hits = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by SourceIP\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Source IPs for MAC : {Pie_MAC}\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"showLegend\":true}},\"conditionalVisibility\":{\"parameterName\":\"Pie_MAC\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 14\",\"styleSettings\":{\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string) with (kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName),\\r\\nSourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress), SourceIP = trim(@\\\"\\\\s\\\", SourceIP)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\nand isnotempty(SourceIP)\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize Count=count() by SourceIP\\r\\n| top 10 by Count\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 IP Addresses\",\"showRefreshButton\":true,\"exportFieldName\":\"SourceIP\",\"exportParameterName\":\"SourceIP\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"name\":\"query - 3\",\"styleSettings\":{\"margin\":\"5px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Top 10 IP Addresses' grid to see 'Host for IP'\"},\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName),\\r\\nSourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress), SourceIP = trim(@\\\"\\\\s\\\", SourceIP)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName})) \\r\\nand SourceIP == ('{SourceIP}')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| summarize Count = count() by SourceHostName\",\"size\":3,\"showAnalytics\":true,\"title\":\"Host for IP : {SourceIP}\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 6\",\"styleSettings\":{\"padding\":\"52px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\" \\r\\nand DeviceProduct == \\\"Data Connector\\\" \\r\\nand DeviceEventClassID has_cs \\\"DHCP\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string, InfobloxSubnet: string, InfobloxRangeStart: string,\\r\\nInfobloxRangeEnd: string, InfobloxLeaseOp: string, InfobloxClientID: string, InfobloxDUID: string, InfobloxLifetime: string,\\r\\nInfobloxLeaseUUID: string, InfobloxFingerprintPr: string, InfobloxFingerprint: string ) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend InfobloxHostID = trim(@\\\"\\\\s\\\", InfobloxHostID), SourceHostName = trim(@\\\"\\\\s\\\", SourceHostName), SourceMACAddress = trim(@\\\"\\\\s\\\", SourceMACAddress)\\r\\n| where (('{DHCPServer:escapjson}') == \\\"*\\\" or InfobloxHostID in~ ({DHCPServer})) \\r\\nand (('{MAC:escapjson}') == \\\"*\\\" or SourceMACAddress in~ ({MAC})) \\r\\nand (('{HostName:escapjson}') == \\\"*\\\" or SourceHostName in~ ({HostName}))\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, IP_Space_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxIPSpace == $right.id_s \\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where (('{IP_Space:escapjson}') == \\\"*\\\" or name_s in~ ({IP_Space}))\\r\\n| project-rename ['Date Time'] = TimeGenerated, ['DHCP Server'] = InfobloxHostID, ['Host Name'] = SourceHostName, ['MAC Address'] = SourceMACAddress, ['Source IP'] = SourceIP, ['Log Severity'] = LogSeverity, ['IP Space'] = name_s, ['Collector Host Name'] = CollectorHostName, ['Application Protocol'] = ApplicationProtocol, Subnet = InfobloxSubnet, ['Range Start'] = InfobloxRangeStart, ['Range End'] = InfobloxRangeEnd, ['Lease Op'] = InfobloxLeaseOp, ['Client ID'] = InfobloxClientID, Lifetime = InfobloxLifetime, ['Lease UUID'] = InfobloxLeaseUUID, FingerprintPr = InfobloxFingerprintPr, Fingerprint = InfobloxFingerprint\\r\\n| project ['Date Time'], ['DHCP Server'], ['Host Name'], ['MAC Address'], ['Source IP'], ['Log Severity'], Activity, ['IP Space'], Computer, ['Collector Host Name'], ['Application Protocol'], Subnet, ['Range Start'], ['Range End'], ['Lease Op'], ['Client ID'], Lifetime, ['Lease UUID'], FingerprintPr, Fingerprint\",\"size\":0,\"showAnalytics\":true,\"title\":\"DHCP Lease\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"LogSeverity\",\"formatter\":4,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 0\",\"styleSettings\":{\"margin\":\"5\",\"padding\":\"5\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 14\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"2\"},\"name\":\"group - 5\",\"styleSettings\":{\"margin\":\"5px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"82320096-33a6-4d48-b64f-2c90aa564ed4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000}},{\"id\":\"00756d7d-b074-42e5-996e-4ffa6487606f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"UserName\",\"label\":\"User\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(SourceUserName)\\r\\n| distinct SourceUserName\\r\\n| sort by SourceUserName asc\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":1209600000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"3d2f3549-f5c5-4496-a013-f9b306321c75\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Action\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where isnotempty(DeviceAction) and (('{UserName:escapjson}') == \\\"*\\\" or SourceUserName in~ ({UserName}))\\r\\n| distinct DeviceAction\\r\\n| sort by DeviceAction asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":1209600000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string, InfobloxSubnet: string, InfobloxRangeStart: string, InfobloxRangeEnd: string, InfobloxLeaseOp: string, InfobloxClientID: string, InfobloxDUID: string, InfobloxLifetime: string, InfobloxLeaseUUID: string, InfobloxFingerprintPr: string, InfobloxFingerprint: string ) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where isnotempty(DeviceAction)\\r\\n| where (('{UserName:escapjson}') == \\\"*\\\" or SourceUserName in~ ({UserName})) \\r\\nand (('{Action:escapjson}') == \\\"*\\\" or DeviceAction in~ ({Action}))\\r\\n| project-rename Action = DeviceAction\\r\\n| summarize Count = count() by Action\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Types of Actions\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"series\",\"exportParameterName\":\"bar_Action\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Action\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Action\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Types of Actions' bar chart to see 'Top 10 User for Action' and 'Audit Logs for Action'\"},\"conditionalVisibility\":{\"parameterName\":\"bar_Action\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 4\"}],\"exportParameters\":true},\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where isnotempty(SourceUserName)\\r\\nand DeviceAction == ('{bar_Action}')\\r\\nand (('{UserName:escapjson}') == \\\"*\\\" or SourceUserName in~ ({UserName}))\\r\\n| project-rename User = SourceUserName, Action = DeviceAction\\r\\n| summarize Count = count() by User\\r\\n| top 10 by Count desc\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 User for Action : {bar_Action}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"series\",\"exportParameterName\":\"Pie_user\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"100\",\"conditionalVisibility\":{\"parameterName\":\"bar_Action\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 4\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"70px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Top 10 User for Action : {bar_Action}' pie chart to see 'Top 10 SourceIP for User'\"},\"conditionalVisibility\":{\"parameterName\":\"Pie_user\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"bar_Action\",\"comparison\":\"isNotEqualTo\"},\"name\":\"group - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\" \\r\\n    and DeviceAction == ('{bar_Action}')\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string, InfobloxSubnet: string,\\r\\nInfobloxHTTPReqBody: string, InfobloxResourceId: string, InfobloxResourceType: string, InfobloxHTTPRespBody: string, \\r\\nid: string, name: string, pool_id: string, service_type: string, InfobloxSubjectGroups: string, InfobloxRangeStart: string, \\r\\nInfobloxRangeEnd: string, InfobloxLeaseOp: string, InfobloxClientID: string, InfobloxDUID: string, InfobloxLifetime: string, \\r\\nInfobloxLeaseUUID: string, InfobloxFingerprintPr: string, InfobloxFingerprint: string ) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where (('{UserName:escapjson}') == \\\"*\\\" or SourceUserName in~ ({UserName}))\\r\\n| project-rename ['Date Time'] = TimeGenerated, User = SourceUserName, Action = DeviceAction, ['Source IP'] = SourceIP, ['Log Severity'] = LogSeverity, ['Infoblox Host ID'] = InfobloxHostID, ['Infoblox IP Space'] = InfobloxIPSpace, Subnet = InfobloxSubnet, ['HTTP Req Body'] = InfobloxHTTPReqBody, ['Resource Id'] = InfobloxResourceId, ['Resource Type'] = InfobloxResourceType, ['HTTP Resp Body'] = InfobloxHTTPRespBody, ['pool id'] = pool_id, ['service type'] = service_type, ['Subject Groups'] = InfobloxSubjectGroups, ['Range Start'] = InfobloxRangeStart, ['Range End'] = InfobloxRangeEnd, ['Lease Op'] = InfobloxLeaseOp, ['Client ID'] = InfobloxClientID, Lifetime = InfobloxLifetime, ['Lease UUID'] = InfobloxLeaseUUID, FingerprintPr = InfobloxFingerprintPr, Fingerprint = InfobloxFingerprint, DUID = InfobloxDUID, ['Application Protocol'] = ApplicationProtocol, ['Collector Host Name'] = CollectorHostName\\r\\n| project ['Date Time'], Action, Activity, User, ['Source IP'], ['Log Severity'], Computer, Message, ['Infoblox Host ID'], ['Infoblox IP Space'], Subnet, ['HTTP Req Body'], ['Resource Id'], ['Resource Type'], ['HTTP Resp Body'], id, name, ['pool id'], ['service type'], ['Subject Groups'], ['Range Start'], ['Range End'], ['Lease Op'], ['Client ID'], DUID, Lifetime, ['Lease UUID'], FingerprintPr, Fingerprint, ['Application Protocol'], ['Collector Host Name']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Audit Logs for Action : {bar_Action}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"bar_Action\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 3\",\"styleSettings\":{\"margin\":\"5px\",\"maxWidth\":\"50\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\" \\r\\n    and DeviceAction == ('{bar_Action}')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where SourceUserName == ('{Pie_user}') and DeviceAction == ('{bar_Action}')\\r\\n| summarize Count = count() by SourceIP\\r\\n| top 10 by Count desc\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 Source IP for User : {Pie_user}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"Pie_user\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 5\",\"styleSettings\":{\"padding\":\"49px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"Audit\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxHostID: string, InfobloxIPSpace: string, InfobloxSubnet: string,\\r\\nInfobloxHTTPReqBody: string, InfobloxResourceId: string, InfobloxResourceType: string, InfobloxHTTPRespBody: string,\\r\\nid: string, name: string, pool_id: string, service_type: string, InfobloxSubjectGroups: string, InfobloxRangeStart: string,\\r\\nInfobloxRangeEnd: string, InfobloxLeaseOp: string, InfobloxClientID: string, InfobloxDUID: string, InfobloxLifetime: string,\\r\\n InfobloxLeaseUUID: string, InfobloxFingerprintPr: string, InfobloxFingerprint: string ) with ( kv_delimiter=\\\"=\\\", pair_delimiter=\\\";\\\")\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceAction = trim(@\\\"\\\\s\\\", DeviceAction)\\r\\n| where (('{UserName:escapjson}') == \\\"*\\\" or SourceUserName in~ ({UserName})) \\r\\n  and (('{Action:escapjson}') == \\\"*\\\" or DeviceAction in~ ({Action}))\\r\\n| project-rename ['Date Time'] = TimeGenerated, User = SourceUserName, Action = DeviceAction, ['Source IP'] = SourceIP, ['Log Severity'] = LogSeverity, ['Infoblox Host ID'] = InfobloxHostID, ['Infoblox IP Space'] = InfobloxIPSpace, Subnet = InfobloxSubnet, ['HTTP Req Body'] = InfobloxHTTPReqBody, ['Resource Id'] = InfobloxResourceId, ['Resource Type'] = InfobloxResourceType, ['HTTP Resp Body'] = InfobloxHTTPRespBody, ['pool id'] = pool_id, ['service type'] = service_type, ['Subject Groups'] = InfobloxSubjectGroups, ['Range Start'] = InfobloxRangeStart, ['Range End'] = InfobloxRangeEnd, ['Lease Op'] = InfobloxLeaseOp, ['Client ID'] = InfobloxClientID, Lifetime = InfobloxLifetime, ['Lease UUID'] = InfobloxLeaseUUID, FingerprintPr = InfobloxFingerprintPr, Fingerprint = InfobloxFingerprint, DUID = InfobloxDUID, ['Application Protocol'] = ApplicationProtocol, ['Collector Host Name'] = CollectorHostName\\r\\n| project ['Date Time'], Action, Activity, User, ['Source IP'], ['Log Severity'], Computer, Message, ['Infoblox Host ID'], ['Infoblox IP Space'], Subnet, ['HTTP Req Body'], ['Resource Id'], ['Resource Type'], ['HTTP Resp Body'], id, name, ['pool id'], ['service type'], ['Subject Groups'], ['Range Start'], ['Range End'], ['Lease Op'], ['Client ID'], DUID, Lifetime, ['Lease UUID'], FingerprintPr, Fingerprint, ['Application Protocol'], ['Collector Host Name']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Audit Logs\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"LogSeverity\",\"formatter\":4,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 6\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"3\"},\"name\":\"group - 3\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"daee0513-3b57-4c4d-9052-7a92094a4036\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000},\"label\":\"Time Range\"},{\"id\":\"9f36e52f-3282-4976-9187-7b3f551d91e9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"User\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| where isnotempty(SourceUserName) and InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| summarize arg_max(TimeGenerated,*) by SourceUserName\\r\\n| distinct SourceUserName\\r\\n| sort by SourceUserName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2419200000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"8b364f17-07f7-4403-8086-26bf36c92536\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Asset\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| extend DeviceName = trim(@\\\"\\\\s\\\", DeviceName)\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend DeviceName = trim(@\\\"\\\\s\\\", DeviceName), SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(DeviceName) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) and InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| distinct DeviceName\\r\\n| sort by DeviceName desc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"cf61f3a4-fe90-4244-b94b-4aedc1210af9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Location\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string, InfobloxB1Region: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(Location) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| distinct Location\\r\\n| sort by Location asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2419200000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"e63dae9c-b8cf-4c02-9a7f-de990bfc4d1b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SLD\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) and InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where isnotempty(SecondLevelDomain)\\r\\n| distinct SecondLevelDomain\\r\\n| order by SecondLevelDomain\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2419200000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"aeb144ce-64b1-45ba-85d9-f0a2da9a69d3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DNSRecordType\",\"label\":\"DNS Record Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"DNS\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string, InfobloxDNSQType: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(InfobloxDNSQType) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) and InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| distinct InfobloxDNSQType\\r\\n| order by InfobloxDNSQType asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2419200000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"f67927b9-00eb-4a45-b9d0-4bde9ac74d86\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PolicyName\",\"label\":\"Policy Name\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\" \\r\\n    and DeviceProduct == \\\"Data Connector\\\" \\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxB1PolicyAction: string, InfobloxB1PolicyName: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName), SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName)\\r\\n| where isnotempty(InfobloxB1PolicyName) and (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) and InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| distinct InfobloxB1PolicyName\\r\\n| sort by InfobloxB1PolicyName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2419200000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string,\\r\\n    InfobloxB1PolicyName: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location}))\\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand isnotempty(SourceUserName) \\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count  = count() by User = SourceUserName\\r\\n| top 10 by Count\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Compromised Users\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 0 - Copy\",\"styleSettings\":{\"margin\":\"5px\",\"maxWidth\":\"33\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string, InfobloxB1PolicyName: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType}))\\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset}))\\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location}))\\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand isnotempty(DestinationDnsDomain)\\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count  = count() by DestinationDnsDomain\\r\\n| top 10 by Count\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 Blocked Domains\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]},\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"name\":\"query - 2\",\"styleSettings\":{\"margin\":\"5px\",\"padding\":\"49px\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string, InfobloxB1PolicyName: string, InfobloxRPZRule: string, InfobloxRPZ: string, InfobloxPolicyID: string, InfobloxDomainCat: string, InfobloxB1ConnectionType: string, InfobloxB1Network: string,InfobloxB1SrcOSVersion: string, InfobloxB1DNSTags:string, InfobloxB1ThreatIndicator: string, InfobloxB1FeedType: string, InfobloxThreatLevel:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User}))\\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType})) \\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset})) \\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location})) \\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count = count() by InfobloxRPZ\\r\\n| top 10 by Count\",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 10 Feeds, Filters\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10,\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"name\":\"query - 8\",\"styleSettings\":{\"padding\":\"52px\",\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\" \\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string, InfobloxB1PolicyName: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) \\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType})) \\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset})) \\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location})) \\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand isnotempty(DeviceName) \\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| summarize Count  = count() by Asset = DeviceName\\r\\n| top 10 by Count\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Compromised Assets\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"Asset\",\"exportParameterName\":\"DeviceName\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"customWidth\":\"100\",\"name\":\"query - 0\",\"styleSettings\":{\"margin\":\"5px\",\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 Click on 'Top 10 Malicious Assets' grid to see 'Overall Asset Details'\"},\"conditionalVisibility\":{\"parameterName\":\"DeviceName\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 1\"}],\"exportParameters\":true},\"customWidth\":\"50\",\"name\":\"group - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string,\\r\\n InfobloxB1PolicyName: string, InfobloxRPZRule: string, InfobloxPolicyID: string, InfobloxDomainCat: string,\\r\\n InfobloxB1ConnectionType: string, InfobloxB1Network: string,InfobloxB1SrcOSVersion: string, InfobloxB1DNSTags:string,\\r\\n  InfobloxB1ThreatIndicator: string, InfobloxB1FeedType: string, InfobloxThreatLevel:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) \\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType})) \\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset})) \\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location})) \\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand DeviceName == ('{DeviceName}')\\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| project-rename User = SourceUserName, Asset = DeviceName, ['Policy Action'] = InfobloxB1PolicyAction, ['Threat Level'] = InfobloxThreatLevel, ['Policy Name'] = InfobloxB1PolicyName, Severity = LogSeverity, ['Policy ID'] = InfobloxPolicyID, ['Connection Type'] = InfobloxB1ConnectionType, ['DNS Tags'] = InfobloxB1DNSTags, ['Feed Type'] = InfobloxB1FeedType,['Date Time'] = TimeGenerated, ['Source IP'] = SourceIP, ['Collector Host Name'] = CollectorHostName, ['Application Protocol'] = ApplicationProtocol, ['RPZ Rule'] = InfobloxRPZRule, ['Threat Indicator'] = InfobloxB1ThreatIndicator\\r\\n| project ['Date Time'], User, Asset, ['Source IP'], toint(Severity), Activity, Computer, toint(['Threat Level']), ['Collector Host Name'], ['Application Protocol'], ['RPZ Rule'], ['Policy Name'], ['Policy Action'], ['Policy ID'], Location, ['Connection Type'], ['DNS Tags'], ['Threat Indicator'], ['Feed Type']\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Overall Asset : {DeviceName} Details \",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Threat Level\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\">=\",\"thresholdValue\":\"80\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"<=\",\"thresholdValue\":\"29\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"orange\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"DeviceName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CommonSecurityLog\\r\\n| where DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"RPZ\\\"\\r\\n| parse-kv AdditionalExtensions as (InfobloxDNSQType:string, InfobloxB1Region:string, InfobloxB1PolicyAction: string,\\r\\n InfobloxB1PolicyName: string, InfobloxRPZRule: string, InfobloxPolicyID: string, InfobloxDomainCat: string,\\r\\n InfobloxB1ConnectionType: string, InfobloxB1Network: string,InfobloxB1SrcOSVersion: string, InfobloxB1DNSTags:string,\\r\\n  InfobloxB1ThreatIndicator: string, InfobloxB1FeedType: string, InfobloxThreatLevel:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| extend SourceUserName = trim(@\\\"\\\\s\\\", SourceUserName), DeviceName = trim(@\\\"\\\\s\\\", DeviceName),\\r\\n    Location = trim(@\\\"\\\\s\\\", InfobloxB1Region), DestinationDnsDomain = trim(@\\\"\\\\s\\\",DestinationDnsDomain),\\r\\n    InfobloxDNSQType = trim(@\\\"\\\\s\\\", InfobloxDNSQType), InfobloxB1PolicyName = trim(@\\\"\\\\s\\\",InfobloxB1PolicyName)\\r\\n| where (('{User:escapjson}') == \\\"*\\\" or SourceUserName in~ ({User})) \\r\\nand (('{DNSRecordType:escapjson}') == \\\"*\\\" or InfobloxDNSQType in~ ({DNSRecordType})) \\r\\nand (('{Asset:escapjson}') == \\\"*\\\" or DeviceName in~ ({Asset})) \\r\\nand (('{Location:escapjson}') == \\\"*\\\" or InfobloxB1Region in~ ({Location})) \\r\\nand (('{PolicyName:escapjson}') == \\\"*\\\" or InfobloxB1PolicyName in~ ({PolicyName}))\\r\\nand InfobloxB1PolicyAction contains \\\"Block\\\"\\r\\n| extend DestinationDnsDomain_ = trim_end(@'.',DestinationDnsDomain)\\r\\n| extend domains = split(DestinationDnsDomain_,'.')\\r\\n| extend SecondLevelDomain =strcat(domains[-2],'.',domains[-1])\\r\\n| extend SecondLevelDomain = trim(@\\\"\\\\s\\\",SecondLevelDomain)\\r\\n| where (('{SLD:escapjson}') == \\\"*\\\" or SecondLevelDomain in~ ({SLD}))\\r\\n| order by TimeGenerated\\r\\n| project-rename User = SourceUserName, Asset = DeviceName, ['Policy Action'] = InfobloxB1PolicyAction, ['Threat Level'] = InfobloxThreatLevel, ['Policy Name'] = InfobloxB1PolicyName, Severity = LogSeverity, ['Policy ID'] = InfobloxPolicyID, ['Connection Type'] = InfobloxB1ConnectionType, ['DNS Tags'] = InfobloxB1DNSTags, ['Feed Type'] = InfobloxB1FeedType,['Date Time'] = TimeGenerated, ['Source IP'] = SourceIP, ['Collector Host Name'] = CollectorHostName, ['Application Protocol'] = ApplicationProtocol, ['RPZ Rule'] = InfobloxRPZRule, ['Threat Indicator'] = InfobloxB1ThreatIndicator\\r\\n| project ['Date Time'], User, Asset, ['Source IP'], toint(Severity), Activity, Computer, toint(['Threat Level']), ['Collector Host Name'], ['Application Protocol'], ['RPZ Rule'], ['Policy Name'], ['Policy Action'], ['Policy ID'], Location, ['Connection Type'], ['DNS Tags'], ['Threat Indicator'], ['Feed Type']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Blocked DNS Requests\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"<=\",\"thresholdValue\":\"1\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"5\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"8\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Threat Level\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\">=\",\"thresholdValue\":\"80\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"<=\",\"thresholdValue\":\"29\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"orange\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Blocked\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"green\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 7\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"4\"},\"name\":\"group - 4\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This workbook depends on the **Infoblox-Get-Service-Name** and **Infoblox-Get-Host-Name** logic apps which are deployed with the Microsoft Sentinel Solution.</br>\\r\\nPlease configure this logic apps first and keep enabled in order to use this workbook.\",\"style\":\"info\"},\"name\":\"text - 3\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"19baf045-4606-49d8-8cb7-ef3ee9fed69a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000}},{\"id\":\"af60a861-3c2f-42a5-9045-295348fa5ac6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ServiceName\",\"label\":\"Service Name\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"Service\\\"\\r\\n    and isnotempty(AdditionalExtensions)\\r\\n| parse-kv AdditionalExtensions as (InfobloxServiceId:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, Service_Name_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxServiceId == $right.id_s\\r\\n| extend name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where isnotempty(name_s)\\r\\n| distinct name_s\\r\\n| order by name_s asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"796c7544-d2ff-42c6-a5c4-816298e72782\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"HostName\",\"label\":\"Host Name\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nlet dummy_table_2 = datatable(TimeGenerated: datetime, ophid_g: string, display_name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"Service\\\"\\r\\n    and isnotempty(AdditionalExtensions)\\r\\n| parse-kv AdditionalExtensions as (InfobloxLogName:string) with (pair_delimiter='|', kv_delimiter='=')\\r\\n| extend HostID = tostring(split(split(InfobloxLogName, ';')[0], '/')[0])\\r\\n| parse-kv LogSeverity as (InfobloxLogName:string) with (pair_delimiter=' ', kv_delimiter='=')\\r\\n| extend LogSeverityHostID = tostring(split(InfobloxLogName, '/')[0])\\r\\n| extend HostID = iif(isempty(HostID), LogSeverityHostID, HostID)\\r\\n| parse-kv AdditionalExtensions as (InfobloxServiceId:string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, Service_Name_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxServiceId == $right.id_s\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table_2, Host_Name_Info_CL | extend ophid_g = replace_string(ophid_g, '-', '') |where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by ophid_g) on $left.HostID == $right.ophid_g\\r\\n| extend HostName = trim(@\\\"\\\\s\\\", display_name_s), name_s = trim(@\\\"\\\\s\\\", name_s)\\r\\n| where isnotempty(HostName) and ('{ServiceName:escapejson}' == \\\"*\\\" or name_s in~ ({ServiceName}))\\r\\n| distinct HostName\\r\\n| order by HostName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, id_s: string, name_s: string) [];\\r\\nlet dummy_table_2 = datatable(TimeGenerated: datetime, ophid_g: string, display_name_s: string) [];\\r\\nCommonSecurityLog\\r\\n| where TimeGenerated {TimeRange:value}\\r\\n    and DeviceVendor == \\\"Infoblox\\\"\\r\\n    and DeviceProduct == \\\"Data Connector\\\"\\r\\n    and DeviceEventClassID has_cs \\\"Service\\\"\\r\\n    and isnotempty(AdditionalExtensions)\\r\\n| parse-kv AdditionalExtensions as (InfobloxLogName:string) with (pair_delimiter='|', kv_delimiter='=')\\r\\n| extend InfobloxLogName = split(split(InfobloxLogName, ';')[0], '/')\\r\\n| extend HostID = tostring(InfobloxLogName[0]), Process = tostring(InfobloxLogName[1])\\r\\n| parse-kv LogSeverity as (msg:string, InfobloxLogName:string) with (pair_delimiter=' ', kv_delimiter='=')\\r\\n| extend InfobloxLogName = split(InfobloxLogName, '/')\\r\\n| extend LogSeverityHostID = tostring(InfobloxLogName[0]),\\r\\n         LogSeverityProcess = tostring(InfobloxLogName[1]),\\r\\n         Message = split(iif(isempty(Message), msg , Message), '\\\"')[1]\\r\\n| extend Process = iif(isempty(Process), LogSeverityProcess, Process), HostID = iif(isempty(HostID), LogSeverityHostID, HostID)\\r\\n| parse-kv AdditionalExtensions as (InfobloxServiceId: string) with (pair_delimiter=';', kv_delimiter='=')\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table, Service_Name_Info_CL | where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by id_s) on $left.InfobloxServiceId == $right.id_s\\r\\n| join kind=leftouter(union isfuzzy=true dummy_table_2, Host_Name_Info_CL | extend ophid_g = replace_string(ophid_g, '-', '') |where TimeGenerated >= ago(365d) | summarize arg_max(TimeGenerated, *) by ophid_g) on $left.HostID == $right.ophid_g\\r\\n| extend ['Service Name'] = trim(@\\\"\\\\s\\\", name_s), ['Host Name'] = trim(@\\\"\\\\s\\\", display_name_s), ['Process Name'] = trim(@\\\"\\\\s\\\",Process)\\r\\n| where ('{ServiceName:escapejson}' == \\\"*\\\" or ['Service Name'] in~ ({ServiceName}))\\r\\nand ('{HostName:escapejson}' == \\\"*\\\" or ['Host Name'] in~ ({HostName}))\\r\\n| project-rename ['Date Time'] = TimeGenerated\\r\\n| project ['Date Time'], ['Service Name'], ['Process Name'], ['Host Name'], Message\",\"size\":0,\"showAnalytics\":true,\"title\":\"Service Log Data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"5\"},\"name\":\"group - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This data connector depends on parsers based on Kusto Functions to work as expected called **InfobloxInsight, InfobloxInsightEvents, InfobloxInsightAssets, InfobloxInsightIndicators, **and **InfobloxInsightComments** which are deployed with the Microsoft Sentinel Solution.\",\"style\":\"info\"},\"name\":\"text - 15\",\"styleSettings\":{\"padding\":\"0 0 20px 0\"}},{\"type\":1,\"content\":{\"json\":\"# Infoblox SOC Insights Workbook\\r\\n\\r\\n##### Get a closer look at your Infoblox SOC Insights. \\r\\n\\r\\nThis workbook is intended to help visualize your [BloxOne SOC Insights](https://csp.infoblox.com/#/insights-console/insights/open/threats) data as part of the **Infoblox SOC Insight Solution**. Drilldown your data and visualize events, trends, and anomalous changes over time.\\r\\n\\r\\n---\\r\\n\"},\"name\":\"text - 3\",\"styleSettings\":{\"margin\":\"0 0 20px 0\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(InfobloxInsightID: string, FirstSeen: datetime, ThreatClass: string, ThreatProperty: string, ThreatType: string, FeedSource: string, Priority: string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\nInfobloxInsight\\r\\n| distinct InfobloxInsightID, FirstSeen, ThreatClass, ThreatProperty, ThreatType, FeedSource, Priority\\r\\n| extend isConfigIssue = iff((ThreatClass has_cs (\\\"CONFIGURATIONISSUE\\\")), \\\"Configuration\\\", \\\"Threats\\\")\\r\\n| summarize count() by isConfigIssue\",\"size\":3,\"title\":\"Insight Types\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"MEDIUM\",\"color\":\"orange\"},{\"seriesName\":\"CRITICAL\",\"color\":\"pink\"},{\"seriesName\":\"INFO\",\"color\":\"blue\"},{\"seriesName\":\"LOW\",\"color\":\"yellow\"},{\"seriesName\":\"HIGH\",\"color\":\"red\"}]}},\"customWidth\":\"50\",\"name\":\"Insight Types\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(InfobloxInsightID: string, Priority: string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\nInfobloxInsight\\r\\n| summarize dcount(InfobloxInsightID) by Priority\",\"size\":3,\"title\":\"Priority\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"MEDIUM\",\"color\":\"orange\"},{\"seriesName\":\"CRITICAL\",\"color\":\"purple\"},{\"seriesName\":\"INFO\",\"color\":\"blue\"},{\"seriesName\":\"LOW\",\"color\":\"yellow\"},{\"seriesName\":\"HIGH\",\"color\":\"red\"},{\"seriesName\":\"N/A\",\"color\":\"gray\"}]}},\"customWidth\":\"50\",\"name\":\"Priority\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(InfobloxInsightID: string, FirstSeen: datetime, ThreatClass: string, ThreatProperty: string, ThreatType: string, FeedSource: string, Priority: string, Status: string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\nInfobloxInsight\\r\\n| distinct Status, InfobloxInsightID, FirstSeen, ThreatClass, ThreatProperty, ThreatType, FeedSource, Priority\\r\\n| summarize count() by ThreatProperty\",\"size\":3,\"title\":\"Threat Families\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"MEDIUM\",\"color\":\"orange\"},{\"seriesName\":\"CRITICAL\",\"color\":\"pink\"},{\"seriesName\":\"INFO\",\"color\":\"blue\"},{\"seriesName\":\"LOW\",\"color\":\"yellow\"},{\"seriesName\":\"HIGH\",\"color\":\"red\"}]}},\"customWidth\":\"50\",\"name\":\"Threat Families\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(InfobloxInsightID: string, FirstSeen: datetime, ThreatClass: string, ThreatProperty: string, ThreatType: string, FeedSource: string, Priority: string, Status: string) [];\\r\\nunion isfuzzy=true dummy_table,\\r\\nInfobloxInsight\\r\\n| distinct Status, InfobloxInsightID, FirstSeen, ThreatClass, ThreatProperty, ThreatType, FeedSource, Priority\\r\\n| summarize count() by ThreatType\",\"size\":3,\"title\":\"Threat Classes\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"50\",\"name\":\"Threat Classes\"}]},\"name\":\"Overall\"},{\"type\":1,\"content\":{\"json\":\"## Using this Workbook\\r\\nTo make use of this workbook, you must ingest Infoblox SOC Insight data into Sentinel in one or both ways:\\r\\n- Deploy the **Infoblox SOC Insights Data Connector** and forward CEF syslog via the Microsoft forwarding agent.\\r\\n- Deploy the **Infoblox-SOC-Get-Open-Insights-API** playbook.\\r\\n\\r\\nYou can use one or both at the same time, but beware of duplicate data!\\r\\n\\r\\nConfigure the **Analytic Queries** that come with this Microsoft Sentinel Solution. They will add the Insights as Incidents, so you can easily track and run playbooks on them.\\r\\n\\r\\nThen, once you have some Insights, run the **Infoblox-SOC-Get-Insight-Details** playbook to get all the gritty details. If you wish, you can then run **Infoblox-SOC-Import-Indicators-TI** to ingest each Indicator of an Insight into Sentinel as **Threat Intelligence**.\\r\\n\\r\\n## Run playbooks directly from this workbook!\\r\\n\\r\\n#### Set the **Resource Group**, [**Tenant ID**](https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant) and **Playbook** to run when clicking on the **Run Playbook** in the SOC Insight Incidents table below.\\r\\n\\r\\n**Infoblox-SOC-Get-Insight-Details** pulls all the details about each individual Insight. \\r\\n\\r\\n**Infoblox-SOC-Import-Indicators-TI** pushes each Indicator of the Insight into Sentinel as **Threat Intelligence**. You must run the **Infoblox-SOC-Get-Insight-Details** *before* running **Infoblox-SOC-Import-Indicators-TI**.\\r\\n\\r\\nYou will need to run the playbooks for each Insight/Incident. You can do that manually within this workbook with the **Run Playbook** button in the table below, from the **Incidents** blade, or configure them to run automatically with **Analytics**. \\r\\n\\r\\nAfter running **Infoblox-SOC-Get-Insight-Details** on an Insight, **click on it in the table below** to see the details.\\r\\n\\r\\n**You can rerun playbooks on Insights** that already contain data to get the most recent. \",\"style\":\"upsell\"},\"name\":\"text - 15\",\"styleSettings\":{\"padding\":\"0 0 5px 0\"}},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"e8613f2c-08c6-49e6-a2c6-e12d185c6bd3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ResourceTypes\",\"label\":\"Resource Types\",\"type\":7,\"description\":\"This parameter must be set to Logic app.\",\"isRequired\":true,\"isGlobal\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"isHiddenWhenLocked\":true,\"typeSettings\":{\"includeAll\":true,\"showDefault\":false},\"value\":[\"microsoft.logic/workflows\"]},{\"id\":\"4a15b858-69b6-4198-abfd-6af5f187d813\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SentinelResourceGroup\",\"label\":\"Incidents Resource Group\",\"type\":2,\"isRequired\":true,\"isGlobal\":true,\"query\":\"Resources\\r\\n| where type in~ ({ResourceTypes})\\r\\n| summarize Count = count() by subscriptionId, resourceGroup\\r\\n| order by Count desc\\r\\n| extend Rank = row_number()\\r\\n| project resourceGroup\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"7783c2b4-a6e6-4117-92ec-a9a751f01465\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspace\",\"type\":5,\"isRequired\":true,\"isGlobal\":true,\"query\":\"where type =~ \\\"microsoft.operationalinsights/workspaces\\\"\\r\\n| where resourceGroup =~ \\\"{SentinelResourceGroup}\\\"\",\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":\"\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"0a92b010-8b48-4601-872f-83e13561b088\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscription\",\"type\":6,\"isRequired\":true,\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat(\\\"/subscriptions/\\\", subscriptionId), label = subscriptionId\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"63c75027-cc56-4958-9296-e0c986ab11e0\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PlaybookResourceGroup\",\"label\":\"Playbook Resource Group\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| where type in~ ({ResourceTypes})\\r\\n| summarize Count = count() by subscriptionId, resourceGroup\\r\\n| order by Count desc\\r\\n| extend Rank = row_number()\\r\\n| project resourceGroup\",\"crossComponentResources\":[\"{Subscription}\"],\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"3c6d99b2-1eb1-4650-a3f0-d48dc03f87cb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TenantID\",\"label\":\"Tenant ID\",\"type\":1,\"isRequired\":true,\"value\":\"\"},{\"id\":\"e1ea6f58-cd1b-4807-a7de-7da91b787bd4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PlaybookName\",\"label\":\"Playbook\",\"type\":5,\"description\":\"Set the playbook to run when clicking on the \\\"Run Playbook\\\" in the SOC Insight Incidents table below.\",\"isRequired\":true,\"query\":\"Resources\\r\\n| where type in~({ResourceTypes})\\r\\n| extend resourceGroupId = strcat('/subscriptions/', subscriptionId, '/resourceGroups/', resourceGroup)\\r\\n| where resourceGroup =~ \\\"{PlaybookResourceGroup}\\\"// or '*' in~({PlaybookResourceGroup})\\r\\n| order by name asc\\r\\n| extend Rank = row_number()\\r\\n| project label = tostring(name)\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":\"Infoblox-SOC-Get-Insight-Details\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 0 - Copy\"},{\"type\":1,\"content\":{\"json\":\"#### Click on **SOC Insight Incident** below to view more information.\",\"style\":\"upsell\"},\"name\":\"text - 15\",\"styleSettings\":{\"padding\":\"15px 0 0 0\"}},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"103f5c4e-6007-46c3-88ed-74fdb7843acc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000}]},\"value\":{\"durationMs\":2592000000}},{\"id\":\"7c4c6733-a2d8-40b1-abf5-7f2d777e814c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SelectPriority\",\"label\":\"Priority\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"N/A\\\"},\\r\\n    { \\\"value\\\":\\\"INFO\\\"},\\r\\n    { \\\"value\\\":\\\"LOW\\\"},\\r\\n    { \\\"value\\\":\\\"MEDIUM\\\"},\\r\\n    { \\\"value\\\":\\\"HIGH\\\"},\\r\\n     { \\\"value\\\":\\\"CRITICAL\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"3e3ee805-c983-480e-9c10-49a47be4ddc6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Status\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityIncident\\r\\n| where CreatedTime {TimeRange:value}\\r\\n| distinct Status\\r\\n| sort by Status asc\",\"crossComponentResources\":[\"{Workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"1c79577f-a4f2-4b2a-aaa7-fbcc5e27831d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Owner\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityIncident\\r\\n| where CreatedTime {TimeRange:value}\\r\\n| where Status in ({Status})\\r\\n| project Owner=tostring(Owner.userPrincipalName)\\r\\n| sort by Owner asc\\r\\n| extend Owner = iff(isnotempty( Owner), Owner, \\\"Unassigned\\\")\\r\\n| distinct Owner\",\"crossComponentResources\":[\"{Workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 19 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let x =\\r\\nSecurityIncident\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| extend IncidentID = IncidentName\\r\\n| extend IncidentNumber = toint(IncidentNumber)\\r\\n| where tostring(Owner.userPrincipalName) in ({Owner}) or (isempty(tostring(Owner.userPrincipalName)) and \\\"Unassigned\\\" in ({Owner}))\\r\\n| extend RunPlaybook = \\\"Run Playbook\\\"\\r\\n| where Title has_cs \\\"Infoblox - SOC Insight\\\"\\r\\n| extend Labels = tostring(Labels)\\r\\n| extend InfobloxInsightID = extract(\\\"InfobloxInsightID: (.*?)\\\\\\\"\\\", 1, Labels)\\r\\n| join \\r\\n    (InfobloxInsight\\r\\n    | summarize arg_max(TimeGenerated, *) by InfobloxInsightID\\r\\n    ) on InfobloxInsightID\\r\\n//sometimes duplicate TimeGenerated so grab LastSeen next\\r\\n| summarize arg_max(LastSeen, *) by IncidentNumber\\r\\n| project IncidentNumber, Severity, Priority, ThreatType, ThreatClass, ThreatFamily, LastSeen, FirstSeen, FeedSource, EventsCount, NotBlockedCount, BlockedCount, PersistentDate, SpreadingDate, InfobloxInsightID\\r\\n; \\r\\nlet incidents =\\r\\nSecurityIncident\\r\\n| summarize arg_max(TimeGenerated,*) by tostring(IncidentNumber)\\r\\n| extend IncidentID = IncidentName\\r\\n| extend IncidentNumber = toint(IncidentNumber)\\r\\n| where tostring(Owner.userPrincipalName) in ({Owner}) or (isempty(tostring(Owner.userPrincipalName)) and \\\"Unassigned\\\" in ({Owner}))\\r\\n| extend RunPlaybook = \\\"Run Playbook\\\"\\r\\n| where Title has_cs \\\"Infoblox - SOC Insight\\\"\\r\\n| extend Alerts = extract(\\\"\\\\\\\\[(.*?)\\\\\\\\]\\\", 1, tostring(AlertIds))\\r\\n| mv-expand AlertIds to typeof(string)\\r\\n//----------------\\r\\n;\\r\\nlet alerts =\\r\\n    SecurityAlert\\r\\n    | extend AlertEntities = parse_json(Entities)\\r\\n    //| extend InfobloxInsightID = tostring(AlertEntities.ObjectGuid)\\r\\n;\\r\\nincidents | join alerts on $left.AlertIds == $right.SystemAlertId\\r\\n//----------------------\\r\\n| summarize AlertCount=dcount(AlertIds) by IncidentNumber, IncidentID, Status, Title,  Alerts, IncidentUrl, Owner=tostring(Owner.userPrincipalName) , RunPlaybook\\r\\n// -------------\\r\\n| join kind=inner (incidents | join alerts on $left.AlertIds == $right.SystemAlertId) on IncidentNumber\\r\\n| join kind=fullouter x on IncidentNumber\\r\\n| summarize arg_max(TimeGenerated,*) by (IncidentNumber)\\r\\n//| where Priority in ({SelectPriority}) or '{SelectPriority:label}' ==  \\\"All\\\"\\r\\n| where Status in ({Status}) or '{Status:label}' ==  \\\"All\\\"\\r\\n| project IncidentNumber, Severity, Priority, Title, Status, Owner, IncidentUrl, RunPlaybook, ThreatType, ThreatClass, ThreatFamily, LastSeen, FirstSeen, FeedSource, EventsCount, NotBlockedCount, BlockedCount, PersistentDate, SpreadingDate, InfobloxInsightID, IncidentID\\r\\n//| project-away IncidentID\\r\\n| order by toint(IncidentNumber) desc\\r\\n\",\"size\":0,\"title\":\"SOC Insight Incidents\",\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"InfobloxInsightID\",\"parameterName\":\"InfobloxInsightID\",\"parameterType\":1},{\"fieldName\":\"IncidentID\",\"parameterName\":\"IncidentID\",\"parameterType\":1},{\"fieldName\":\"Title\",\"parameterName\":\"Title\",\"parameterType\":1}],\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Informational\",\"representation\":\"Sev4\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"representation\":\"unknown\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Priority\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"INFO\",\"representation\":\"blue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"LOW\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"MEDIUM\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"HIGH\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"CRITICAL\",\"representation\":\"purple\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"New\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Active\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"representation\":\"blue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Owner\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"IncidentUrl\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open Incident\"}},{\"columnMatch\":\"RunPlaybook\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"ArmAction\",\"linkIsContextBlade\":true,\"armActionContext\":{\"path\":\"/subscriptions/{Subscription:id}/resourceGroups/{PlaybookResourceGroup:label}/providers/Microsoft.OperationalInsights/workspaces/{Workspace:label}/providers/Microsoft.SecurityInsights/incidents/{IncidentID}/runPlaybook?api-version=2019-01-01-preview\",\"body\":\"{\\r\\n \\\"LogicAppsResourceId\\\":\\\"/subscriptions/{Subscription:id}/resourceGroups/{PlaybookResourceGroup:label}/providers/Microsoft.Logic/workflows/{PlaybookName:label}\\\",\\r\\n \\\"tenantId\\\":\\\"{TenantID}\\\"\\r\\n}\",\"httpMethod\":\"POST\",\"description\":\"# Actions can potentially modify resources.\\n## Please use caution and include a confirmation message in this description when authoring this command.\"}},\"tooltipFormat\":{\"tooltip\":\"Run {PlaybookName} on this insight.\"}},{\"columnMatch\":\"EventsCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"NotBlockedCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"BlockedCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"InsightDataReady\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Data Not Found\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Ready\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"gray\",\"text\":\"{0}{1}\"}]},\"tooltipFormat\":{\"tooltip\":\"To see data for this insight, run the  Infoblox-SOC-API-Get-Insight-Details playbook.\"}},{\"columnMatch\":\"isPopulated\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Ready\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Data Not Found\",\"representation\":\"redBright\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]},\"tooltipFormat\":{\"tooltip\":\"To see data about this Insight, run the Infoblox-SOC-API-Get-Insight-Details Playbook.\"}},{\"columnMatch\":\"Alerts\",\"formatter\":5},{\"columnMatch\":\"AlertCount\",\"formatter\":0,\"formatOptions\":{\"aggregation\":\"Sum\"}},{\"columnMatch\":\"Entities\",\"formatter\":1},{\"columnMatch\":\"alertCount\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"redBright\"}},{\"columnMatch\":\"count_AlertCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"greenRed\"}}],\"rowLimit\":500,\"filter\":true}},\"name\":\"IncidentDetailsView\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"46b4abc5-316b-4c75-89b7-5cf134d6dbb0\",\"cellValue\":\"view\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Summary\",\"subTarget\":\"Summary\",\"style\":\"link\"},{\"id\":\"81661594-3591-4fe6-a67d-b69ae55abf67\",\"cellValue\":\"view\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Assets\",\"subTarget\":\"Assets\",\"preText\":\"IPs\",\"style\":\"link\"},{\"id\":\"46ca603b-ead0-46bd-987d-1d157b2a763a\",\"cellValue\":\"view\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Indicators\",\"subTarget\":\"Indicators\",\"style\":\"link\"},{\"id\":\"f2ce2fdb-104a-447f-b42b-6d11931a09ff\",\"cellValue\":\"view\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Events\",\"subTarget\":\"Events\",\"style\":\"link\"},{\"id\":\"03782b90-e744-4654-95c3-a1056cfe78f9\",\"cellValue\":\"view\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Comments\",\"subTarget\":\"Comments\",\"style\":\"link\"}]},\"conditionalVisibility\":{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"},\"name\":\"links - 16\",\"styleSettings\":{\"padding\":\"20px 0 20px 0\"}},{\"type\":1,\"content\":{\"json\":\"#### Click on **SOC Insight Incident** above to view more information.\",\"style\":\"upsell\"},\"conditionalVisibility\":{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 14\",\"styleSettings\":{\"padding\":\"10px 0 10px 0\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## {Title}\"},\"name\":\"text - 8\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"list\",\"links\":[{\"id\":\"5c15d5ff-4108-4538-930b-201f4f8da870\",\"cellValue\":\"https://csp.infoblox.com/#/insights-console/insight/{InfobloxInsightID}/summary\",\"linkTarget\":\"Url\",\"linkLabel\":\"Redirect To Summary on CSP\",\"preText\":\"\",\"style\":\"link\"}]},\"name\":\"links - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(LastSeen)\\r\\n| extend format_datetime(todatetime(FirstSeen), 'M/dd/yyyy, h:mm:ss tt')\\r\\n| extend FirstSeen = strcat(tostring(FirstSeen), \\\" UTC\\\")\\r\\n| project FirstSeen\",\"size\":3,\"title\":\"First Seen\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"FirstSeen\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"red\"}},\"showBorder\":false,\"size\":\"auto\"}},\"customWidth\":\"25\",\"name\":\"First Seen\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(LastSeen)\\r\\n| extend format_datetime(todatetime(LastSeen), 'M/dd/yyyy, h:mm:ss tt')\\r\\n| extend LastSeen = strcat(tostring(LastSeen), \\\" UTC\\\")\\r\\n| project LastSeen\",\"size\":3,\"title\":\"Last Seen \",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"LastSeen\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"red\"}},\"showBorder\":false,\"size\":\"auto\"}},\"customWidth\":\"25\",\"name\":\"Last Seen\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(SpreadingDate)\\r\\n| extend format_datetime(todatetime(SpreadingDate), 'M/dd/yyyy, h:mm:ss tt')\\r\\n| extend SpreadingDate = strcat(tostring(SpreadingDate), \\\" UTC\\\")\\r\\n| project SpreadingDate\",\"size\":3,\"title\":\"Spreading Date\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"SpreadingDate\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"red\"}},\"showBorder\":false,\"size\":\"auto\"}},\"customWidth\":\"25\",\"name\":\"Spreading Date\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(PersistentDate)\\r\\n| extend format_datetime(todatetime(PersistentDate), 'M/dd/yyyy, h:mm:ss tt')\\r\\n| extend PersistentDate = strcat(tostring(PersistentDate), \\\" UTC\\\")\\r\\n| project PersistentDate\",\"size\":3,\"title\":\"Persistent Date\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"PersistentDate\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"red\"}},\"showBorder\":false,\"size\":\"auto\"}},\"customWidth\":\"25\",\"name\":\"Persistent Date\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(BlockedCount)\\r\\n| project BlockedCount\",\"size\":3,\"title\":\"Blocked Hits\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"BlockedCount\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"green\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Blocked Hits\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(NotBlockedCount)\\r\\n| project NotBlockedCount\",\"size\":3,\"title\":\"Not Blocked Hits\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"leftContent\":{\"columnMatch\":\"NotBlockedCount\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"red\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Not Blocked Hits\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsight\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize arg_max(TimeGenerated, *)\\r\\n| where isnotempty(EventsCount)\\r\\n| project EventsCount\\r\\n\",\"size\":3,\"title\":\"Total Hits\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"EventsCount\",\"formatter\":12,\"formatOptions\":{\"min\":-1,\"palette\":\"gray\"}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"Total Hits\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\n// Finding Tops \\r\\nlet Top = materialize(InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(Lookback)\\r\\n| where isnotempty(SourceIP)\\r\\n| summarize count() by SourceIP\\r\\n| top 20 by count_ \\r\\n| project SourceIP);\\r\\n// Filtering datasource to Tops and Plot Time chart\\r\\nInfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(Lookback)\\r\\n| where SourceIP in ((Top))\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| make-series Total= count() default = 0 on Detected from ago(Lookback) to now() step 1d by SourceIP\\r\\n\",\"size\":0,\"title\":\"Top 20 Compromised Assets\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"barchart\",\"chartSettings\":{\"createOtherGroup\":15,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Top Impacted IPs\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\n// Finding Tops \\r\\nlet Top = materialize(InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(Lookback)\\r\\n| where isnotempty(ThreatIndicator)\\r\\n| summarize count() by ThreatIndicator\\r\\n| top 20 by count_ \\r\\n| project ThreatIndicator);\\r\\n// Filtering datasource to Tops and Plot Time chart\\r\\nInfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(Lookback)\\r\\n| where ThreatIndicator in ((Top))\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, ThreatIndicator, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| make-series Total= count() default = 0 on Detected from ago(Lookback) to now() step 1d by ThreatIndicator\\r\\n\",\"size\":0,\"title\":\"Top 20 Indicators\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"barchart\",\"chartSettings\":{\"createOtherGroup\":15,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Top 20 Indicators\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\n// Finding Tops \\r\\nlet Top = materialize(InfobloxInsightEvents\\r\\n| where Detected >= ago(Lookback)\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where isnotempty(DestinationDnsDomain)\\r\\n| summarize count() );\\r\\n// Filtering datasource to Tops and Plot Time chart\\r\\nInfobloxInsightEvents\\r\\n| where Detected >= ago(Lookback)\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| make-series Total= count() default = 0 on Detected from ago(Lookback) to now() step 1d\",\"size\":0,\"title\":\"Events\",\"color\":\"amethyst\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"areachart\"},\"customWidth\":\"33\",\"name\":\"Events\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"view\",\"comparison\":\"isEqualTo\",\"value\":\"Summary\"},{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"Summary\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Assets\\r\\n---\\r\\nSee your protected assets/devices affected by this insight. **Install the Infoblox Endpoint client for more accurate data.**\"},\"name\":\"text - 6\"},{\"type\":1,\"content\":{\"json\":\"#### Click on **Asset** below to view more information.\",\"style\":\"upsell\"},\"name\":\"text - 7\",\"styleSettings\":{\"margin\":\"15px 0 15px 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| join\\r\\n(\\r\\n    InfobloxInsightAssets\\r\\n    | summarize arg_max(TimeGenerated, *) by SourceIP, SourceUserName, SourceMACAddress, InfobloxB1SrcOSVersion\\r\\n) on SourceIP\\r\\n| order by LastSeen, EventCount desc\\r\\n| project-rename User = SourceUserName, ['MAC Address'] = SourceMACAddress, ['OS Version'] = InfobloxB1SrcOSVersion, Network = InfobloxB1Network, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint\\r\\n| project SourceIP, User, ['MAC Address'], ['OS Version'], DeviceName, Network,['DHCP Fingerprint'], Location, EventCount, IndicatorDistinctCount, LastSeen, FirstSeen\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"showAnalytics\":true,\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"SourceIP\",\"exportParameterName\":\"SourceIP\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"EventCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"IndicatorDistinctCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"purpleBlue\"}}],\"rowLimit\":500,\"filter\":true,\"labelSettings\":[{\"columnId\":\"EventCount\",\"label\":\"Associated Events\"},{\"columnId\":\"IndicatorDistinctCount\",\"label\":\"Associated Indicators\"}]}},\"name\":\"Assets\",\"styleSettings\":{\"margin\":\"0 0 20px 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where SourceIP == '{SourceIP}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| order by Detected desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Events for {SourceIP}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true}},\"customWidth\":\"75\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Events for {SourceIP}\",\"styleSettings\":{\"margin\":\"0 60px 0 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where SourceIP == '{SourceIP}'\\r\\n| where isnotempty(ThreatIndicator)\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize count() by ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, ThreatIndicator, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| summarize Count = count() by ThreatIndicator\\r\\n| order by Count desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Indicators for {SourceIP}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Count\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}}],\"rowLimit\":500,\"filter\":true}},\"customWidth\":\"25\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\" Indicators for {SourceIP}\",\"styleSettings\":{\"margin\":\"0 15px 0 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\nInfobloxInsightEvents\\r\\n| where SourceIP == '{SourceIP}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected > ago(30d)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| make-series Trend = count() default = 0 on Detected from ago(Lookback) to now() step 1d by ThreatLevel\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Level Trend for {SourceIP}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true},\"chartSettings\":{\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"N/A\",\"color\":\"turquoise\"},{\"seriesName\":\"Info\",\"color\":\"lightBlue\"},{\"seriesName\":\"Low\",\"color\":\"yellow\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"High\",\"color\":\"red\"}]}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Threat Level Trend for {SourceIP}\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\nInfobloxInsightEvents\\r\\n| where SourceIP == '{SourceIP}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected > ago(30d)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| make-series Trend = count() default = 0 on Detected from ago(Lookback) to now() step 1d by InfobloxB1PolicyAction\",\"size\":0,\"showAnalytics\":true,\"title\":\"Action Trend for {SourceIP}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"timechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true},\"chartSettings\":{\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"N/A\",\"color\":\"turquoise\"},{\"seriesName\":\"Block\",\"color\":\"green\"},{\"seriesName\":\"Not Blocked\",\"color\":\"red\"},{\"seriesName\":\"Log\",\"color\":\"blue\"}]}},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Action Trend for {SourceIP}\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\nInfobloxInsightEvents\\r\\n| where SourceIP == '{SourceIP}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected > ago(30d)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| make-series Events = count() default = 0 on Detected from ago(Lookback) to now() step 1d\",\"size\":0,\"title\":\"All Events for {SourceIP}\",\"color\":\"amethyst\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"areachart\"},\"customWidth\":\"33\",\"conditionalVisibility\":{\"parameterName\":\"SourceIP\",\"comparison\":\"isNotEqualTo\"},\"name\":\"All Events for {SourceIP}\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"view\",\"comparison\":\"isEqualTo\",\"value\":\"Assets\"},{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"Assets\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Indicators\\r\\n---\\r\\nAn **Indicator** is a domain or IP address that is seen in the resolution chain of a query from a device.\\r\\n\\r\\n\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightIndicators\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where isnotempty(InfobloxB1PolicyAction)\\r\\n| summarize count_distinct(ThreatIndicator) by InfobloxB1PolicyAction\",\"size\":3,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"Not Blocked\",\"color\":\"red\"},{\"seriesName\":\"Blocked\",\"color\":\"green\"}]}},\"customWidth\":\"50\",\"name\":\"query - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightIndicators\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where isnotempty(ThreatIndicator)\\r\\n| summarize count_distinct(ThreatIndicator) by ThreatLevel\",\"size\":3,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"red\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"Low\",\"color\":\"yellow\"},{\"seriesName\":\"Info\",\"color\":\"blue\"},{\"seriesName\":\"N/A\",\"color\":\"gray\"}]}},\"customWidth\":\"50\",\"name\":\"query - 8 - Copy\"},{\"type\":1,\"content\":{\"json\":\"#### Click on **Indicator** below to view more information.\",\"style\":\"upsell\"},\"name\":\"text - 7\",\"styleSettings\":{\"padding\":\"15px 0 15px 0\"}},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspace}\"],\"parameters\":[{\"id\":\"5b2e1804-a9a6-4b86-8a6e-27fd0ab029b5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ThreatLevelParam\",\"label\":\"Threat Level\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"InfobloxInsightIndicators\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct ThreatLevel\",\"crossComponentResources\":[\"{Workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e36bc3c2-b85e-478c-968b-7faf79c21c49\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"InfobloxB1PolicyActionParam\",\"label\":\"Action\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"InfobloxInsightIndicators\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct InfobloxB1PolicyAction\",\"crossComponentResources\":[\"{Workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 6 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let AssetCount = (InfobloxInsightIndicators\\r\\n| summarize arg_max(TimeGenerated, *), count_distinct(SourceMACAddress) by ThreatIndicator, InfobloxB1PolicyAction\\r\\n| join kind=inner\\r\\n(\\r\\nInfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"66b112e0-3187-4faa-9357-d229e98002ca\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by SourceIP, ThreatIndicator\\r\\n) on $left.InfobloxInsightID == $right.InfobloxInsightID\\r\\n| where ThreatIndicator1 has_cs ThreatIndicator\\r\\n| summarize by SourceIP, ThreatIndicator\\r\\n| summarize ['Unique Asset Count'] = count() by ThreatIndicator);\\r\\n\\r\\n\\r\\nInfobloxInsightIndicators\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where isnotempty(ThreatIndicator)\\r\\n| where InfobloxB1PolicyAction in ({InfobloxB1PolicyActionParam}) or '{InfobloxB1PolicyActionParam:label}' ==  \\\"All\\\"\\r\\n| where ThreatLevel in ({ThreatLevelParam}) or '{ThreatLevelParam:label}' ==  \\\"All\\\"\\r\\n| join\\r\\n    (\\r\\n        AssetCount\\r\\n    ) on ThreatIndicator\\r\\n| summarize arg_max(TimeGenerated, *), count_distinct(SourceMACAddress) by ThreatIndicator, InfobloxB1PolicyAction\\r\\n| extend URL = strcat(\\\"https://csp.infoblox.com/#/security_research/search/auto/\\\", ThreatIndicator, \\\"/summary\\\")\\r\\n| extend sort_order = case(\\r\\n    ThreatLevel == \\\"High\\\", 5,\\r\\n    ThreatLevel == \\\"Medium\\\", 4,\\r\\n    ThreatLevel == \\\"Low\\\", 3,\\r\\n    ThreatLevel == \\\"N/A\\\", 2,\\r\\n    1 // default case if ThreatLevel doesn't match any of the above\\r\\n)\\r\\n| order by sort_order, EventCount desc\\r\\n| project-away sort_order\\r\\n| project-rename ['Policy Action'] = InfobloxB1PolicyAction, ['Feed Name'] = InfobloxB1FeedName\\r\\n| project ThreatIndicator, ['Unique Asset Count'], ['Policy Action'], ThreatLevel, ThreatConfidence, ['Feed Name'], ThreatActor, LastSeen, FirstSeen, EventCount, URL\\r\\n\\r\\n\",\"size\":0,\"showAnalytics\":true,\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"ThreatIndicator\",\"exportParameterName\":\"ThreatIndicator\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Blocked\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Blocked\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"EventCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Investigate in Dossier\"}},{\"columnMatch\":\"SourceIPDistinctCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"bluePurple\"}}],\"rowLimit\":500,\"filter\":true,\"labelSettings\":[{\"columnId\":\"EventCount\",\"label\":\"Associated Events\"},{\"columnId\":\"URL\",\"label\":\"Investigate in Dossier\"}]}},\"name\":\"Indicators\",\"styleSettings\":{\"margin\":\"0 15px 0 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where ThreatIndicator has_cs '{ThreatIndicator}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| join\\r\\n(\\r\\n    InfobloxInsightAssets\\r\\n    | summarize arg_max(TimeGenerated, *) by SourceIP, SourceUserName, SourceMACAddress, InfobloxB1SrcOSVersion\\r\\n) on SourceIP\\r\\n| order by LastSeen, EventCount desc\\r\\n| project-rename User = SourceUserName, ['MAC Address'] = SourceMACAddress, ['Source OSVersion'] = InfobloxB1SrcOSVersion, Network = InfobloxB1Network, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint\\r\\n| summarize by SourceIP, User, ['MAC Address'], ['Source OSVersion'], DeviceName, Network, ['DHCP Fingerprint'], Location, EventCount, IndicatorDistinctCount, LastSeen, FirstSeen\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Assets for {ThreatIndicator}\",\"noDataMessage\":\"Select an Indicator in the above chart to see details.\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"EventCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"}},{\"columnMatch\":\"IndicatorDistinctCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"purpleBlue\"}}],\"rowLimit\":500,\"filter\":true}},\"customWidth\":\"70\",\"conditionalVisibility\":{\"parameterName\":\"ThreatIndicator\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Assets for {ThreatIndicator}\",\"styleSettings\":{\"margin\":\"0 20px 0 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\n// Finding Tops \\r\\nlet Top = materialize(InfobloxInsightEvents\\r\\n| where Detected >= ago(Lookback)\\r\\n| where ThreatIndicator has_cs '{ThreatIndicator}'\\r\\n| where isnotempty(DestinationDnsDomain)\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| summarize count() by SourceIP\\r\\n| top 500 by count_ \\r\\n);\\r\\n// Filtering datasource to Tops and Plot Time chart\\r\\nInfobloxInsightEvents\\r\\n| where Detected >= ago(Lookback)\\r\\n| where ThreatIndicator has_cs '{ThreatIndicator}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where SourceIP in ((Top))\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| make-series Total= count() default = 0 on Detected from ago(Lookback) to now() step 1d by SourceIP\",\"size\":0,\"showAnalytics\":true,\"title\":\"Source IPs for {ThreatIndicator}\",\"color\":\"amethyst\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"barchart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true},\"chartSettings\":{\"createOtherGroup\":15}},\"customWidth\":\"30\",\"conditionalVisibility\":{\"parameterName\":\"ThreatIndicator\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Source IPs for {ThreatIndicator}\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where Detected >= ago(30d)\\r\\n| where ThreatIndicator has_cs '{ThreatIndicator}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| project-rename User = SourceUserName, ['MAC Address'] = SourceMACAddress, ['Query Type'] = InfobloxDNSQType, ['Policy Name'] = InfobloxB1PolicyName, ['Policy Action'] = InfobloxB1PolicyAction, Network = InfobloxB1Network, FeedName = InfobloxB1FeedName, ['Source OSVersion'] = InfobloxB1SrcOSVersion, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint, ['Date Time'] = TimeGenerated\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, ['Query Type'], ThreatClass, User, DeviceName, SourceIP, ThreatProperty, ['Policy Name'], ['Policy Action'], Network, DNSResponse, DNSView, FeedName, ['MAC Address'], ['Source OSVersion'], ['DHCP Fingerprint'], ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| order by Detected desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Events for {ThreatIndicator}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true,\"sortBy\":[{\"itemKey\":\"SourceIP\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"SourceIP\",\"sortOrder\":2}]},\"customWidth\":\"70\",\"conditionalVisibility\":{\"parameterName\":\"ThreatIndicator\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Events for {ThreatIndicator}\",\"styleSettings\":{\"margin\":\"0 20px 0 0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Lookback = 30d;\\r\\nInfobloxInsightEvents\\r\\n| where Detected >= ago(Lookback)\\r\\n| where ThreatIndicator has_cs '{ThreatIndicator}'\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, SourceUserName, DeviceName, SourceIP, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion\\r\\n| make-series Trend = count() default = 0 on Detected from ago(Lookback) to now() step 1d by InfobloxB1PolicyAction\",\"size\":0,\"showAnalytics\":true,\"title\":\"Action Trend for {ThreatIndicator}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"timechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":500,\"filter\":true},\"chartSettings\":{\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"N/A\",\"color\":\"gray\"},{\"seriesName\":\"Block\",\"color\":\"green\"},{\"seriesName\":\"Allow - No Log\",\"color\":\"red\"},{\"seriesName\":\"Log\",\"color\":\"lightBlue\"}]}},\"customWidth\":\"30\",\"conditionalVisibility\":{\"parameterName\":\"ThreatIndicator\",\"comparison\":\"isNotEqualTo\"},\"name\":\"Action Trend for {ThreatIndicator}\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"view\",\"comparison\":\"isEqualTo\",\"value\":\"Indicators\"},{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"Indicators\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Events\\r\\n---\\r\\nDNS security events associated with this insight.\\r\\n\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(ThreatLevel)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by ThreatLevel\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Threat Level\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"red\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"Low\",\"color\":\"yellow\"},{\"seriesName\":\"Info\",\"color\":\"lightBlue\"},{\"seriesName\":\"N/A\",\"color\":\"gray\"}]}},\"customWidth\":\"33\",\"name\":\"Threat Level\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(ThreatClass)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by ThreatClass\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Threat Classes\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Threat Classes\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(ThreatProperty)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by ThreatProperty\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Threat Families\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Threat Families\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by SourceUserName\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Users\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Users\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where isnotempty(DeviceName)\\r\\n| where Detected >= ago(30d)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by DeviceName\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Device Names\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Device Names\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(SourceIP)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by SourceIP\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Source IPs\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Source IPs\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(InfobloxB1Network)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by InfobloxB1Network\",\"size\":4,\"title\":\"Sources\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Sources\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(InfobloxB1PolicyName)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by InfobloxB1PolicyName\",\"size\":4,\"title\":\"Policies\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Policies\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(InfobloxB1PolicyAction)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by InfobloxB1PolicyAction\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Actions\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"Block\",\"color\":\"green\"},{\"seriesName\":\"Log\",\"color\":\"lightBlue\"},{\"seriesName\":\"Allow - No Log\",\"color\":\"red\"}]}},\"customWidth\":\"33\",\"name\":\"Actions\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(DNSResponse)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by DNSResponse\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"DNS Responses\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"DNS Responses\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(DeviceRegion)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by DeviceRegion\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Device Regions\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Device Regions\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| where isnotempty(DeviceCountry)\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, InfobloxDNSQType, ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, InfobloxB1PolicyName, InfobloxB1PolicyAction, InfobloxB1Network, DNSResponse, DNSView, InfobloxB1FeedName, SourceMACAddress, InfobloxB1SrcOSVersion, InfobloxB1DHCPFingerprint, ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| summarize Count = count() by DeviceCountry\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":4,\"title\":\"Device Countries\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"showMetrics\":false,\"showLegend\":true,\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"red\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"Low\",\"color\":\"yellow\"},{\"seriesName\":\"Info\",\"color\":\"lightBlue\"},{\"seriesName\":\"N/A\",\"color\":\"gray\"}]}},\"customWidth\":\"33\",\"name\":\"Device Countries\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightEvents\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| where Detected >= ago(30d)\\r\\n| project-rename ['Query Type'] = InfobloxDNSQType, ['Policy Name'] = InfobloxB1PolicyName, ['Policy Action'] = InfobloxB1PolicyAction, Network = InfobloxB1Network, FeedName = InfobloxB1FeedName, ['Source OSVersion'] = InfobloxB1SrcOSVersion, ['DHCP Fingerprint'] = InfobloxB1DHCPFingerprint\\r\\n| distinct ThreatLevel, ThreatConfidence, Detected, DestinationDnsDomain, ['Query Type'], ThreatClass, SourceUserName, DeviceName, SourceIP, ThreatProperty, ['Policy Name'], ['Policy Action'], Network, DNSResponse, DNSView, FeedName, SourceMACAddress, ['Source OSVersion'], ['DHCP Fingerprint'], ResponseRegion, ResponseCountry, DeviceRegion, DeviceCountry\\r\\n| order by Detected desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Events\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatLevel\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"N/A\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"InfobloxB1PolicyAction\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"Allow\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Block\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"Events\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"view\",\"comparison\":\"isEqualTo\",\"value\":\"Events\"},{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"Events\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"InfobloxInsightComments\\r\\n| where InfobloxInsightID == \\\"{InfobloxInsightID}\\\"\\r\\n| distinct  CommentChanger, Comment, DateChanged, Status\\r\\n| order by DateChanged desc\\r\\n| project-rename ['Date Time'] = DateChanged, User = CommentChanger\\r\\n| project ['Date Time'], Status, User, Comment\",\"size\":0,\"title\":\"Comments\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"name\":\"Comments\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"view\",\"comparison\":\"isEqualTo\",\"value\":\"Comments\"},{\"parameterName\":\"InfobloxInsightID\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"Comments\"},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 17\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"6\"},\"name\":\"group - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"This Config Insights depends on the **Infoblox-Config-Insights** and **InfoBlox-Config-Insight-Details** logic apps which are deployed with the Microsoft Sentinel Solution.</br>\\r\\nPlease configure this logic apps first and keep it enabled in order to use this Config Insight Details Dashboard.\\r\\n\",\"style\":\"info\"},\"name\":\"text - 4\"},{\"type\":1,\"content\":{\"json\":\"# Infoblox Config Insights\"},\"name\":\"text - 5\"},{\"type\":1,\"content\":{\"json\":\"## Steps to view Config Insights Details using this workbook\\r\\n- This workbook is intended to view the available config insights and view their details.\\r\\n- Select the **Resource Group** and **Subscription ID**.\\r\\n- Select TimeRange.\\r\\n- From the **Config Insights** panel, select any config Insight.\\r\\n- You will be able to see the config details of the selected Insight.\\r\\n- If there is message like **The query returned no results** on config details panel, then click on the **GET CONFIG INSIGHT DETAILS** link to get the Config Insight Details for that Config Insight.\\r\\n- This will execute the **InfoBlox-Config-Insight-Details** logic app in the background.\\r\\n- You can check the status of the playbook to identify the Config Insight Details status.\\r\\n- Click on the refresh button of the lookup panel until you get the Config Insight Details.\\r\\n</br>\\r\\n</br>\\r\\n**Note** : In cases where specific indicators may not have lookup information available in Infoblox, users are advised to refer to the Logic App status for further details.\\r\\n\",\"style\":\"upsell\"},\"name\":\"text - 3\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"7783c2b4-a6e6-4117-92ec-a9a751f01465\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SubscriptionId\",\"label\":\"Subscription ID\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| distinct subscriptionId\",\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"4a15b858-69b6-4198-abfd-6af5f187d813\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SentinelResourceGroup1\",\"label\":\"Resource Group\",\"type\":2,\"isRequired\":true,\"query\":\"Resources\\r\\n| summarize Count = count() by subscriptionId, resourceGroup\\r\\n| where subscriptionId == ('{SubscriptionId}')\\r\\n| order by Count desc\\r\\n| extend Rank = row_number()\\r\\n| project resourceGroup\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":\"\"},{\"id\":\"f70e5d0e-2eff-4bca-9489-90ab64378887\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000}],\"allowCustom\":false},\"value\":{\"durationMs\":1209600000},\"label\":\"Time Range\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, policyAnalyticsId_g:string) [];\\r\\nunion isfuzzy = true\\r\\ndummy_table,\\r\\nInfoblox_Config_Insights_CL\\r\\n| summarize arg_max(TimeGenerated, *) by policyAnalyticsId_g\\r\\n| extend ConfigInsightDetails = \\\"GET CONFIG INSIGHT DETAILS\\\"\\r\\n| project-rename ['Date Time'] = TimeGenerated\\r\\n| project ['Date Time'],\\r\\n['Policy Analytics ID'] = policyAnalyticsId_g,\\r\\n['Insight Type'] = column_ifexists(\\\"insightType_s\\\",\\\"\\\"),\\r\\n[\\\"Config Insight Details\\\"] = column_ifexists(\\\"ConfigInsightDetails\\\",\\\"\\\")\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Config Insights\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"exportFieldName\":\"Policy Analytics ID\",\"exportParameterName\":\"ConfigInsightId\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Config Insight Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"ArmAction\",\"linkIsContextBlade\":true,\"armActionContext\":{\"path\":\"/subscriptions/{SubscriptionId}/resourceGroups/{SentinelResourceGroup1}/providers/Microsoft.Logic/workflows/InfoBlox-Config-Insight-Details/triggers/manual/run?api-version=2016-10-01\",\"body\":\"{\\r\\n  \\\"config_insight_id\\\": \\\"{ConfigInsightId}\\\"\\r\\n}\",\"httpMethod\":\"POST\",\"description\":\"# Actions can potentially modify resources.\\n## Please use caution and include a confirmation message in this description when authoring this command.\"}}}],\"rowLimit\":10000,\"sortBy\":[{\"itemKey\":\"Policy Analytics ID\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Policy Analytics ID\",\"sortOrder\":1}]},\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let dummy_table = datatable(TimeGenerated: datetime, analyticInsightId_g:string, feeds_s:string) [];\\r\\nunion isfuzzy = true\\r\\ndummy_table,\\r\\nInfoblox_Config_Insight_Details_CL\\r\\n| where analyticInsightId_g == \\\"{ConfigInsightId}\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by analyticInsightId_g\\r\\n| extend ParsedJson = parse_json(feeds_s)\\r\\n| mv-expand ParsedJson\\r\\n| project-rename ['Date Time'] = TimeGenerated\\r\\n| project ['Date Time'], \\r\\n['Insight Type'] = insightType_s,\\r\\n['Rule Type'] = ParsedJson.ruleType, \\r\\n['Rule Name'] = ParsedJson.ruleName, \\r\\n['Feed Name'] = ParsedJson.feedName, \\r\\n['Current Action'] = ParsedJson.currentAction, \\r\\n['Recommended Action'] = ParsedJson.recommendedAction, \\r\\n['Status'] = ParsedJson.status\",\"size\":0,\"showAnalytics\":true,\"title\":\"Config Insights Detail for Config ID: {ConfigInsightId}\",\"timeContextFromParameter\":\"TimeRange\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"ConfigInsightId\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 2\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"8\"},\"name\":\"group - 16\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Subscription}\"],\"parameters\":[{\"id\":\"a4b4e975-fa7c-46a3-b669-850aacc88134\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Help\",\"label\":\"Guide\",\"type\":10,\"isRequired\":true,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\": \\\"Yes\\\", \\\"label\\\": \\\"Yes\\\", \\\"selected\\\":true},\\r\\n    {\\\"value\\\": \\\"No\\\", \\\"label\\\": \\\"No\\\"}\\r\\n]\"},{\"id\":\"e6ded9a1-a83c-4762-938d-5bf8ff3d3d38\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscription\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat(\\\"/subscriptions/\\\", subscriptionId), label = subscriptionId\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":[\"value::all\"]},{\"id\":\"e3225ed0-6210-40a1-b2d0-66e42ffa71d6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspace\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"resources\\r\\n| where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| order by name asc\\r\\n| summarize Selected = makelist(id, 10), All = makelist(id, 1000)\\r\\n| mvexpand All limit 100\\r\\n| project value = tostring(All), label = tostring(All), selected = iff(Selected contains All, true, false)\",\"crossComponentResources\":[\"{Subscription}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":[\"value::all\"]},{\"id\":\"15b2c181-7397-43c1-900a-28e175ae8a6f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":86400000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":604800000}],\"allowCustom\":true},\"timeContextFromParameter\":\"TimeRange\",\"label\":\"Time Range\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"Parameter Selectors\"},{\"type\":1,\"content\":{\"json\":\"<svg viewBox=\\\"0 0 19 19\\\" width=\\\"20\\\" class=\\\"fxt-escapeShadow\\\" role=\\\"presentation\\\" focusable=\\\"false\\\" xmlns:svg=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" aria-hidden=\\\"true\\\"><g><path fill=\\\"#1b93eb\\\" d=\\\"M16.82 8.886c0 4.81-5.752 8.574-7.006 9.411a.477.477 0 01-.523 0C8.036 17.565 2.18 13.7 2.18 8.886V3.135a.451.451 0 01.42-.419C7.2 2.612 6.154.625 9.5.625s2.3 1.987 6.8 2.091a.479.479 0 01.523.419z\\\"></path><path fill=\\\"url(#0024423711759027356)\\\" d=\\\"M16.192 8.99c0 4.392-5.333 7.947-6.483 8.575a.319.319 0 01-.418 0c-1.15-.732-6.483-4.183-6.483-8.575V3.762a.575.575 0 01.313-.523C7.2 3.135 6.258 1.357 9.4 1.357s2.2 1.882 6.274 1.882a.45.45 0 01.419.418z\\\"></path><path d=\\\"M9.219 5.378a.313.313 0 01.562 0l.875 1.772a.314.314 0 00.236.172l1.957.284a.314.314 0 01.174.535l-1.416 1.38a.312.312 0 00-.09.278l.334 1.949a.313.313 0 01-.455.33l-1.75-.92a.314.314 0 00-.292 0l-1.75.92a.313.313 0 01-.455-.33L7.483 9.8a.312.312 0 00-.09-.278L5.977 8.141a.314.314 0 01.174-.535l1.957-.284a.314.314 0 00.236-.172z\\\" class=\\\"msportalfx-svg-c01\\\"></path></g></svg>&nbsp;<span style=\\\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\\\"> Please take time to answer a quick survey,\\r\\n</span>[<span style=\\\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\\\"> click here. </span>](https://forms.office.com/r/n9beey85aP)\"},\"name\":\"Survey\"},{\"type\":1,\"content\":{\"json\":\"# [Threat Intelligence](https://docs.microsoft.com/azure/sentinel/understand-threat-intelligence)\\n---\\n\\nWithin a Security Information and Event Management (SIEM) solution like Microsoft Sentinel, the most commonly used form of CTI is threat indicators, also known as Indicators of Compromise or IoCs. Threat indicators are data that associate observed artifacts such as URLs, file hashes, or IP addresses with known threat activity such as phishing, botnets, or malware. This form of threat intelligence is often called tactical threat intelligence because it can be applied to security products and automation in large scale to detect potential threats to an organization and protect against them. In Microsoft Sentinel, you can use threat indicators to help detect malicious activity observed in your environment and provide context to security investigators to help inform response decisions. [Video Demo](https://youtu.be/4Bet2oVODow)\\n\"},\"customWidth\":\"79\",\"conditionalVisibility\":{\"parameterName\":\"Help\",\"comparison\":\"isEqualTo\",\"value\":\"Yes\"},\"name\":\"Workbook Overview\"},{\"type\":1,\"content\":{\"json\":\"![Image Name](https://azure.microsoft.com/svghandler/azure-sentinel?width=600&height=315) \"},\"customWidth\":\"20\",\"conditionalVisibility\":{\"parameterName\":\"Help\",\"comparison\":\"isEqualTo\",\"value\":\"Yes\"},\"name\":\"Microsoft Sentinel Logo\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"18c690d7-7cbd-46c1-b677-1f72692d40cd\",\"cellValue\":\"TAB\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Indicators Ingestion\",\"subTarget\":\"Indicators\",\"preText\":\"Alert rules\",\"style\":\"link\"},{\"id\":\"f88dcf47-af98-4684-9de3-1ee5f48f68fc\",\"cellValue\":\"TAB\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Indicators Search\",\"subTarget\":\"Observed\",\"style\":\"link\"}]},\"name\":\"Tabs link\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Select all indicators from the table\\r\\n// Create a new column to identify the type of indicator, IP, Domain, URL, File, or Other\\r\\n| extend IndicatorType = iif(isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkIP) or isnotempty(NetworkSourceIP) or isnotempty(NetworkCidrBlock), \\\"IP\\\",\\r\\n                        iff(isnotempty(Url), \\\"URL\\\",\\r\\n                        iff(isnotempty(EmailRecipient) or isnotempty(EmailSenderAddress), \\\"Email\\\",\\r\\n                        iff(isnotempty(FileHashValue), \\\"File\\\",\\r\\n                         iff(isnotempty(DomainName) or isnotempty(EmailSourceDomain), \\\"Domain\\\",\\r\\n                        \\\"Other\\\")))))\\r\\n// Summarize and order the data, then render the chart\\r\\n| summarize CountOfIndicators = count() by IndicatorType, bin(TimeGenerated, 1h)\\r\\n| order by CountOfIndicators desc \\r\\n| render barchart kind=stacked \",\"size\":0,\"showAnalytics\":true,\"title\":\"Indicators Imported into Sentinel by Indicator Type and Date\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Select all indicators from the table\\r\\n// Summarize and order the data, then render the chart\\r\\n| summarize CountOfIndicators = count() by SourceSystem, bin(TimeGenerated, 1h)\\r\\n| render barchart kind=stacked\",\"size\":0,\"showAnalytics\":true,\"title\":\"Indicators Imported into Sentinel by Indicator Provider and Date\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Select all indicators from the table\\r\\n| where TimeGenerated < now()\\r\\n// Select only indicators that have not expired\\r\\n    and ExpirationDateTime > now()\\r\\n// Select only indicators that are marked active\\r\\n    and Active == true\\r\\n// Select only the most recently ingested copy of an indicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n// Create a new column to identify the type of indicator, IP, Domain, URL, File, or Other\\r\\n| extend IndicatorType = iif(isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkIP) or isnotempty(NetworkSourceIP) or isnotempty(NetworkCidrBlock), \\\"IP\\\",\\r\\n                        iff(isnotempty(Url), \\\"URL\\\",\\r\\n                        iff(isnotempty(EmailRecipient) or isnotempty(EmailSenderAddress), \\\"Email\\\",\\r\\n                        iff(isnotempty(FileHashValue), \\\"File\\\",\\r\\n                         iff(isnotempty(DomainName) or isnotempty(EmailSourceDomain), \\\"Domain\\\",\\r\\n                        \\\"Other\\\")))))\\r\\n// Summarize and order the data, then render the chart\\r\\n| summarize CountOfIndicators = count() by IndicatorType\\r\\n| order by CountOfIndicators desc \\r\\n| render barchart kind=unstacked\",\"size\":0,\"showAnalytics\":true,\"title\":\"Active Indicators by Indicator Type\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Select all indicators from the table\\r\\n| where TimeGenerated < now()\\r\\n// Select only indicators that have not expired\\r\\n    and ExpirationDateTime > now()\\r\\n// Select only indicators that are marked active\\r\\n    and Active == true\\r\\n// Select only the most recently ingested copy of an indicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n// Summarize and order the data, then render the chart\\r\\n| summarize CountOfIndicators = count() by SourceSystem\\r\\n| order by CountOfIndicators desc \\r\\n| render barchart kind=unstacked\",\"size\":0,\"showAnalytics\":true,\"title\":\"Active Indicators by Indicator Source\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 7\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Select all indicators from the table\\r\\n| where TimeGenerated < now()\\r\\n// Select only indicators that have not expired\\r\\n    and ExpirationDateTime > now()\\r\\n// Select only indicators that are marked active\\r\\n    and Active == true\\r\\n// Select only the most recently ingested copy of an indicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n// Summarize and order the data, then render the chart\\r\\n| summarize CountOfIndicators = count() by tostring(ConfidenceScore)\\r\\n| order by CountOfIndicators desc \\r\\n| render piechart\",\"size\":0,\"showAnalytics\":true,\"title\":\"Active Indicators by Confidence Score\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 10\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let DomainQuery=view() { \\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(DomainName)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by DomainName\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"DomainEntry\\\"\\r\\n};\\r\\nlet UrlQuery=view(){\\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(Url)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by Url\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"UrlEntry\\\"\\r\\n};\\r\\nlet FileHashQuery=view(){\\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(FileHashValue)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by FileHashValue\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"FileHashEntry\\\"\\r\\n};\\r\\nlet IPQuery=view(){\\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(NetworkIP) or isnotempty(NetworkSourceIP)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by NetworkIP, NetworkSourceIP\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"IPEntry\\\"\\r\\n};\\r\\nlet EmailAddressQuery=view(){\\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(EmailSenderAddress)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by EmailSenderAddress\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"EmailAddressEntry\\\"\\r\\n};\\r\\nlet EmailMessageQuery=view(){\\r\\nThreatIntelligenceIndicator\\r\\n| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n| where isnotempty(EmailSubject)\\r\\n| summarize SourceSystemArray=make_set(SourceSystem) by EmailSubject\\r\\n| summarize count() by tostring(SourceSystemArray)\\r\\n| project SourceSystemArray, count_, EntryType=\\\"EmailMessageEntry\\\"\\r\\n};\\r\\nlet SingleSourceIndicators=view(){\\r\\n    DomainQuery\\r\\n    | union UrlQuery\\r\\n    | union FileHashQuery\\r\\n    | union IPQuery\\r\\n    | union EmailAddressQuery\\r\\n    | union EmailMessageQuery\\r\\n    | where array_length(todynamic(SourceSystemArray))==1\\r\\n    | summarize sum(count_) by SourceSystemArray\\r\\n    | extend counter=1 \\r\\n};\\r\\nlet MultipleSourceIndicators=view(){\\r\\n    DomainQuery\\r\\n    | union UrlQuery\\r\\n    | union FileHashQuery\\r\\n    | union IPQuery\\r\\n    | union EmailAddressQuery\\r\\n    | union EmailMessageQuery\\r\\n    | where array_length(todynamic(SourceSystemArray))!=1\\r\\n    | summarize sum(count_) by SourceSystemArray\\r\\n    | extend counter=1\\r\\n};\\r\\nlet CountOfActiveIndicatorsBySource=view(){\\r\\n    ThreatIntelligenceIndicator\\r\\n\\t| summarize arg_max(TimeGenerated, *) by IndicatorId\\r\\n    | where ExpirationDateTime > now() and Active == true\\r\\n    | summarize count() by SourceSystem\\r\\n    | project SourceSystem, count_\\r\\n};\\r\\nSingleSourceIndicators\\r\\n| join kind=fullouter MultipleSourceIndicators on counter \\r\\n| where SourceSystemArray contains todynamic(SourceSystemArray)[0] \\r\\n| order by SourceSystemArray\\r\\n| extend solitary_count=sum_count_\\r\\n| summarize shared_count = sum(sum_count_1) by SourceSystemArray, solitary_count\\r\\n| extend total_count = shared_count + solitary_count\\r\\n| extend unique_percentage = round(toreal(solitary_count)/toreal(total_count)*100, 1)\\r\\n| extend IndicatorSource = tostring(todynamic(SourceSystemArray)[0])\\r\\n| join kind=inner CountOfActiveIndicatorsBySource on $left.IndicatorSource == $right.SourceSystem\\r\\n| order by unique_percentage desc\\r\\n| project Source=IndicatorSource, UniquenessPercentage=unique_percentage, ActiveIndicators = count_\\r\\n\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Uniqueness of Threat Intelligence Sources\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Source\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"View\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"ActiveIndicators\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}],\"filter\":true}},\"customWidth\":\"50\",\"name\":\"query - 12\"},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 6\"}]},\"conditionalVisibility\":{\"parameterName\":\"TAB\",\"comparison\":\"isEqualTo\",\"value\":\"Indicators\"},\"name\":\"Indicators Ingestion\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9aec751b-07bd-43ba-80b9-f711887dce45\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Indicator\",\"label\":\"Search Indicator in Events\",\"type\":1,\"value\":\"\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"Threat Research Parameters\"},{\"type\":1,\"content\":{\"json\":\"\"},\"customWidth\":\"50\",\"name\":\"text - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//Add additional lines for desired data columns\\r\\nunion withsource= Table_Name *\\r\\n| where column_ifexists('CallerIpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileOriginUrl', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FQDN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('InitiatingProcessSHA256', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IPAddresses', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IPAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Name', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RemoteIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RemoteUrl', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RecipientEmailAddress', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('SenderMailFromAddress', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('SourceIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Url', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SrcIpAddr', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DstIpAddr', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkSourceIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileHashValue', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkDestinationIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('EmailSourceIpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('EmailSenderAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DomainName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AADEmail', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Account', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountUpn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountUPN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Caller', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('CompromisedEntity', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationUserID', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DisplayName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Email_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FullyQualifiedSubjectUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('InitiatingProcessAccountUpn', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('MailboxOwnerUPN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Owner', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RequesterUpn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceIdentity', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceUserID', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SubjectUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('TargetUser', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('TargetUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Upn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('User_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserId', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('UserId_', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserId_s_s', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('userName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserName', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('UserName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('userPrincipalName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserPrincipalName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserPrincipalName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Computer', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileHash', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FilePath', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Process', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('CommandLine', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NewProcessName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('ParentProcessName', '') has \\\"{Indicator}\\\"\\r\\n| summarize count() by Table_Name \\r\\n| project-rename ['Data Table']=Table_Name, ['Logs Count']=count_\\r\\n| sort by ['Logs Count'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Indicators Observed\",\"noDataMessage\":\"No indicators observed within these thresholds\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"Type\",\"exportParameterName\":\"Type\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Data Table\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Log\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Logs Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}}],\"filter\":true}},\"customWidth\":\"50\",\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//Add additional lines for desired data columns\\r\\nunion withsource= Table_Name *\\r\\n| where column_ifexists('CallerIpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileOriginUrl', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FQDN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('InitiatingProcessSHA256', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IPAddresses', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('IPAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Name', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RemoteIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RemoteUrl', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RecipientEmailAddress', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('SenderMailFromAddress', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('SourceIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Url', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SrcIpAddr', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DstIpAddr', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkSourceIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileHashValue', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NetworkDestinationIP', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('EmailSourceIpAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('EmailSenderAddress', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DomainName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AADEmail', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Account', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountUpn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('AccountUPN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Caller', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('CompromisedEntity', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationUserID', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DestinationUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('DisplayName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Email_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FullyQualifiedSubjectUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('InitiatingProcessAccountUpn', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('MailboxOwnerUPN', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Owner', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('RequesterUpn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceIdentity', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceUserID', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SourceUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('SubjectUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('TargetUser', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('TargetUserName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Upn', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('User_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserId', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('UserId_', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserId_s_s', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('userName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserName', '') has \\\"{Indicator}\\\" \\r\\nor column_ifexists('UserName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('userPrincipalName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserPrincipalName_s', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('UserPrincipalName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Computer', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FileHash', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('FilePath', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('Process', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('CommandLine', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('NewProcessName', '') has \\\"{Indicator}\\\"\\r\\nor column_ifexists('ParentProcessName', '') has \\\"{Indicator}\\\"\\r\\n| make-series count() default=0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step 1d by Type\\r\\n| render areachart\",\"size\":0,\"showAnalytics\":true,\"title\":\"Indicators Observed over Time\",\"noDataMessage\":\"No indicators observed within these thresholds\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Data Table\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"Log\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Logs Count\",\"formatter\":4,\"formatOptions\":{\"palette\":\"redBright\"}}],\"filter\":true}},\"customWidth\":\"50\",\"name\":\"query - 4 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let tiObservables = ThreatIntelligenceIndicator\\r\\n    | where TimeGenerated < now()\\r\\n    | project IndicatorId, ThreatType, Description, Active, IndicatorTime = TimeGenerated, Indicator = strcat(NetworkSourceIP, NetworkIP, NetworkDestinationIP, Url, FileHashValue, EmailSourceIpAddress, EmailSenderAddress, DomainName), SourceSystem;\\r\\nlet alertEntity = SecurityAlert \\r\\n    | project parse_json(Entities), SystemAlertId , AlertTime = TimeGenerated\\r\\n    | mvexpand(Entities)\\r\\n    | extend entity = iif(isnotempty(Entities.Address), Entities.Address,\\r\\n                      iif(isnotempty(Entities.HostName),strcat(Entities.HostName, \\\".\\\", Entities.DnsDomain),\\r\\n                      iif(isnotempty(Entities.Url), Entities.Url,\\r\\n                      iif(isnotempty(Entities.Value), Entities.Value,\\r\\n                      iif(Entities.Type == \\\"account\\\", strcat(Entities.Name,\\\"@\\\",Entities.UPNSuffix),\\\"\\\")))))\\r\\n    | where isnotempty(entity) \\r\\n    | project entity, SystemAlertId, AlertTime;\\r\\nlet IncidentAlerts = SecurityIncident\\r\\n    | project IncidentTime = TimeGenerated, IncidentNumber, Title, parse_json(AlertIds)\\r\\n    | mv-expand AlertIds\\r\\n    | project IncidentTime, IncidentNumber, Title, tostring(AlertIds);\\r\\nlet AlertsWithTiObservables = alertEntity\\r\\n    | join kind=inner tiObservables on $left.entity == $right.Indicator;\\r\\nlet IncidentsWithAlertsWithTiObservables = AlertsWithTiObservables\\r\\n    | join kind=inner IncidentAlerts on $left.SystemAlertId == $right.AlertIds;\\r\\nIncidentsWithAlertsWithTiObservables\\r\\n| where Indicator contains '{Indicator}' or Indicator == \\\"*\\\"\\r\\n| summarize Incidents=dcount(IncidentNumber), Alerts=dcount(SystemAlertId) by Indicator, ThreatType, Source = SourceSystem, Description\\r\\n| sort by Incidents, Alerts desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Intelligence Alerts\",\"noDataMessage\":\"No indicators observed within these thresholds\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ThreatType\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Botnet\",\"representation\":\"Command and Control\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"MaliciousUrl\",\"representation\":\"Initial_Access\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Malware\",\"representation\":\"Execution\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Phishing\",\"representation\":\"Exfiltration\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Pre attack\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Source\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Incidents\",\"formatter\":4,\"formatOptions\":{\"palette\":\"redBright\"}},{\"columnMatch\":\"Alerts\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"}}],\"filter\":true}},\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n| where TimeGenerated < now()\\r\\n| project-rename ['Date Time'] = TimeGenerated\\r\\n| project ['Date Time'], IndicatorId, ThreatType, Active, Tags, TrafficLightProtocolLevel, EmailSenderAddress, FileHashType, FileHashValue, DomainName, NetworkIP\",\"size\":0,\"showAnalytics\":true,\"title\":\"Threat Intelligence Indicator\",\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 6\"},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 6\"}]},\"conditionalVisibility\":{\"parameterName\":\"TAB\",\"comparison\":\"isEqualTo\",\"value\":\"Observed\"},\"name\":\"Indicators Observed\"}]},\"conditionalVisibility\":{\"parameterName\":\"Parameter\",\"comparison\":\"isEqualTo\",\"value\":\"7\"},\"name\":\"group - 7\"}],\"fromTemplateId\":\"sentinel-Infoblox | Infoblox Workbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId2'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=InfobloxWorkbook; logoFileName=infoblox_logo.svg; description=The Infoblox Workbook is a detailed analytical tool comprising six tabs: SOC Insights, Config Insights, Blocked DNS, DNS, DHCP, Service Log, Audit and Threat Intelligence. \nIt fetches data from Common Event Format (CEF) logs to provide standardized and comprehensive insights into network security and operations. \nEach tab focuses on specific areas such as overall security metrics, blocked DNS requests, DNS activities, DHCP allocations, various service logs, and a combination of audit records with threat intelligence. \nThis workbook enables efficient monitoring and proactive management of network security and performance.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0; title=Infoblox Workbook; templateRelativePath=Infoblox_Workbook.json; subtitle=Efficiently Monitor and Manage Network Security and Performance with Comprehensive Insights; provider=Infoblox}.description",
                "parentId": "[variables('workbookId2')]",
                "contentId": "[variables('_workbookContentId2')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "IP_Space_Info_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Service_Name_Info_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Host_Name_Info_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "ThreatIntelligenceIndicator",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityAlert",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityIncident",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxInsight",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxInsightAssets",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxInsightComments",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxInsightIndicators",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxInsightEvents",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Infoblox_Config_Insights_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Infoblox_Config_Insight_Details_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "InfobloxCloudDataConnectorAma",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "InfobloxSOCInsightsDataConnector_AMA",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "InfobloxSOCInsightsDataConnector_API",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "InfobloxSOCInsightsDataConnector_Legacy",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId2')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook2-name')]",
        "contentProductId": "[variables('_workbookcontentProductId2')]",
        "id": "[variables('_workbookcontentProductId2')]",
        "version": "[variables('workbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-SOCInsight-Detected-APISource_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Infoblox SOC Insight detected in logs sourced via REST API. Customize scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxInsight**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox/Parsers/InfobloxInsight.yaml).",
                "displayName": "Infoblox - SOC Insight Detected - API Source",
                "enabled": false,
                "query": "InfobloxInsight\n| summarize arg_max(TimeGenerated, *) by InfobloxInsightID\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "InfobloxInsight"
                    ],
                    "connectorId": "InfobloxSOCInsightsDataConnector_API"
                  }
                ],
                "tactics": [
                  "Impact"
                ],
                "techniques": [
                  "T1498",
                  "T1565"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "columnName": "InfobloxInsightID",
                        "identifier": "ObjectGuid"
                      }
                    ],
                    "entityType": "SecurityGroup"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "ThreatClass",
                        "identifier": "Name"
                      },
                      {
                        "columnName": "ThreatProperty",
                        "identifier": "Category"
                      }
                    ],
                    "entityType": "Malware"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "Status": "Status",
                  "Severity": "Priority",
                  "PersistentDate": "PersistentDate",
                  "BlockedHits": "BlockedCount",
                  "FirstSeen": "FirstSeen",
                  "SpreadingDate": "SpreadingDate",
                  "LastSeen": "LastSeen",
                  "FeedSource": "FeedSource",
                  "InfobloxInsightID": "[variables('_Infoblox_Insight_ID')]",
                  "TotalHits": "EventsCount",
                  "UnblockedHits": "NotBlockedCount"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Infoblox - SOC Insight - {{ThreatClass}} {{ThreatProperty}}",
                  "alertSeverityColumnName": "IncidentSeverity",
                  "alertDescriptionFormat": "Observed via API. {{ThreatFamily}}. Last Observation: {{LastSeen}}"
                },
                "incidentConfiguration": {
                  "createIncident": true
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Infoblox Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Infoblox - SOC Insight Detected - API Source",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-SOCInsight-Detected-CDCSource_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Infoblox SOC Insight detected in logs sourced via Infoblox CDC. Customize scheduling, responses and more. This rule depends on a parser based on a Kusto Function to work as expected called [**InfobloxCDC_SOCInsights**](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Infoblox/Parsers/InfobloxCDC_SOCInsights.yaml).",
                "displayName": "Infoblox - SOC Insight Detected - CDC Source",
                "enabled": false,
                "query": "InfobloxCDC_SOCInsights\n| summarize arg_max(TimeGenerated, *) by InfobloxInsightID\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "CommonSecurityLog (InfobloxCDC_SOCInsights)"
                    ],
                    "connectorId": "InfobloxSOCInsightsDataConnector_Legacy"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog (InfobloxCDC_SOCInsights)"
                    ],
                    "connectorId": "InfobloxSOCInsightsDataConnector_AMA"
                  }
                ],
                "tactics": [
                  "Impact"
                ],
                "techniques": [
                  "T1498",
                  "T1565"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "columnName": "InfobloxInsightID",
                        "identifier": "ObjectGuid"
                      }
                    ],
                    "entityType": "SecurityGroup"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "ThreatClass",
                        "identifier": "Name"
                      },
                      {
                        "columnName": "ThreatProperty",
                        "identifier": "Category"
                      }
                    ],
                    "entityType": "Malware"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "Status": "Status",
                  "UnblockedHits": "NotBlockedCount",
                  "BlockedHits": "BlockedCount",
                  "TotalHits": "EventsCount",
                  "FeedSource": "FeedSource",
                  "InfobloxInsightID": "[variables('_Infoblox_Insight_ID')]"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Infoblox - SOC Insight - {{ThreatClass}} {{ThreatProperty}}",
                  "alertSeverityColumnName": "IncidentSeverity",
                  "alertDescriptionFormat": "Observed via CDC. {{ThreatFamily}}. {{Message}}"
                },
                "incidentConfiguration": {
                  "createIncident": true
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "Infoblox Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "Infoblox - SOC Insight Detected - CDC Source",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxCDC_SOCInsights Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxCDC_SOCInsights",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxCDC_SOCInsights",
                "query": "CommonSecurityLog\n| where DeviceVendor == \"Infoblox\" and DeviceProduct == \"Data Connector\" and DeviceEventClassID == \"BloxOne-InsightsNotification-Log\"\n| extend AdditionalExtensions = strcat(AdditionalExtensions, \";\")\n| extend \n// SOC Insights\nBlockedCount = toint(extract(\"InfobloxEventsBlockedCount=(.*?);\", 1, AdditionalExtensions)),\nNotBlockedCount = toint(extract(\"InfobloxEventsNotBlockedCount=(.*?);\", 1, AdditionalExtensions)),\nInfobloxInsightID = extract(\"InfobloxInsightId=(.*?);\", 1, AdditionalExtensions),\nThreatType = extract(\"InfobloxInsightThreatType=(.*?);\", 1, AdditionalExtensions),\nThreatClass = extract(\"InfobloxThreatClass=(.*?);\", 1, AdditionalExtensions),\nThreatProperty = extract(\"InfobloxThreatFamily=(.*?);\", 1, AdditionalExtensions),\nThreatFamily = extract(\"InfobloxThreatFamily=(.*?);\", 1, AdditionalExtensions),\nStatus = extract(\"status=(.*?);\", 1, AdditionalExtensions),\nFeedSource = extract(\"InfobloxInsightFeedSource=(.*?);\", 1, AdditionalExtensions),\nComment = extract(\"InfobloxInsightUserComment=(.*?);\", 1, AdditionalExtensions),\nDescription = extract(\"InfobloxInsightDescription=(.*?);\", 1, AdditionalExtensions),\nInfobloxInsightLogType = \"Insight\",\nThreatConfidence_Score = toint(extract(\"InfobloxThreatConfidence=(.*?);\", 1, AdditionalExtensions))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" ),\nThreatLevel_Score = toint(extract(\"InfobloxThreatLevel=(.*?);\", 1, AdditionalExtensions))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend IncidentSeverity= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Informational\",\n                   \"N/A\" )\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxCDC_SOCInsights')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxCDC_SOCInsights",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxCDC_SOCInsights",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxCDC_SOCInsights",
        "query": "CommonSecurityLog\n| where DeviceVendor == \"Infoblox\" and DeviceProduct == \"Data Connector\" and DeviceEventClassID == \"BloxOne-InsightsNotification-Log\"\n| extend AdditionalExtensions = strcat(AdditionalExtensions, \";\")\n| extend \n// SOC Insights\nBlockedCount = toint(extract(\"InfobloxEventsBlockedCount=(.*?);\", 1, AdditionalExtensions)),\nNotBlockedCount = toint(extract(\"InfobloxEventsNotBlockedCount=(.*?);\", 1, AdditionalExtensions)),\nInfobloxInsightID = extract(\"InfobloxInsightId=(.*?);\", 1, AdditionalExtensions),\nThreatType = extract(\"InfobloxInsightThreatType=(.*?);\", 1, AdditionalExtensions),\nThreatClass = extract(\"InfobloxThreatClass=(.*?);\", 1, AdditionalExtensions),\nThreatProperty = extract(\"InfobloxThreatFamily=(.*?);\", 1, AdditionalExtensions),\nThreatFamily = extract(\"InfobloxThreatFamily=(.*?);\", 1, AdditionalExtensions),\nStatus = extract(\"status=(.*?);\", 1, AdditionalExtensions),\nFeedSource = extract(\"InfobloxInsightFeedSource=(.*?);\", 1, AdditionalExtensions),\nComment = extract(\"InfobloxInsightUserComment=(.*?);\", 1, AdditionalExtensions),\nDescription = extract(\"InfobloxInsightDescription=(.*?);\", 1, AdditionalExtensions),\nInfobloxInsightLogType = \"Insight\",\nThreatConfidence_Score = toint(extract(\"InfobloxThreatConfidence=(.*?);\", 1, AdditionalExtensions))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" ),\nThreatLevel_Score = toint(extract(\"InfobloxThreatLevel=(.*?);\", 1, AdditionalExtensions))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend IncidentSeverity= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Informational\",\n                   \"N/A\" )\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxCDC_SOCInsights')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxInsight Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxInsight",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxInsight",
                "query": "InfobloxInsight_CL\n| where InfobloxInsightLogType_s == \"Insight\"\n| extend \nInfobloxInsightID=column_ifexists('insightId_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nBlockedCount=toint(column_ifexists('eventsBlockedCount_s', '')),\nFeedSource=column_ifexists('feedSource_s', ''),\nStatus=column_ifexists('status_s', ''),\nLastSeen=column_ifexists('mostRecentAt_t', ''),\nNotBlockedCount=toint(column_ifexists('eventsNotBlockedCount_s', '')),\nEventsCount=toint(column_ifexists('numEvents_s', '')),\nPersistent=column_ifexists('persistent_b', ''),\nPersistentDate=column_ifexists('persistentDate_t', ''),\nSpreading=column_ifexists('spreading_b', ''),\nSpreadingDate=column_ifexists('spreadingDate_t', ''),\nFirstSeen=column_ifexists('startedAt_t', ''),\nThreatClass=column_ifexists('tClass_s', ''),\nThreatProperty=column_ifexists('tFamily_s', ''),\nThreatFamily=column_ifexists('tFamily_s', ''),\nThreatType=column_ifexists('threatType_s', ''),\nPriority=column_ifexists('priorityText_s', ''),\nDateChanged=column_ifexists('dateChanged_t ', ''),\nCommentChanger=column_ifexists('changer_s', ''),\nComment=column_ifexists('userComment_s', '')\n| extend IncidentSeverity = case(Priority==\"CRITICAL\", \"High\",\n                   Priority==\"HIGH\", \"High\",\n                   Priority==\"MEDIUM\", \"Medium\",\n                   Priority ==\"LOW\",\"Low\",\n                   Priority ==\"INFO\",\"Informational\",\n                   \"N/A\" )\n| project-away \n*_*\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsight')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxInsight",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxInsight",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxInsight",
        "query": "InfobloxInsight_CL\n| where InfobloxInsightLogType_s == \"Insight\"\n| extend \nInfobloxInsightID=column_ifexists('insightId_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nBlockedCount=toint(column_ifexists('eventsBlockedCount_s', '')),\nFeedSource=column_ifexists('feedSource_s', ''),\nStatus=column_ifexists('status_s', ''),\nLastSeen=column_ifexists('mostRecentAt_t', ''),\nNotBlockedCount=toint(column_ifexists('eventsNotBlockedCount_s', '')),\nEventsCount=toint(column_ifexists('numEvents_s', '')),\nPersistent=column_ifexists('persistent_b', ''),\nPersistentDate=column_ifexists('persistentDate_t', ''),\nSpreading=column_ifexists('spreading_b', ''),\nSpreadingDate=column_ifexists('spreadingDate_t', ''),\nFirstSeen=column_ifexists('startedAt_t', ''),\nThreatClass=column_ifexists('tClass_s', ''),\nThreatProperty=column_ifexists('tFamily_s', ''),\nThreatFamily=column_ifexists('tFamily_s', ''),\nThreatType=column_ifexists('threatType_s', ''),\nPriority=column_ifexists('priorityText_s', ''),\nDateChanged=column_ifexists('dateChanged_t ', ''),\nCommentChanger=column_ifexists('changer_s', ''),\nComment=column_ifexists('userComment_s', '')\n| extend IncidentSeverity = case(Priority==\"CRITICAL\", \"High\",\n                   Priority==\"HIGH\", \"High\",\n                   Priority==\"MEDIUM\", \"Medium\",\n                   Priority ==\"LOW\",\"Low\",\n                   Priority ==\"INFO\",\"Informational\",\n                   \"N/A\" )\n| project-away \n*_*\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsight')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxInsightAssets Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxInsightAssets",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxInsightAssets",
                "query": "InfobloxInsightAssets_CL\n| where InfobloxInsightLogType_s == \"Asset\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nAssetID=column_ifexists('cid_s', ''),\nSourceMACAddress=column_ifexists('cmac_s', ''),\nEventCount=column_ifexists('count_d', ''),\nInfobloxB1SrcOSVersion=column_ifexists('os_version_s', ''),\nSourceIP=column_ifexists('qip_s', ''),\nSourceIPDistinctCount=column_ifexists('qipDistinctCount_d', ''),\nIndicatorDistinctCount=column_ifexists('threatIndicatorDistinctCount_s', ''),\nLastSeen=column_ifexists('timeMax_t', ''),\nFirstSeen=column_ifexists('timeMin_t', ''),\nSourceUserName=column_ifexists('user_s', ''),\nLocation=column_ifexists('location_s', '')\n| extend ThreatLevel_Score=toint(column_ifexists('threatLevelMax_s', ''))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend ThreatConfidence_Score=toint(column_ifexists('confidenceLevelMax_d', ''))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" )\n| project-away\n*_*\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightAssets')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxInsightAssets",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxInsightAssets",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxInsightAssets",
        "query": "InfobloxInsightAssets_CL\n| where InfobloxInsightLogType_s == \"Asset\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nAssetID=column_ifexists('cid_s', ''),\nSourceMACAddress=column_ifexists('cmac_s', ''),\nEventCount=column_ifexists('count_d', ''),\nInfobloxB1SrcOSVersion=column_ifexists('os_version_s', ''),\nSourceIP=column_ifexists('qip_s', ''),\nSourceIPDistinctCount=column_ifexists('qipDistinctCount_d', ''),\nIndicatorDistinctCount=column_ifexists('threatIndicatorDistinctCount_s', ''),\nLastSeen=column_ifexists('timeMax_t', ''),\nFirstSeen=column_ifexists('timeMin_t', ''),\nSourceUserName=column_ifexists('user_s', ''),\nLocation=column_ifexists('location_s', '')\n| extend ThreatLevel_Score=toint(column_ifexists('threatLevelMax_s', ''))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend ThreatConfidence_Score=toint(column_ifexists('confidenceLevelMax_d', ''))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" )\n| project-away\n*_*\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightAssets')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject4').parserTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxInsightComments Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject4').parserVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject4')._parserName4]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxInsightComments",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxInsightComments",
                "query": "InfobloxInsightComments_CL\n| where InfobloxInsightLogType_s == \"Comment\"\n|  extend\nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nCommentChanger=column_ifexists('commentsChanger_s', ''),\nComment=column_ifexists('newComment_s', ''),\nDateChanged=column_ifexists('dateChanged_t', ''),\nStatus=column_ifexists('status_s', '')\n| project-away\n*_*\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
              "dependsOn": [
                "[variables('parserObject4')._parserId4]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightComments')]",
                "contentId": "[variables('parserObject4').parserContentId4]",
                "kind": "Parser",
                "version": "[variables('parserObject4').parserVersion4]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxInsightComments",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "version": "[variables('parserObject4').parserVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject4')._parserName4]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxInsightComments",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxInsightComments",
        "query": "InfobloxInsightComments_CL\n| where InfobloxInsightLogType_s == \"Comment\"\n|  extend\nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nCommentChanger=column_ifexists('commentsChanger_s', ''),\nComment=column_ifexists('newComment_s', ''),\nDateChanged=column_ifexists('dateChanged_t', ''),\nStatus=column_ifexists('status_s', '')\n| project-away\n*_*\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
      "dependsOn": [
        "[variables('parserObject4')._parserId4]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightComments')]",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "kind": "Parser",
        "version": "[variables('parserObject4').parserVersion4]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject5').parserTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxInsightEvents Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject5').parserVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject5')._parserName5]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxInsightEvents",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxInsightEvents",
                "query": "InfobloxInsightEvents_CL\n| where InfobloxInsightLogType_s == \"Event\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nThreatConfidence=column_ifexists('confidenceLevel_s', ''),\nDeviceName=column_ifexists('deviceName_s', ''),\nSourceMACAddress=column_ifexists('macAddress_s', ''),\nInfobloxB1Network=column_ifexists('source_s', ''),\nInfobloxB1SrcOSVersion=column_ifexists('osVersion_s', ''),\nInfobloxB1PolicyAction=column_ifexists('action_s', ''),\nInfobloxB1PolicyName=column_ifexists('policy_s', ''),\nSourceIP=column_ifexists('deviceIp_s', ''),\nDestinationDnsDomain=column_ifexists('query_s', ''),\nInfobloxDNSQType=column_ifexists('queryType_s', ''),\nThreatClass=column_ifexists('class_s', ''),\nThreatProperty=column_ifexists('threatFamily_s', ''),\nDetected = todatetime(trim_end(@\"\\+(.*?)\", column_ifexists('detected_s', ''))), \nThreatIndicator=iff(isnotempty(column_ifexists('threatIndicator_s', '')), column_ifexists('threatIndicator_s', ''), column_ifexists('query_s', '')),\nSourceUserName=column_ifexists('user_s', ''),\nDNSResponse=column_ifexists('response_s', ''),\nDNSView=column_ifexists('dnsView_s', ''),\nDeviceRegion=column_ifexists('deviceRegion_s', ''),\nDeviceCountry=column_ifexists('deviceCountry_s', ''),\nResponseRegion=column_ifexists('responseRegion_s', ''),\nResponseCountry=column_ifexists('responseCountry_s', ''),\nInfobloxB1FeedName=column_ifexists('feed_s', ''),\nInfobloxB1DHCPFingerprint=column_ifexists('dhcpFingerprint_s', ''),\nThreatLevel=column_ifexists('threatLevel_s', '')\n| project-away\n*_*\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
              "dependsOn": [
                "[variables('parserObject5')._parserId5]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightEvents')]",
                "contentId": "[variables('parserObject5').parserContentId5]",
                "kind": "Parser",
                "version": "[variables('parserObject5').parserVersion5]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxInsightEvents",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "version": "[variables('parserObject5').parserVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject5')._parserName5]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxInsightEvents",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxInsightEvents",
        "query": "InfobloxInsightEvents_CL\n| where InfobloxInsightLogType_s == \"Event\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nThreatConfidence=column_ifexists('confidenceLevel_s', ''),\nDeviceName=column_ifexists('deviceName_s', ''),\nSourceMACAddress=column_ifexists('macAddress_s', ''),\nInfobloxB1Network=column_ifexists('source_s', ''),\nInfobloxB1SrcOSVersion=column_ifexists('osVersion_s', ''),\nInfobloxB1PolicyAction=column_ifexists('action_s', ''),\nInfobloxB1PolicyName=column_ifexists('policy_s', ''),\nSourceIP=column_ifexists('deviceIp_s', ''),\nDestinationDnsDomain=column_ifexists('query_s', ''),\nInfobloxDNSQType=column_ifexists('queryType_s', ''),\nThreatClass=column_ifexists('class_s', ''),\nThreatProperty=column_ifexists('threatFamily_s', ''),\nDetected = todatetime(trim_end(@\"\\+(.*?)\", column_ifexists('detected_s', ''))), \nThreatIndicator=iff(isnotempty(column_ifexists('threatIndicator_s', '')), column_ifexists('threatIndicator_s', ''), column_ifexists('query_s', '')),\nSourceUserName=column_ifexists('user_s', ''),\nDNSResponse=column_ifexists('response_s', ''),\nDNSView=column_ifexists('dnsView_s', ''),\nDeviceRegion=column_ifexists('deviceRegion_s', ''),\nDeviceCountry=column_ifexists('deviceCountry_s', ''),\nResponseRegion=column_ifexists('responseRegion_s', ''),\nResponseCountry=column_ifexists('responseCountry_s', ''),\nInfobloxB1FeedName=column_ifexists('feed_s', ''),\nInfobloxB1DHCPFingerprint=column_ifexists('dhcpFingerprint_s', ''),\nThreatLevel=column_ifexists('threatLevel_s', '')\n| project-away\n*_*\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
      "dependsOn": [
        "[variables('parserObject5')._parserId5]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightEvents')]",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "kind": "Parser",
        "version": "[variables('parserObject5').parserVersion5]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject6').parserTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "InfobloxInsightIndicators Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject6').parserVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject6')._parserName6]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for InfobloxInsightIndicators",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "InfobloxInsightIndicators",
                "query": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nInfobloxInsightIndicators_CL\n| where InfobloxInsightLogType_s == \"Indicator\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nInfobloxB1PolicyAction=column_ifexists('action_s', ''),\nSourceMACAddress=column_ifexists('cmac_s', ''),\nEventCount=column_ifexists('count_d', ''),\nThreatIndicator=column_ifexists('indicator_s', ''),\nDestinationDnsDomain=column_ifexists('indicator_s', ''),\nInfobloxB1FeedName=column_ifexists('feedName_s', ''),\nLastSeen=column_ifexists('timeMax_t', ''),\nFirstSeen=column_ifexists('timeMin_t', ''),\nThreatActor=column_ifexists('actor_s', '')\n| extend isIP = isnotempty(extract(IPRegex, 0, ThreatIndicator))\n| extend ThreatLevel_Score=toint(column_ifexists('threatLevelMax_s', ''))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend ThreatConfidence_Score=toint(column_ifexists('confidence_s', ''))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" )\n| project-away\n*_*\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject6')._parserId6,'/'))))]",
              "dependsOn": [
                "[variables('parserObject6')._parserId6]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightIndicators')]",
                "contentId": "[variables('parserObject6').parserContentId6]",
                "kind": "Parser",
                "version": "[variables('parserObject6').parserVersion6]",
                "source": {
                  "name": "Infoblox",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject6').parserContentId6]",
        "contentKind": "Parser",
        "displayName": "Parser for InfobloxInsightIndicators",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject6').parserContentId6,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject6').parserContentId6,'-', '1.0.0')))]",
        "version": "[variables('parserObject6').parserVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject6')._parserName6]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for InfobloxInsightIndicators",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "InfobloxInsightIndicators",
        "query": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nInfobloxInsightIndicators_CL\n| where InfobloxInsightLogType_s == \"Indicator\"\n| extend \nInfobloxInsightID=column_ifexists('InfobloxInsightID_g', ''),\nInfobloxInsightLogType=column_ifexists('InfobloxInsightLogType_s', ''),\nInfobloxB1PolicyAction=column_ifexists('action_s', ''),\nSourceMACAddress=column_ifexists('cmac_s', ''),\nEventCount=column_ifexists('count_d', ''),\nThreatIndicator=column_ifexists('indicator_s', ''),\nDestinationDnsDomain=column_ifexists('indicator_s', ''),\nInfobloxB1FeedName=column_ifexists('feedName_s', ''),\nLastSeen=column_ifexists('timeMax_t', ''),\nFirstSeen=column_ifexists('timeMin_t', ''),\nThreatActor=column_ifexists('actor_s', '')\n| extend isIP = isnotempty(extract(IPRegex, 0, ThreatIndicator))\n| extend ThreatLevel_Score=toint(column_ifexists('threatLevelMax_s', ''))\n| extend ThreatLevel= case(ThreatLevel_Score==3, \"High\",\n                   ThreatLevel_Score==2, \"Medium\",\n                   ThreatLevel_Score==1, \"Low\",\n                   ThreatLevel_Score == 0,\"Info\",\n                   \"N/A\" )\n| extend ThreatConfidence_Score=toint(column_ifexists('confidence_s', ''))\n| extend ThreatConfidence= case(ThreatConfidence_Score==3, \"High\",\n                   ThreatConfidence_Score==2, \"Medium\",\n                   ThreatConfidence_Score==1, \"Low\",\n                   ThreatConfidence_Score == 0,\"Info\",\n                   \"N/A\" )\n| project-away\n*_*\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject6')._parserId6,'/'))))]",
      "dependsOn": [
        "[variables('parserObject6')._parserId6]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'InfobloxInsightIndicators')]",
        "contentId": "[variables('parserObject6').parserContentId6]",
        "kind": "Parser",
        "version": "[variables('parserObject6').parserVersion6]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Block-Allow-IP-Domain Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Block-Allow-IP-Domain",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "minLength": 1,
              "type": "securestring",
              "metadata": {
                "description": "Enter value for API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            },
            "Teams Group Id": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "Teams Channel Id": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            }
          },
          "variables": {
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API_Token": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "BaseUrl": {
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]",
                      "type": "String"
                    },
                    "TeamsChannelId": {
                      "defaultValue": "[[trim(parameters('Teams Channel Id'))]",
                      "type": "String"
                    },
                    "TeamsGroupId": {
                      "defaultValue": "[[trim(parameters('Teams Group Id'))]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "method": "GET"
                      }
                    }
                  },
                  "actions": {
                    "Condition_For_Base_URL_is_Empty_or_Not": {
                      "actions": {
                        "Set_Default_Value_For_Base_URL": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "base_url",
                            "value": "https://csp.infoblox.com"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Named_List_Action": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('base_url'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_For_Response_is_Success_or_Not": {
                      "actions": {
                        "Condition_To_Check_If_There_is_Named_List_is_Available_in_Response": {
                          "actions": {
                            "Append_Add_to_List_Action_Variable": {
                              "runAfter": {
                                "For_Each_Lists_in_Result": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "List_action",
                                "value": {
                                  "title": "Add",
                                  "value": "inserted"
                                }
                              }
                            },
                            "Append_Remove_to_List_Action_Variable": {
                              "runAfter": {
                                "Append_Add_to_List_Action_Variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "List_action",
                                "value": {
                                  "title": "Remove",
                                  "value": "deleted"
                                }
                              }
                            },
                            "Condition_For_Response_is_Success_or_Not_For_PATCH_Call": {
                              "actions": {
                                "Terminate_If_Successfully_Added_to_Named_List": {
                                  "type": "Terminate",
                                  "inputs": {
                                    "runStatus": "Succeeded"
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List": [
                                  "Succeeded",
                                  "Failed",
                                  "TimedOut"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Terminate_If_Not_Added_In_Named_List": {
                                    "type": "Terminate",
                                    "inputs": {
                                      "runError": {
                                        "code": "@{outputs('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')['statusCode']}",
                                        "message": "@{body('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')}"
                                      },
                                      "runStatus": "Failed"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')['statusCode']",
                                      201
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "For_Each_Lists_in_Result": {
                              "foreach": "@body('Parse_JSON_API_Call_Response')?['results']",
                              "actions": {
                                "Condition": {
                                  "actions": {
                                    "Append_Input_List_For_Adaptive_Card_DropDown": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "Lists",
                                        "value": {
                                          "title": "@{items('For_Each_Lists_in_Result')?['name']}",
                                          "value": "@{items('For_Each_Lists_in_Result')?['id']}"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "startsWith": [
                                            "@items('For_Each_Lists_in_Result')?['name']",
                                            "Threat Insight"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach"
                            },
                            "HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List": {
                              "runAfter": {
                                "Set_Request_Body_For_PATCH_Call": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": "@variables('req_body')",
                                "headers": {
                                  "Authorization": "Token @{parameters('API_Token')}"
                                },
                                "method": "PATCH",
                                "uri": "@{variables('base_url')}/api/atcfw/v1/named_lists/@{variables('list_id')}/items"
                              }
                            },
                            "Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain": {
                              "runAfter": {
                                "Append_Remove_to_List_Action_Variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnectionWebhook",
                              "inputs": {
                                "body": {
                                  "body": {
                                    "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Block and Allow IP / Domain\"\n        },\n        {\n            \"id\": \"group-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('Lists')},\n            \"isRequired\": true,\n            \"separator\": true,\n            \"label\": \"Select Named list to add/remove IP or Domain\",\n            \"errorMessage\": \"Please select one Named list first.\"\n        },\n{\n            \"id\": \"group-choice-1\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('List_action')},\n            \"isRequired\": true,\n           \"weight\": \"bolder\",\n            \"label\": \"Select Named list action\",\n            \"errorMessage\": \"Please select one Named list action.\"\n        },\n        {\n            \"id\": \"member-input-1\",\n            \"type\": \"Input.Text\",\n            \"separator\": true,\n            \"placeholder\": \"Provide IP / Domain value\",\n            \"isRequired\": true,\n            \"label\": \"Provide IP or Domain value to add/remove into Named list\",\n            \"errorMessage\": \"Please enter one IP or Domain.\"\n        },\n        {\n            \"id\": \"member-input-2\",\n            \"type\": \"Input.Text\",\n            \"separator\": true,\n            \"placeholder\": \"Provide IP / Domain description\",\n            \"label\": \"Provide IP or Domain description\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                    "recipient": {
                                      "channelId": "@parameters('TeamsChannelId')",
                                      "groupId": "@parameters('TeamsGroupId')"
                                    },
                                    "updateMessage": "Thanks for your response!"
                                  },
                                  "notificationUrl": "@{listCallbackUrl()}"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['teams']['connectionId']"
                                  }
                                },
                                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                              }
                            },
                            "Set_ID_From_Named_List_DropDown": {
                              "runAfter": {
                                "Set_Value_From_Adaptive_Card_Description": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "list_id",
                                "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['group-choice']}"
                              }
                            },
                            "Set_Named_List_Action_Variable": {
                              "runAfter": {
                                "Set_ID_From_Named_List_DropDown": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "named_list_action",
                                "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['group-choice-1']}"
                              }
                            },
                            "Set_Request_Body_For_PATCH_Call": {
                              "runAfter": {
                                "Set_Named_List_Action_Variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "req_body",
                                "value": {
                                  "@{variables('named_list_action')}_items_described": [
                                    {
                                      "description": "@{variables('block_allow_description')}",
                                      "item": "@{variables('block_allow_value')}"
                                    }
                                  ]
                                }
                              }
                            },
                            "Set_Value_From_Adaptive_Card": {
                              "runAfter": {
                                "Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "block_allow_value",
                                "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['member-input-1']}"
                              }
                            },
                            "Set_Value_From_Adaptive_Card_Description": {
                              "runAfter": {
                                "Set_Value_From_Adaptive_Card": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "block_allow_description",
                                "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['member-input-2']}"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_JSON_API_Call_Response": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Terminate_When_List_is_Empty": {
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']}",
                                    "message": "No Any Named List Available.  "
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@length(body('Parse_JSON_API_Call_Response')?['results'])",
                                    0
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_JSON_API_Call_Response": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_Call_For_Get_List_For_Named_List_Endpoint')",
                            "schema": {
                              "properties": {
                                "results": {
                                  "items": {
                                    "properties": {
                                      "id": {
                                        "type": "integer"
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "name"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "HTTP_Call_For_Get_List_For_Named_List_Endpoint": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate_When_not_Getting_Named_List": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']}",
                                "message": "@{body('HTTP_Call_For_Get_List_For_Named_List_Endpoint')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "HTTP_Call_For_Get_List_For_Named_List_Endpoint": {
                      "runAfter": {
                        "Condition_For_Base_URL_is_Empty_or_Not": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Authorization": "Token @{parameters('API_Token')}"
                        },
                        "method": "GET",
                        "queries": {
                          "_fields": "name,id"
                        },
                        "uri": "@{variables('base_url')}/api/atcfw/v1/named_lists"
                      }
                    },
                    "Initialize_Description_For_Adaptive_Card_": {
                      "runAfter": {
                        "Initialize_Value_For_Adaptive_Card": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "block_allow_description",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Id_For_Named_List_DropDown": {
                      "runAfter": {
                        "Initialize_Input_List_For_Adaptive_Card_DropDown": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "list_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Input_List_For_Adaptive_Card_DropDown": {
                      "runAfter": {
                        "Initialize_Variable_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Lists",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_List_For_Action": {
                      "runAfter": {
                        "Initialize_Request_Body_For_PATCH_Call": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "List_action",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Named_List_Action": {
                      "runAfter": {
                        "Initialize_List_For_Action": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "named_list_action",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Request_Body_For_PATCH_Call": {
                      "runAfter": {
                        "Initialize_Description_For_Adaptive_Card_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "req_body",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Value_For_Adaptive_Card": {
                      "runAfter": {
                        "Initialize_Id_For_Named_List_DropDown": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "block_allow_value",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Variable_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Block-Allow-IP-Domain",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Block-Allow-IP-Domain",
            "description": "The playbook will add/remove IP or Domain value in Named List of Infoblox.",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. Copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. Copy the text of groupId parameter from link to use as groupId. "
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select teams connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "**b. Get Workflow URL**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → Overview",
              "2. Copy Workflow URL",
              "This URL can be use to trigger the Logic App directly"
            ],
            "entities": [
              "IP",
              "Domain"
            ],
            "tags": [
              "Infoblox",
              "IP",
              "Domain"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Block-Allow-IP-Domain",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Block-Allow-IP-Domain-Incident-Based Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Block-Allow-IP-Domain-Incident-Based",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "minLength": 1,
              "type": "securestring",
              "metadata": {
                "description": "Enter value for API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            },
            "Teams Group Id": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "Teams Channel Id": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API_Token": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]"
                    },
                    "BaseUrl": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]"
                    },
                    "TeamsChannelId": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Teams Channel Id'))]"
                    },
                    "TeamsGroupId": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Teams Group Id'))]"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_For_Base_URL_is_Empty_or_Not": {
                      "actions": {
                        "Set_Default_Value_For_Base_URL": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "base_url",
                            "value": "https://csp.infoblox.com"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_IP_or_Domain_String_Variable": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('base_url'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_For_No_Entity_is_Available_in_Incident": {
                      "actions": {
                        "Condition_For_Continue_Execution_of_Logic_App": {
                          "actions": {
                            "Terminate_When_User_Terminated_The_Logic__App": {
                              "type": "Terminate",
                              "inputs": {
                                "runError": {
                                  "message": "User Terminated The Logic App"
                                },
                                "runStatus": "Failed"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Cancel_Variable_For_Selection_of_Execution": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_For_Response_is_Success_or_Not": {
                                "actions": {
                                  "Condition_To_Check_If_There_is_Named_List_is_Available_in_Response": {
                                    "actions": {
                                      "Append_Add_to_List_Action_Variable": {
                                        "runAfter": {
                                          "For_Each_Lists_in_Result": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "List_action",
                                          "value": {
                                            "title": "Add",
                                            "value": "inserted"
                                          }
                                        }
                                      },
                                      "Append_Remove_to_List_Action_Variable": {
                                        "runAfter": {
                                          "Append_Add_to_List_Action_Variable": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "List_action",
                                          "value": {
                                            "title": "Remove",
                                            "value": "deleted"
                                          }
                                        }
                                      },
                                      "Condition_For_Response_is_Success_or_Not_For_PATCH_Call": {
                                        "actions": {
                                          "Terminate_If_Successfully_Added_to_Named_List": {
                                            "type": "Terminate",
                                            "inputs": {
                                              "runStatus": "Succeeded"
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List": [
                                            "Succeeded"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Terminate_If_Not_Added_In_Named_List": {
                                              "type": "Terminate",
                                              "inputs": {
                                                "runError": {
                                                  "code": "@{outputs('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')['statusCode']}",
                                                  "message": "Error Response : @{body('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')}"
                                                },
                                                "runStatus": "Failed"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@outputs('HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List')['statusCode']",
                                                201
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "For_Each_Lists_in_Result": {
                                        "foreach": "@body('Parse_JSON_API_Call_Response')?['results']",
                                        "actions": {
                                          "Condition": {
                                            "actions": {
                                              "Append_Input_List_For_Adaptive_Card_DropDown": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                  "name": "Lists",
                                                  "value": {
                                                    "title": "@{items('For_Each_Lists_in_Result')?['name']}",
                                                    "value": "@{items('For_Each_Lists_in_Result')?['id']}"
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "not": {
                                                    "startsWith": [
                                                      "@items('For_Each_Lists_in_Result')?['name']",
                                                      "Threat Insight"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "type": "Foreach"
                                      },
                                      "HTTP_Call_To_Add_Remove_IP_or_Domain_in_Selected_Name_List": {
                                        "runAfter": {
                                          "Set_Request_Body_For_PATCH_Call": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Http",
                                        "inputs": {
                                          "body": "@variables('req_body')",
                                          "headers": {
                                            "Authorization": "Token @{parameters('API_Token')}"
                                          },
                                          "method": "PATCH",
                                          "uri": "@{variables('base_url')}/api/atcfw/v1/named_lists/@{variables('list_id')}/items"
                                        }
                                      },
                                      "Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain": {
                                        "runAfter": {
                                          "Append_Remove_to_List_Action_Variable": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnectionWebhook",
                                        "inputs": {
                                          "body": {
                                            "body": {
                                              "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\",\n\"value\":\"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Block and Allow IP / Domain\"\n        },\n        {\n            \"id\": \"group-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('Lists')},\n            \"isRequired\": true,\n            \"separator\": true,\n            \"weight\": \"bolder\",\n            \"label\": \"Select Named list to add/remove IP or Domain\",\n            \"errorMessage\": \"Select one Named list first.\"\n        },        {\n            \"id\": \"group-choice-1\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('List_action')},\n            \"isRequired\": true,\n           \"weight\": \"bolder\",\n            \"label\": \"Select Named list action\",\n            \"errorMessage\": \"Select one Named list action.\"\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                             \"weight\": \"bolder\",\n                            \"text\": \"List of IP / Domain to perform selected action for Named list\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"spacing\": \"None\",\n                            \"text\": \"@{variables('ip_domain_string')}\" ,\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        }\n                    ],\n                    \"width\": \"stretch\"\n                }\n            ]\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                              "recipient": {
                                                "channelId": "@{parameters('TeamsChannelId')}",
                                                "groupId": "@{parameters('TeamsGroupId')}"
                                              },
                                              "updateMessage": "Thanks for your response!"
                                            },
                                            "notificationUrl": "@{listCallbackUrl()}"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                          },
                                          "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                        }
                                      },
                                      "Set_ID_From_Named_List_DropDown": {
                                        "runAfter": {
                                          "Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "list_id",
                                          "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['group-choice']}"
                                        }
                                      },
                                      "Set_Named_List_Action_Variable": {
                                        "runAfter": {
                                          "Set_ID_From_Named_List_DropDown": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "named_list_action",
                                          "value": "@{body('Post_Adaptive_Card_For_Take_Input_For_Block_And_Allow_IP_Or_Domain')?['data']?['group-choice-1']}"
                                        }
                                      },
                                      "Set_Request_Body_For_PATCH_Call": {
                                        "runAfter": {
                                          "Set_Named_List_Action_Variable": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "req_body",
                                          "value": {
                                            "@{variables('named_list_action')}_items_described": "@variables('ip_domain_req_body')"
                                          }
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_API_Call_Response": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Terminate_When_No_Named_List_Found": {
                                          "type": "Terminate",
                                          "inputs": {
                                            "runError": {
                                              "code": "@{outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']}",
                                              "message": "No Any Named List Available.  "
                                            },
                                            "runStatus": "Failed"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@length(body('Parse_JSON_API_Call_Response')?['results'])",
                                              0
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_API_Call_Response": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Call_For_Get_List_For_Named_List_Endpoint')",
                                      "schema": {
                                        "properties": {
                                          "results": {
                                            "items": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "id",
                                                "name"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Call_For_Get_List_For_Named_List_Endpoint": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Terminate_When_Request_Call_Get_Failed": {
                                      "type": "Terminate",
                                      "inputs": {
                                        "runError": {
                                          "code": "@{outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']}",
                                          "message": "@{body('HTTP_Call_For_Get_List_For_Named_List_Endpoint')}"
                                        },
                                        "runStatus": "Failed"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Call_For_Get_List_For_Named_List_Endpoint')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "HTTP_Call_For_Get_List_For_Named_List_Endpoint": {
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Token @{parameters('API_Token')}"
                                  },
                                  "method": "GET",
                                  "queries": {
                                    "_fields": "name,id"
                                  },
                                  "uri": "@{variables('base_url')}/api/atcfw/v1/named_lists"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('cancel_adaptive_card')",
                                  "Cancel"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Post_Adaptive_Card_and_Wait_if_User_Want_To_Perform_Further_Action_or_Not": {
                          "runAfter": {
                            "Set_IP_or_Domain_String_Variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Yes\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        },\n        {\n            \"title\": \"No\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"destructive\",\n            \"id\": \"Cancel\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Block and Allow IP / Domain\"\n        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"weight\": \"Bolder\",\n                            \"separator\": true,\n                            \"text\": \"List of IP / Domain to be added in Named list\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"spacing\": \"None\",\n                            \"text\": \"@{variables('ip_domain_string')}\" ,\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        },\n                     {\n                            \"type\": \"TextBlock\",\n                            \"size\": \"Medium\",\n                            \"weight\": \"Bolder\",\n                            \"text\": \"Want to add or remove above IP or Domain in Named list?\"\n                        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                "recipient": {
                                  "channelId": "@parameters('TeamsChannelId')",
                                  "groupId": "@parameters('TeamsGroupId')"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        },
                        "Set_Cancel_Variable_For_Selection_of_Execution": {
                          "runAfter": {
                            "Post_Adaptive_Card_and_Wait_if_User_Want_To_Perform_Further_Action_or_Not": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "cancel_adaptive_card",
                            "value": "@{body('Post_Adaptive_Card_and_Wait_if_User_Want_To_Perform_Further_Action_or_Not')?['submitActionId']}"
                          }
                        },
                        "Set_IP_or_Domain_String_Variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ip_domain_string",
                            "value": "@{substring(variables('ip_domain_list'),0,sub(length(variables('ip_domain_list')),2))}"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_IP": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate_When_No_Entity_Mapping_Found": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "404",
                                "message": "No Entity Mapping Found For IP or Host"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(variables('ip_domain_req_body'))",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_Hosts": {
                      "runAfter": {
                        "Condition_For_Base_URL_is_Empty_or_Not": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "For_Each_Domain": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_Each_Domain": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "Condition_To_Check_If_Host_Name_Empty_Found": {
                          "actions": {
                            "Append_Domain_in_IP_or_Domain_list_For_Request_Body_": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "ip_domain_req_body",
                                "value": {
                                  "item": "@items('For_Each_Domain')?['NetBiosName']"
                                }
                              }
                            },
                            "Append_Domain_in_IP_or_Domain_list_variable": {
                              "runAfter": {
                                "Append_Domain_in_IP_or_Domain_list_For_Request_Body_": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "ip_domain_list",
                                "value": "@{items('For_Each_Domain')?['NetBiosName']}, "
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('For_Each_Domain')?['NetBiosName']",
                                    "@true"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_Each_IP": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Condition_To_Check_If_IP_Name_Empty_Found": {
                          "actions": {
                            "Append_IP_in_IP_or_Domain_String_Variable": {
                              "runAfter": {
                                "Append_IP_in_IP_or_Domain_list_For_Request_Body_": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "ip_domain_list",
                                "value": "@{items('For_Each_IP')?['Address']}, "
                              }
                            },
                            "Append_IP_in_IP_or_Domain_list_For_Request_Body_": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "ip_domain_req_body",
                                "value": {
                                  "item": "@items('For_Each_IP')?['Address']"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@empty(items('For_Each_IP')?['Address'])",
                                    "@true"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_Cancel_Adaptive_Card_Variable": {
                      "runAfter": {
                        "Initialize_IP_or_Domain_list_for_Request_Body": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cancel_adaptive_card",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Description_For_Adaptive_Card_": {
                      "runAfter": {
                        "Initialize_Value_For_Adaptive_Card": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "block_allow_description",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_IP_or_Domain_String_Variable": {
                      "runAfter": {
                        "Initialize_Named_List_Action": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip_domain_string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_IP_or_Domain_list_for_Request_Body": {
                      "runAfter": {
                        "Initialize_IP_or_Domain_list_in_Incidents": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip_domain_req_body",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_IP_or_Domain_list_in_Incidents": {
                      "runAfter": {
                        "Initialize_Request_Body_For_PATCH_Call": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip_domain_list",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Id_For_Named_List_DropDown": {
                      "runAfter": {
                        "Initialize_Input_List_For_Adaptive_Card_DropDown": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "list_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Input_List_For_Adaptive_Card_DropDown": {
                      "runAfter": {
                        "Initialize_Variable_Comment_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Lists",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_List_For_Action": {
                      "runAfter": {
                        "Initialize_Selected_Choice_Value": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "List_action",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Named_List_Action": {
                      "runAfter": {
                        "Initialize_List_For_Action": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "named_list_action",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Request_Body_For_PATCH_Call": {
                      "runAfter": {
                        "Initialize_Description_For_Adaptive_Card_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "req_body",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Selected_Choice_Value": {
                      "runAfter": {
                        "Initialize_Cancel_Adaptive_Card_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "selected_name_list",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Value_For_Adaptive_Card": {
                      "runAfter": {
                        "Initialize_Id_For_Named_List_DropDown": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "block_allow_value",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Variable_Base_Url": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      }
                    },
                    "Initialize_Variable_Comment_Count": {
                      "runAfter": {
                        "Initialize_Variable_Base_Url": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "comment_limit",
                            "type": "integer",
                            "value": "@triggerBody()?['object']?['properties']?['additionalData']?['commentsCount']"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel_2": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Block-Allow-IP-Domain-Incident-Based",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Block-Allow-IP-Domain-Incident-Based",
            "description": "The playbook will add / remove IP or Domain values in Named List that available in incidents of Infoblox.",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. Copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. Copy the text of groupId parameter from link to use as groupId. "
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select teams connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save"
            ],
            "entities": [
              "IP",
              "Domain"
            ],
            "tags": [
              "Infoblox",
              "IP",
              "Domain",
              "Incident"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Block-Allow-IP-Domain-Incident-Based",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Config-Insight-Details Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Config-Insight-Details",
              "metadata": {
                "description": "Please keep the 'PlaybookName' parameter unchanged. Otherwise, you will need to manually adjust the 'PlaybookName' in the 'Infoblox Workbook - Infoblox Config Insights' Panel in edit mode"
              },
              "type": "string"
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "InfobloxAPIKey": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "InfobloxBaseUrl": {
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "method": "POST"
                      }
                    }
                  },
                  "actions": {
                    "Condition": {
                      "actions": {
                        "Parse_Config_Insight_Details_Response": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('GET_Config_Insight_Details')",
                            "schema": {
                              "properties": {
                                "result": {
                                  "properties": {
                                    "analyticInsightId": {
                                      "type": "string"
                                    },
                                    "feeds": {
                                      "items": {
                                        "properties": {
                                          "currentAction": {
                                            "type": "string"
                                          },
                                          "feedName": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "recommendedAction": {
                                            "type": "string"
                                          },
                                          "ruleName": {
                                            "type": "string"
                                          },
                                          "ruleType": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "ruleType",
                                          "ruleName",
                                          "feedName",
                                          "currentAction"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "insightType": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Send_Data_to_Sentinel": {
                          "runAfter": {
                            "Parse_Config_Insight_Details_Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "@{body('Parse_Config_Insight_Details_Response')?['result']}",
                            "headers": {
                              "Log-Type": "@variables('config_insight_details_table_name')"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azureloganalyticsdatacollector_11']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/api/logs"
                          }
                        }
                      },
                      "runAfter": {
                        "GET_Config_Insight_Details": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('GET_Config_Insight_Details')['statusCode']}",
                                "message": "There was an error fetching config insights details. Error: @{body('GET_Config_Insight_Details')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('GET_Config_Insight_Details')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "GET_Config_Insight_Details": {
                      "runAfter": {
                        "Initialize_Config_Insight_Details_Table_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Authorization": "Token @{parameters('InfobloxAPIKey')}"
                        },
                        "method": "GET",
                        "uri": "@variables('config_insight_details_url')"
                      }
                    },
                    "Initialize_Config_Insight_Details_Table_Name": {
                      "runAfter": {
                        "Initialize_Config_Insights_Details_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config_insight_details_table_name",
                            "type": "string",
                            "value": "Infoblox_Config_Insight_Details"
                          }
                        ]
                      }
                    },
                    "Initialize_Config_Insights_Details_URL": {
                      "runAfter": {
                        "Parse_Request_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config_insight_details_url",
                            "type": "string",
                            "value": "@{parameters('InfobloxBaseUrl')}/api/v1/config-insights/analytics/@{body('Parse_Request_JSON')?['config_insight_id']}"
                          }
                        ]
                      }
                    },
                    "Parse_Request_JSON": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()",
                        "schema": {
                          "properties": {
                            "config_insight_id": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector_11": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Config-Insight-Details",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Config-Insight-Details",
            "description": "The playbook retrieves Config Insight Details Data and ingests it into a custom table within the Log Analytics Workspace on an on-demand basis from the Workbook.",
            "prerequisites": "User must provide valid Infoblox API Key.",
            "postDeployment": [
              "**a. Authorize azuremonitorlogs connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save"
            ],
            "tags": [
              "Infoblox",
              "Insights"
            ],
            "lastUpdateTime": "2024-08-09T15:24:09.773Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Config-Insight-Details",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Config-Insights Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Config-Insights",
              "type": "string"
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            },
            "Workspace Name": {
              "type": "String",
              "metadata": {
                "description": "Enter name of Log Analytics Workspace where Infoblox Workbook is available"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "InfobloxAPIKey": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "InfobloxBaseUrl": {
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Check_if_Status_code_200_or_not": {
                      "actions": {
                        "Fetch_Existing_Data": {
                          "runAfter": {
                            "Parse_Config_Insight_List_ID": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "let dummyschema = datatable(TimeGenerated:datetime, policyAnalyticsId_g:string, insightType_s:string, type_s:string)[];\nunion isfuzzy=true dummyschema,\n@{variables('config_insights_table_name')}\n| where TimeGenerated>ago(365d)\n| project policyAnalyticsId_g",
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                              "resourcegroups": "[[resourceGroup().name]",
                              "resourcename": "[[trim(parameters('Workspace Name'))]",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "[[subscription().subscriptionId]",
                              "timerange": "Last 24 hours"
                            }
                          }
                        },
                        "For_Each_to_Append_Existing_Ids": {
                          "foreach": "@body('Fetch_Existing_Data')?['value']",
                          "actions": {
                            "Append_to_Existing_Ids": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "existing_ids",
                                "value": "@items('For_Each_to_Append_Existing_Ids')?['policyAnalyticsId_g']"
                              }
                            }
                          },
                          "runAfter": {
                            "Fetch_Existing_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_Each_to_ingest_data_to_Sentinel": {
                          "foreach": "@body('Parse_Config_Insight_List_ID')?['policyAnalyticsList']",
                          "actions": {
                            "Check_whether_Config_Insight_ID_already_in_Sentinel": {
                              "else": {
                                "actions": {
                                  "Send_Data": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": "@{items('For_Each_to_ingest_data_to_Sentinel')}",
                                      "headers": {
                                        "Log-Type": "@variables('config_insights_table_name')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@contains(variables('existing_ids'), items('For_each_to_ingest_data_to_Sentinel')['policyAnalyticsId'])",
                                      true
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "For_Each_to_Append_Existing_Ids": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Parse_Config_Insight_List_ID": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP')",
                            "schema": {
                              "properties": {
                                "policyAnalyticsList": {
                                  "items": {
                                    "properties": {
                                      "insightType": {
                                        "type": "string"
                                      },
                                      "policyAnalyticsId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "policyAnalyticsId",
                                      "insightType"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "HTTP": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('HTTP')['statusCode']}",
                                "message": "API request call failed. Kindly Run again after checking credentials. Error: @{body('HTTP')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('HTTP')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "HTTP": {
                      "runAfter": {
                        "Initialize_Config_Insights_Table_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Authorization": "Token @{parameters('InfobloxAPIKey')}"
                        },
                        "method": "GET",
                        "uri": "@variables('config_insight_list_url')"
                      }
                    },
                    "Initialize_Config_Ids": {
                      "runAfter": {
                        "Initialize_Config_Insights_List_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config_ids",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Config_Insights_List_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config_insight_list_url",
                            "type": "string",
                            "value": "@{parameters('InfobloxBaseUrl')}/api/v1/config-insights/analytics"
                          }
                        ]
                      }
                    },
                    "Initialize_Config_Insights_Table_Name": {
                      "runAfter": {
                        "Initialize_Data_To_Send": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config_insights_table_name",
                            "type": "string",
                            "value": "Infoblox_Config_Insights_CL"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_To_Send": {
                      "runAfter": {
                        "Initialize_Existing_Ids": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "data_to_send",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Existing_Ids": {
                      "runAfter": {
                        "Initialize_Config_Ids": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "existing_ids",
                            "type": "array"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Config-Insights",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Config-Insights",
            "description": "The playbook retrieves Config Insight Data and ingests it into a custom table within the Log Analytics Workspace on a scheduled basis.",
            "prerequisites": "User must provide valid Infoblox API Key.",
            "postDeployment": [
              "**a. Authorize azuremonitorlogs connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Authorize azureloganalyticsdatacollector connections**",
              "Once deployment is complete, authorize connection.",
              "1. Go to your logic app -> API connections -> Select connection resource",
              "2. Go to General -> edit API connection",
              "3. Provide Workspace Id and Workspace Key of Log Analytics Workspace where Table will be created",
              "4. Click Save"
            ],
            "tags": [
              "Infoblox",
              "Insights"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Config-Insights",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Data-Connector-Trigger-Sync Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Data-Connector-Trigger-Sync",
              "type": "string",
              "metadata": {
                "description": "Enter the playbook name"
              }
            },
            "Tenant ID": {
              "type": "string",
              "metadata": {
                "description": "Enter the Azure Tenant ID"
              }
            },
            "Client ID": {
              "type": "string",
              "metadata": {
                "description": "Enter the Azure Client ID"
              }
            },
            "Client Secret": {
              "type": "securestring",
              "metadata": {
                "description": "Enter the Azure Client Secret"
              }
            },
            "Resource Group Name": {
              "type": "string",
              "metadata": {
                "description": "Enter the Azure Resource Group Name in which your Infoblox data connectors are available"
              }
            },
            "Subscription ID": {
              "type": "string",
              "metadata": {
                "description": "Enter the Azure Subscription ID in which your Infoblox data connectors are available, make sure that the subscription id is as per the Azure portal at all places"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http"
                    }
                  },
                  "actions": {
                    "For_each_app": {
                      "foreach": "@body('Get_all_Infoblox_Function_apps')",
                      "actions": {
                        "Sync_timer_trigger_request": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Parse_Auth_token')?['access_token']} "
                            },
                            "method": "POST",
                            "uri": "https://@{variables('Manage')}.azure.com/subscriptions/@{variables('Subscription Id')}/resourceGroups/@{variables('Resource Group Name')}/providers/Microsoft.Web/sites/@{items('For_each_app')?['name']}/syncfunctiontriggers?api-version=2022-03-01"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_all_Infoblox_Function_apps": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Get_Auth_token": {
                      "runAfter": {
                        "Initialize_Management_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": "client_id=@{variables('Client Id')}&\nclient_secret=@{variables('Client Secret')}&\ngrant_type=client_credentials&\nscope=https://@{variables('Manage')}.azure.com/.default",
                        "headers": {
                          "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "method": "POST",
                        "uri": "https://login.@{variables('MicrosoftOnline')}.com/@{variables('Tenant Id')}/oauth2/v2.0/token"
                      }
                    },
                    "Get_all_Infoblox_Function_apps": {
                      "runAfter": {
                        "Get_all_running_function_app": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Get_all_running_function_app')",
                        "where": "@or(startsWith(item()?['name'], 'Curr'), startsWith(item()?['name'], 'Hist'),startsWith(item()?['name'], 'Jparsehist'),startsWith(item()?['name'], 'Jparsecurr'),startsWith(item()?['name'], 'indhist'),startsWith(item()?['name'], 'indcurr'),startsWith(item()?['name'], 'dossierlook'))"
                      }
                    },
                    "Get_all_running_function_app": {
                      "runAfter": {
                        "Parse_function_app_list": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Parse_function_app_list')?['value']",
                        "where": "@equals(item()?['properties']?['state'], 'Running')"
                      }
                    },
                    "Get_function_app_list": {
                      "runAfter": {
                        "Parse_Auth_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Authorization": "Bearer @{body('Parse_Auth_token')?['access_token']} "
                        },
                        "method": "GET",
                        "uri": "https://@{variables('Manage')}.azure.com/subscriptions/@{variables('Subscription Id')}/resourceGroups/@{variables('Resource Group Name')}/providers/Microsoft.Web/sites?api-version=2022-03-01"
                      }
                    },
                    "Initialize_Client_Id": {
                      "runAfter": {
                        "Initialize_Tenant_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Client Id",
                            "type": "string",
                            "value": "[[trim(parameters('Client ID'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Client_Secret": {
                      "runAfter": {
                        "Initialize_Client_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Client Secret",
                            "type": "string",
                            "value": "[[trim(parameters('Client Secret'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Management_variable": {
                      "runAfter": {
                        "Initialize_Microsoftonline_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Manage",
                            "type": "string",
                            "value": "management"
                          }
                        ]
                      }
                    },
                    "Initialize_Microsoftonline_variable": {
                      "runAfter": {
                        "Subscription_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "MicrosoftOnline",
                            "type": "string",
                            "value": "microsoftonline"
                          }
                        ]
                      }
                    },
                    "Initialize_Resource_Group": {
                      "runAfter": {
                        "Initialize_Client_Secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Resource Group Name",
                            "type": "string",
                            "value": "[[trim(parameters('Resource Group Name'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Tenant_Id": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Tenant Id",
                            "type": "string",
                            "value": "[[trim(parameters('Tenant ID'))]"
                          }
                        ]
                      }
                    },
                    "Parse_Auth_token": {
                      "runAfter": {
                        "Get_Auth_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Auth_token')",
                        "schema": {
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "expires_in": {
                              "type": "integer"
                            },
                            "ext_expires_in": {
                              "type": "integer"
                            },
                            "token_type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_function_app_list": {
                      "runAfter": {
                        "Get_function_app_list": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_function_app_list')",
                        "schema": {
                          "properties": {
                            "value": {
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "identity": {
                                    "properties": {
                                      "principalId": {
                                        "type": "string"
                                      },
                                      "tenantId": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "kind": {
                                    "type": "string"
                                  },
                                  "location": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "adminEnabled": {
                                        "type": "boolean"
                                      },
                                      "afdEnabled": {
                                        "type": "boolean"
                                      },
                                      "availabilityState": {
                                        "type": "string"
                                      },
                                      "clientAffinityEnabled": {
                                        "type": "boolean"
                                      },
                                      "clientCertEnabled": {
                                        "type": "boolean"
                                      },
                                      "clientCertMode": {
                                        "type": "string"
                                      },
                                      "containerSize": {
                                        "type": "integer"
                                      },
                                      "contentAvailabilityState": {
                                        "type": "string"
                                      },
                                      "csrs": {
                                        "type": "array"
                                      },
                                      "customDomainVerificationId": {
                                        "type": "string"
                                      },
                                      "dailyMemoryTimeQuota": {
                                        "type": "integer"
                                      },
                                      "defaultHostName": {
                                        "type": "string"
                                      },
                                      "defaultHostNameScope": {
                                        "type": "string"
                                      },
                                      "deploymentId": {
                                        "type": "string"
                                      },
                                      "dnsConfiguration": {
                                        "type": "object"
                                      },
                                      "eligibleLogCategories": {
                                        "type": "string"
                                      },
                                      "enabled": {
                                        "type": "boolean"
                                      },
                                      "enabledHostNames": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "endToEndEncryptionEnabled": {
                                        "type": "boolean"
                                      },
                                      "ftpUsername": {
                                        "type": "string"
                                      },
                                      "ftpsHostName": {
                                        "type": "string"
                                      },
                                      "functionsRuntimeAdminIsolationEnabled": {
                                        "type": "boolean"
                                      },
                                      "homeStamp": {
                                        "type": "string"
                                      },
                                      "hostNameSslStates": {
                                        "items": {
                                          "properties": {
                                            "hostType": {
                                              "type": "string"
                                            },
                                            "ipBasedSslState": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "sslState": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "name",
                                            "sslState",
                                            "ipBasedSslResult",
                                            "virtualIP",
                                            "virtualIPv6",
                                            "thumbprint",
                                            "certificateResourceId",
                                            "toUpdate",
                                            "toUpdateIpBasedSsl",
                                            "ipBasedSslState",
                                            "hostType"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "hostNames": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "hostNamesDisabled": {
                                        "type": "boolean"
                                      },
                                      "httpsOnly": {
                                        "type": "boolean"
                                      },
                                      "hyperV": {
                                        "type": "boolean"
                                      },
                                      "inboundIpAddress": {
                                        "type": "string"
                                      },
                                      "ipMode": {
                                        "type": "string"
                                      },
                                      "isXenon": {
                                        "type": "boolean"
                                      },
                                      "keyVaultReferenceIdentity": {
                                        "type": "string"
                                      },
                                      "kind": {
                                        "type": "string"
                                      },
                                      "lastModifiedTimeUtc": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "outboundIpAddresses": {
                                        "type": "string"
                                      },
                                      "possibleInboundIpAddresses": {
                                        "type": "string"
                                      },
                                      "possibleOutboundIpAddresses": {
                                        "type": "string"
                                      },
                                      "redundancyMode": {
                                        "type": "string"
                                      },
                                      "repositorySiteName": {
                                        "type": "string"
                                      },
                                      "reserved": {
                                        "type": "boolean"
                                      },
                                      "resourceGroup": {
                                        "type": "string"
                                      },
                                      "runtimeAvailabilityState": {
                                        "type": "string"
                                      },
                                      "scmSiteAlsoStopped": {
                                        "type": "boolean"
                                      },
                                      "secretsCollection": {
                                        "type": "array"
                                      },
                                      "selfLink": {
                                        "type": "string"
                                      },
                                      "serverFarmId": {
                                        "type": "string"
                                      },
                                      "siteConfig": {
                                        "properties": {
                                          "acrUseManagedIdentityCreds": {
                                            "type": "boolean"
                                          },
                                          "alwaysOn": {
                                            "type": "boolean"
                                          },
                                          "functionAppScaleLimit": {
                                            "type": "integer"
                                          },
                                          "http20Enabled": {
                                            "type": "boolean"
                                          },
                                          "linuxFxVersion": {
                                            "type": "string"
                                          },
                                          "minimumElasticInstanceCount": {
                                            "type": "integer"
                                          },
                                          "numberOfWorkers": {
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "siteDisabledReason": {
                                        "type": "integer"
                                      },
                                      "siteProperties": {
                                        "properties": {
                                          "properties": {
                                            "items": {
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "required": [
                                                "name",
                                                "value"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "sku": {
                                        "type": "string"
                                      },
                                      "state": {
                                        "type": "string"
                                      },
                                      "storageAccountRequired": {
                                        "type": "boolean"
                                      },
                                      "storageRecoveryDefaultState": {
                                        "type": "string"
                                      },
                                      "usageState": {
                                        "type": "string"
                                      },
                                      "vnetBackupRestoreEnabled": {
                                        "type": "boolean"
                                      },
                                      "vnetContentShareEnabled": {
                                        "type": "boolean"
                                      },
                                      "vnetImagePullEnabled": {
                                        "type": "boolean"
                                      },
                                      "vnetRouteAllEnabled": {
                                        "type": "boolean"
                                      },
                                      "webSpace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "tags": {
                                    "properties": {
                                      "Jira": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "type",
                                  "kind",
                                  "location",
                                  "properties"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Subscription_Id": {
                      "runAfter": {
                        "Initialize_Resource_Group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Subscription Id",
                            "type": "string",
                            "value": "[[trim(parameters('Subscription ID'))]"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Data-Connector-Trigger-Sync",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": "[variables('TemplateEmptyArray')]"
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Data-Connector-Trigger-Sync",
            "description": "Playbook to sync timer trigger of all Infoblox data connectors.",
            "prerequisites": [
              "Users must have a below Microsoft credentials:",
              "1.Tenant ID",
              "2.Client ID",
              "3.Client Secret",
              "4.Resource Group Name",
              "5.Subscription ID"
            ],
            "postDeployment": [
              "Run the playbook to sync timer trigger of all Infoblox data connectors."
            ],
            "tags": [
              "Infoblox",
              "Sync",
              "Timer",
              "Trigger"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Data-Connector-Trigger-Sync",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-DHCP-Lookup Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-DHCP-Lookup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Workspace Name": {
              "type": "string",
              "metadata": {
                "description": "Enter name of Log Analytics Workspace where DHCP data is available"
              }
            },
            "Lookup Time": {
              "type": "string",
              "defaultValue": "14d",
              "metadata": {
                "description": "Enter time period (in days) in which you want to search for DHCP lookup data"
              }
            }
          },
          "variables": {
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_No_IPs_Found": {
                      "actions": {
                        "Terminate_As_No_IPs_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "No IPs found associated with incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Entities_-_Get_IPs')?['IPs'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Initialize_Number_Of_Comments": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_Each_IP": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Condition_To_Verify_IP_Address_is_Empty_Or_Not": {
                          "actions": {
                            "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100": {
                              "actions": {
                                "Add_Comment_To_Incident_For_Empty_IP_Address_Found": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>Empty IP Address found.</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comments_Count_For_Empty_IP_Address": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_For_Empty_IP_Address_Found": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "no_of_comments",
                                    "value": 1
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Has_99_Comment": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Increment_Number_Of_Comments_For_Exceeded_Limit": {
                                        "runAfter": {
                                          "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "no_of_comments",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('no_of_comments')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "less": [
                                      "@variables('no_of_comments')",
                                      99
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Verify_No_Empty_Results": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Comment_Does_Not_Reach_Limit": {
                                    "actions": {
                                      "Add_Comment__For_Empty_Results_Found_For_IP": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No Latest DHCP Lookup Data Found For IP: @{items('For_Each_IP')?['Address']}</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Increment_Comments_Count_For_Empty_Results_For_IP": {
                                        "runAfter": {
                                          "Add_Comment__For_Empty_Results_Found_For_IP": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "no_of_comments",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Verify_That_Incident_Comment_Count_Reach_To_99": {
                                          "actions": {
                                            "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": {
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>Comment limit to an incident has been breached.</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Comment_Count_To_100": {
                                              "runAfter": {
                                                "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "no_of_comments",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@variables('no_of_comments')",
                                                  99
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "less": [
                                            "@variables('no_of_comments')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Run_Query_And_Fetch_Latest_DHCP_Lookup_Data_For_Selected_Time_Period": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "For_Each_Query_Result": {
                                      "foreach": "@body('Run_Query_And_Fetch_Latest_DHCP_Lookup_Data_For_Selected_Time_Period')?['value']",
                                      "actions": {
                                        "Condition_To_Verify_That_Comment_Limit_Does_Not_Exceeded": {
                                          "actions": {
                                            "Condition_To_Verify_Character_Limit_Does_Not_Exceeded": {
                                              "actions": {
                                                "Comment_For_HTML_Table": {
                                                  "type": "ApiConnection",
                                                  "inputs": {
                                                    "body": {
                                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                                      "message": "<p>Latest DCHP Lookup Detail For IP :- &nbsp;@{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}<br>\n@{variables('html_table')}</p>"
                                                    },
                                                    "host": {
                                                      "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                      }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                  }
                                                },
                                                "Increment_Comments_Count_For_HTML_Table": {
                                                  "runAfter": {
                                                    "Comment_For_HTML_Table": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "IncrementVariable",
                                                  "inputs": {
                                                    "name": "no_of_comments",
                                                    "value": 1
                                                  }
                                                }
                                              },
                                              "else": {
                                                "actions": {
                                                  "Comment_For_Characters_Limit": {
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                      "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p>Query contains more than 30000 characters for IP: @{items('For_Each_IP')?['Address']} Latest DHCP lookup data.</p>"
                                                      },
                                                      "host": {
                                                        "connection": {
                                                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                      },
                                                      "method": "post",
                                                      "path": "/Incidents/Comment"
                                                    }
                                                  },
                                                  "Increment_Comments_Count_For_Characters_Limit": {
                                                    "runAfter": {
                                                      "Comment_For_Characters_Limit": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                      "name": "no_of_comments",
                                                      "value": 1
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "lessOrEquals": [
                                                      "@length(variables('html_table'))",
                                                      30000
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            }
                                          },
                                          "runAfter": {
                                            "Set_HTML_Table_Content_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Condition_To_Verify_That_Incident_Has_99_Comments": {
                                                "actions": {
                                                  "Add_Comment_That_Limit_Has_Been_Exceeded": {
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                      "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p>Comment limit to an incident has been breached.</p>"
                                                      },
                                                      "host": {
                                                        "connection": {
                                                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                      },
                                                      "method": "post",
                                                      "path": "/Incidents/Comment"
                                                    }
                                                  },
                                                  "Increment_Comments_Count": {
                                                    "runAfter": {
                                                      "Add_Comment_That_Limit_Has_Been_Exceeded": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                      "name": "no_of_comments",
                                                      "value": 1
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "equals": [
                                                        "@variables('no_of_comments')",
                                                        99
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@variables('no_of_comments')",
                                                  99
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Parse_JSON_For_Query_Result_Data": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@items('For_Each_Query_Result')",
                                            "schema": {
                                              "properties": {
                                                "Activity": {
                                                  "type": "string"
                                                },
                                                "DeviceAddress": {
                                                  "type": "string"
                                                },
                                                "DeviceDnsDomain": {
                                                  "type": "string"
                                                },
                                                "DeviceName": {
                                                  "type": "string"
                                                },
                                                "InfobloxClientID": {
                                                  "type": "string"
                                                },
                                                "InfobloxDHCPOptions": {
                                                  "type": "string"
                                                },
                                                "InfobloxDUID": {
                                                  "type": "string"
                                                },
                                                "InfobloxFingerprint": {
                                                  "type": "string"
                                                },
                                                "InfobloxFingerprintPr": {
                                                  "type": "string"
                                                },
                                                "InfobloxHost": {
                                                  "type": "string"
                                                },
                                                "InfobloxHostID": {
                                                  "type": "string"
                                                },
                                                "InfobloxIPSpace": {
                                                  "type": "string"
                                                },
                                                "InfobloxLeaseOp": {
                                                  "type": "string"
                                                },
                                                "InfobloxLeaseUUID": {
                                                  "type": "string"
                                                },
                                                "InfobloxLifetime": {
                                                  "type": "string"
                                                },
                                                "InfobloxRangeEnd": {
                                                  "type": "string"
                                                },
                                                "InfobloxRangeStart": {
                                                  "type": "string"
                                                },
                                                "InfobloxSubnet": {
                                                  "type": "string"
                                                },
                                                "SourceHostName": {
                                                  "type": "string"
                                                },
                                                "SourceIP": {
                                                  "type": "string"
                                                },
                                                "SourceMACAddress": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        },
                                        "Set_HTML_Table_Content_Data": {
                                          "runAfter": {
                                            "Parse_JSON_For_Query_Result_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "html_table",
                                            "value": "<p style=\"height:0px\"><table><tbody> \n<tr><th colspan=\"2\">DHCP Lookup For IP @{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</th></tr>\n<tr><td>Source IP</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</td></tr>\n<tr><td>Source HostName</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceHostName']}</td></tr>\n<tr><td>Source Mac Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceMACAddress']}</td></tr>\n<tr><td>Device Name</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceName']}</td></tr>\n<tr><td>Device Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceAddress']}</td></tr>\n<tr><td>Device DNS Domain</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceDnsDomain']}</td></tr>\n<tr><td>Infoblox Host</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxHost']}</td></tr>\n<tr><td>Infoblox Subnet</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxSubnet']}</td></tr>\n<tr><td>Infoblox Range Start</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeStart']}</td></tr>\n<tr><td>Infoblox Range End</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeEnd']}</td></tr>\n<tr><td>Infoblox Lease Op</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLeaseOp']}</td></tr>\n<tr><td>Infoblox Client ID</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxClientID']}</td></tr>\n<tr><td>Infoblox Lifetime</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLifetime']}</td></tr>\n<tr><td>Infoblox Fingerprint Pr</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprintPr']}</td></tr>\n<tr><td>Infoblox Fingerprint</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprint']}</td></tr>\n<tr><td>Infoblox DHCP Options</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxDHCPOptions']}</td></tr>\n</tbody></table></p>"
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@empty(body('Run_Query_And_Fetch_Latest_DHCP_Lookup_Data_For_Selected_Time_Period')?['value'])",
                                        "@true"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Run_Query_And_Fetch_Latest_DHCP_Lookup_Data_For_Selected_Time_Period": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": "let DHCP_VALUE = 'DHCP';\nlet IP = '@{items('For_each_IP')?['Address']}';\nCommonSecurityLog\n| where TimeGenerated >= ago(@{variables('lookup_time')})\n| where DeviceEventClassID contains DHCP_VALUE\n    and SourceIP == IP\n| top 1 by TimeGenerated desc\n| parse-kv AdditionalExtensions as (InfobloxHost : string,\nInfobloxHostID : string,\nInfobloxIPSpace : string,\nInfobloxSubnet : string,\nInfobloxRangeStart : string,\nInfobloxRangeEnd : string,\nInfobloxLeaseOp : string,\nInfobloxClientID : string,\nInfobloxDUID : string,\nInfobloxLifetime : string,\nInfobloxLeaseUUID : string,\nInfobloxFingerprintPr : string,\nInfobloxFingerprint : string,\nInfobloxDHCPOptions : string) with(kv_delimiter=\"=\", pair_delimiter=\";\")\n| project \nSourceIP,SourceHostName,SourceMACAddress, Activity, DeviceName,DeviceAddress,DeviceDnsDomain,\nInfobloxHost,\nInfobloxHostID,\nInfobloxIPSpace,\nInfobloxSubnet,\nInfobloxRangeStart,\nInfobloxRangeEnd,\nInfobloxLeaseOp,\nInfobloxClientID,\nInfobloxDUID,\nInfobloxLifetime,\nInfobloxLeaseUUID,\nInfobloxFingerprintPr,\nInfobloxFingerprint,\nInfobloxDHCPOptions\n",
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/queryData",
                                  "queries": {
                                    "resourcegroups": "[[resourceGroup().name]",
                                    "resourcename": "[[trim(parameters('Workspace Name'))]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[[subscription().subscriptionId]",
                                    "timerange": "Set in query"
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@empty(items('For_Each_IP')?['Address'])",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_IPs_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_Error_Message": {
                      "runAfter": {
                        "Initialize_Lookup_Back_Time_Period": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_HTML_Table": {
                      "runAfter": {
                        "Initialize_Error_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "html_table",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Lookup_Back_Time_Period": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "lookup_time",
                            "type": "string",
                            "value": "[[trim(parameters('Lookup Time'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Number_Of_Comments": {
                      "runAfter": {
                        "Initialize_HTML_Table": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "no_of_comments",
                            "type": "integer",
                            "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-DHCP-Lookup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-DHCP-Lookup",
            "description": "The playbook will retrieve IP entities from an incident, search for related DHCP data in a table, and if found, add the DHCP lookup data as a comment on the incident.",
            "prerequisites": [
              "1. CEF based Infoblox Data Connector should be configured to ingest DHCP lease related data in Microsoft Sentinel."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping available for IP.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. Click on the Run button beside this playbook."
            ],
            "entities": [
              "IP"
            ],
            "tags": [
              "Infoblox",
              "DHCP",
              "IP",
              "Lookup"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-DHCP-Lookup",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Get-IP-Space-Data Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Get-IP-Space-Data",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter value for API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "BaseUrl": {
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Initialize_Base_URL": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Break_Loop": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Break_Loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Limit": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Limit": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "limit",
                            "type": "integer",
                            "value": 25
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Offset": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Offset": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "offset",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Retry_Count": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Retry Count",
                            "type": "integer",
                            "value": 3
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Table_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Table_Name": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Table Name",
                            "type": "string",
                            "value": "IP_Space_Info"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Until_Loop_For_Fetching_IP_Space_Endpoint_Data_With_Pagination": {
                      "actions": {
                        "Condition_To_Verify_API_Call_Is_Success_Or_Not": {
                          "actions": {
                            "Condition_For_IP_Space_Result_Is_Available_Or_Not": {
                              "actions": {
                                "Set_Break_Loop_True_Because_Of_Empty_Results": {
                                  "inputs": {
                                    "name": "Break_Loop",
                                    "value": "@true"
                                  },
                                  "type": "SetVariable"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Data_Is_Sent_To_Workspace": {
                                    "actions": {
                                      "Condition_For_Length_Of_Data_is_Less_Than_Limit_": {
                                        "actions": {
                                          "Set_Break_Loop_True_Because_Of_Data_Is_Less_Than_Limit": {
                                            "inputs": {
                                              "name": "Break_Loop",
                                              "value": "@true"
                                            },
                                            "type": "SetVariable"
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "less": [
                                                "@length(body('Parse_JSON_For_IP_Space_Data')?['results'])",
                                                "@variables('limit')"
                                              ]
                                            }
                                          ]
                                        },
                                        "runAfter": {
                                          "Increment_Offset_By_Limit": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Increment_Offset_By_Limit": {
                                        "inputs": {
                                          "name": "offset",
                                          "value": "@variables('limit')"
                                        },
                                        "runAfter": {
                                          "Set_Retry_Count": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable"
                                      },
                                      "Set_Retry_Count": {
                                        "inputs": {
                                          "name": "Retry Count",
                                          "value": 3
                                        },
                                        "type": "SetVariable"
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Check_Retry_Count": {
                                          "actions": {
                                            "Increment_Offset_And_Skip_The_One_Page": {
                                              "inputs": {
                                                "name": "offset",
                                                "value": "@variables('limit')"
                                              },
                                              "runAfter": {
                                                "Set_New_Retry_Count": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable"
                                            },
                                            "Set_New_Retry_Count": {
                                              "inputs": {
                                                "name": "Retry Count",
                                                "value": 3
                                              },
                                              "type": "SetVariable"
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@variables('Retry Count')",
                                                  0
                                                ]
                                              }
                                            ]
                                          },
                                          "runAfter": {
                                            "Decrement_Retry_Count": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Decrement_Retry_Count": {
                                          "inputs": {
                                            "name": "Retry Count",
                                            "value": 1
                                          },
                                          "type": "DecrementVariable"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Send_Data_Into_Log_Analytics_Workspace')?['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "runAfter": {
                                      "Send_Data_Into_Log_Analytics_Workspace": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Send_Data_Into_Log_Analytics_Workspace": {
                                    "inputs": {
                                      "body": "@{body('Parse_JSON_For_IP_Space_Data')?['results']}",
                                      "headers": {
                                        "Log-Type": "@variables('Table Name')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector_3']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    },
                                    "type": "ApiConnection"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@empty(body('Parse_JSON_For_IP_Space_Data')?['results'])",
                                      "@true"
                                    ]
                                  }
                                ]
                              },
                              "runAfter": {
                                "Parse_JSON_For_IP_Space_Data": [
                                  "Succeeded"
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_IP_Space_Data": {
                              "inputs": {
                                "content": "@body('HTTP_Request_To_IP_Space_Endpoint')",
                                "schema": {
                                  "properties": {
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "asm_config": {
                                            "properties": {
                                              "asm_threshold": {
                                                "type": "integer"
                                              },
                                              "enable": {
                                                "type": "boolean"
                                              },
                                              "enable_notification": {
                                                "type": "boolean"
                                              },
                                              "forecast_period": {
                                                "type": "integer"
                                              },
                                              "growth_factor": {
                                                "type": "integer"
                                              },
                                              "growth_type": {
                                                "type": "string"
                                              },
                                              "history": {
                                                "type": "integer"
                                              },
                                              "min_total": {
                                                "type": "integer"
                                              },
                                              "min_unused": {
                                                "type": "integer"
                                              },
                                              "reenable_date": {
                                                "format": "date-time",
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "asm_threshold",
                                              "enable",
                                              "enable_notification",
                                              "forecast_period",
                                              "growth_factor",
                                              "growth_type",
                                              "history",
                                              "min_total",
                                              "min_unused",
                                              "reenable_date"
                                            ],
                                            "type": "object"
                                          },
                                          "asm_scope_flag": {
                                            "type": "integer"
                                          },
                                          "comment": {
                                            "type": "string"
                                          },
                                          "compartment_id": {
                                            "type": "string"
                                          },
                                          "created_at": {
                                            "format": "date-time",
                                            "type": "string"
                                          },
                                          "ddns_client_update": {
                                            "type": "string"
                                          },
                                          "ddns_conflict_resolution_mode": {
                                            "type": "string"
                                          },
                                          "ddns_domain": {
                                            "type": "string"
                                          },
                                          "ddns_generate_name": {
                                            "type": "boolean"
                                          },
                                          "ddns_generated_prefix": {
                                            "type": "string"
                                          },
                                          "ddns_send_updates": {
                                            "type": "boolean"
                                          },
                                          "ddns_ttl_percent": {
                                            "type": "integer"
                                          },
                                          "ddns_update_on_renew": {
                                            "type": "boolean"
                                          },
                                          "ddns_use_conflict_resolution": {
                                            "type": "boolean"
                                          },
                                          "default_realms": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "dhcp_config": {
                                            "properties": {
                                              "abandoned_reclaim_time": {
                                                "type": "integer"
                                              },
                                              "abandoned_reclaim_time_v6": {
                                                "type": "integer"
                                              },
                                              "allow_unknown": {
                                                "type": "boolean"
                                              },
                                              "allow_unknown_v6": {
                                                "type": "boolean"
                                              },
                                              "echo_client_id": {
                                                "type": "boolean"
                                              },
                                              "filters": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "filters_large_selection": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "filters_v6": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "ignore_client_uid": {
                                                "type": "boolean"
                                              },
                                              "ignore_list": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "lease_time": {
                                                "type": "integer"
                                              },
                                              "lease_time_v6": {
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "abandoned_reclaim_time",
                                              "abandoned_reclaim_time_v6",
                                              "allow_unknown",
                                              "allow_unknown_v6",
                                              "echo_client_id",
                                              "filters",
                                              "filters_large_selection",
                                              "filters_v6",
                                              "ignore_client_uid",
                                              "ignore_list",
                                              "lease_time",
                                              "lease_time_v6"
                                            ],
                                            "type": "object"
                                          },
                                          "dhcp_options": {
                                            "items": {
                                              "properties": {
                                                "group": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "option_code": {
                                                  "type": "string"
                                                },
                                                "option_value": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "group",
                                                "option_code",
                                                "option_value",
                                                "type"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "dhcp_options_v6": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "header_option_filename": {
                                            "type": "string"
                                          },
                                          "header_option_server_address": {
                                            "type": "string"
                                          },
                                          "header_option_server_name": {
                                            "type": "string"
                                          },
                                          "hostname_rewrite_char": {
                                            "type": "string"
                                          },
                                          "hostname_rewrite_enabled": {
                                            "type": "boolean"
                                          },
                                          "hostname_rewrite_regex": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "inheritance_sources": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "tags": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "threshold": {
                                            "properties": {
                                              "enabled": {
                                                "type": "boolean"
                                              },
                                              "high": {
                                                "type": "integer"
                                              },
                                              "low": {
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "enabled",
                                              "high",
                                              "low"
                                            ],
                                            "type": "object"
                                          },
                                          "updated_at": {
                                            "format": "date-time",
                                            "type": "string"
                                          },
                                          "utilization": {
                                            "properties": {
                                              "abandon_utilization": {
                                                "type": "integer"
                                              },
                                              "abandoned": {
                                                "type": "string"
                                              },
                                              "dynamic": {
                                                "type": "string"
                                              },
                                              "free": {
                                                "type": "string"
                                              },
                                              "static": {
                                                "type": "string"
                                              },
                                              "total": {
                                                "type": "string"
                                              },
                                              "used": {
                                                "type": "string"
                                              },
                                              "utilization": {
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "abandon_utilization",
                                              "abandoned",
                                              "dynamic",
                                              "free",
                                              "static",
                                              "total",
                                              "used",
                                              "utilization"
                                            ],
                                            "type": "object"
                                          },
                                          "utilization_v6": {
                                            "properties": {
                                              "abandoned": {
                                                "type": "string"
                                              },
                                              "dynamic": {
                                                "type": "string"
                                              },
                                              "static": {
                                                "type": "string"
                                              },
                                              "total": {
                                                "type": "string"
                                              },
                                              "used": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "abandoned",
                                              "dynamic",
                                              "static",
                                              "total",
                                              "used"
                                            ],
                                            "type": "object"
                                          },
                                          "vendor_specific_option_option_space": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "asm_config",
                                          "asm_scope_flag",
                                          "comment",
                                          "compartment_id",
                                          "created_at",
                                          "ddns_client_update",
                                          "ddns_conflict_resolution_mode",
                                          "ddns_domain",
                                          "ddns_generate_name",
                                          "ddns_generated_prefix",
                                          "ddns_send_updates",
                                          "ddns_ttl_percent",
                                          "ddns_update_on_renew",
                                          "ddns_use_conflict_resolution",
                                          "default_realms",
                                          "dhcp_config",
                                          "dhcp_options",
                                          "dhcp_options_v6",
                                          "header_option_filename",
                                          "header_option_server_address",
                                          "header_option_server_name",
                                          "hostname_rewrite_char",
                                          "hostname_rewrite_enabled",
                                          "hostname_rewrite_regex",
                                          "id",
                                          "inheritance_sources",
                                          "name",
                                          "tags",
                                          "threshold",
                                          "updated_at",
                                          "utilization",
                                          "utilization_v6",
                                          "vendor_specific_option_option_space"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "results"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "ParseJson"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_Break_Loop_True_Because_Of_Status_Code_Is_Not_200": {
                                "inputs": {
                                  "name": "Break_Loop",
                                  "value": "@true"
                                },
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_IP_Space_Endpoint')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "HTTP_Request_To_IP_Space_Endpoint": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_IP_Space_Endpoint": {
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "_limit": "@{variables('limit')}",
                              "_offset": "@{variables('offset')}"
                            },
                            "uri": "@{variables('base_url')}/api/ddi/v1/ipam/ip_space"
                          },
                          "type": "Http"
                        }
                      },
                      "expression": "@equals(variables('Break_Loop'), true)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Get-IP-Space-Data",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Get-IP-Space-Data",
            "description": "The playbook will fetch the data from 'IP Space' API and ingest it into custom table",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize connection.",
              "1. Go to your logic app -> API connections -> Select connection resource",
              "2. Go to General -> edit API connection",
              "3. Provide Workspace Id and Workspace Key of Log Analytics Workspace where Table will be created",
              "4. Click Save"
            ],
            "entities": [
              "IP"
            ],
            "tags": [
              "Infoblox",
              "IP Space Name"
            ],
            "lastUpdateTime": "2024-08-09T15:24:09.773Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Get-IP-Space-Data",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Get-Service-Name Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Get-Service-Name",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter baseurl for your Infoblox instance.(e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "defaultValue": "[[parameters('Infoblox API Key')]",
                      "type": "String"
                    },
                    "BaseUrl": {
                      "defaultValue": "[[parameters('Infoblox Base Url')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Initialize_Base_URL": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Break_Loop": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Break_Loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Limit": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Limit": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "limit",
                            "type": "integer",
                            "value": 25
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Offset": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Offset": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "offset",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Retry_Count": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Retry Count",
                            "type": "integer",
                            "value": 3
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Table_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Table_Name": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Table Name",
                            "type": "string",
                            "value": "Service_Name_Info"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Until_Loop_For_Fetching_Service_Endpoint_Data_With_Pagination": {
                      "actions": {
                        "Condition_To_Verify_API_Call_Is_Success_Or_Not": {
                          "actions": {
                            "Condition_For_Services_Result_Is_Available_Or_Not": {
                              "actions": {
                                "Set_Break_Loop_True_Because_Of_Empty_Results": {
                                  "inputs": {
                                    "name": "Break_Loop",
                                    "value": "@true"
                                  },
                                  "type": "SetVariable"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Data_Is_Sent_To_Workspace": {
                                    "actions": {
                                      "Condition_For_Length_Of_Data_is_Less_Than_Limit_": {
                                        "actions": {
                                          "Set_Break_Loop_True_Because_Of_Data_Is_Less_Than_Limit": {
                                            "inputs": {
                                              "name": "Break_Loop",
                                              "value": "@true"
                                            },
                                            "type": "SetVariable"
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "less": [
                                                "@length(body('Parse_JSON_For_Services_Data')?['results'])",
                                                "@variables('limit')"
                                              ]
                                            }
                                          ]
                                        },
                                        "runAfter": {
                                          "Increment_Offset_By_Limit": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Increment_Offset_By_Limit": {
                                        "inputs": {
                                          "name": "offset",
                                          "value": "@variables('limit')"
                                        },
                                        "runAfter": {
                                          "Set_Retry_Count": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable"
                                      },
                                      "Set_Retry_Count": {
                                        "inputs": {
                                          "name": "Retry Count",
                                          "value": 3
                                        },
                                        "type": "SetVariable"
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Check_Retry_Count": {
                                          "actions": {
                                            "Increment_Offset_And_Skip_The_One_Page": {
                                              "inputs": {
                                                "name": "offset",
                                                "value": "@variables('limit')"
                                              },
                                              "runAfter": {
                                                "Set_New_Retry_Count": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable"
                                            },
                                            "Set_New_Retry_Count": {
                                              "inputs": {
                                                "name": "Retry Count",
                                                "value": 3
                                              },
                                              "type": "SetVariable"
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@variables('Retry Count')",
                                                  0
                                                ]
                                              }
                                            ]
                                          },
                                          "runAfter": {
                                            "Decrement_Retry_Count": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Decrement_Retry_Count": {
                                          "inputs": {
                                            "name": "Retry Count",
                                            "value": 1
                                          },
                                          "type": "DecrementVariable"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Send_Data_Into_Log_Analytics_Workspace')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "runAfter": {
                                      "Send_Data_Into_Log_Analytics_Workspace": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Send_Data_Into_Log_Analytics_Workspace": {
                                    "inputs": {
                                      "body": "@{body('Parse_JSON_For_Services_Data')?['results']}",
                                      "headers": {
                                        "Log-Type": "@variables('Table Name')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    },
                                    "type": "ApiConnection"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@empty(body('Parse_JSON_For_Services_Data')?['results'])",
                                      "@true"
                                    ]
                                  }
                                ]
                              },
                              "runAfter": {
                                "Parse_JSON_For_Services_Data": [
                                  "Succeeded"
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Services_Data": {
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Services_Endpoint')",
                                "schema": {
                                  "results": [
                                    {
                                      "configs": [
                                        {
                                          "current_version": "string",
                                          "host_id": "string",
                                          "id": "string",
                                          "service_id": "string",
                                          "upgraded_at": "string"
                                        }
                                      ],
                                      "created_at": "string",
                                      "desired_state": "string",
                                      "destinations": "[variables('TemplateEmptyArray')]",
                                      "id": "string",
                                      "name": "string",
                                      "pool_id": "string",
                                      "service_type": "string",
                                      "source_interfaces": "[variables('TemplateEmptyArray')]",
                                      "updated_at": "string"
                                    }
                                  ]
                                }
                              },
                              "type": "ParseJson"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_Break_Loop_True_Because_Of_Status_Code_Is_Not_200": {
                                "inputs": {
                                  "name": "Break_Loop",
                                  "value": "@true"
                                },
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Services_Endpoint')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "HTTP_Request_To_Services_Endpoint": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Services_Endpoint": {
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "_limit": "@{variables('limit')}",
                              "_offset": "@{variables('offset')}"
                            },
                            "uri": "@{variables('base_url')}/api/infra/v1/services"
                          },
                          "type": "Http"
                        }
                      },
                      "expression": "@equals(variables('Break_Loop'), true)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Get-Service-Name",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Get-Service-Name",
            "description": "This playbook will fetch the data from 'Services' API and ingest it into custom table",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize connection.",
              "1. Go to your logic app -> API connections -> Select connection resource",
              "2. Go to General -> edit API connection",
              "3. Provide Workspace Id and Workspace Key of Log Analytics Workspace where Table will be created",
              "3. Click Save"
            ],
            "tags": [
              "Infoblox",
              "Service Name"
            ],
            "lastUpdateTime": "2024-08-09T15:24:09.773Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Get-Service-Name",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName9')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-IPAM-Lookup Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion9')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-IPAM-Lookup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base URL for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "BaseUrl": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_Error_Occurred_While_Fetching_IPs_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_Occured_While_API_Failure": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "@variables('error_message')"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_IP_Address": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('api_failure_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_IPs_Found": {
                      "actions": {
                        "Add_Comment_To_Incident_No_IPs_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No IPs found associated with incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_Due_To_No_IPs_Found_Associated_With_Incident_Entities": {
                          "runAfter": {
                            "Add_Comment_To_Incident_No_IPs_Found": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "No IPs found associated with incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(body('Entities_-_Get_IPs')?['IPs'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Initialize_Error_False_While_Fetching_IP_Details_From_API": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_Each_IP_Address": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Condition_To_Verify_If_IP_Address_is_Empty": {
                          "actions": {
                            "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100": {
                              "actions": {
                                "Add_Comment_To_Incident_For_Empty_IP_Address_Found": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>Empty IP Address found.</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comments_Count_For_Empty_IP_Address": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_For_Empty_IP_Address_Found": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "no_of_comments",
                                    "value": 1
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Has_99_Comment": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Increment_Number_Of_Comments_For_Exceeded_Limit": {
                                        "runAfter": {
                                          "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "no_of_comments",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('no_of_comments')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "less": [
                                      "@variables('no_of_comments')",
                                      99
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Verify_If_IP_Lookup_Information_Fetched_Successfully": {
                                "actions": {
                                  "Condition_To_Verify_IP_Lookup_Results_Are_Empty": {
                                    "actions": {
                                      "Condition_To_Verify_That_Incident_Comment_Does_Not_Reach_Limit": {
                                        "actions": {
                                          "Add_Comment_To_Incident_For_No_Results_Found_For_IP_Address": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                              "body": {
                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                "message": "<p>No IPAM Lookup Results Found For IP: @{items('For_Each_IP_Address')?['Address']}</p>"
                                              },
                                              "host": {
                                                "connection": {
                                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                }
                                              },
                                              "method": "post",
                                              "path": "/Incidents/Comment"
                                            }
                                          },
                                          "Increment_Comments_Count": {
                                            "runAfter": {
                                              "Add_Comment_To_Incident_For_No_Results_Found_For_IP_Address": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "IncrementVariable",
                                            "inputs": {
                                              "name": "no_of_comments",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Condition_To_Verify_That_Incident_Comment_Count_Reach_To_99": {
                                              "actions": {
                                                "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": {
                                                  "type": "ApiConnection",
                                                  "inputs": {
                                                    "body": {
                                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                                      "message": "<p>Comment limit to an incident has been breached.</p>"
                                                    },
                                                    "host": {
                                                      "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                      }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                  }
                                                },
                                                "Increment_Comment_Count_To_100": {
                                                  "runAfter": {
                                                    "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "IncrementVariable",
                                                  "inputs": {
                                                    "name": "no_of_comments",
                                                    "value": 1
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@variables('no_of_comments')",
                                                      99
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "less": [
                                                "@variables('no_of_comments')",
                                                99
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_For_IP_Lookup_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Comment_For_Whole_API_Response_Of_One_IP": {
                                          "actions": {
                                            "Add_Comment_To_Incident_For_Whole_API_Response_Of_One_IP_Traversed_(V3)": {
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>@{variables('incident_comment')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Number_Of_Comments_For_Whole_API_Response_Of_One_IP": {
                                              "runAfter": {
                                                "Add_Comment_To_Incident_For_Whole_API_Response_Of_One_IP_Traversed_(V3)": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "no_of_comments",
                                                "value": 1
                                              }
                                            },
                                            "Reset_HTML_Table_For_Whole_API_Response_Of_One_IP": {
                                              "runAfter": {
                                                "Reset_Incident_Comment_For_Whole_API_Response_Of_One_IP": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html_table",
                                                "value": "@{null}"
                                              }
                                            },
                                            "Reset_Incident_Comment_For_Whole_API_Response_Of_One_IP": {
                                              "runAfter": {
                                                "Increment_Number_Of_Comments_For_Whole_API_Response_Of_One_IP": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "incident_comment",
                                                "value": "@{null}"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "For_Each_IP_Lookup_Result": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@variables('no_of_comments')",
                                                  99
                                                ]
                                              },
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@variables('incident_comment')",
                                                    "@null"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "For_Each_IP_Lookup_Result": {
                                          "foreach": "@body('Parse_JSON_For_IP_Lookup_Data')?['results']",
                                          "actions": {
                                            "Append_End_String_Of_HTML_Table": {
                                              "runAfter": {
                                                "Condition_To_Verify_Subnet_Id_Empty": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "AppendToStringVariable",
                                              "inputs": {
                                                "name": "html_table",
                                                "value": "</tbody></table></p>"
                                              }
                                            },
                                            "Append_HTML_Table_Record_To_HTML_Table": {
                                              "runAfter": {
                                                "Append_End_String_Of_HTML_Table": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "AppendToStringVariable",
                                              "inputs": {
                                                "name": "html_table",
                                                "value": "@variables('html_table_record')"
                                              }
                                            },
                                            "Append_to_Human_Readable_Tags": {
                                              "type": "AppendToStringVariable",
                                              "inputs": {
                                                "name": "Human_Readable_Tags",
                                                "value": "@replace(replace(replace(replace(replace(string(items('For_Each_IP_Lookup_Result')?['tags']),'\"',''),'{',''),'}',''),':',' : '),',',variables('new_line'))"
                                              }
                                            },
                                            "Condition_To_Verify_Comment_Exceeded_More_Than_30000_Characters_Limit": {
                                              "actions": {
                                                "Set_Incident_Comment": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "incident_comment",
                                                    "value": "@variables('html_table')"
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "Append_HTML_Table_Record_To_HTML_Table": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Condition_To_Verify_Comment_Count_Does_Not_Exceeded_To_100": {
                                                    "actions": {
                                                      "Add_Comment_To_Incident": {
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                          "body": {
                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                            "message": "<p>@{variables('incident_comment')}</p>"
                                                          },
                                                          "host": {
                                                            "connection": {
                                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                            }
                                                          },
                                                          "method": "post",
                                                          "path": "/Incidents/Comment"
                                                        }
                                                      },
                                                      "Increment_Number_Of_Comment": {
                                                        "runAfter": {
                                                          "Add_Comment_To_Incident": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "IncrementVariable",
                                                        "inputs": {
                                                          "name": "no_of_comments",
                                                          "value": 1
                                                        }
                                                      },
                                                      "Reset_HTML_Table": {
                                                        "runAfter": {
                                                          "Reset_Incident_Comment": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "html_table",
                                                          "value": "@{null}"
                                                        }
                                                      },
                                                      "Reset_Incident_Comment": {
                                                        "runAfter": {
                                                          "Increment_Number_Of_Comment": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "incident_comment",
                                                          "value": "@{null}"
                                                        }
                                                      }
                                                    },
                                                    "else": {
                                                      "actions": {
                                                        "Condition_To_Verify_That_Incident_Has_99_Comments": {
                                                          "actions": {
                                                            "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(3)": {
                                                              "type": "ApiConnection",
                                                              "inputs": {
                                                                "body": {
                                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                  "message": "<p>Comment limit to an incident has been breached.</p>"
                                                                },
                                                                "host": {
                                                                  "connection": {
                                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                  }
                                                                },
                                                                "method": "post",
                                                                "path": "/Incidents/Comment"
                                                              }
                                                            },
                                                            "Increment_Incident_Comment": {
                                                              "runAfter": {
                                                                "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(3)": [
                                                                  "Succeeded"
                                                                ]
                                                              },
                                                              "type": "IncrementVariable",
                                                              "inputs": {
                                                                "name": "no_of_comments",
                                                                "value": 1
                                                              }
                                                            }
                                                          },
                                                          "expression": {
                                                            "and": [
                                                              {
                                                                "equals": [
                                                                  "@variables('no_of_comments')",
                                                                  99
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          "type": "If"
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "less": [
                                                            "@variables('no_of_comments')",
                                                            99
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "less": [
                                                      "@length(variables('html_table'))",
                                                      30000
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Condition_To_Verify_IP_Space_Id_Is_Empty": {
                                              "runAfter": {
                                                "Set_IP_Space": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Condition_To_Verify_IP_Space_Lookup_Is_Success_Or_Not": {
                                                    "actions": {
                                                      "Condition_To_Verify_That_IP_Space_Lookup_Result_is_Empty": {
                                                        "runAfter": {
                                                          "Parse_JSON_For_IP_Space_Lookup_Data": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "else": {
                                                          "actions": {
                                                            "Append_IP_Space_Name_To_HTML_Table": {
                                                              "type": "AppendToStringVariable",
                                                              "inputs": {
                                                                "name": "html_table_record",
                                                                "value": "<tr><td>IP Space</td><td style=\"text-align:left\">@{body('Parse_JSON_For_IP_Space_Lookup_Data')?['result']?['name']}</td></tr>"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "expression": {
                                                          "and": [
                                                            {
                                                              "equals": [
                                                                "@empty(body('Parse_JSON_For_IP_Space_Lookup_Data')?['result'])",
                                                                "@true"
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        "type": "If"
                                                      },
                                                      "Parse_JSON_For_IP_Space_Lookup_Data": {
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                          "content": "@body('HTTP_Request_To_Lookup_Information_For_An_IP_Space_')",
                                                          "schema": {
                                                            "properties": {
                                                              "result": {
                                                                "properties": {
                                                                  "asm_config": {
                                                                    "properties": {
                                                                      "asm_threshold": {
                                                                        "type": "integer"
                                                                      },
                                                                      "enable": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "enable_notification": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "forecast_period": {
                                                                        "type": "integer"
                                                                      },
                                                                      "growth_factor": {
                                                                        "type": "integer"
                                                                      },
                                                                      "growth_type": {
                                                                        "type": "string"
                                                                      },
                                                                      "history": {
                                                                        "type": "integer"
                                                                      },
                                                                      "min_total": {
                                                                        "type": "integer"
                                                                      },
                                                                      "min_unused": {
                                                                        "type": "integer"
                                                                      },
                                                                      "reenable_date": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "asm_scope_flag": {
                                                                    "type": "integer"
                                                                  },
                                                                  "comment": {
                                                                    "type": "string"
                                                                  },
                                                                  "compartment_id": {
                                                                    "type": "string"
                                                                  },
                                                                  "created_at": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_client_update": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_conflict_resolution_mode": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_domain": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_generate_name": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_generated_prefix": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_send_updates": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_ttl_percent": {
                                                                    "type": "integer"
                                                                  },
                                                                  "ddns_update_on_renew": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_use_conflict_resolution": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "default_realms": {
                                                                    "type": "array"
                                                                  },
                                                                  "dhcp_config": {
                                                                    "properties": {
                                                                      "abandoned_reclaim_time": {
                                                                        "type": "integer"
                                                                      },
                                                                      "abandoned_reclaim_time_v6": {
                                                                        "type": "integer"
                                                                      },
                                                                      "allow_unknown": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "allow_unknown_v6": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "echo_client_id": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "filters": {
                                                                        "type": "array"
                                                                      },
                                                                      "filters_large_selection": {
                                                                        "type": "array"
                                                                      },
                                                                      "filters_v6": {
                                                                        "type": "array"
                                                                      },
                                                                      "ignore_client_uid": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "ignore_list": {
                                                                        "type": "array"
                                                                      },
                                                                      "lease_time": {
                                                                        "type": "integer"
                                                                      },
                                                                      "lease_time_v6": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "dhcp_options": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "option_code": {
                                                                          "type": "string"
                                                                        },
                                                                        "option_value": {
                                                                          "type": "string"
                                                                        },
                                                                        "type": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "dhcp_options_v6": {
                                                                    "type": "array"
                                                                  },
                                                                  "header_option_filename": {
                                                                    "type": "string"
                                                                  },
                                                                  "header_option_server_address": {
                                                                    "type": "string"
                                                                  },
                                                                  "header_option_server_name": {
                                                                    "type": "string"
                                                                  },
                                                                  "hostname_rewrite_char": {
                                                                    "type": "string"
                                                                  },
                                                                  "hostname_rewrite_enabled": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "hostname_rewrite_regex": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "threshold": {
                                                                    "properties": {
                                                                      "enabled": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "high": {
                                                                        "type": "integer"
                                                                      },
                                                                      "low": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "updated_at": {
                                                                    "type": "string"
                                                                  },
                                                                  "utilization": {
                                                                    "properties": {
                                                                      "abandon_utilization": {
                                                                        "type": "integer"
                                                                      },
                                                                      "abandoned": {
                                                                        "type": "string"
                                                                      },
                                                                      "dynamic": {
                                                                        "type": "string"
                                                                      },
                                                                      "free": {
                                                                        "type": "string"
                                                                      },
                                                                      "static": {
                                                                        "type": "string"
                                                                      },
                                                                      "total": {
                                                                        "type": "string"
                                                                      },
                                                                      "used": {
                                                                        "type": "string"
                                                                      },
                                                                      "utilization": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "utilization_v6": {
                                                                    "properties": {
                                                                      "abandoned": {
                                                                        "type": "string"
                                                                      },
                                                                      "dynamic": {
                                                                        "type": "string"
                                                                      },
                                                                      "static": {
                                                                        "type": "string"
                                                                      },
                                                                      "total": {
                                                                        "type": "string"
                                                                      },
                                                                      "used": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "runAfter": {
                                                      "HTTP_Request_To_Lookup_Information_For_An_IP_Space_": [
                                                        "Succeeded",
                                                        "Failed"
                                                      ]
                                                    },
                                                    "else": {
                                                      "actions": {
                                                        "Set_Error_Message_For_IP_Space_API_Failure": {
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                            "name": "error_message_ip_space",
                                                            "value": "IP Space API request failed with status code:@{outputs('HTTP_Request_To_Lookup_Information_For_An_IP_Space_')['statusCode']}  and error message: @{body('HTTP_Request_To_Lookup_Information_For_An_IP_Space_')}"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "equals": [
                                                            "@outputs('HTTP_Request_To_Lookup_Information_For_An_IP_Space_')['statusCode']",
                                                            200
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  },
                                                  "HTTP_Request_To_Lookup_Information_For_An_IP_Space_": {
                                                    "type": "Http",
                                                    "inputs": {
                                                      "headers": {
                                                        "Authorization": "Token @{parameters('API Key')}"
                                                      },
                                                      "method": "GET",
                                                      "uri": "@{variables('base_url')}/api/ddi/v1/@{variables('ip_space_id')}"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@empty(variables('ip_space_id'))",
                                                      "@true"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Condition_To_Verify_Subnet_Id_Empty": {
                                              "runAfter": {
                                                "Set_Subnet": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Condition_To_Verify_Subnet_Lookup_Is_Success_Or_Not": {
                                                    "actions": {
                                                      "Condition_For_Subnet_Lookup_Result_is_Empty": {
                                                        "runAfter": {
                                                          "Parse_JSON_For_Subnet_Lookup_Data": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "else": {
                                                          "actions": {
                                                            "Append_Subnet_Name_To_HTML_Table": {
                                                              "type": "AppendToStringVariable",
                                                              "inputs": {
                                                                "name": "html_table_record",
                                                                "value": "<tr><td>Subnet Name</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Subnet_Lookup_Data')?['result']?['name']}</td></tr>\n<tr><td>Subnet</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Subnet_Lookup_Data')?['result']?['address']}/@{body('Parse_JSON_For_Subnet_Lookup_Data')?['result']?['cidr']}</td></tr>"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "expression": {
                                                          "and": [
                                                            {
                                                              "equals": [
                                                                "@empty(body('Parse_JSON_For_Subnet_Lookup_Data')?['result'])",
                                                                "@true"
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        "type": "If"
                                                      },
                                                      "Parse_JSON_For_Subnet_Lookup_Data": {
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                          "content": "@body('HTTP_Request_To_Lookup_Information_For_Subnet')",
                                                          "schema": {
                                                            "properties": {
                                                              "result": {
                                                                "properties": {
                                                                  "address": {
                                                                    "type": "string"
                                                                  },
                                                                  "asm_config": {
                                                                    "properties": {
                                                                      "asm_threshold": {
                                                                        "type": "integer"
                                                                      },
                                                                      "enable": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "enable_notification": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "forecast_period": {
                                                                        "type": "integer"
                                                                      },
                                                                      "growth_factor": {
                                                                        "type": "integer"
                                                                      },
                                                                      "growth_type": {
                                                                        "type": "string"
                                                                      },
                                                                      "history": {
                                                                        "type": "integer"
                                                                      },
                                                                      "min_total": {
                                                                        "type": "integer"
                                                                      },
                                                                      "min_unused": {
                                                                        "type": "integer"
                                                                      },
                                                                      "reenable_date": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "asm_scope_flag": {
                                                                    "type": "integer"
                                                                  },
                                                                  "cidr": {
                                                                    "type": "integer"
                                                                  },
                                                                  "comment": {
                                                                    "type": "string"
                                                                  },
                                                                  "compartment_id": {
                                                                    "type": "string"
                                                                  },
                                                                  "created_at": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_client_update": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_conflict_resolution_mode": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_domain": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_generate_name": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_generated_prefix": {
                                                                    "type": "string"
                                                                  },
                                                                  "ddns_send_updates": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_ttl_percent": {
                                                                    "type": "integer"
                                                                  },
                                                                  "ddns_update_on_renew": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "ddns_use_conflict_resolution": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "dhcp_config": {
                                                                    "properties": {
                                                                      "abandoned_reclaim_time": {
                                                                        "type": "integer"
                                                                      },
                                                                      "abandoned_reclaim_time_v6": {
                                                                        "type": "integer"
                                                                      },
                                                                      "allow_unknown": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "allow_unknown_v6": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "echo_client_id": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "filters": {
                                                                        "type": "array"
                                                                      },
                                                                      "filters_large_selection": {
                                                                        "type": "array"
                                                                      },
                                                                      "filters_v6": {
                                                                        "type": "array"
                                                                      },
                                                                      "ignore_client_uid": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "ignore_list": {
                                                                        "type": "array"
                                                                      },
                                                                      "lease_time": {
                                                                        "type": "integer"
                                                                      },
                                                                      "lease_time_v6": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "dhcp_options": {
                                                                    "type": "array"
                                                                  },
                                                                  "dhcp_utilization": {
                                                                    "properties": {
                                                                      "dhcp_free": {
                                                                        "type": "string"
                                                                      },
                                                                      "dhcp_total": {
                                                                        "type": "string"
                                                                      },
                                                                      "dhcp_used": {
                                                                        "type": "string"
                                                                      },
                                                                      "dhcp_utilization": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "disable_dhcp": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "federated_realms": {
                                                                    "type": "array"
                                                                  },
                                                                  "federation": {
                                                                    "type": "string"
                                                                  },
                                                                  "header_option_filename": {
                                                                    "type": "string"
                                                                  },
                                                                  "header_option_server_address": {
                                                                    "type": "string"
                                                                  },
                                                                  "header_option_server_name": {
                                                                    "type": "string"
                                                                  },
                                                                  "hostname_rewrite_char": {
                                                                    "type": "string"
                                                                  },
                                                                  "hostname_rewrite_enabled": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "hostname_rewrite_regex": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "inheritance_assigned_hosts": {
                                                                    "type": "array"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "protocol": {
                                                                    "type": "string"
                                                                  },
                                                                  "rebind_time": {
                                                                    "type": "integer"
                                                                  },
                                                                  "renew_time": {
                                                                    "type": "integer"
                                                                  },
                                                                  "space": {
                                                                    "type": "string"
                                                                  },
                                                                  "threshold": {
                                                                    "properties": {
                                                                      "enabled": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "high": {
                                                                        "type": "integer"
                                                                      },
                                                                      "low": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "updated_at": {
                                                                    "type": "string"
                                                                  },
                                                                  "usage": {
                                                                    "items": {
                                                                      "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "utilization": {
                                                                    "properties": {
                                                                      "abandon_utilization": {
                                                                        "type": "integer"
                                                                      },
                                                                      "abandoned": {
                                                                        "type": "string"
                                                                      },
                                                                      "dynamic": {
                                                                        "type": "string"
                                                                      },
                                                                      "free": {
                                                                        "type": "string"
                                                                      },
                                                                      "static": {
                                                                        "type": "string"
                                                                      },
                                                                      "total": {
                                                                        "type": "string"
                                                                      },
                                                                      "used": {
                                                                        "type": "string"
                                                                      },
                                                                      "utilization": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "utilization_v6": {
                                                                    "properties": {
                                                                      "abandoned": {
                                                                        "type": "string"
                                                                      },
                                                                      "dynamic": {
                                                                        "type": "string"
                                                                      },
                                                                      "static": {
                                                                        "type": "string"
                                                                      },
                                                                      "total": {
                                                                        "type": "string"
                                                                      },
                                                                      "used": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "runAfter": {
                                                      "HTTP_Request_To_Lookup_Information_For_Subnet": [
                                                        "Succeeded",
                                                        "Failed"
                                                      ]
                                                    },
                                                    "else": {
                                                      "actions": {
                                                        "Set_Error_Message_For_Subnet_API_Failure": {
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                            "name": "error_message_subnet",
                                                            "value": "IP Space API request failed with status code:@{outputs('HTTP_Request_To_Lookup_Information_For_Subnet')['statusCode']}  and error message:@{body('HTTP_Request_To_Lookup_Information_For_Subnet')}"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "equals": [
                                                            "@outputs('HTTP_Request_To_Lookup_Information_For_Subnet')['statusCode']",
                                                            200
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  },
                                                  "HTTP_Request_To_Lookup_Information_For_Subnet": {
                                                    "type": "Http",
                                                    "inputs": {
                                                      "headers": {
                                                        "Authorization": "Token @{parameters('API Key')}"
                                                      },
                                                      "method": "GET",
                                                      "uri": "@{variables('base_url')}/api/ddi/v1/@{variables('subnet_id')}"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@empty(variables('subnet_id'))",
                                                      "@true"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Set_HTML_Table": {
                                              "runAfter": {
                                                "Append_to_Human_Readable_Tags": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html_table_record",
                                                "value": "<p style=\"height:0px\"><table><tbody>\n<tr><th colspan=\"2\">IPAM Lookup For IP:@{items('For_Each_IP_Lookup_Result')?['address']}</th></tr>\n<tr><td>Address</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['address']}</td></tr>\n<tr><td>DHCP Client HostName</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['dhcp_info']?['client_hostname']}</td></tr>\n<tr><td>DHCP Client Mac Address</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['dhcp_info']?['client_hwaddr']}</td></tr>\n<tr><td>DHCP Fingerprint</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['dhcp_info']?['fingerprint']}</td></tr>\n<tr><td>Host</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['host']}</td></tr>\n<tr><td>Tags</td><td style=\"text-align:left\">@{variables('human_readable_tags')}</td></tr>\n<tr><td>Comment</td><td style=\"text-align:left\">@{items('For_Each_IP_Lookup_Result')?['comment']}</td></tr>"
                                              }
                                            },
                                            "Set_IP_Space": {
                                              "runAfter": {
                                                "Set_HTML_Table": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ip_space_id",
                                                "value": "@items('For_Each_IP_Lookup_Result')?['space']"
                                              }
                                            },
                                            "Set_Subnet": {
                                              "runAfter": {
                                                "Condition_To_Verify_IP_Space_Id_Is_Empty": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "subnet_id",
                                                "value": "@items('For_Each_IP_Lookup_Result')?['parent']"
                                              }
                                            }
                                          },
                                          "type": "Foreach"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@empty(body('Parse_JSON_For_IP_Lookup_Data')?['results'])",
                                            "@true"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_For_IP_Lookup_Data": {
                                    "runAfter": {
                                      "Set_Error_False_For_API_Failure": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Request_To_Lookup_Information_About_An_IP_Address')",
                                      "schema": {
                                        "properties": {
                                          "results": {
                                            "items": {
                                              "properties": {
                                                "address": {
                                                  "type": "string"
                                                },
                                                "comment": {
                                                  "type": "string"
                                                },
                                                "compartment_id": {
                                                  "type": "string"
                                                },
                                                "created_at": {
                                                  "type": "string"
                                                },
                                                "dhcp_info": {
                                                  "properties": {
                                                    "client_hostname": {
                                                      "type": "string"
                                                    },
                                                    "client_hwaddr": {
                                                      "type": "string"
                                                    },
                                                    "client_id": {
                                                      "type": "string"
                                                    },
                                                    "end": {
                                                      "type": "string"
                                                    },
                                                    "fingerprint": {
                                                      "type": "string"
                                                    },
                                                    "iaid": {
                                                      "type": "integer"
                                                    },
                                                    "lease_type": {
                                                      "type": "string"
                                                    },
                                                    "preferred_lifetime": {
                                                      "type": "string"
                                                    },
                                                    "remain": {
                                                      "type": "integer"
                                                    },
                                                    "start": {
                                                      "type": "string"
                                                    },
                                                    "state": {
                                                      "type": "string"
                                                    },
                                                    "state_ts": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "disable_dhcp": {
                                                  "type": "boolean"
                                                },
                                                "discovery_attrs": {
                                                  "properties": {
                                                    "ip_address": {
                                                      "type": "string"
                                                    },
                                                    "network": {
                                                      "type": "string"
                                                    },
                                                    "os": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "discovery_metadata": {
                                                  "properties": {
                                                    "first_discovered_timestamp": {
                                                      "type": "string"
                                                    },
                                                    "last_discovered_timestamp": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "host": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hwaddr": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "interface": {
                                                  "type": "string"
                                                },
                                                "names": {
                                                  "items": {
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "name",
                                                      "type"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "parent": {
                                                  "type": "string"
                                                },
                                                "protocol": {
                                                  "type": "string"
                                                },
                                                "range": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "space": {
                                                  "type": "string"
                                                },
                                                "state": {
                                                  "type": "string"
                                                },
                                                "tags": {
                                                  "properties": {
                                                    "nios/grid_name": {
                                                      "type": "string"
                                                    },
                                                    "nios/import_timestamp": {
                                                      "type": "string"
                                                    },
                                                    "nios/imported": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "updated_at": {
                                                  "type": "string"
                                                },
                                                "usage": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "required": [
                                                "address",
                                                "comment",
                                                "compartment_id",
                                                "created_at",
                                                "dhcp_info",
                                                "disable_dhcp",
                                                "discovery_attrs",
                                                "discovery_metadata",
                                                "host",
                                                "hwaddr",
                                                "id",
                                                "interface",
                                                "names",
                                                "parent",
                                                "protocol",
                                                "range",
                                                "space",
                                                "state",
                                                "tags",
                                                "updated_at",
                                                "usage"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Set_Error_False_For_API_Failure": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "api_failure_error",
                                      "value": "@false"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Lookup_Information_About_An_IP_Address": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_Message_For_IPAM_API_Failure": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "error_message",
                                        "value": "IPAM API request failed with status code:@{outputs('HTTP_Request_To_Lookup_Information_About_An_IP_Address')['statusCode']}  and error message:  for ip @{items('For_Each_IP_Address')?['Address']}"
                                      }
                                    },
                                    "Set_Error_True_For_API_Failure": {
                                      "runAfter": {
                                        "Set_Error_Message_For_IPAM_API_Failure": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "api_failure_error",
                                        "value": "@true"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Lookup_Information_About_An_IP_Address')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "HTTP_Request_To_Lookup_Information_About_An_IP_Address": {
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Token @{parameters('API Key')}"
                                  },
                                  "method": "GET",
                                  "queries": {
                                    "_filter": "address=='@{items('For_Each_IP_Address')?['Address']}'"
                                  },
                                  "uri": "@{variables('base_url')}/api/ddi/v1/ipam/address"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@empty(items('For_Each_IP_Address')?['Address'])",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_IPs_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Fetching_IP_Details_From_API": {
                      "runAfter": {
                        "Initialize_Error_Message_For_Subnet_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_failure_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message": {
                      "runAfter": {
                        "Initialize_New_Line": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message_For_IP_Space_Name": {
                      "runAfter": {
                        "Initialize_Error_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message_ip_space",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message_For_Subnet_ID": {
                      "runAfter": {
                        "Initialize_Error_Message_For_IP_Space_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message_subnet",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_HTML_Table": {
                      "runAfter": {
                        "Initialize_Number_Of_Comments": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "html_table",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_HTML_Table_Record": {
                      "runAfter": {
                        "Initialize_HTML_Table": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "html_table_record",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Human_Readable_Tags": {
                      "runAfter": {
                        "Initialize_Subnet_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "human_readable_tags",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_IP_Space_Id": {
                      "runAfter": {
                        "Initialize_Incident_Comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip_space_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Comment": {
                      "runAfter": {
                        "Initialize_HTML_Table_Record": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_comment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_New_Line": {
                      "runAfter": {
                        "Initialize_Human_Readable_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "new_line",
                            "type": "string",
                            "value": "\n"
                          }
                        ]
                      }
                    },
                    "Initialize_Number_Of_Comments": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "no_of_comments",
                            "type": "integer",
                            "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                          }
                        ]
                      }
                    },
                    "Initialize_Subnet_Id": {
                      "runAfter": {
                        "Initialize_IP_Space_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "subnet_id",
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-IPAM-Lookup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId9'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId9')]",
                "contentId": "[variables('_playbookContentId9')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion9')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-IPAM-Lookup",
            "description": "The playbook will retrieve IP entities from an incident, call an API to obtain IPAM lookup data, and add this data, along with IP space and subnet information, as a comment on the incident.",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key."
            ],
            "postDeployment": [
              "**a. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign",
              "**b. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping available for IP.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. Click on the Run button beside this playbook."
            ],
            "entities": [
              "IP"
            ],
            "tags": [
              "Infoblox",
              "IPAM",
              "IP",
              "Lookup"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId9')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-IPAM-Lookup",
        "contentProductId": "[variables('_playbookcontentProductId9')]",
        "id": "[variables('_playbookcontentProductId9')]",
        "version": "[variables('playbookVersion9')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName10')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-SOC-Get-Insight-Details Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion10')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-SOC-Get-Insight-Details",
              "type": "string"
            },
            "Infoblox API Key": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Infoblox API Key"
              }
            },
            "Workspace ID": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Workspace ID,use same Workspace ID for Authorization"
              }
            },
            "Workspace Key": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Workspace Key,use same Workspace Key for Authorization"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Infoblox API Key": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "string"
                    },
                    "Workspace ID": {
                      "defaultValue": "[[trim(parameters('Workspace ID'))]",
                      "type": "string"
                    },
                    "Workspace Key": {
                      "defaultValue": "[[trim(parameters('Workspace Key'))]",
                      "type": "string"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Filter_array_for_Malware_Entity": {
                      "runAfter": {
                        "For_each": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Parse_Entities_JSON')",
                        "where": "@equals(item()['kind'], 'Malware')"
                      }
                    },
                    "Filter_array_for_Object_GUID_Entity": {
                      "runAfter": {
                        "Parse_Entities_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Parse_Entities_JSON')",
                        "where": "@equals(item()?['kind'], 'SecurityGroup')"
                      }
                    },
                    "For_each": {
                      "foreach": "@body('Filter_array_for_Object_GUID_Entity')",
                      "actions": {
                        "Test_Connection_to_Infoblox_CSP": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('Infoblox API Key')}"
                            },
                            "method": "GET",
                            "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each')?['properties']?['objectGuid']}"
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_array_for_Object_GUID_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_Insight_ID": {
                      "foreach": "@body('Filter_array_for_Object_GUID_Entity')",
                      "actions": {
                        "Add_InfobloxInsightID_Tag": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "tagsToAdd": {
                                "TagsToAdd": [
                                  {
                                    "Tag": "InfobloxInsightID: @{items('For_each_Insight_ID')?['properties']?['objectGuid']}"
                                  }
                                ]
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/Incidents"
                          }
                        },
                        "Add_Summary_data_if_observed_via_CDC": {
                          "actions": {
                            "Get_Summary_Data": {
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Token @{parameters('Infoblox API Key')}"
                                },
                                "method": "GET",
                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}"
                              }
                            },
                            "Parse_Summary_JSON": {
                              "runAfter": {
                                "Get_Summary_Data": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Get_Summary_Data')",
                                "schema": {
                                  "properties": {
                                    "insight": {
                                      "properties": {
                                        "changer": {
                                          "type": "string"
                                        },
                                        "dateChanged": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "eventsBlockedCount": {
                                          "type": "string"
                                        },
                                        "eventsNotBlockedCount": {
                                          "type": "string"
                                        },
                                        "feedSource": {
                                          "type": "string"
                                        },
                                        "insightId": {
                                          "type": "string"
                                        },
                                        "mostRecentAt": {
                                          "type": "string"
                                        },
                                        "numEvents": {
                                          "type": "string"
                                        },
                                        "persistent": {
                                          "type": "string"
                                        },
                                        "persistentDate": {
                                          "type": "string"
                                        },
                                        "priorityText": {
                                          "type": "string"
                                        },
                                        "spreading": {
                                          "type": "string"
                                        },
                                        "spreadingDate": {
                                          "type": "string"
                                        },
                                        "startedAt": {
                                          "type": "string"
                                        },
                                        "status": {
                                          "type": "string"
                                        },
                                        "tClass": {
                                          "type": "string"
                                        },
                                        "tFamily": {
                                          "type": "string"
                                        },
                                        "threatType": {
                                          "type": "string"
                                        },
                                        "userComment": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Send_Summary_(Insight)_Data": {
                              "runAfter": {
                                "Parse_Summary_JSON": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{addProperty(body('Parse_Summary_JSON')?['insight'], 'InfobloxInsightLogType', 'Insight')}",
                                "headers": {
                                  "Log-Type": "InfobloxInsight"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Add_InfobloxInsightID_Tag": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Add_InfobloxInsightID_Tag')?['properties']?['description']",
                                  "Observed via CDC"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "For_each_Asset": {
                          "foreach": "@body('Parse_Assets_JSON')?['assets']",
                          "actions": {
                            "Send_Asset_Data": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{addProperty(addProperty(items('For_Each_Asset'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Asset')}",
                                "headers": {
                                  "Log-Type": "InfobloxInsightAssets"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_Assets_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_Comment": {
                          "foreach": "@body('Parse_Comment_JSON')?['comments']",
                          "actions": {
                            "Send_Comment_Data": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{addProperty(addProperty(items('For_Each_Comment'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Comment')}",
                                "headers": {
                                  "Log-Type": "InfobloxInsightComments"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_Comment_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_Event": {
                          "foreach": "@body('Parse_Event_JSON')?['events']",
                          "actions": {
                            "Send_Event_Data": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{addProperty(addProperty(items('For_Each_Event'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Event')}",
                                "headers": {
                                  "Log-Type": "InfobloxInsightEvents"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_Event_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_Indicator": {
                          "foreach": "@body('Parse_Indicator_JSON')?['indicators']",
                          "actions": {
                            "Send_Indicator_Data": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{addProperty(addProperty(items('For_Each_Indicator'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Indicator')\r\n}",
                                "headers": {
                                  "Log-Type": "InfobloxInsightIndicators"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_Indicator_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Asset_Data": {
                          "runAfter": {
                            "Add_InfobloxInsightID_Tag": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('Infoblox API Key')}"
                            },
                            "method": "GET",
                            "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/assets"
                          }
                        },
                        "Get_Comment_Data": {
                          "runAfter": {
                            "Add_InfobloxInsightID_Tag": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('Infoblox API Key')}"
                            },
                            "method": "GET",
                            "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/comments"
                          }
                        },
                        "Get_Event_Data": {
                          "runAfter": {
                            "Add_InfobloxInsightID_Tag": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('Infoblox API Key')}"
                            },
                            "method": "GET",
                            "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/events"
                          }
                        },
                        "Get_Indicator_Data": {
                          "runAfter": {
                            "Add_InfobloxInsightID_Tag": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('Infoblox API Key')}"
                            },
                            "method": "GET",
                            "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/indicators"
                          }
                        },
                        "Parse_Assets_JSON": {
                          "runAfter": {
                            "Get_Asset_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Asset_Data')",
                            "schema": {
                              "properties": {
                                "assets": {
                                  "items": {
                                    "properties": {
                                      "cid": {
                                        "type": "string"
                                      },
                                      "cmac": {
                                        "type": "string"
                                      },
                                      "count": {
                                        "type": "integer"
                                      },
                                      "location": {
                                        "type": "string"
                                      },
                                      "os_version": {
                                        "type": "string"
                                      },
                                      "qip": {
                                        "type": "string"
                                      },
                                      "threat_indicator_distinct_count": {
                                        "type": "string"
                                      },
                                      "threat_level_max": {
                                        "type": "string"
                                      },
                                      "time_max": {
                                        "type": "string"
                                      },
                                      "time_min": {
                                        "type": "string"
                                      },
                                      "user": {
                                        "type": "string"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_Comment_JSON": {
                          "runAfter": {
                            "Get_Comment_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Comment_Data')",
                            "schema": {
                              "properties": {
                                "comments": {
                                  "items": {
                                    "properties": {
                                      "commentsChanger": {
                                        "type": "string"
                                      },
                                      "dateChanged": {
                                        "type": "string"
                                      },
                                      "newComment": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_Event_JSON": {
                          "runAfter": {
                            "Get_Event_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Event_Data')",
                            "schema": {
                              "properties": {
                                "events": {
                                  "items": {
                                    "properties": {
                                      "action": {
                                        "type": "string"
                                      },
                                      "class": {
                                        "type": "string"
                                      },
                                      "confidence_level": {
                                        "type": "string"
                                      },
                                      "detected": {
                                        "type": "string"
                                      },
                                      "deviceIp": {
                                        "type": "string"
                                      },
                                      "device_country": {
                                        "type": "string"
                                      },
                                      "device_name": {
                                        "type": "string"
                                      },
                                      "device_region": {
                                        "type": "string"
                                      },
                                      "dhcp_fingerprint": {
                                        "type": "string"
                                      },
                                      "dns_view": {
                                        "type": "string"
                                      },
                                      "feed": {
                                        "type": "string"
                                      },
                                      "mac_address": {
                                        "type": "string"
                                      },
                                      "os_version": {
                                        "type": "string"
                                      },
                                      "policy": {
                                        "type": "string"
                                      },
                                      "property": {
                                        "type": "string"
                                      },
                                      "query": {
                                        "type": "string"
                                      },
                                      "query_type": {
                                        "type": "string"
                                      },
                                      "response": {
                                        "type": "string"
                                      },
                                      "response_country": {
                                        "type": "string"
                                      },
                                      "response_region": {
                                        "type": "string"
                                      },
                                      "source": {
                                        "type": "string"
                                      },
                                      "threat_family": {
                                        "type": "string"
                                      },
                                      "threat_indicator": {
                                        "type": "string"
                                      },
                                      "threat_level": {
                                        "type": "string"
                                      },
                                      "user": {
                                        "type": "string"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_Indicator_JSON": {
                          "runAfter": {
                            "Get_Indicator_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Indicator_Data')",
                            "schema": {
                              "properties": {
                                "indicators": {
                                  "items": {
                                    "properties": {
                                      "action": {
                                        "type": "string"
                                      },
                                      "actor": {
                                        "type": "string"
                                      },
                                      "confidence": {
                                        "type": "string"
                                      },
                                      "count": {
                                        "type": "integer"
                                      },
                                      "feed_name": {
                                        "type": "string"
                                      },
                                      "indicator": {
                                        "type": "string"
                                      },
                                      "threat_level_max": {
                                        "type": "string"
                                      },
                                      "time_max": {
                                        "type": "string"
                                      },
                                      "time_min": {
                                        "type": "string"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_Malware_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_Malware_Entity": {
                      "foreach": "@body('Filter_array_for_Malware_Entity')",
                      "actions": {
                        "Update_Incident_Tags": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "tagsToAdd": {
                                "TagsToAdd": [
                                  {
                                    "Tag": "@items('For_each_Malware_Entity')?['kind']"
                                  },
                                  {
                                    "Tag": "@items('For_each_Malware_Entity')?['properties']?['malwareName']"
                                  },
                                  {
                                    "Tag": "@items('For_each_Malware_Entity')?['properties']?['category']"
                                  },
                                  {
                                    "Tag": "Insight"
                                  }
                                ]
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/Incidents"
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_array_for_Malware_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Parse_Entities_JSON": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "schema": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "friendlyName": {
                                    "type": "string"
                                  },
                                  "objectGuid": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": "[variables('TemplateEmptyArray')]",
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-SOC-Get-Insight-Details",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId10'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId10')]",
                "contentId": "[variables('_playbookContentId10')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion10')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-SOC-Get-Insight-Details",
            "description": "Leverages the Infoblox SOC Insights API to enrich a Microsoft Sentinel Incident triggered by an Infoblox SOC Insight & ingest Insight details into custom InfobloxInsight tables. The tables are used to build the Infoblox SOC Insights Workbook. This playbook can be configured to run automatically when an incident occurs (recommended) or run on demand.",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key",
              "2. User must have a valid Workspace ID",
              "3. User must have a valid Workspace Key"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to Update in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign"
            ],
            "entities": [
              "Security Group",
              "SecurityGroup",
              "Malware"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId10')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-SOC-Get-Insight-Details",
        "contentProductId": "[variables('_playbookcontentProductId10')]",
        "id": "[variables('_playbookcontentProductId10')]",
        "version": "[variables('playbookVersion10')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName11')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-SOC-Get-Open-Insights-API Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion11')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-SOC-Get-Open-Insights-API",
              "type": "string"
            },
            "Infoblox API Key": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Infoblox API Key"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Infoblox API Key": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "string"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "For_each_Insight": {
                      "foreach": "@body('Parse_JSON')?['insightList']",
                      "actions": {
                        "Send_Data": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "@{union(variables('Extra Cols'), items('For_Each_Insight'))}",
                            "headers": {
                              "Log-Type": "InfobloxInsight"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azureloganalyticsdatacollector_1']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/api/logs"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Get_All_Insights": {
                      "runAfter": {
                        "Initialize_Extra_Cols": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Authorization": "Token @{parameters('Infoblox API Key')}"
                        },
                        "method": "GET",
                        "uri": "https://csp.infoblox.com/api/v1/insights"
                      }
                    },
                    "Initialize_Extra_Cols": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Extra Cols",
                            "type": "object",
                            "value": {
                              "InfobloxInsightLogType": "Insight"
                            }
                          }
                        ]
                      }
                    },
                    "Parse_JSON": {
                      "runAfter": {
                        "Get_All_Insights": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_All_Insights')",
                        "schema": {
                          "properties": {
                            "insightList": {
                              "items": {
                                "properties": {
                                  "changer": {
                                    "type": "string"
                                  },
                                  "dateChanged": {
                                    "type": "string"
                                  },
                                  "eventsBlockedCount": {
                                    "type": "string"
                                  },
                                  "eventsNotBlockedCount": {
                                    "type": "string"
                                  },
                                  "feedSource": {
                                    "type": "string"
                                  },
                                  "insightId": {
                                    "type": "string"
                                  },
                                  "mostRecentAt": {
                                    "type": "string"
                                  },
                                  "numEvents": {
                                    "type": "string"
                                  },
                                  "persistentDate": {
                                    "type": "string"
                                  },
                                  "priorityText": {
                                    "type": "string"
                                  },
                                  "startedAt": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "tClass": {
                                    "type": "string"
                                  },
                                  "tFamily": {
                                    "type": "string"
                                  },
                                  "threatType": {
                                    "type": "string"
                                  },
                                  "userComment": {
                                    "type": "string"
                                  }
                                },
                                "required": "[variables('TemplateEmptyArray')]",
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-SOC-Get-Open-Insights-API",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId11'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId11')]",
                "contentId": "[variables('_playbookContentId11')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion11')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-SOC-Get-Open-Insights-API",
            "description": "Leverages the Infoblox SOC Insights API to ingest all Open/Active SOC Insights at time of run into the custom InfobloxInsight table. This playbook is scheduled to run on a daily basis.",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize connection.",
              "1. Go to your logic app -> API connections -> Select connection resource",
              "2. Go to General -> edit API connection",
              "3. Provide Workspace Id and Workspace Key of Log Analytics Workspace where Table will be created",
              "4. Click Save"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId11')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-SOC-Get-Open-Insights-API",
        "contentProductId": "[variables('_playbookcontentProductId11')]",
        "id": "[variables('_playbookcontentProductId11')]",
        "version": "[variables('playbookVersion11')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName12')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-SOC-Import-Indicators-TI Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion12')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-SOC-Import-Indicators-TI",
              "type": "string"
            },
            "Entra ID Application Secret": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Entra ID Application Secret"
              }
            },
            "Client ID": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Application (Client) ID"
              }
            },
            "Tenant ID": {
              "type": "string",
              "metadata": {
                "description": "Enter value for Directory (Tenant) ID"
              }
            }
          },
          "variables": {
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Entra ID Application Secret": {
                      "defaultValue": "[[trim(parameters('Entra ID Application Secret'))]",
                      "type": "string"
                    },
                    "Client ID": {
                      "defaultValue": "[[trim(parameters('Client ID'))]",
                      "type": "string"
                    },
                    "Tenant ID": {
                      "defaultValue": "[[trim(parameters('Tenant ID'))]",
                      "type": "string"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Filter_array_for_Object_GUID_Entity_(InsightID)": {
                      "runAfter": {
                        "Parse_Entities_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Parse_Entities_JSON')",
                        "where": "@equals(item()?['kind'], 'SecurityGroup')"
                      }
                    },
                    "For_each_InsightID": {
                      "foreach": "@body('Filter_array_for_Object_GUID_Entity_(InsightID)')",
                      "actions": {
                        "For_each": {
                          "foreach": "@body('Parse_IPs')?['value']",
                          "actions": {
                            "Send_IPs_to_Sentinel": {
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "clientId": "@parameters('Client ID')",
                                  "secret": "@parameters('Entra ID Application Secret')",
                                  "tenant": "@parameters('Tenant ID')",
                                  "type": "ActiveDirectoryOAuth"
                                },
                                "body": {
                                  "action": "alert",
                                  "additionalInformation": "Added via Infoblox SOC Insights",
                                  "description": "Infoblox - IP - @{items('For_each')?['InfobloxB1FeedName']}",
                                  "expirationDateTime": "@addDays(utcNow(), 14)",
                                  "externalId": "@{items('For_each')?['InfobloxInsightID']}",
                                  "indicatorProvider": "Infoblox SOC Insights",
                                  "lastReportedDateTime": "@items('For_each')?['LastSeen']",
                                  "networkIPv4": "@{items('For_each')?['ThreatIndicator']}",
                                  "tags": [
                                    "Feed: @{items('For_each')?['InfobloxB1FeedName']}",
                                    "FirstSeen: @{items('For_each')?['FirstSeen']}",
                                    "LastSeen: @{items('For_each')?['LastSeen']}",
                                    "Threat Confidence: @{items('For_each')?['ThreatConfidence']}",
                                    "Action: @{items('For_each')?['InfobloxB1PolicyAction']}",
                                    "Actor: @{items('For_each')?['ThreatActor']}",
                                    "Event Count: @{items('For_each')?['EventCount']}",
                                    "Threat Level: @{items('For_each')?['ThreatLevel']}",
                                    "IP"
                                  ],
                                  "targetProduct": "Azure Sentinel",
                                  "threatType": "WatchList",
                                  "tlpLevel": "white"
                                },
                                "method": "POST",
                                "uri": "https://graph.microsoft.com/beta/security/tiIndicators"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_IPs": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_Domain": {
                          "foreach": "@body('Parse_Domains')?['value']",
                          "actions": {
                            "Send_Domains_to_Sentinel": {
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "clientId": "@parameters('Client ID')",
                                  "secret": "@parameters('Entra ID Application Secret')",
                                  "tenant": "@parameters('Tenant ID')",
                                  "type": "ActiveDirectoryOAuth"
                                },
                                "body": {
                                  "action": "alert",
                                  "additionalInformation": "Added via Infoblox SOC Insights",
                                  "description": "Infoblox - HOST - @{items('For_each_Domain')?['InfobloxB1FeedName']}",
                                  "domainName": "@{items('For_each_Domain')?['ThreatIndicator']}",
                                  "expirationDateTime": "@addDays(utcNow(), 14)",
                                  "externalId": "@{items('For_each_Domain')?['InfobloxInsightID']}",
                                  "indicatorProvider": "Infoblox SOC Insights",
                                  "lastReportedDateTime": "@items('For_each_Domain')?['LastSeen']",
                                  "tags": [
                                    "Feed: @{items('For_each_Domain')?['InfobloxB1FeedName']}",
                                    "FirstSeen: @{items('For_each_Domain')?['FirstSeen']}",
                                    "LastSeen: @{items('For_each_Domain')?['LastSeen']}",
                                    "Threat Confidence: @{items('For_each_Domain')?['ThreatConfidence']}",
                                    "Action: @{items('For_each_Domain')?['InfobloxB1PolicyAction']}",
                                    "Actor: @{items('For_each_Domain')?['ThreatActor']}",
                                    "Event Count: @{items('For_each_Domain')?['EventCount']}",
                                    "Threat Level: @{items('For_each_Domain')?['ThreatLevel']}",
                                    "HOST"
                                  ],
                                  "targetProduct": "Azure Sentinel",
                                  "threatType": "WatchList",
                                  "tlpLevel": "white"
                                },
                                "method": "POST",
                                "uri": "https://graph.microsoft.com/beta/security/tiIndicators"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_Domains": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Domains": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "query": "InfobloxInsightIndicators\n| where InfobloxInsightID == \"@{items('For_each_InsightID')?['properties']?['objectGuid']}\"\n| where isIP == false\n| summarize arg_max(TimeGenerated, *) by ThreatIndicator",
                              "timerange": {
                                "relativeTimeRange": "Last 7 days"
                              },
                              "timerangetype": "2"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryDataV2",
                            "queries": {
                              "resourcegroups": "TME-RG",
                              "resourcename": "TME-Workspace",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "be1e61b7-8dbe-4986-a9c2-d85f65524d6e"
                            }
                          }
                        },
                        "Get_IPs": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "query": "InfobloxInsightIndicators\n| where InfobloxInsightID == \"@{items('For_each_InsightID')?['properties']?['objectGuid']}\"\n| where isIP == true\n| summarize arg_max(TimeGenerated, *) by ThreatIndicator",
                              "timerange": {
                                "relativeTimeRange": "Last 7 days"
                              },
                              "timerangetype": "2"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryDataV2",
                            "queries": {
                              "resourcegroups": "TME-RG",
                              "resourcename": "TME-Workspace",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "be1e61b7-8dbe-4986-a9c2-d85f65524d6e"
                            }
                          }
                        },
                        "Parse_Domains": {
                          "runAfter": {
                            "Get_Domains": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Domains')",
                            "schema": {
                              "properties": {
                                "value": {
                                  "items": {
                                    "properties": {
                                      "Computer": {
                                        "type": "string"
                                      },
                                      "DestinationDnsDomain": {
                                        "type": "string"
                                      },
                                      "EventCount": {
                                        "type": "integer"
                                      },
                                      "FirstSeen": {
                                        "type": "string"
                                      },
                                      "InfobloxB1FeedName": {
                                        "type": "string"
                                      },
                                      "InfobloxB1PolicyAction": {
                                        "type": "string"
                                      },
                                      "InfobloxInsightID": {
                                        "type": "string"
                                      },
                                      "InfobloxInsightLogType": {
                                        "type": "string"
                                      },
                                      "LastSeen": {
                                        "type": "string"
                                      },
                                      "MG": {
                                        "type": "string"
                                      },
                                      "ManagementGroupName": {
                                        "type": "string"
                                      },
                                      "RawData": {
                                        "type": "string"
                                      },
                                      "SourceMACAddress": {
                                        "type": "string"
                                      },
                                      "SourceSystem": {
                                        "type": "string"
                                      },
                                      "TenantId": {
                                        "type": "string"
                                      },
                                      "ThreatActor": {
                                        "type": "string"
                                      },
                                      "ThreatConfidence": {
                                        "type": "string"
                                      },
                                      "ThreatIndicator": {
                                        "type": "string"
                                      },
                                      "ThreatLevel": {
                                        "type": "string"
                                      },
                                      "TimeGenerated": {
                                        "type": "string"
                                      },
                                      "Type": {
                                        "type": "string"
                                      },
                                      "isIP": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_IPs": {
                          "runAfter": {
                            "Get_IPs": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_IPs')",
                            "schema": {
                              "properties": {
                                "value": {
                                  "items": {
                                    "properties": {
                                      "Computer": {
                                        "type": "string"
                                      },
                                      "DestinationDnsDomain": {
                                        "type": "string"
                                      },
                                      "EventCount": {
                                        "type": "integer"
                                      },
                                      "FirstSeen": {
                                        "type": "string"
                                      },
                                      "InfobloxB1FeedName": {
                                        "type": "string"
                                      },
                                      "InfobloxB1PolicyAction": {
                                        "type": "string"
                                      },
                                      "InfobloxInsightID": {
                                        "type": "string"
                                      },
                                      "InfobloxInsightLogType": {
                                        "type": "string"
                                      },
                                      "LastSeen": {
                                        "type": "string"
                                      },
                                      "MG": {
                                        "type": "string"
                                      },
                                      "ManagementGroupName": {
                                        "type": "string"
                                      },
                                      "RawData": {
                                        "type": "string"
                                      },
                                      "SourceMACAddress": {
                                        "type": "string"
                                      },
                                      "SourceSystem": {
                                        "type": "string"
                                      },
                                      "TenantId": {
                                        "type": "string"
                                      },
                                      "ThreatActor": {
                                        "type": "string"
                                      },
                                      "ThreatConfidence": {
                                        "type": "string"
                                      },
                                      "ThreatIndicator": {
                                        "type": "string"
                                      },
                                      "ThreatLevel": {
                                        "type": "string"
                                      },
                                      "TimeGenerated": {
                                        "type": "string"
                                      },
                                      "Type": {
                                        "type": "string"
                                      },
                                      "isIP": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": "[variables('TemplateEmptyArray')]",
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_array_for_Object_GUID_Entity_(InsightID)": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Parse_Entities_JSON": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "schema": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "friendlyName": {
                                    "type": "string"
                                  },
                                  "objectGuid": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": "[variables('TemplateEmptyArray')]",
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      },
                      "azuresentinel_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-SOC-Import-Indicators-TI",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId12'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId12')]",
                "contentId": "[variables('_playbookContentId12')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion12')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-SOC-Import-Indicators-TI",
            "description": "Imports each Indicator of a Microsoft Sentinel Incident triggered by an Infoblox SOC Insight into the ThreatIntelligenceIndicator table. You must run the Infoblox-SOC-Get-Insight-Details playbook on a SOC Insight Incident before running this playbook.",
            "prerequisites": [
              "1. Entra ID Application Secret",
              "2. Client ID",
              "3. Tenant ID"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign role to this playbook**",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign"
            ],
            "entities": [
              "Security Group",
              "SecurityGroup"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId12')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-SOC-Import-Indicators-TI",
        "contentProductId": "[variables('_playbookcontentProductId12')]",
        "id": "[variables('_playbookcontentProductId12')]",
        "version": "[variables('playbookVersion12')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName13')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-TIDE-Lookup Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion13')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-TIDE-Lookup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please keep the 'Playbook Name' parameter unchanged. Otherwise, you will need to manually adjust the 'Playbook Name' in the 'Infoblox Lookup Workbook' in edit mode"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "String",
              "defaultValue": "https://csp.infoblox.com",
              "minLength": 1,
              "metadata": {
                "description": "Enter Base URL for your infoblox account. (e.g. https://csp.infoblox.com)"
              }
            },
            "Workspace Name": {
              "type": "String",
              "metadata": {
                "description": "Enter name of Log Analytics Workspace"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-',  parameters('PlaybookName'))]",
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-',  parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]"
                    },
                    "BaseUrl": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "method": "POST"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Check_If_All_Parameters_Are_Available": {
                      "actions": {
                        "Condition_To_Check_If_IOCs_Of_Provided_Type_and_Target_Are_Not_Available": {
                          "actions": {
                            "Condition_To_Check_Threat_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Check_If_Threat_Data_Available_Using_API": {
                                  "actions": {
                                    "For_Each_Threat": {
                                      "foreach": "@variables('threat_data')",
                                      "actions": {
                                        "Condition_To_Check_If_Threat_Data_Is_Available": {
                                          "actions": {
                                            "Send_Data_To_Log_Table": {
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": "@{items('For_Each_Threat')}",
                                                "headers": {
                                                  "Log-Type": "tide_lookup_data"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@length(items('For_Each_Threat'))",
                                                    0
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "runAfter": {
                                        "Set_Threat_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Foreach",
                                      "runtimeConfiguration": {
                                        "concurrency": {
                                          "repetitions": 50
                                        }
                                      }
                                    },
                                    "Response_For_Successfully_Ingesting_Data": {
                                      "runAfter": {
                                        "For_Each_Threat": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                        "body": {
                                          "message": "Successfully Ingested The TIDE Lookup Data For @{body('Parse_JSON_For_Query_Parameters')?['type']}-@{body('Parse_JSON_For_Query_Parameters')?['target']}",
                                          "status": "success"
                                        },
                                        "statusCode": 200
                                      }
                                    },
                                    "Set_Threat_Data": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "threat_data",
                                        "value": "@chunk(body('Parse_JSON_For_Threat_Data')?['threat'],1000)"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Threat_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Response_To_Indicate_Success_If_No_Data_Found_For_Target": {
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                          "body": {
                                            "message": "No Data Found For @{body('Parse_JSON_For_Query_Parameters')?['type']}-@{body('Parse_JSON_For_Query_Parameters')?['target']}",
                                            "status": "success"
                                          },
                                          "statusCode": 200
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@body('Parse_JSON_For_Threat_Data')?['record_count']",
                                            0
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Threat_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Threat_Data')",
                                    "schema": {
                                      "properties": {
                                        "record_count": {
                                          "type": "integer"
                                        },
                                        "threat": {
                                          "items": {
                                            "properties": {
                                              "batch_id": {
                                                "type": "string"
                                              },
                                              "class": {
                                                "type": "string"
                                              },
                                              "confidence": {
                                                "type": "integer"
                                              },
                                              "confidence_score": {
                                                "type": "number"
                                              },
                                              "confidence_score_rating": {
                                                "type": "string"
                                              },
                                              "confidence_score_vector": {
                                                "type": "string"
                                              },
                                              "detected": {
                                                "type": "string"
                                              },
                                              "dga": {
                                                "type": [
                                                  "string",
                                                  "boolean"
                                                ]
                                              },
                                              "domain": {
                                                "type": "string"
                                              },
                                              "email": {
                                                "type": "string"
                                              },
                                              "expiration": {
                                                "type": "string"
                                              },
                                              "extended": {
                                                "properties": {
                                                  "attack_chain": {
                                                    "type": "string"
                                                  },
                                                  "cyberint_guid": {
                                                    "type": "string"
                                                  },
                                                  "notes": {
                                                    "type": "string"
                                                  },
                                                  "protocol": {
                                                    "type": "string"
                                                  },
                                                  "references": {
                                                    "type": "string"
                                                  },
                                                  "sample_sha256": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "hash": {
                                                "type": "string"
                                              },
                                              "hash_type": {
                                                "type": "string"
                                              },
                                              "host": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "imported": {
                                                "type": "string"
                                              },
                                              "ip": {
                                                "type": "string"
                                              },
                                              "profile": {
                                                "type": "string"
                                              },
                                              "property": {
                                                "type": "string"
                                              },
                                              "received": {
                                                "type": "string"
                                              },
                                              "risk_score": {
                                                "type": "number"
                                              },
                                              "risk_score_rating": {
                                                "type": "string"
                                              },
                                              "risk_score_vector": {
                                                "type": "string"
                                              },
                                              "threat_level": {
                                                "type": "integer"
                                              },
                                              "threat_score": {
                                                "type": "number"
                                              },
                                              "threat_score_rating": {
                                                "type": "string"
                                              },
                                              "threat_score_vector": {
                                                "type": "string"
                                              },
                                              "tld": {
                                                "type": "string"
                                              },
                                              "type": {
                                                "type": "string"
                                              },
                                              "up": {
                                                "type": [
                                                  "string",
                                                  "boolean"
                                                ]
                                              },
                                              "url": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "type"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Threat_Data": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Response_To_Indicate_Failure_While_Fetching_Threat_Data": {
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": {
                                        "message": "Error Occurred While Fetching Threat Data With Status Code:@{outputs('HTTP_Request_To_Fetch_Threat_Data')['statusCode']}",
                                        "status": "failure"
                                      },
                                      "statusCode": "@outputs('HTTP_Request_To_Fetch_Threat_Data')['statusCode']"
                                    }
                                  },
                                  "Terminate_Due_To_Error_While_Fetching_Threat_Data": {
                                    "runAfter": {
                                      "Response_To_Indicate_Failure_While_Fetching_Threat_Data": [
                                        "Succeeded",
                                        "Skipped"
                                      ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                      "runError": {
                                        "code": "@{outputs('HTTP_Request_To_Fetch_Threat_Data')['statusCode']}",
                                        "message": "Error Occurred While Fetching Threat Data With Status Code: @{outputs('HTTP_Request_To_Fetch_Threat_Data')['statusCode']}\nError: @{body('HTTP_Request_To_Fetch_Threat_Data')}"
                                      },
                                      "runStatus": "Failed"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Threat_Data')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "HTTP_Request_To_Fetch_Threat_Data": {
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Token @{parameters('API Key')}"
                                },
                                "method": "GET",
                                "queries": {
                                  "@{body('Parse_JSON_For_Query_Parameters')?['type']}": "@{body('Parse_JSON_For_Query_Parameters')?['target']}",
                                  "fields": "@variables('fields')",
                                  "rlimit": "@{variables('rlimit')}",
                                  "type": "@{body('Parse_JSON_For_Query_Parameters')?['type']}"
                                },
                                "uri": "@{variables('base_url')}/tide/api/data/threats"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Response_Count": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Response_To_Indicate_Success_If_Threat_Data_Available_In_Log_Table": {
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": {
                                    "message": "Data already available of TIDE Lookup for @{body('Parse_JSON_For_Query_Parameters')?['type']}-@{body('Parse_JSON_For_Query_Parameters')?['target']}",
                                    "status": "success"
                                  },
                                  "statusCode": 200
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('response_count')",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Run_Query_For_Caching_Mechanism": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "let dummyschema = datatable(TimeGenerated:datetime, @{body('Parse_JSON_For_Query_Parameters')?['type']}_s:string, type_s:string, Count:int)[];\nunion isfuzzy=true  dummyschema,\ntide_lookup_data_CL\n| where type_s =~ \"@{body('Parse_JSON_For_Query_Parameters')?['type']}\" and @{body('Parse_JSON_For_Query_Parameters')?['type']}_s == \"@{body('Parse_JSON_For_Query_Parameters')?['target']}\"\n| count ",
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                              "resourcegroups": "[[resourceGroup().name]",
                              "resourcename": "[[parameters('Workspace Name')]",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "[[subscription().subscriptionId]",
                              "timerange": "Last 24 hours"
                            }
                          }
                        },
                        "Set_Response_Count": {
                          "runAfter": {
                            "Run_Query_For_Caching_Mechanism": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "response_count",
                            "value": "@body('Run_Query_For_Caching_Mechanism')?['value']?[0]?['Count']"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Response_Count": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response_To_Indicate_Failure_Due_To_Absence_Of_Parameters": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": {
                                "message": "Target Type or Target Parameter Not Found.",
                                "status": "failure"
                              },
                              "statusCode": 400
                            }
                          },
                          "Terminate_Due_To_Required_Query_Parameters_Not_Found": {
                            "runAfter": {
                              "Response_To_Indicate_Failure_Due_To_Absence_Of_Parameters": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "400",
                                "message": "Target Type or Target Parameter Not Found."
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Parse_JSON_For_Query_Parameters')?['type'])",
                              "@false"
                            ]
                          },
                          {
                            "equals": [
                              "@empty(body('Parse_JSON_For_Query_Parameters')?['target'])",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_Base_URL": {
                      "runAfter": {
                        "Parse_JSON_For_Query_Parameters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      }
                    },
                    "Initialize_Fields": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fields",
                            "type": "string",
                            "value": "id,type,ip,url,tld,email,hash,hash_type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,extended"
                          }
                        ]
                      }
                    },
                    "Initialize_Response_Count": {
                      "runAfter": {
                        "Initialize_Threat_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "response_count",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Rlimit": {
                      "runAfter": {
                        "Initialize_Fields": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rlimit",
                            "type": "integer",
                            "value": 90000
                          }
                        ]
                      }
                    },
                    "Initialize_Threat_Data": {
                      "runAfter": {
                        "Initialize_Rlimit": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "threat_data",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Query_Parameters": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()",
                        "schema": {
                          "properties": {
                            "target": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-TIDE-Lookup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId13'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId13')]",
                "contentId": "[variables('_playbookContentId13')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion13')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-TIDE-Lookup",
            "description": "The playbook fetches TIDE lookup data for the provided entity type and value.",
            "prerequisites": "User must provide valid Infoblox API Key.",
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "entities": [
              "Host",
              "IP",
              "Hash",
              "URL"
            ],
            "tags": [
              "Infoblox",
              "TIDE",
              "Lookup"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId13')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-TIDE-Lookup",
        "contentProductId": "[variables('_playbookcontentProductId13')]",
        "id": "[variables('_playbookcontentProductId13')]",
        "version": "[variables('playbookVersion13')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName14')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-TIDE-Lookup-Via-Incident Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion14')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-TIDE-Lookup-Via-Incident",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please keep the 'Playbook Name' parameter unchanged. Otherwise, you will need to manually adjust the 'Playbook Name' in the 'Infoblox Lookup Workbook' in edit mode"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Check_TIDE_Lookup_Failure_For_All_Entities": {
                      "actions": {
                        "Terminate_If_Failure_For_All_Entities": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "@{variables('error_message')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Hash": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('failure_count')",
                              "@length(triggerBody()?['object']?['properties']?['relatedEntities'])"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_Each_Hash": {
                      "foreach": "@body('Get_FileHashes_From_Entities')?['Filehashes']",
                      "actions": {
                        "Condition_To_Verify_TIDE_Playbook_Called_Successfully_For_Hash": {
                          "runAfter": {
                            "Infoblox_TIDE_Lookup_For_Hash": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_Hash": {
                                "runAfter": {
                                  "Increment_Failure_Count_For_Hash": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "@body('Infoblox_TIDE_Lookup_For_Hash')?['message']"
                                }
                              },
                              "Increment_Failure_Count_For_Hash": {
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Infoblox_TIDE_Lookup_For_Hash')?['status']",
                                  "success"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Infoblox_TIDE_Lookup_For_Hash": {
                          "runAfter": {
                            "Set_Target_Type_As_Hash": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "target": "@{variables('target')}",
                              "type": "@{variables('target_type')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/','Infoblox-TIDE-Lookup')]"
                              }
                            }
                          }
                        },
                        "Set_Target_Hash": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target",
                            "value": "@items('For_Each_Hash')?['Value']"
                          }
                        },
                        "Set_Target_Type_As_Hash": {
                          "runAfter": {
                            "Set_Target_Hash": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target_type",
                            "value": "hash"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_FileHashes_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_Host": {
                      "foreach": "@body('Get_Hosts_From_Entities')?['Hosts']",
                      "actions": {
                        "Condition_To_Verify_TIDE_Lookup_Playbook_Called_Successfully_For_Host": {
                          "runAfter": {
                            "Infoblox_TIDE_Lookup_For_Host": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_Host": {
                                "runAfter": {
                                  "Increment_Failure_Count_For_Host": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "@body('Infoblox_TIDE_Lookup_For_Host')?['message']"
                                }
                              },
                              "Increment_Failure_Count_For_Host": {
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Infoblox_TIDE_Lookup_For_Host')?['status']",
                                  "success"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Infoblox_TIDE_Lookup_For_Host": {
                          "runAfter": {
                            "Set_Target_Type_As_Host": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "target": "@{variables('target')}",
                              "type": "@{variables('target_type')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/','Infoblox-TIDE-Lookup')]"
                              }
                            }
                          }
                        },
                        "Set_Target_Host": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target",
                            "value": "@items('For_Each_Host')?['NetBiosName']"
                          }
                        },
                        "Set_Target_Type_As_Host": {
                          "runAfter": {
                            "Set_Target_Host": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target_type",
                            "value": "host"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_IP": {
                      "foreach": "@body('Get_IPs_From_Entities')?['IPs']",
                      "actions": {
                        "Condition_To_Verify_TIDE_Lookup_Playbook_Called_Successfully_For_IP": {
                          "runAfter": {
                            "Infoblox_TIDE_Lookup_For_IP": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_IP": {
                                "runAfter": {
                                  "Increment_Failure_Count_For_IP": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "@body('Infoblox_TIDE_Lookup_For_IP')?['message']"
                                }
                              },
                              "Increment_Failure_Count_For_IP": {
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Infoblox_TIDE_Lookup_For_IP')?['status']",
                                  "success"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Infoblox_TIDE_Lookup_For_IP": {
                          "runAfter": {
                            "Set_Target_Type_As_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "target": "@{variables('target')}",
                              "type": "@{variables('target_type')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/','Infoblox-TIDE-Lookup')]"
                              }
                            }
                          }
                        },
                        "Set_Target_IP": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target",
                            "value": "@items('For_Each_IP')?['Address']"
                          }
                        },
                        "Set_Target_Type_As_IP": {
                          "runAfter": {
                            "Set_Target_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target_type",
                            "value": "ip"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_IPs_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_URL": {
                      "foreach": "@body('Get_URLs_From_Entities')?['URLs']",
                      "actions": {
                        "Condition_To_Verify_TIDE_Lookup_Playbook_Called_Successfully_For_urls": {
                          "runAfter": {
                            "Infoblox_TIDE_Lookup_For_URL": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_URL": {
                                "runAfter": {
                                  "Increment_Failure_Count_For_URL": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "@body('Infoblox_TIDE_Lookup_For_URL')?['message']"
                                }
                              },
                              "Increment_Failure_Count_For_URL": {
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Infoblox_TIDE_Lookup_For_URL')?['status']",
                                  "success"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Infoblox_TIDE_Lookup_For_URL": {
                          "runAfter": {
                            "Set_Target_Type_As_URL": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "target": "@{variables('target')}",
                              "type": "@{variables('target_type')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/','Infoblox-TIDE-Lookup')]"
                              }
                            }
                          }
                        },
                        "Set_Target_Type_As_URL": {
                          "runAfter": {
                            "Set_Target_URL": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target_type",
                            "value": "url"
                          }
                        },
                        "Set_Target_URL": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "target",
                            "value": "@items('For_Each_URL')?['Url']"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_URLs_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get_FileHashes_From_Entities": {
                      "runAfter": {
                        "For_Each_Host": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/filehash"
                      }
                    },
                    "Get_Hosts_From_Entities": {
                      "runAfter": {
                        "For_Each_IP": [
                          "Succeeded",
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Get_IPs_From_Entities": {
                      "runAfter": {
                        "For_Each_URL": [
                          "Succeeded",
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "Get_URLs_From_Entities": {
                      "runAfter": {
                        "Initialize_Error_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/url"
                      }
                    },
                    "Initialize_Error_Message": {
                      "runAfter": {
                        "Initialize_Failure_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Failure_Count": {
                      "runAfter": {
                        "Initialize_Target": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "failure_count",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_Target": {
                      "runAfter": {
                        "Initialize_Target_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "target",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Target_Type": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "target_type",
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-TIDE-Lookup-Via-Incident",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId14'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId14')]",
                "contentId": "[variables('_playbookContentId14')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion14')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-TIDE-Lookup-Via-Incident",
            "description": "The playbook takes entity type and value from incident available in Workbook and ingests TIDE Lookup data for that entity into Log table.",
            "prerequisites": [
              "1. Make sure that Infoblox-TIDE-Lookup playbook is deployed before deploying Infoblox-TIDE-Lookup-Via-Incident playbook."
            ],
            "postDeployment": [
              "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping."
            ],
            "entities": [
              "Host",
              "IP",
              "Hash",
              "URL"
            ],
            "tags": [
              "Infoblox",
              "TIDE",
              "Lookup",
              "Incident"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId14')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-TIDE-Lookup-Via-Incident",
        "contentProductId": "[variables('_playbookcontentProductId14')]",
        "id": "[variables('_playbookcontentProductId14')]",
        "version": "[variables('playbookVersion14')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName15')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-TIDE-Lookup-Comment-Enrichment Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion15')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-TIDE-Lookup-Comment-Enrichment",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter Infoblox API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "minLength": 1,
              "metadata": {
                "description": "Enter Base URL for your infoblox account. (e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "type": "string",
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]"
                    },
                    "BaseUrl": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Check_If_Entity_Mapping_Is_Not_Available": {
                      "actions": {
                        "Add_Comment_To_Incident_If_Entity_Mapping_Not_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No Entity Mapping found associated with incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Hash": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_mapping')",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Indicate_Failure_For_All_Entities": {
                      "actions": {
                        "Terminate_If_Failure_For_All_Entities": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "@{variables('error_message')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Check_If_Entity_Mapping_Is_Not_Available": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('failure_count')",
                              "@length(triggerBody()?['object']?['properties']?['relatedEntities'])"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_Each_Hash": {
                      "foreach": "@body('Get_FileHashes_From_Entities')?['Filehashes']",
                      "actions": {
                        "Condition_To_Check_Hash_TIDE_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_TIDE_Data_Not_Available_For_Hash": {
                              "actions": {
                                "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Hash": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No TIDE Lookup Results Found For Hash -&nbsp;@{items('For_Each_Hash')?['Value']}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comment_Count_For_Empty_Response_For_Hash": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Hash": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "comment_count",
                                    "value": 1
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_TIDE_Data_For_Hash": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "For_Each_Threat_IOC_Of_Type_Hash": {
                                    "foreach": "@body('Parse_TIDE_Data_For_Hash')?['threat']",
                                    "actions": {
                                      "Condition_To_Check_Comment_Limit_Exceed_For_Hash": {
                                        "actions": {
                                          "Condition_To_Verify_That_Incident_Has_99_Comments_For_Hash": {
                                            "actions": {
                                              "Add_Comment_That_Limit_Has_Been_Exceeded_For_Hash": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('comment_count')",
                                                    99
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Add_Hash_TIDE_Data_As_Comment": {
                                              "runAfter": {
                                                "Set_HTML_With_Hash_TIDE_Data_": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>IOC - @{items('For_Each_Hash')?['Value']} - @{items('For_Each_Threat_IOC_Of_Type_Hash')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_Hash')?['class']}<br>\n@{variables('html')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Comment_Count_For_Hash": {
                                              "runAfter": {
                                                "Add_Hash_TIDE_Data_As_Comment": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "comment_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_HTML_With_Hash_TIDE_Data_": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html",
                                                "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['type']}</td></tr>\n<tr><td>Hash</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash']}       @{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash_type']}</td></tr>\n<td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['class']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash']}/summary</td></tr>\n</tbody></table></p>"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "greaterOrEquals": [
                                                "@variables('comment_count')",
                                                99
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_TIDE_Data_For_Hash')?['record_count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_TIDE_Data_For_Hash": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')",
                                "schema": {
                                  "properties": {
                                    "record_count": {
                                      "type": "integer"
                                    },
                                    "threat": {
                                      "items": {
                                        "properties": {
                                          "extended": {
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_Hash": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "Error Occurred While Fetching Data For Hash - @{items('For_Each_Hash')?['Value']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')['statusCode']}"
                                }
                              },
                              "Increment_Failure_Count_For_Hash": {
                                "runAfter": {
                                  "Add_Error_Message_For_Hash": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash": {
                          "runAfter": {
                            "Set_Entity_Mapping_True_For_Hash": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "fields": "@variables('fields_hash')",
                              "hash": "@items('For_Each_Hash')?['Value']",
                              "type": "hash"
                            },
                            "uri": "@{variables('base_url')}/tide/api/data/threats"
                          }
                        },
                        "Set_Entity_Mapping_True_For_Hash": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_mapping",
                            "value": "@true"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_FileHashes_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_Host": {
                      "foreach": "@body('Get_Hosts_From_Entities')?['Hosts']",
                      "actions": {
                        "Condition_To_Check_Host_TIDE_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_TIDE_Data_Not_Available_For_Host": {
                              "actions": {
                                "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Host": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No TIDE Lookup Results Found For Host -&nbsp;@{items('For_Each_Host')?['NetBiosName']}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comment_Count_For_Empty_Response_For_Host": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Host": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "comment_count",
                                    "value": 1
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_TIDE_Data_For_Host": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "For_Each_Threat_IOC_Of_Type_Host": {
                                    "foreach": "@body('Parse_TIDE_Data_For_Host')?['threat']",
                                    "actions": {
                                      "Condition_To_Check_Comment_Limit_Exceed_For_Host": {
                                        "actions": {
                                          "Condition_To_Verify_Incident_Has_99_Comments_For_Host": {
                                            "actions": {
                                              "Add_Comment_That_Limit_Has_Been_Exceeded_For_Host": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('comment_count')",
                                                    99
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Add_Host_TIDE_Data_As_Comment": {
                                              "runAfter": {
                                                "Set_HTML_With_Host_TIDE_Data": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>IOC - @{items('For_Each_Host')?['NetBiosName']} - @{items('For_Each_Threat_IOC_Of_Type_Host')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_Host')?['class']}<br>\n@{variables('html')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Comment_Count_For_Host": {
                                              "runAfter": {
                                                "Add_Host_TIDE_Data_As_Comment": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "comment_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_HTML_With_Host_TIDE_Data": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html",
                                                "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['type']}</td></tr>\n<tr><td>Host</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['host']}</td></tr>\n<tr><td>Domain</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['domain']}</td></tr>\n<tr><td>URL</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['url']}</td></tr>\n<tr><td>IP</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['ip']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_Host')?['host']}/summary</td></tr>\n</tbody></table></p>"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "greaterOrEquals": [
                                                "@variables('comment_count')",
                                                99
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_TIDE_Data_For_Host')?['record_count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_TIDE_Data_For_Host": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')",
                                "schema": {
                                  "properties": {
                                    "record_count": {
                                      "type": "integer"
                                    },
                                    "threat": {
                                      "items": {
                                        "properties": {
                                          "extended": {
                                            "properties": {
                                              "notes": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Get_TIDE_Data_Of_Type_Host": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_Host": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "Error Occurred While Fetching Data For Host - @{items('For_Each_Host')?['NetBiosName']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')['statusCode']}"
                                }
                              },
                              "Increment_Failure_Count_For_Host": {
                                "runAfter": {
                                  "Add_Error_Message_For_Host": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Get_TIDE_Data_Of_Type_Host": {
                          "runAfter": {
                            "Set_Entity_Mapping_True_For_Host": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "fields": "@variables('fields_host')",
                              "host": "@items('For_Each_Host')?['NetBiosName']",
                              "type": "host"
                            },
                            "uri": "@{variables('base_url')}/tide/api/data/threats"
                          }
                        },
                        "Set_Entity_Mapping_True_For_Host": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_mapping",
                            "value": "@true"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_IP": {
                      "foreach": "@body('Get_IPs_From_Entities')?['IPs']",
                      "actions": {
                        "Condition_To_Check_IP_TIDE_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_TIDE_Data_Not_Available_For_IP": {
                              "actions": {
                                "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_IP": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No TIDE Lookup Results Found For IP -&nbsp;@{items('For_Each_IP')?['Address']}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comment_Count_For_Empty_Response_For_IP": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_IP": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "comment_count",
                                    "value": 1
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_TIDE_Data_For_IP": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "For_Each_Threat_IOC_Of_Type_IP": {
                                    "foreach": "@body('Parse_TIDE_Data_For_IP')?['threat']",
                                    "actions": {
                                      "Condition_To_Check_Comment_Limit_Exceed_For_IP": {
                                        "actions": {
                                          "Condition_To_verify_Incident_Has_99_Comments_For_IP": {
                                            "actions": {
                                              "Add_Comment_That_Limit_Has_Been_Exceeded_For_IP": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('comment_count')",
                                                    99
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Add_IP_TIDE_Data_As_Comment": {
                                              "runAfter": {
                                                "Set_HTML_With_IP_TIDE_Data": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>IOC - @{items('For_Each_IP')?['Address']} - @{items('For_Each_Threat_IOC_Of_Type_IP')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_IP')?['class']}<br>\n@{variables('html')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Comment_Count_For_IP": {
                                              "runAfter": {
                                                "Add_IP_TIDE_Data_As_Comment": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "comment_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_HTML_With_IP_TIDE_Data": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html",
                                                "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['type']}</td></tr>\n<tr><td>IP</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['ip']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['profile']}</td></tr>\n<tr><td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['class']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['profile']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_IP')?['ip']}/summary</td></tr>\n</tbody></table></p>"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "greaterOrEquals": [
                                                "@variables('comment_count')",
                                                99
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_TIDE_Data_For_IP')?['record_count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_TIDE_Data_For_IP": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')",
                                "schema": {
                                  "properties": {
                                    "record_count": {
                                      "type": "integer"
                                    },
                                    "threat": {
                                      "items": {
                                        "properties": {
                                          "extended": {
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Get_TIDE_Data_Of_Type_IP": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_IP": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "Error Occurred While Fetching Data For IP - @{items('For_Each_IP')?['Address']}  With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')['statusCode']}"
                                }
                              },
                              "Increment_Failure_Count_For_IP": {
                                "runAfter": {
                                  "Add_Error_Message_For_IP": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Get_TIDE_Data_Of_Type_IP": {
                          "runAfter": {
                            "Set_Entity_Mapping_True_For_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "fields": "@variables('fields_ip')",
                              "ip": "@items('For_Each_IP')?['Address']",
                              "type": "ip"
                            },
                            "uri": "@{variables('base_url')}/tide/api/data/threats"
                          }
                        },
                        "Set_Entity_Mapping_True_For_IP": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_mapping",
                            "value": "@true"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_IPs_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_URL": {
                      "foreach": "@body('Get_URLs_From_Entities')?['URLs']",
                      "actions": {
                        "Condition_To_Check_URL_TIDE_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_TIDE_Data_Not_Available_For_urls": {
                              "actions": {
                                "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_URL": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No TIDE Lookup Results Found For URL -&nbsp;@{items('For_Each_URL')?['Url']}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comment_Count_For_Empty_Response_For_URL": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_URL": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "comment_count",
                                    "value": 1
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_TIDE_Data_For_URL": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "For_Each_Threat_IOC_Of_Type_URL": {
                                    "foreach": "@body('Parse_TIDE_Data_For_URL')?['threat']",
                                    "actions": {
                                      "Condition_To_Check_Comment_Limit_Exceed_For_urls": {
                                        "actions": {
                                          "Condition_To_Verify_That_Incident_Has_99_Comments_For_urls": {
                                            "actions": {
                                              "Add_Comment_That_Limit_Has_Been_Exceeded_For_URL": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('comment_count')",
                                                    99
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Add_URL_TIDE_Data_As_Comment": {
                                              "runAfter": {
                                                "Set_HTML_With_URL_TIDE_Data": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>IOC - @{items('For_Each_URL')?['Url']} - @{items('For_Each_Threat_IOC_Of_Type_URL')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_URL')?['class']}<br>\n@{variables('html')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Comment_Count_For_URL": {
                                              "runAfter": {
                                                "Add_URL_TIDE_Data_As_Comment": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "comment_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_HTML_With_URL_TIDE_Data": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "html",
                                                "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['type']}</td></tr>\n<tr><td>Host</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['host']}</td></tr>\n<tr><td>Domain</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['domain']}</td></tr>\n<tr><td>URL</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['url']}</td></tr>\n<tr><td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['class']}</td>\n</tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_URL')?['url']}/summary</td></tr>\n</tbody></table></p>"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "greaterOrEquals": [
                                                "@variables('comment_count')",
                                                99
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_TIDE_Data_For_URL')?['record_count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_TIDE_Data_For_URL": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')",
                                "schema": {
                                  "properties": {
                                    "record_count": {
                                      "type": "integer"
                                    },
                                    "threat": {
                                      "items": {
                                        "properties": {
                                          "extended": {
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Get_TIDE_Data_Of_Type_URL": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_Message_For_URL": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "error_message",
                                  "value": "Error Occurred While Fetching Data For URL - @{items('For_Each_URL')?['Url']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')['statusCode']}"
                                }
                              },
                              "Increment_Failure_Count_For_URL": {
                                "runAfter": {
                                  "Add_Error_Message_For_URL": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "failure_count",
                                  "value": 1
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Get_TIDE_Data_Of_Type_URL": {
                          "runAfter": {
                            "Set_Entity_Mapping_True_For_URL": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "fields": "@variables('fields_url')",
                              "type": "url",
                              "url": "@items('For_Each_URL')?['Url']"
                            },
                            "uri": "@{variables('base_url')}/tide/api/data/threats"
                          }
                        },
                        "Set_Entity_Mapping_True_For_URL": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_mapping",
                            "value": "@true"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_URLs_From_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get_FileHashes_From_Entities": {
                      "runAfter": {
                        "For_Each_URL": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/filehash"
                      }
                    },
                    "Get_Hosts_From_Entities": {
                      "runAfter": {
                        "Initialize_Failure_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Get_IPs_From_Entities": {
                      "runAfter": {
                        "For_Each_Host": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "Get_URLs_From_Entities": {
                      "runAfter": {
                        "For_Each_IP": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/url"
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      }
                    },
                    "Initialize_Comment_Count": {
                      "runAfter": {
                        "Initialize_Entity_Mapping_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "comment_count",
                            "type": "integer",
                            "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Mapping_False": {
                      "runAfter": {
                        "Initialize_HTML": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_mapping",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message": {
                      "runAfter": {
                        "Initialize_Comment_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Failure_Count": {
                      "runAfter": {
                        "Initialize_Error_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "failure_count",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_Fields_For_Hash": {
                      "runAfter": {
                        "Initialize_Fields_For_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fields_hash",
                            "type": "string",
                            "value": "id,type,ip,url,tld,email,hash,hash_type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                          }
                        ]
                      }
                    },
                    "Initialize_Fields_For_Host": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fields_host",
                            "type": "string",
                            "value": "id,type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                          }
                        ]
                      }
                    },
                    "Initialize_Fields_For_IP": {
                      "runAfter": {
                        "Initialize_Fields_For_Host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fields_ip",
                            "type": "string",
                            "value": "id,type,ip,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                          }
                        ]
                      }
                    },
                    "Initialize_Fields_For_URL": {
                      "runAfter": {
                        "Initialize_Fields_For_IP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fields_url",
                            "type": "string",
                            "value": "id,type,url,tld,email,hash,hash_type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                          }
                        ]
                      }
                    },
                    "Initialize_HTML": {
                      "runAfter": {
                        "Initialize_Fields_For_Hash": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "html",
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-TIDE-Lookup-Comment-Enrichment",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId15'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId15')]",
                "contentId": "[variables('_playbookContentId15')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion15')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-TIDE-Lookup-Comment-Enrichment",
            "description": "The playbook enrich an incident by adding TIDE Lookup information as comment on an incident.",
            "prerequisites": "User must provide valid Infoblox API Key.",
            "postDeployment": [
              "**a. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign",
              "**b. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. Click on the Run button beside this playbook."
            ],
            "entities": [
              "Host",
              "IP",
              "Hash",
              "URL"
            ],
            "tags": [
              "Infoblox",
              "TIDE",
              "Lookup",
              "Comment",
              "Enrichment"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId15')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-TIDE-Lookup-Comment-Enrichment",
        "contentProductId": "[variables('_playbookcontentProductId15')]",
        "id": "[variables('_playbookcontentProductId15')]",
        "version": "[variables('playbookVersion15')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName16')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-TimeRangeBased-DHCP-Lookup Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion16')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-TimeRangeBased-DHCP-Lookup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Start Date": {
              "type": "String",
              "metadata": {
                "description": "Enter start date from which you want to perform lookup for DHCP data. Date should be in the format of yyyy-mm-dd"
              }
            },
            "End Date": {
              "type": "String",
              "metadata": {
                "description": "Enter end date till you want to perform lookup for DHCP data. Date should be in the format of yyyy-mm-dd"
              }
            },
            "Workspace Name": {
              "type": "string",
              "metadata": {
                "description": "Enter name of Log Analytics Workspace where DHCP data is available"
              }
            }
          },
          "variables": {
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "StartDate": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Start Date'))]"
                    },
                    "EndDate": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('End Date'))]"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_No_IPs_Found": {
                      "actions": {
                        "Terminate_As_No_IPs_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "No IPs found associated with incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Entities_-_Get_IPs')?['IPs'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Validate_StartDate_And_EndDate": {
                      "actions": {
                        "Terminate_Due_To_Invalid_StartDate_And_EndDate": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "StartDate Should be Less than EndDate."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Incident_Comment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greaterOrEquals": [
                              "@variables('StartDate')",
                              "@variables('EndDate')"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Condition_To_Validate_StartDate_And_EndDate": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_Each_IP": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Condition_To_Verify_IP_Address_is_Empty_Or_Not": {
                          "actions": {
                            "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100": {
                              "actions": {
                                "Add_Comment_To_Incident_For_Empty_IP_Address_Found": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>Empty IP Address found.</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Increment_Comments_Count_For_Empty_IP_Address": {
                                  "runAfter": {
                                    "Add_Comment_To_Incident_For_Empty_IP_Address_Found": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "IncrementVariable",
                                  "inputs": {
                                    "name": "number_of_comments",
                                    "value": 1
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Has_99_Comment": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Increment_Number_Of_Comments_For_Exceeded_Limit": {
                                        "runAfter": {
                                          "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "number_of_comments",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('number_of_comments')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "less": [
                                      "@variables('number_of_comments')",
                                      99
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Check_That_Results_Are_Empty": {
                                "actions": {
                                  "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100_(2)": {
                                    "actions": {
                                      "Add_Comment__For_Empty_Results_Found_For_IP": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No Lookup Data Found For IP: @{items('For_Each_IP')?['Address']} From @{variables('StartDate')} To @{variables('EndDate')}</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Increment_Comments_Count_For_Empty_Results_For_IP": {
                                        "runAfter": {
                                          "Add_Comment__For_Empty_Results_Found_For_IP": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "number_of_comments",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Verify_That_Incident_Has_99_Comment_(2)": {
                                          "actions": {
                                            "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": {
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p>Comment limit to an incident has been breached.</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Increment_Number_Of_Comments_For_Exceeded_Limit_(2)": {
                                              "runAfter": {
                                                "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "number_of_comments",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@variables('number_of_comments')",
                                                  99
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "less": [
                                            "@variables('number_of_comments')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Verify_Records_Are_Remaining_To_Add_And_Count_Limit_is_Not_Exceeded": {
                                      "actions": {
                                        "Add_Comment_To_Incident_For_Remaining_Records": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                              "message": "<p>@{variables('incident_comment')}</p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        },
                                        "Increment_Number_Of_Comments_For_Remaining_Records": {
                                          "runAfter": {
                                            "Add_Comment_To_Incident_For_Remaining_Records": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "number_of_comments",
                                            "value": 1
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "For_Each_Query_Result": [
                                          "Succeeded"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Condition_To_Check_That_Comment_Count_Reaches_to_99": {
                                            "actions": {
                                              "Add_Comment_To_Incident_For_Limit_Exceeded": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              },
                                              "Increment_Number_Of_Comments_For_Limit_Exceeded": {
                                                "runAfter": {
                                                  "Add_Comment_To_Incident_For_Limit_Exceeded": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "IncrementVariable",
                                                "inputs": {
                                                  "name": "number_of_comments",
                                                  "value": 1
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('number_of_comments')",
                                                    99
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "not": {
                                              "equals": [
                                                "@variables('incident_comment')",
                                                "@null"
                                              ]
                                            }
                                          },
                                          {
                                            "less": [
                                              "@variables('number_of_comments')",
                                              99
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "For_Each_Query_Result": {
                                      "foreach": "@body('Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range')?['value']",
                                      "actions": {
                                        "Append_HTML_Table_Content_For_A_Record": {
                                          "runAfter": {
                                            "Parse_JSON_For_Query_Result_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "AppendToStringVariable",
                                          "inputs": {
                                            "name": "html_table",
                                            "value": "<p style=\"height:0px\"><table><tbody> \n<tr><th colspan=\"2\">DHCP Lookup For IP @{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</th></tr>\n<tr><td>Source IP</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</td></tr>\n<tr><td>Source HostName</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceHostName']}</td></tr>\n<tr><td>Source Mac Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceMACAddress']}</td></tr>\n<tr><td>Device Name</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceName']}</td></tr>\n<tr><td>Device Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceAddress']}</td></tr>\n<tr><td>Device DNS Domain</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceDnsDomain']}</td></tr>\n<tr><td>Infoblox Host</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxHost']}</td></tr>\n<tr><td>Infoblox Subnet</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxSubnet']}</td></tr>\n<tr><td>Infoblox Range Start</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeStart']}</td></tr>\n<tr><td>Infoblox Range End</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeEnd']}</td></tr>\n<tr><td>Infoblox Lease Op</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLeaseOp']}</td></tr>\n<tr><td>Infoblox Client ID</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxClientID']}</td></tr>\n<tr><td>Infoblox Lifetime</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLifetime']}</td></tr>\n<tr><td>Infoblox Fingerprint Pr</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprintPr']}</td></tr>\n<tr><td>Infoblox Fingerprint</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprint']}</td></tr>\n<tr><td>Infoblox DHCP Options</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxDHCPOptions']}</td></tr>\n</tbody></table></p>"
                                          }
                                        },
                                        "Condition_To_Verify_Character_Limit_Does_Not_Exceeded": {
                                          "actions": {
                                            "Set_Incident_Comment": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "incident_comment",
                                                "value": "@variables('html_table')"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Append_HTML_Table_Content_For_A_Record": [
                                              "Succeeded"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Condition_To_Verify_Comment_Count_Does_Not_Exceeded_To_100": {
                                                "actions": {
                                                  "Add_Comment_For_DHCP_Record_In_HTML_Table_Format_": {
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                      "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p>@{variables('incident_comment')}</p>"
                                                      },
                                                      "host": {
                                                        "connection": {
                                                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                      },
                                                      "method": "post",
                                                      "path": "/Incidents/Comment"
                                                    }
                                                  },
                                                  "Increment_Comments_Count_For_HTML_Table": {
                                                    "runAfter": {
                                                      "Add_Comment_For_DHCP_Record_In_HTML_Table_Format_": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                      "name": "number_of_comments",
                                                      "value": 1
                                                    }
                                                  },
                                                  "Reset_HTML_Table": {
                                                    "runAfter": {
                                                      "Reset_Incident_Comment": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "html_table",
                                                      "value": "@{null}"
                                                    }
                                                  },
                                                  "Reset_Incident_Comment": {
                                                    "runAfter": {
                                                      "Increment_Comments_Count_For_HTML_Table": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "incident_comment",
                                                      "value": "@{null}"
                                                    }
                                                  }
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Condition_To_Verify_That_Incident_Has_99_Comments": {
                                                      "actions": {
                                                        "Add_Comment_That_Limit_Has_Been_Exceeded": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "message": "<p>Comment limit to an incident has been breached.</p>"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "post",
                                                            "path": "/Incidents/Comment"
                                                          }
                                                        },
                                                        "Increment_Number_Of_Comments": {
                                                          "runAfter": {
                                                            "Add_Comment_That_Limit_Has_Been_Exceeded": [
                                                              "Succeeded"
                                                            ]
                                                          },
                                                          "type": "IncrementVariable",
                                                          "inputs": {
                                                            "name": "number_of_comments",
                                                            "value": 1
                                                          }
                                                        }
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@variables('number_of_comments')",
                                                              99
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "less": [
                                                        "@variables('number_of_comments')",
                                                        99
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@length(variables('html_table'))",
                                                  30000
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Parse_JSON_For_Query_Result_Data": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@items('For_Each_Query_Result')",
                                            "schema": {
                                              "properties": {
                                                "Activity": {
                                                  "type": "string"
                                                },
                                                "DeviceAddress": {
                                                  "type": "string"
                                                },
                                                "DeviceDnsDomain": {
                                                  "type": "string"
                                                },
                                                "DeviceName": {
                                                  "type": "string"
                                                },
                                                "InfobloxClientID": {
                                                  "type": "string"
                                                },
                                                "InfobloxDHCPOptions": {
                                                  "type": "string"
                                                },
                                                "InfobloxDUID": {
                                                  "type": "string"
                                                },
                                                "InfobloxFingerprint": {
                                                  "type": "string"
                                                },
                                                "InfobloxFingerprintPr": {
                                                  "type": "string"
                                                },
                                                "InfobloxHost": {
                                                  "type": "string"
                                                },
                                                "InfobloxHostID": {
                                                  "type": "string"
                                                },
                                                "InfobloxIPSpace": {
                                                  "type": "string"
                                                },
                                                "InfobloxLeaseOp": {
                                                  "type": "string"
                                                },
                                                "InfobloxLeaseUUID": {
                                                  "type": "string"
                                                },
                                                "InfobloxLifetime": {
                                                  "type": "string"
                                                },
                                                "InfobloxRangeEnd": {
                                                  "type": "string"
                                                },
                                                "InfobloxRangeStart": {
                                                  "type": "string"
                                                },
                                                "InfobloxSubnet": {
                                                  "type": "string"
                                                },
                                                "SourceHostName": {
                                                  "type": "string"
                                                },
                                                "SourceIP": {
                                                  "type": "string"
                                                },
                                                "SourceMACAddress": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@empty(body('Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range')?['value'])",
                                        "@true"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "query": "let DHCP_VALUE = 'DHCP';\nlet IP = '@{items('For_each_IP')?['Address']}';\nCommonSecurityLog\n| where DeviceEventClassID contains DHCP_VALUE\n    and SourceIP == IP\n| parse-kv AdditionalExtensions as (InfobloxHost : string,\nInfobloxHostID : string,\nInfobloxIPSpace : string,\nInfobloxSubnet : string,\nInfobloxRangeStart : string,\nInfobloxRangeEnd : string,\nInfobloxLeaseOp : string,\nInfobloxClientID : string,\nInfobloxDUID : string,\nInfobloxLifetime : string,\nInfobloxLeaseUUID : string,\nInfobloxFingerprintPr : string,\nInfobloxFingerprint : string,\nInfobloxDHCPOptions : string) with(kv_delimiter=\"=\", pair_delimiter=\";\")\n| project \nSourceIP,SourceHostName,SourceMACAddress, Activity, DeviceName,DeviceAddress,DeviceDnsDomain,\nInfobloxHost,\nInfobloxHostID,\nInfobloxIPSpace,\nInfobloxSubnet,\nInfobloxRangeStart,\nInfobloxRangeEnd,\nInfobloxLeaseOp,\nInfobloxClientID,\nInfobloxDUID,\nInfobloxLifetime,\nInfobloxLeaseUUID,\nInfobloxFingerprintPr,\nInfobloxFingerprint,\nInfobloxDHCPOptions\n",
                                    "timerange": {
                                      "exactTimeRangeFrom": "@variables('StartDate')",
                                      "exactTimeRangeTo": "@variables('EndDate')"
                                    },
                                    "timerangetype": "Exact"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/queryDataV2",
                                  "queries": {
                                    "resourcegroups": "[[resourceGroup().name]",
                                    "resourcename": "[[parameters('Workspace Name')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[[subscription().subscriptionId]"
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@empty(items('For_Each_IP')?['Address'])",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_IPs_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_Data_Variable": {
                      "runAfter": {
                        "Initialize_Length_of_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dhcp_data",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_End_Date": {
                      "runAfter": {
                        "Initialize_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EndDate",
                            "type": "string",
                            "value": "@parameters('EndDate')"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message": {
                      "runAfter": {
                        "Initialize_Number_Of_Comments": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "error_message",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_HTML_Table": {
                      "runAfter": {
                        "Initialize_Error_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "html_table",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Comment": {
                      "runAfter": {
                        "Initialize_Data_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_comment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Length_of_Data": {
                      "runAfter": {
                        "Initialize_End_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "length_of_data",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_Number_Of_Comments": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "number_of_comments",
                            "type": "integer",
                            "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                          }
                        ]
                      }
                    },
                    "Initialize_Start_Date": {
                      "runAfter": {
                        "Initialize_HTML_Table": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "StartDate",
                            "type": "string",
                            "value": "@parameters('StartDate')"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-TimeRangeBased-DHCP-Lookup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId16'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId16')]",
                "contentId": "[variables('_playbookContentId16')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion16')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-TimeRangeBased-DHCP-Lookup",
            "description": "The playbook will retrieve IP entities from an incident, search for related DHCP data in a table for a apecified time range, and if found, add the DHCP lookup data as a comment on the incident.",
            "prerequisites": [
              "1. CEF based Infoblox Data Connector should be configured to ingest DHCP lease related data in Microsoft Sentinel."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
              "4. Members: select managed identity for assigned access to and add your logic app as member",
              "5. Click on review+assign",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping available for IP.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. Click on the Run button beside this playbook."
            ],
            "entities": [
              "IP"
            ],
            "tags": [
              "Infoblox",
              "DHCP",
              "IP",
              "Lookup",
              "TimeBased"
            ],
            "lastUpdateTime": "2024-07-19T16:15:48.355Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId16')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-TimeRangeBased-DHCP-Lookup",
        "contentProductId": "[variables('_playbookcontentProductId16')]",
        "id": "[variables('_playbookcontentProductId16')]",
        "version": "[variables('playbookVersion16')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName17')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Infoblox-Get-Host-Name Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion17')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Infoblox-Get-Host-Name",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
              }
            },
            "Infoblox API Key": {
              "type": "securestring",
              "metadata": {
                "description": "Enter value for API Key"
              }
            },
            "Infoblox Base Url": {
              "type": "string",
              "defaultValue": "https://csp.infoblox.com",
              "metadata": {
                "description": "Enter Base Url for your Infoblox instance. (e.g. https://csp.infoblox.com)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "API Key": {
                      "defaultValue": "[[trim(parameters('Infoblox API Key'))]",
                      "type": "String"
                    },
                    "BaseUrl": {
                      "defaultValue": "[[trim(parameters('Infoblox Base Url'))]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Day",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Initialize_Base_URL": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "@parameters('BaseUrl')"
                          }
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Break_Loop": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Break_Loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Limit": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Limit": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "limit",
                            "type": "integer",
                            "value": 25
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Offset": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Offset": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "offset",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Retry_Count": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Retry Count",
                            "type": "integer",
                            "value": 3
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Table_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Initialize_Table_Name": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "Table Name",
                            "type": "string",
                            "value": "Host_Name_Info"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Until_Loop_For_Fetching_Host_Endpoint_Data_With_Pagination": {
                      "actions": {
                        "Condition_To_Verify_API_Call_Is_Success_Or_Not": {
                          "actions": {
                            "Condition_For_Host_Result_Is_Available_Or_Not": {
                              "actions": {
                                "Set_Break_Loop_True_Because_Of_Empty_Results": {
                                  "inputs": {
                                    "name": "Break_Loop",
                                    "value": "@true"
                                  },
                                  "type": "SetVariable"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Data_Is_Sent_To_Workspace": {
                                    "actions": {
                                      "Condition_For_Length_Of_Data_is_Less_Than_Limit_": {
                                        "actions": {
                                          "Set_Break_Loop_True_Because_Of_Data_Is_Less_Than_Limit": {
                                            "inputs": {
                                              "name": "Break_Loop",
                                              "value": "@true"
                                            },
                                            "type": "SetVariable"
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "less": [
                                                "@length(body('Parse_JSON_For_Host_Data')?['results'])",
                                                "@variables('limit')"
                                              ]
                                            }
                                          ]
                                        },
                                        "runAfter": {
                                          "Increment_Offset_By_Limit": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Increment_Offset_By_Limit": {
                                        "inputs": {
                                          "name": "offset",
                                          "value": "@variables('limit')"
                                        },
                                        "runAfter": {
                                          "Set_Retry_Count": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable"
                                      },
                                      "Set_Retry_Count": {
                                        "inputs": {
                                          "name": "Retry Count",
                                          "value": 3
                                        },
                                        "type": "SetVariable"
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Check_Retry_Count": {
                                          "actions": {
                                            "Increment_Offset_And_Skip_The_One_Page": {
                                              "inputs": {
                                                "name": "offset",
                                                "value": "@variables('limit')"
                                              },
                                              "runAfter": {
                                                "Set_New_Retry_Count": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable"
                                            },
                                            "Set_New_Retry_Count": {
                                              "inputs": {
                                                "name": "Retry Count",
                                                "value": 3
                                              },
                                              "type": "SetVariable"
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "less": [
                                                  "@variables('Retry Count')",
                                                  0
                                                ]
                                              }
                                            ]
                                          },
                                          "runAfter": {
                                            "Decrement_Retry_Count": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Decrement_Retry_Count": {
                                          "inputs": {
                                            "name": "Retry Count",
                                            "value": 1
                                          },
                                          "type": "DecrementVariable"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Send_Data_Into_Log_Analytics_Workspace')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "runAfter": {
                                      "Send_Data_Into_Log_Analytics_Workspace": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Send_Data_Into_Log_Analytics_Workspace": {
                                    "inputs": {
                                      "body": "@{body('Parse_JSON_For_Host_Data')?['results']}",
                                      "headers": {
                                        "Log-Type": "@variables('Table Name')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector_1']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    },
                                    "type": "ApiConnection"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@empty(body('Parse_JSON_For_Host_Data')?['results'])",
                                      "@true"
                                    ]
                                  }
                                ]
                              },
                              "runAfter": {
                                "Parse_JSON_For_Host_Data": [
                                  "Succeeded"
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Host_Data": {
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Host_Endpoint')",
                                "schema": {
                                  "results": [
                                    {
                                      "configs": [
                                        {
                                          "id": "string",
                                          "service_id": "string",
                                          "service_type": "string",
                                          "upgraded_at": "string"
                                        }
                                      ],
                                      "created_at": "string",
                                      "display_name": "string",
                                      "host_type": "string",
                                      "id": "string",
                                      "ip_address": "string",
                                      "legacy_id": "string",
                                      "mac_address": "string",
                                      "maintenance_mode": "string",
                                      "ophid": "string",
                                      "pool_id": "string",
                                      "timezone": "string",
                                      "updated_at": "string"
                                    }
                                  ]
                                }
                              },
                              "type": "ParseJson"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_Break_Loop_True_Because_Of_Status_Code_Is_Not_200": {
                                "inputs": {
                                  "name": "Break_Loop",
                                  "value": "@true"
                                },
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Host_Endpoint')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "HTTP_Request_To_Host_Endpoint": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Host_Endpoint": {
                          "inputs": {
                            "headers": {
                              "Authorization": "Token @{parameters('API Key')}"
                            },
                            "method": "GET",
                            "queries": {
                              "_limit": "@{variables('limit')}",
                              "_offset": "@{variables('offset')}"
                            },
                            "uri": "@{variables('base_url')}/api/infra/v1/hosts"
                          },
                          "type": "Http"
                        }
                      },
                      "expression": "@equals(variables('Break_Loop'), true)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Infoblox-Get-Host-Name",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId17'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId17')]",
                "contentId": "[variables('_playbookContentId17')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion17')]",
                "source": {
                  "kind": "Solution",
                  "name": "Infoblox",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Infoblox"
                },
                "support": {
                  "name": "Infoblox",
                  "tier": "Partner",
                  "link": "https://support.infoblox.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Infoblox-Get-Host-Name",
            "description": "The playbook will fetch the data from 'Hosts' API and ingest it into custom table",
            "prerequisites": [
              "1. User must have a valid Infoblox API Key"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize connection.",
              "1. Go to your logic app -> API connections -> Select connection resource",
              "2. Go to General -> edit API connection",
              "3. Provide Workspace Id and Workspace Key of Log Analytics Workspace where Table will be created",
              "4. Click Save"
            ],
            "entities": [
              "Host"
            ],
            "tags": [
              "Infoblox",
              "Host Name"
            ],
            "lastUpdateTime": "2024-08-09T15:24:09.773Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId17')]",
        "contentKind": "Playbook",
        "displayName": "Infoblox-Get-Host-Name",
        "contentProductId": "[variables('_playbookcontentProductId17')]",
        "id": "[variables('_playbookcontentProductId17')]",
        "version": "[variables('playbookVersion17')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Infoblox",
        "publisherDisplayName": "Infoblox",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Infoblox/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The Infoblox Solution for Microsoft Sentinel is designed to enhance the capabilities of Security Operations Centers (SOC) by integrating actionable intelligence and contextual network data derived from DNS data into Microsoft Sentinel. This integration provides SOC analysts with the tools they need to quickly identify and respond to potential threats such as malware and data exfiltration, improving overall security posture. With seamless configuration and intuitive dashboards, the solution ensures that critical security events are monitored and correlated, offering actionable insights that streamline threat detection and response.\nSOC analysts will benefit from the app’s ability to provide contextual network data, including user and device attribution, through various lookups and visualizations. By leveraging unique DNS-based threat intelligence, audit logs and other data sources, analysts can conduct faster and more effective investigations. The solution’s functionalities, such as SOC Insights Overview and DNS Events, empower analysts to reduce alert fatigue by focusing on correlated events, ultimately leading to improved efficiency and protection against emerging threats.</p>\n<p><strong>Benefits</strong></p>\n<ol>\n<li><strong>Reduce alert fatigue with actionable insights through SOC Insights</strong>: Focus on the most critical alerts and insights to streamline threat detection and response.</li>\n<li><strong>Faster investigations with contextual network data</strong>: Quickly correlate network activities with potential threats using detailed lookups and visualizations.</li>\n<li><strong>Unique DNS-based Infoblox Threat Intel</strong>: Access unparalleled DNS-based threat intelligence to enhance security decision-making and threat mitigation.</li>\n</ol>\n<p><strong>Data Connectors:</strong> 5, <strong>Parsers:</strong> 6, <strong>Workbooks:</strong> 2, <strong>Analytic Rules:</strong> 2, <strong>Playbooks:</strong> 17</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/infoblox_logo.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Infoblox"
        },
        "support": {
          "name": "Infoblox",
          "tier": "Partner",
          "link": "https://support.infoblox.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId2')]",
              "version": "[variables('dataConnectorVersion2')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId3')]",
              "version": "[variables('dataConnectorVersion3')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId4')]",
              "version": "[variables('dataConnectorVersion4')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId5')]",
              "version": "[variables('dataConnectorVersion5')]"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId2')]",
              "version": "[variables('workbookVersion2')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject4').parserContentId4]",
              "version": "[variables('parserObject4').parserVersion4]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject5').parserContentId5]",
              "version": "[variables('parserObject5').parserVersion5]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject6').parserContentId6]",
              "version": "[variables('parserObject6').parserVersion6]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Block Allow IP Domain')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Block Allow IP Domain Incident Based')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_InfoBlox Config Insight Details')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Config Insights')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Data Connector Trigger Sync')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox DHCP Lookup')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Get IP Space Data')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Get Service Name')]",
              "version": "[variables('playbookVersion8')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox IPAM Lookup')]",
              "version": "[variables('playbookVersion9')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox SOC Get Insight Details')]",
              "version": "[variables('playbookVersion10')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox SOC Get Open Insights API')]",
              "version": "[variables('playbookVersion11')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox SOC Import Indicators TI')]",
              "version": "[variables('playbookVersion12')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox TIDE Lookup')]",
              "version": "[variables('playbookVersion13')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox TIDE Lookup Incident Based')]",
              "version": "[variables('playbookVersion14')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox TIDE Lookup Incident Comment Based')]",
              "version": "[variables('playbookVersion15')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox TimeRangeBased DHCP Lookup')]",
              "version": "[variables('playbookVersion16')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Infoblox Get Host Name')]",
              "version": "[variables('playbookVersion17')]"
            }
          ]
        },
        "firstPublishDate": "2024-07-15",
        "lastPublishDate": "2024-07-15",
        "providers": [
          "Infoblox"
        ],
        "categories": {
          "domains": [
            "Networking",
            "Security - Threat Intelligence",
            "Security - Threat Protection",
            "Security - Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
