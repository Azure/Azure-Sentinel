id: df75ac6c-7b0b-40d2-82e4-191c012f1a07
name: Exploit and Pentest Framework User Agent
description: |
    'This query detects suspicious user agent strings used by exploit and pen test frameworks.'
description-detailed: |
  'There are several exploit and pen test frameworks that are being used by pen testers as well as attackers to 
  compromise an environment and achieve their objective. The query tries to detect suspicious user agent strings 
  used by these frameworks in some of the data sources that contain UserAgent field. 
  This is based out of sigma rules described in references.
  References: https://github.com/Neo23x0/sigma/blob/master/rules/proxy/proxy_ua_frameworks.yml'
requiredDataConnectors:
  - connectorId: Office365
    dataTypes:
      - OfficeActivity
  - connectorId: AWS
    dataTypes:
      - AWSCloudTrail
  - connectorId: AzureMonitor(IIS)
    dataTypes:
      - W3CIISLog
tactics:
  - InitialAccess
  - CommandAndControl
  - Execution
relevantTechniques:
  - T1189
  - T1071
  - T1203
query: |
  let UserAgentList = "Internet Explorer |Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1; SV1; InfoPath\\.2\\)|Mozilla/5\\.0 \\(Windows NT 10\\.0; Win32; x32; rv:60\\.0\\)|Mozilla/4\\.0 \\(compatible; Metasploit RSPEC\\)|Mozilla/4\\.0 \\(compatible; MSIE 6\\.1; Windows NT\\)|Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|Mozilla/4\\.0 \\(compatible; MSIE 8\\.0; Windows NT 6\\.0; Trident/4\\.0\\)|Mozilla/4\\.0 \\(compatible; MSIE 7\\.0; Windows NT 6\\.0; Trident/4\\.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; \\.N\\)|Mozilla/5\\.0 \\(Windows; U; Windows NT 5\\.1; en-US\\) AppleWebKit/525\\.13 \\(KHTML, like Gecko\\) Chrome/4\\.0\\.221\\.6 Safari/525\\.13|Mozilla/5\\.0 \\(compatible; MSIE 9\\.0; Windows NT 6\\.1; WOW64; Trident/5\\.0; MAAU\\)|Mozilla/5\\.0[^\\s]|Mozilla/4\\.0 \\(compatible; SPIPE/1\\.0\\)|Mozilla/5\\.0 \\(Windows NT 6\\.3; rv:39\\.0\\) Gecko/20100101 Firefox/35\\.0|Sametime Community Agent|X-FORWARDED-FOR|DotDotPwn v2\\.1|SIPDROID|wordpress hash grabber|exploit|okhttp/";
  // Excluding for IIS, as the main malicious usage for okhttp that we have seen was in the OfficeActivity logs and this can create noise for IIS.
  let ExcludeIIS = "okhttp/";
  (union isfuzzy=true
  (OfficeActivity
  | where ExtendedProperties has "UserAgent"
  | extend UserAgent = extractjson("$[0].Value", ExtendedProperties, typeof(string))
  | where UserAgent matches regex UserAgentList
  | extend SourceIP = ClientIP
  | project TimeGenerated, Type, UserAgent, SourceIP
  ),
  (
  W3CIISLog
  | extend UserAgent = replace('\\+', ' ', csUserAgent) 
  | where UserAgent matches regex UserAgentList
  | where UserAgent !startswith ExcludeIIS
  | extend SourceIP = cIP
  | project TimeGenerated, Type, UserAgent, SourceIP
  ),
  (
  AWSCloudTrail
  | where UserAgent matches regex UserAgentList
  | extend SourceIP = SourceIpAddress
  | project TimeGenerated, Type, UserAgent, SourceIP
  ))
  | summarize min(TimeGenerated), max(TimeGenerated), count() by Type, UserAgent, SourceIP
  | extend timestamp = min_TimeGenerated
  | extend IP_0_Address = SourceIP
entityMappings:
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: SourceIP
version: 1.0.2
