id: f2c0db50-9693-4fe8-82ff-1015accc577d
Function:
  Title: Parser for VectraStream_function
  Version: '1.0.0'
  LastUpdated: '2023-08-23'
Category: Microsoft Sentinel Parser
FunctionName: VectraStream_function
FunctionAlias: VectraStream_function
FunctionQuery: |
    VectraStream_CL
    | extend
        EventVendor="Vectra AI",
        EventProduct="Vectra Stream",
        EventEndTime=column_ifexists('ts_d', ''),
        metadata_type_s = column_ifexists('metadata_type_s', ''),
        community_id_s = column_ifexists('community_id_s', ''),
        id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),
        id_orig_h_s = column_ifexists('id_orig_h_s', ''),
        id_orig_p_d = column_ifexists('id_orig_p_d', ''),
        id_resp_h_s = column_ifexists('id_resp_h_s', ''),
        id_resp_p_d = column_ifexists('id_resp_p_d', ''),
        resp_hostname_s = column_ifexists('resp_hostname_s', ''),
        local_orig_b = column_ifexists('local_orig_b', ''),
        local_resp_b = column_ifexists('local_resp_b', ''),
        orig_huid_s = column_ifexists('orig_huid_s', ''),
        orig_hostname_s = column_ifexists('orig_hostname_s', ''),
        orig_sluid_s = column_ifexists('orig_sluid_s', ''),
        resp_huid_s = column_ifexists('resp_huid_s', ''),
        resp_sluid_s = column_ifexists('resp_sluid_s', ''),
        sensor_uid_s = column_ifexists('sensor_uid_s', ''),
        uid_s = column_ifexists('uid_s', ''),
        ts_d = column_ifexists('ts_d', ''),
        error_s = column_ifexists('error_s', ''),
    	conn_state_s = column_ifexists('conn_state_s', ''),
        duration_d = column_ifexists('duration_d', ''),
        service_s = column_ifexists('service_s', ''),
        proto_d = column_ifexists('proto_d', ''),
        protoName_s = column_ifexists('protoName_s', ''),
        orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),
        resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),
        orig_pkts_d = column_ifexists('orig_pkts_d', ''),
        resp_pkts_d = column_ifexists('resp_pkts_d', ''),
        session_start_time_d = column_ifexists('session_start_time_d', ''),
        resp_domain_s = column_ifexists('resp_domain_s', ''),
        orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),
        resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),
        first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),
        first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),
        first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),
        first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),
        first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),
        first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),
        resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),
        dir_confidence_d = column_ifexists('dir_confidence_d', ''),
        //beacon specific attributes
    	beacon_type_s = column_ifexists('beacon_type_s', ''),
        beacon_uid_s = column_ifexists('beacon_uid_s', ''),
        first_event_time_d = column_ifexists('first_event_time_d', ''),
        last_event_time_d = column_ifexists('last_event_time_d', ''),
        resp_domains_s = column_ifexists('resp_domains_s', ''),
        session_count_d = column_ifexists('session_count_d', ''),
        //dcerpc
    	rtt_s = column_ifexists('rtt_s', ''),
        endpoint_s = column_ifexists('endpoint_s', ''),
        username_s = column_ifexists('username_s', ''),
        hostname_s = column_ifexists('hostname_s', ''),
        domain_s = column_ifexists('domain_s', ''),
        operation_s = column_ifexists('operation_s', ''),
    	//dhcp
        mac_s = column_ifexists('mac_s', ''),
        assigned_ip_s = column_ifexists('assigned_ip_s', ''),
        lease_time_d = column_ifexists('lease_time_d', ''),
        trans_id_s = column_ifexists('trans_id_s', ''),
        dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),
        dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),
    	//dns
        trans_id_d = column_ifexists('trans_id_d', ''),
        query_s = column_ifexists('query_s', ''),
        qclass_d = column_ifexists('qclass_d', ''),
        qclass_name_s = column_ifexists('qclass_name_s', ''),
        qtype_d = column_ifexists('qtype_d', ''),
        qtype_name_s = column_ifexists('qtype_name_s', ''),
        rcode_d = column_ifexists('rcode_d', ''),
        rcode_name_s = column_ifexists('rcode_name_s', ''),
        AA_b = column_ifexists('AA_b', ''),
        TC_b = column_ifexists('TC_b', ''),
        RD_b = column_ifexists('RD_b', ''),
        RA_b = column_ifexists('RA_b', ''),
        answers_s = column_ifexists('answers_s', ''),
        TTLs_s = column_ifexists('TTLs_s', ''),
        auth_s = column_ifexists('auth_s', ''),
        total_answers_d = column_ifexists('total_answers_d', ''),
        total_replies_d = column_ifexists('total_replies_d', ''),
        rejected_b = column_ifexists('rejected_b', ''),
        saw_query_b = column_ifexists('saw_query_b', ''),
        saw_reply_b = column_ifexists('saw_reply_b', ''),
        values_s = column_ifexists('values_s', ''),
    	//http
        method_s = column_ifexists('method_s', ''),
        host_s = column_ifexists('host_s', ''),
        uri_s = column_ifexists('uri_s', ''),
        referrer_s = column_ifexists('referrer_s', ''),
        user_agent_s = column_ifexists('user_agent_s', ''),
        request_body_len_d = column_ifexists('request_body_len_d', ''),
        response_body_len_d = column_ifexists('response_body_len_d', ''),
        orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),
        resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),
        status_code_d = column_ifexists('status_code_d', ''),
        status_msg_s = column_ifexists('status_msg_s', ''),
        proxied_s = column_ifexists('proxied_s', ''),
        cookie_s = column_ifexists('cookie_s', ''),
        cookie_vars_s = column_ifexists('cookie_vars_s', ''),
        request_cache_control_s = column_ifexists('request_cache_control_s', ''),
        response_cache_control_s = column_ifexists('response_cache_control_s', ''),
        response_expires_s = column_ifexists('response_expires_s', ''),
        request_header_count_d = column_ifexists('request_header_count_d', ''),
        response_header_count_d = column_ifexists('response_header_count_d', ''),
        is_proxied_b = column_ifexists('is_proxied_b', ''),
        host_multihomed_b = column_ifexists('host_multihomed_b', ''),
        resp_filename_s = column_ifexists('resp_filename_s', ''),
        response_content_disposition_s = column_ifexists('response_content_disposition_s', ''),
    	//Kerberos
        client_s = column_ifexists('client_s', ''),
        data_source_s = column_ifexists('data_source_s', ''),
        success_b = column_ifexists('success_b', ''),
        error_code_s = column_ifexists('error_code_s', ''),
        error_msg_s = column_ifexists('error_msg_s', ''),
        request_type_s = column_ifexists('request_type_s', ''),
        protocol_s = column_ifexists('protocol_s', ''),
        reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),
        orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),
        req_ciphers_s = column_ifexists('req_ciphers_s', ''),
        rep_cipher_s = column_ifexists('rep_cipher_s', ''),
        //ldap
        message_id_d = column_ifexists('message_id_d', ''),
        base_object_s = column_ifexists('base_object_s', ''),
        query_scope_s = column_ifexists('query_scope_s', ''),
        result_s = column_ifexists('result_s', ''),
        matched_dn_s = column_ifexists('matched_dn_s', ''),
        attributes_s = column_ifexists('attributes_s', ''),
        bind_error_count_d = column_ifexists('bind_error_count_d', ''),
        encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),
        logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),
        response_bytes_s = column_ifexists('response_bytes_s', ''),
        request_bytes_s = column_ifexists('request_bytes_s', ''),
        result_code_s = column_ifexists('result_code_s', ''),
        result_count_d = column_ifexists('result_count_d', ''),
        is_query_b = column_ifexists('is_query_b', ''),
        is_close_b = column_ifexists('is_close_b', ''),
    	//ntlm
        status_d = column_ifexists('status_d', ''),
    	//rdp
        keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),
        client_build_s = column_ifexists('client_build_s', ''),
        date_s = column_ifexists('date_s', ''),
        client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),
        client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),
        client_name_s = column_ifexists('client_name_s', ''),
        desktop_width_d = column_ifexists('desktop_width_d', ''),
        desktop_height_d = column_ifexists('desktop_height_d', ''),
    	//smbfiles
        action_s = column_ifexists('action_s', ''),
        delete_on_close_b = column_ifexists('delete_on_close_b', ''),
        path_s = column_ifexists('path_s', ''),
        name_s = column_ifexists('name_s', ''),
        prev_name_s = column_ifexists('prev_name_s', ''),
        version_s = column_ifexists('version_s', ''),
    	//smtp
        helo_s = column_ifexists('helo_s', ''),
        mail_from_s = column_ifexists('mail_from_s', ''),
        rcpt_to_s = column_ifexists('rcpt_to_s', ''),
        date_d = column_ifexists('date_d', ''),
        from_s = column_ifexists('from_s', ''),
        to_s = column_ifexists('to_s', ''),
        cc_s = column_ifexists('cc_s', ''),
        reply_to_s = column_ifexists('reply_to_s', ''),
        msgid_d = column_ifexists('msgid_d', ''),
        in_reply_to_s = column_ifexists('in_reply_to_s', ''),
        subject_s = column_ifexists('subject_s', ''),
        x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),
        first_received_s = column_ifexists('first_received_s', ''),
        second_received_s = column_ifexists('second_received_s', ''),
        useragent_s = column_ifexists('useragent_s', ''),
        tls_s = column_ifexists('tls_s', ''),
        spf_helo_s = column_ifexists('spf_helo_s', ''),
        spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),
        dkim_status_s = column_ifexists('dkim_status_s', ''),
        dmarc_status_s = column_ifexists('dmarc_status_s', ''),
    	//ssh
        server_s = column_ifexists('server_s', ''),
        cipher_alg_s = column_ifexists('cipher_alg_s', ''),
        mac_alg_s = column_ifexists('mac_alg_s', ''),
        compression_alg_s = column_ifexists('compression_alg_s', ''),
        kex_alg_s = column_ifexists('kex_alg_s', ''),
        host_key_alg_s = column_ifexists('host_key_alg_s', ''),
        host_key_s = column_ifexists('host_key_s', ''),
        hassh_g = column_ifexists('hassh_g', ''),
        hasshServer_g = column_ifexists('hasshServer_g', ''),
    	//ssl
        server_name_s = column_ifexists('server_name_s', ''),
        established_b = column_ifexists('established_b', ''),
        next_protocol_s = column_ifexists('next_protocol_s', ''),
        cipher_s = column_ifexists('cipher_s', ''),
        version_num_d = column_ifexists('version_num_d', ''),
        curve_s = column_ifexists('curve_s', ''),
        issuer_s = column_ifexists('issuer_s', ''),
        client_issuer_s = column_ifexists('client_issuer_s', ''),
        client_subject_s = column_ifexists('client_subject_s', ''),
        client_version_num_d = column_ifexists('client_version_num_d', ''),
        client_version_s = column_ifexists('client_version_s', ''),
        client_extension_s = column_ifexists('client_extension_s', ''),
        client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),
        client_curve_num_s = column_ifexists('client_curve_num_s', ''),
        ja3_g = column_ifexists('ja3_g', ''),
        ja3s_g = column_ifexists('ja3s_g', ''),
        server_extensions_s = column_ifexists('server_extensions_s', ''),
    	//x509
        certificate_version_d = column_ifexists('certificate_version_d', ''),
        certificate_serial_s = column_ifexists('certificate_serial_s', ''),
        certificate_serial_g = column_ifexists('certificate_serial_g', ''),
        certificate_subject_s = column_ifexists('certificate_subject_s', ''),
        certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),
        certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),
        certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),
        certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),
        certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),
        certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),
        certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),
        certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),
        certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),
        certificate_curve_s = column_ifexists('certificate_curve_s', ''),
        certificate_cn_s = column_ifexists('certificate_cn_s', ''),
        san_dns_s = column_ifexists('san_dns_s', ''),
        san_email_s = column_ifexists('san_email_s', ''),
        san_ip_s = column_ifexists('san_ip_s', ''),
        san_other_fields_b = column_ifexists('san_other_fields_b', ''),
        basic_constraints_ca_b = column_ifexists('basic_constraints_ca_b', ''),
        basic_constraints_path_len_d = column_ifexists('basic_constraints_path_len_d', ''),
        certificate_serial = case(isnotempty(certificate_serial_s), certificate_serial_s, isnotempty(certificate_serial_g), certificate_serial_g, '')
    | project-rename
        metadata_type = metadata_type_s,
        community_id = community_id_s,
        id_ip_ver = id_ip_ver_s,
        id_orig_h = id_orig_h_s,
        id_orig_p = id_orig_p_d,
        id_resp_h = id_resp_h_s,
        id_resp_p = id_resp_p_d,
        resp_hostname = resp_hostname_s,
        local_orig = local_orig_b,
        local_resp = local_resp_b,
        orig_huid = orig_huid_s,
        orig_hostname = orig_hostname_s,
        orig_sluid = orig_sluid_s,
        resp_huid = resp_huid_s,
        resp_sluid = resp_sluid_s,
        sensor_uid = sensor_uid_s,
        uid = uid_s,
        ts = ts_d,
        error = error_s,
    	conn_state = conn_state_s,
        duration = duration_d,
        service = service_s,
        proto = proto_d,
        protoName = protoName_s,
        orig_ip_bytes = orig_ip_bytes_d,
        resp_ip_bytes = resp_ip_bytes_d,
        orig_pkts = orig_pkts_d,
        resp_pkts = resp_pkts_d,
        session_start_time = session_start_time_d,
        resp_domain = resp_domain_s,
        orig_vlan_id = orig_vlan_id_d,
        resp_vlan_id = resp_vlan_id_d,
        first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,
        first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,
        first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,
        first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,
        first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,
        first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,
        resp_multihomed = resp_multihomed_b,
        dir_confidence = dir_confidence_d,
        //beacon specific attributes
    	beacon_type = beacon_type_s,
        beacon_uid = beacon_uid_s,
        first_event_time = first_event_time_d,
        last_event_time = last_event_time_d,
        resp_domains = resp_domains_s,
        session_count = session_count_d,
        //dcerpc
    	rtt = rtt_s,
        endpoint = endpoint_s,
        username = username_s,
        hostname = hostname_s,
        domain = domain_s,
        operation = operation_s,
    	//dhcp
        mac = mac_s,
        assigned_ip = assigned_ip_s,
        lease_time = lease_time_d,
        dhcp_server_ip = dhcp_server_ip_s,
        dns_server_ips = dns_server_ips_s,
    	//dns
        trans_id = trans_id_d,
        query = query_s,
        qclass = qclass_d,
        qclass_name = qclass_name_s,
        qtype = qtype_d,
        qtype_name = qtype_name_s,
        rcode = rcode_d,
        rcode_name = rcode_name_s,
        AA = AA_b,
        TC = TC_b,
        RD = RD_b,
        RA = RA_b,
        answers = answers_s,
        TTLs = TTLs_s,
        auth = auth_s,
        total_answers = total_answers_d,
        total_replies = total_replies_d,
        rejected = rejected_b,
        saw_query = saw_query_b,
        saw_reply = saw_reply_b,
        values = values_s,
    	//http
        method = method_s,
        host = host_s,
        uri = uri_s,
        referrer = referrer_s,
        user_agent = user_agent_s,
        request_body_len = request_body_len_d,
        response_body_len = response_body_len_d,
        orig_mime_types = orig_mime_types_s,
        resp_mime_types = resp_mime_types_s,
        status_code = status_code_d,
        status_msg = status_msg_s,
        proxied = proxied_s,
        cookie = cookie_s,
        cookie_vars = cookie_vars_s,
        request_cache_control = request_cache_control_s,
        response_cache_control = response_cache_control_s,
        response_expires = response_expires_s,
        request_header_count = request_header_count_d,
        response_header_count = response_header_count_d,
        is_proxied = is_proxied_b,
        host_multihomed = host_multihomed_b,
        resp_filename = resp_filename_s,
        response_content_disposition = response_content_disposition_s,
    	//Kerberos
        client = client_s,
        data_source = data_source_s,
        success = success_b,
        error_code = error_code_s,
        error_msg = error_msg_s,
        request_type = request_type_s,
        protocol = protocol_s,
        reply_timestamp = reply_timestamp_d,
        orig_host_observed_privilege = orig_host_observed_privilege_d,
        req_ciphers = req_ciphers_s,
        rep_cipher = rep_cipher_s,
        //ldap
        message_id = message_id_d,
        base_object = base_object_s,
        query_scope = query_scope_s,
        result = result_s,
        matched_dn = matched_dn_s,
        attributes = attributes_s,
        bind_error_count = bind_error_count_d,
        encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,
        logon_failure_error_count = logon_failure_error_count_s,
        response_bytes = response_bytes_s,
        request_bytes = request_bytes_s,
        result_code = result_code_s,
        result_count = result_count_d,
        is_query = is_query_b,
        is_close = is_close_b,
    	//ntlm
        status = status_d,
    	//rdp
        keyboard_layout = keyboard_layout_s,
        client_build = client_build_s,
        client_dig_protocol_id = client_dig_protocol_id_d,
        client_dig_product_id = client_dig_product_id_d,
        client_name = client_name_s,
        desktop_width = desktop_width_d,
        desktop_height = desktop_height_d,
    	//smbfiles
        action = action_s,
        delete_on_close = delete_on_close_b,
        path = path_s,
        name = name_s,
        prev_name = prev_name_s,
        version = version_s,
    	//smtp
        helo = helo_s,
        mail_from = mail_from_s,
        rcpt_to = rcpt_to_s,
        date_msg = date_d,
        from = from_s,
        to_msg = to_s,
        cc = cc_s,
        reply_to = reply_to_s,
        msgid = msgid_d,
        in_reply_to = in_reply_to_s,
        subject = subject_s,
        x_originating_ip = x_originating_ip_s,
        first_received = first_received_s,
        second_received = second_received_s,
        useragent = useragent_s,
        tls = tls_s,
        spf_helo = spf_helo_s,
        spf_mailfrom = spf_mailfrom_s,
        dkim_status = dkim_status_s,
        dmarc_status = dmarc_status_s,
    	//ssh
        server = server_s,
        cipher_alg = cipher_alg_s,
        mac_alg = mac_alg_s,
        compression_alg = compression_alg_s,
        kex_alg = kex_alg_s,
        host_key_alg = host_key_alg_s,
        host_key = host_key_s,
        hassh = hassh_g,
        hasshServer = hasshServer_g,
    	//ssl
        server_name = server_name_s,
        established = established_b,
        next_protocol = next_protocol_s,
        cipher = cipher_s,
        version_num = version_num_d,
        curve = curve_s,
        issuer = issuer_s,
        client_issuer = client_issuer_s,
        client_subject = client_subject_s,
        client_version_num = client_version_num_d,
        client_version = client_version_s,
        client_extension = client_extension_s,
        client_ec_point_format = client_ec_point_format_s,
        client_curve_num = client_curve_num_s,
        ja3 = ja3_g,
        ja3s = ja3s_g,
        server_extensions = server_extensions_s,
    	//x509
        certificate_version = certificate_version_d,
        certificate_subject = certificate_subject_s,
        certificate_issuer = certificate_issuer_s,
        certificate_key_alg = certificate_key_alg_s,
        certificate_key_length = certificate_key_length_s,
        certificate_key_type = certificate_key_type_s,
        certificate_not_valid_after = certificate_not_valid_after_d,
        certificate_not_valid_before = certificate_not_valid_before_d,
        certificate_exponent = certificate_exponent_s,
        certificate_sig_alg = certificate_sig_alg_s,
        certificate_self_issued = certificate_self_issued_b,
        certificate_curve = certificate_curve_s,
        certificate_cn = certificate_cn_s,
        san_dns = san_dns_s,
        san_email = san_email_s,
        san_ip = san_ip_s,
        san_other_fields = san_other_fields_b,
        basic_constraints_ca = basic_constraints_ca_b,
        basic_constraints_path_len = basic_constraints_path_len_d