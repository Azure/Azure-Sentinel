{
  "id": "VectraStreamAma",
  "title": "[Recommended] Vectra AI Stream via AMA",
  "publisher": "Vectra AI",
  "descriptionMarkdown": "The Vectra AI Stream connector allows to send Network Metadata collected by Vectra Sensors accross the Network and Cloud to Microsoft Sentinel",
  "additionalRequirementBanner": "This data connector depends on parsers based on Kusto Functions to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which are deployed with this Microsoft Sentinel Solution.",
  "graphQueries": [
    {
      "metricName": "Total data received",
      "legend": "Vectar AI Stream",
      "baseQuery": "vectra_isession_CL"
    }
  ],
  "sampleQueries": [
    {
      "description": "List all DNS Queries",
      "query": "vectra_dns_CL \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, query, answers"
    },
    {
      "description": "Number of DNS requests per type",
      "query": "vectra_dns_CL \n| summarize count() by qtype_name"
    },
    {
      "description": "Top 10 of query to non existing domain",
      "query": "vectra_dns_CL \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by query\n| order by Count desc\n| limit 10"
    },
    {
      "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
      "query": "vectra_ssl_CL \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
    }
  ],
  "dataTypes": [
    {
      "name": "vectra_isession",
      "lastDataReceivedQuery": "vectra_isession\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_dns",
      "lastDataReceivedQuery": "vectra_dns\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_ssl",
      "lastDataReceivedQuery": "vectra_ssl\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_beacon",
      "lastDataReceivedQuery": "vectra_beacon\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_dcerpc",
      "lastDataReceivedQuery": "vectra_dcerpc\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_dhcp",
      "lastDataReceivedQuery": "vectra_dhcp\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_http",
      "lastDataReceivedQuery": "vectra_http\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_kerberos",
      "lastDataReceivedQuery": "vectra_kerberos\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_ldap",
      "lastDataReceivedQuery": "vectra_ldap\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_ntlm",
      "lastDataReceivedQuery": "vectra_ntlm\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_radius",
      "lastDataReceivedQuery": "vectra_radius\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_rdp",
      "lastDataReceivedQuery": "vectra_rdp\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_smbfiles",
      "lastDataReceivedQuery": "vectra_smbfiles\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_smbmapping",
      "lastDataReceivedQuery": "vectra_smbmapping\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_smtp",
      "lastDataReceivedQuery": "vectra_smtp\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_ssh",
      "lastDataReceivedQuery": "vectra_ssh\n |  summarize Time = max(TimeGenerated)"
    },
    {
      "name": "vectra_x509",
      "lastDataReceivedQuery": "vectra_x509\n |  summarize Time = max(TimeGenerated)"
    }
  ],
  "connectivityCriterias": [
    {
      "type": "IsConnectedQuery",
      "value": [
        "\nvectra_stream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(1h)"
      ]
    }
  ],
  "availability": {
    "status": 1,
    "isPreview": false
  },
  "permissions": {
    "resourceProvider": [
      {
        "provider": "Microsoft.OperationalInsights/workspaces",
        "permissionsDisplayText": "read and write permissions are required.",
        "providerDisplayName": "Workspace",
        "scope": "Workspace",
        "requiredPermissions": {
          "write": true,
          "read": true,
          "delete": true
        }
      },
      {
        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
        "providerDisplayName": "Keys",
        "scope": "Workspace",
        "requiredPermissions": {
          "action": true
        }
      }
    ],
    "customs": [
      {
        "name": "Vectra AI Stream configuration",
        "description": "must be configured to export Stream metadata in JSON"
      },
      {
        "description": "To collect data from non-Azure VMs, they must have Azure Arc installed and enabled. [Learn more](https://docs.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-install?tabs=ARMAgentPowerShell,PowerShellWindows,PowerShellWindowsArc,CLIWindows,CLIWindowsArc)"
      }
    ]
  },
  "instructionSteps": [
    {
      "title": "",
      "description": ">**NOTE:** This data connector depends on parsers based on a Kusto Function to work as expected which are deployed as part of the Microsoft Sentinel Solution.",
      "instructions": []
    },
    {
      "title": "",
      "description": ">**IMPORTANT:** Vectra AI Stream connector is only available for **Linux** agents with **syslog-ng**. Make sure that syslog-ng is installed!\n\n In the first part, we are going to create the custom tables requires for this solution (using an ARM template). Then we are going to configure the Data Connector.",
      "instructions": [
        {
          "parameters": {
            "title": "Please proceed with these steps:",
            "instructionSteps": [
              {
                "title": "Step 1. Create custom  tables in Log Analytic Workspace (ARM Template)",
                "description": "1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fvectranetworks%2FMicrosoft_Sentinel%2Fmain%2FStream%2FAMA%2FARM_Templates%2Fazuredeploy_CustomTables_connector.json)\n2. Provide the required details such as the resource group and Microsoft Log Analytics Workspace (**the workspace must exist!**)\n4. Click **Review + Create** to deploy.\n\n\t_Note: Once deployed, you must be able to see the custom tables in your Log Analytic Workspace (Settings ---> Tables)._",
                "instructions": []
              },
              {
                "title": "Step 2. Install the Syslog via AMA Data connector",
                "description": "_Note: This is only required if it has not been install yet in Microsoft Sentinel._\n1. Microsoft Sentinel workspace ---> Content Management ---> Content Hub.\n\n2. Search for 'Syslog' (Provider is Microsoft) and select it.\n\n3. Check 'Install' buton on the bottom of the right panel.",
                "instructions": []
              },
              {
                "title": "Step 3. Configure the Syslog via AMA data connector",
                "description": "_Note: Two different Data Collection Rules (DCR) are going to be created during this step_\n1. Navigate to Microsoft Sentinel workspace ---> configuration ---> Data connector.\n\n2. Search for 'Syslog via AMA' data connector and open it.\n\n3. Check If there is no existing DCR configured to collect required facility of logs: LOG_USER/LOG_NOTICE and LOG_LOCAL0/LOG_NOTICE.\n\n4. Create a first DCR (Data Collection Rule). Specify a name. Then, in the Resources tab, select the instance where AMA is going to run. In the Collect tab, select LOG_USER/LOG_NOTICE.\n\n5. Create a second DCR. Specify a different name. Then, in the Resources tab, choose the same host. In the Collect tab, select LOG_LOCAL0/LOG_NOTICE\n\n\n\n\tNote:- It is recommended to install minimum 1.27 version of AMA agent [Learn more](https://learn.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-manage?tabs=azure-portal ) and ensure there is no duplicate DCR as it can cause log duplicacy.",
                "instructions": []
              }
     
            ]
          },
          "type": "InstructionStepsGroup"
        }
    ]
    },
    {
      "title": "",
      "description": "In the next section, we are goning to modify the syslog-ng configuration that has been created where the AMA is deployed. Then, we are going to modify the DCR configuration to be able to sent the network metadata from Vectra Stream to different custom tables.",
      "instructions": [
        {
          "parameters": {
            "title": "Please proceed with these steps:",
            "instructionSteps": [
              {
                "title": "Step 1. Modify the syslog-ng configuration",
                "description": "_Note: A DCR cannot have more than 10 output flows. As we have 16 custom tables in this solution, we need to split the traffic to two DCR using syslog-ng._\n1. Download the modified syslog-ng configuration file: [azuremonitoragent-tcp.conf](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/syslog-ng/azuremonitoragent-tcp.conf).\n2. Log into the instance where syslog-ng/AMA is running.\n3. Browse to /etc/syslog-ng/conf.d/  and replace the content of _azuremonitoragent-tcp.conf_ file with the one that you just downloaded.\n4. Save and restart syslog-ng (_systemctl restart syslog-ng_).",
                "instructions": []
              },
              {
                "title": "Step 2. Modify the Data Collection rules configuration",
                "description": "_Note: The Data Collection Rules that have been created are located in Azure Monitor (**Monitor ---> Settings ---> Data Collection Rules**)_\n 1. Locate the 2 DCR that you created in Microsoft Sentinel.\n 2. Open the first DCR where Syslog facility is LOG_USER. Then go to Automation ---> Export template ---> Deploy --> Edit template.\n 3. Download the dataFlows configuration for LOG_USER DCR: [Stream_DataFlows_dcr1.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr1.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your workspace name.\n 4. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 5. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace (same as step 3).\n 6. Save --> Review + Create --> Create.\n 7. Open the second DCR than you created (Facilily is LOG_LOCAL0) and edit the template (Automation ---> Export template ---> Deploy --> Edit template).\n 8. Download the dataFlows configuration for LOG_LOCAL0 DCR: [Stream_DataFlows_dcr2.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr2.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your wokrspace name.\n 9. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 10. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace.\n 11. Save --> Review + Create --> Create.",
                "instructions": []
              }
              
            ]
          },
        "type": "InstructionStepsGroup"
        }
      ]
    },
     {
      "title": "Configure Vectra AI Stream",
      "description": "\nConfigure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft Sentinel workspace via AMA.\n\nFrom the Vectra UI, navigate to Settings > Stream and Edit the destination configuration:\n\n 1. Select Publisher: RAW JSON\n 2. Set the server IP or hostname (which is the host whhere AMA is running)\n 3. Set all the port to **514**.\n 4. Save."
    },
    {
      "title": "Run the following command to validate (or set up) that syslog-ng is listening on port 514",
      "instructions": [
        {
          "parameters": {
            "fillWith": [
              "WorkspaceId",
              "PrimaryKey"
            ],
            "label": "",
            "value": "sudo wget -O Forwarder_AMA_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Forwarder_AMA_installer.py&&sudo python Forwarder_AMA_installer.py"
          },
          "type": "CopyableLabel"
        }
      ]
    }
  ],
  "metadata": {
    "id": "ec069726-811c-4f50-b141-295057367f49",
    "kind": "dataConnector",
    "version": "1.0.0",
    "source": {
      "kind": "solution",
      "name": "Vectra AI"
    },
    "author": {
      "name": "Vectra AI Technical Marketing"
    },
    "support": {
      "tier": "developer",
      "name": "Vectra AI",
      "email": "tme@vectra.ai",
      "link": "https://www.vectra.ai/support"
    }
  }
}
