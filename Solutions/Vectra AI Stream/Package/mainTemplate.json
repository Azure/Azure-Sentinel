{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Vectra TME Team - tme@vetcra.ai",
    "comments": "Solution template for Vectra AI Stream"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "tme@vetcra.ai",
    "_email": "[variables('email')]",
    "_solutionName": "Vectra AI Stream",
    "_solutionVersion": "3.0.1",
    "solutionId": "vectraaiinc.vectra_sentinel_solution",
    "_solutionId": "[variables('solutionId')]",
    "uiConfigId1": "AIVectraStream",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "AIVectraStream",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "uiConfigId2": "VectraStreamAma",
    "_uiConfigId2": "[variables('uiConfigId2')]",
    "dataConnectorContentId2": "VectraStreamAma",
    "_dataConnectorContentId2": "[variables('dataConnectorContentId2')]",
    "dataConnectorId2": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
    "_dataConnectorId2": "[variables('dataConnectorId2')]",
    "dataConnectorTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId2'))))]",
    "dataConnectorVersion2": "1.0.0",
    "_dataConnectorcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId2'),'-', variables('dataConnectorVersion2'))))]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','Vectra Data Parser')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Vectra Data Parser')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraStream_function-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "VectraStream_function-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','vectra_beacon')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_beacon')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_beacon-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "vectra_beacon-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','vectra_dcerpc')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dcerpc')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_dcerpc-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "vectra_dcerpc-Parser"
    },
    "parserObject4": {
      "_parserName4": "[concat(parameters('workspace'),'/','vectra_dhcp')]",
      "_parserId4": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dhcp')]",
      "parserTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_dhcp-Parser')))]",
      "parserVersion4": "1.0.0",
      "parserContentId4": "vectra_dhcp-Parser"
    },
    "parserObject5": {
      "_parserName5": "[concat(parameters('workspace'),'/','vectra_dns')]",
      "_parserId5": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dns')]",
      "parserTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_dns-Parser')))]",
      "parserVersion5": "1.0.0",
      "parserContentId5": "vectra_dns-Parser"
    },
    "parserObject6": {
      "_parserName6": "[concat(parameters('workspace'),'/','vectra_http')]",
      "_parserId6": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_http')]",
      "parserTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_http-Parser')))]",
      "parserVersion6": "1.0.0",
      "parserContentId6": "vectra_http-Parser"
    },
    "parserObject7": {
      "_parserName7": "[concat(parameters('workspace'),'/','vectra_isession')]",
      "_parserId7": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_isession')]",
      "parserTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_isession-Parser')))]",
      "parserVersion7": "1.0.0",
      "parserContentId7": "vectra_isession-Parser"
    },
    "parserObject8": {
      "_parserName8": "[concat(parameters('workspace'),'/','vectra_kerberos')]",
      "_parserId8": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_kerberos')]",
      "parserTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_kerberos-Parser')))]",
      "parserVersion8": "1.0.0",
      "parserContentId8": "vectra_kerberos-Parser"
    },
    "parserObject9": {
      "_parserName9": "[concat(parameters('workspace'),'/','vectra_ldap')]",
      "_parserId9": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ldap')]",
      "parserTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_ldap-Parser')))]",
      "parserVersion9": "1.0.0",
      "parserContentId9": "vectra_ldap-Parser"
    },
    "parserObject10": {
      "_parserName10": "[concat(parameters('workspace'),'/','vectra_ntlm')]",
      "_parserId10": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ntlm')]",
      "parserTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_ntlm-Parser')))]",
      "parserVersion10": "1.0.0",
      "parserContentId10": "vectra_ntlm-Parser"
    },
    "parserObject11": {
      "_parserName11": "[concat(parameters('workspace'),'/','vectra_radius')]",
      "_parserId11": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_radius')]",
      "parserTemplateSpecName11": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_radius-Parser')))]",
      "parserVersion11": "1.0.0",
      "parserContentId11": "vectra_radius-Parser"
    },
    "parserObject12": {
      "_parserName12": "[concat(parameters('workspace'),'/','vectra_rdp')]",
      "_parserId12": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_rdp')]",
      "parserTemplateSpecName12": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_rdp-Parser')))]",
      "parserVersion12": "1.0.0",
      "parserContentId12": "vectra_rdp-Parser"
    },
    "parserObject13": {
      "_parserName13": "[concat(parameters('workspace'),'/','vectra_smbfiles')]",
      "_parserId13": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbfiles')]",
      "parserTemplateSpecName13": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_smbfiles-Parser')))]",
      "parserVersion13": "1.0.0",
      "parserContentId13": "vectra_smbfiles-Parser"
    },
    "parserObject14": {
      "_parserName14": "[concat(parameters('workspace'),'/','vectra_smbmapping')]",
      "_parserId14": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbmapping')]",
      "parserTemplateSpecName14": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_smbmapping-Parser')))]",
      "parserVersion14": "1.0.0",
      "parserContentId14": "vectra_smbmapping-Parser"
    },
    "parserObject15": {
      "_parserName15": "[concat(parameters('workspace'),'/','vectra_smtp')]",
      "_parserId15": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smtp')]",
      "parserTemplateSpecName15": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_smtp-Parser')))]",
      "parserVersion15": "1.0.0",
      "parserContentId15": "vectra_smtp-Parser"
    },
    "parserObject16": {
      "_parserName16": "[concat(parameters('workspace'),'/','vectra_ssh')]",
      "_parserId16": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssh')]",
      "parserTemplateSpecName16": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_ssh-Parser')))]",
      "parserVersion16": "1.0.0",
      "parserContentId16": "vectra_ssh-Parser"
    },
    "parserObject17": {
      "_parserName17": "[concat(parameters('workspace'),'/','vectra_ssl')]",
      "_parserId17": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssl')]",
      "parserTemplateSpecName17": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_ssl-Parser')))]",
      "parserVersion17": "1.0.0",
      "parserContentId17": "vectra_ssl-Parser"
    },
    "parserObject18": {
      "_parserName18": "[concat(parameters('workspace'),'/','vectra_stream')]",
      "_parserId18": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_stream')]",
      "parserTemplateSpecName18": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_stream-Parser')))]",
      "parserVersion18": "1.0.1",
      "parserContentId18": "vectra_stream-Parser"
    },
    "parserObject19": {
      "_parserName19": "[concat(parameters('workspace'),'/','vectra_x509')]",
      "_parserId19": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_x509')]",
      "parserTemplateSpecName19": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_x509-Parser')))]",
      "parserVersion19": "1.0.0",
      "parserContentId19": "vectra_x509-Parser"
    },
    "parserObject20": {
      "_parserName20": "[concat(parameters('workspace'),'/','vectra_match')]",
      "_parserId20": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_match')]",
      "parserTemplateSpecName20": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('vectra_match-Parser')))]",
      "parserVersion20": "1.0.0",
      "parserContentId20": "vectra_match-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Vectra AI Stream data connector with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "AI Vectra Stream via Legacy Agent",
                  "publisher": "Vectra AI",
                  "descriptionMarkdown": "The AI Vectra Stream connector allows to send Network Metadata collected by Vectra Sensors accross the Network and Cloud to Microsoft Sentinel",
                  "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which is deployed with the Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "VectraStream_CL",
                      "baseQuery": "VectraStream_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "List all DNS Queries",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, ['query'], answers"
                    },
                    {
                      "description": "Number of DNS requests per type",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| summarize count() by qtype_name"
                    },
                    {
                      "description": "Top 10 of query to non existing domain",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by tostring(query)\n| order by Count desc\n| limit 10"
                    },
                    {
                      "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "VectraStream_CL",
                      "lastDataReceivedQuery": "\nVectraStream\n |  summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "\nVectraStream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Vectra AI Brain",
                        "description": "must be configured to export Stream metadata in JSON"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected **VectraStream** which is deployed with the Microsoft Sentinel Solution."
                    },
                    {
                      "description": "Install the Linux agent on sperate Linux instance.\n\n> Logs are collected only from **Linux** agents.",
                      "instructions": [
                        {
                          "parameters": {
                            "title": "Choose where to install the Linux agent:",
                            "instructionSteps": [
                              {
                                "title": "Install agent on Azure Linux Virtual Machine",
                                "description": "Select the machine to install the agent on and then click **Connect**.",
                                "instructions": [
                                  {
                                    "parameters": {
                                      "linkType": "InstallAgentOnLinuxVirtualMachine"
                                    },
                                    "type": "InstallAgent"
                                  }
                                ]
                              },
                              {
                                "title": "Install agent on a non-Azure Linux Machine",
                                "description": "Download the agent on the relevant machine and follow the instructions.",
                                "instructions": [
                                  {
                                    "parameters": {
                                      "linkType": "InstallAgentOnLinuxNonAzure"
                                    },
                                    "type": "InstallAgent"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ],
                      "title": "1. Install and onboard the agent for Linux"
                    },
                    {
                      "description": "Follow the configuration steps below to get Vectra Stream metadata into Microsoft Sentinel. The Log Analytics agent is leveraged to send custom JSON into Azure Monitor, enabling the storage of the metadata into a custom table. For more information, refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json).\n1. Download config file for the log analytics agent: VectraStream.conf (located in the Connector folder within the Vectra solution: https://aka.ms/sentinel-aivectrastream-conf).\n2. Login to the server where you have installed Azure Log Analytics agent.\n3. Copy VectraStream.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n4. Edit VectraStream.conf as follows:\n\n\t i. configure an alternate port to send data to, if desired. Default port is 29009.\n\n\t ii. replace **workspace_id** with real value of your Workspace ID.\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "2. Configure the logs to be collected"
                    },
                    {
                      "description": "Configure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft Sentinel workspace via the Log Analytics Agent.\n\nFrom the Vectra UI, navigate to Settings > Cognito Stream and Edit the destination configuration:\n\n- Select Publisher: RAW JSON\n\n- Set the server IP or hostname (which is the host which run the Log Analytics Agent)\n\n- Set all the port to **29009** (this port can be modified if required)\n\n- Save\n\n- Set Log types (Select all log types available)\n\n- Click on **Save**\n\n",
                      "title": "3. Configure and connect Vectra AI Stream"
                    }
                  ],
                  "metadata": {
                    "id": "ec069726-811c-4f50-b141-295057367f49",
                    "version": "1.0.0",
                    "kind": "dataConnector",
                    "source": {
                      "kind": "solution",
                      "name": "Vectra AI"
                    },
                    "author": {
                      "name": "Vectra AI Technical Marketing"
                    },
                    "support": {
                      "tier": "developer",
                      "name": "Vectra AI",
                      "email": "tme@vectra.ai",
                      "link": "https://www.vectra.ai/support"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "AI Vectra Stream via Legacy Agent",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "AI Vectra Stream via Legacy Agent",
          "publisher": "Vectra AI",
          "descriptionMarkdown": "The AI Vectra Stream connector allows to send Network Metadata collected by Vectra Sensors accross the Network and Cloud to Microsoft Sentinel",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "VectraStream_CL",
              "baseQuery": "VectraStream_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "VectraStream_CL",
              "lastDataReceivedQuery": "\nVectraStream\n |  summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "\nVectraStream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "List all DNS Queries",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, ['query'], answers"
            },
            {
              "description": "Number of DNS requests per type",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| summarize count() by qtype_name"
            },
            {
              "description": "Top 10 of query to non existing domain",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by tostring(query)\n| order by Count desc\n| limit 10"
            },
            {
              "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Vectra AI Brain",
                "description": "must be configured to export Stream metadata in JSON"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected **VectraStream** which is deployed with the Microsoft Sentinel Solution."
            },
            {
              "description": "Install the Linux agent on sperate Linux instance.\n\n> Logs are collected only from **Linux** agents.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the Linux agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Linux Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Linux Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "1. Install and onboard the agent for Linux"
            },
            {
              "description": "Follow the configuration steps below to get Vectra Stream metadata into Microsoft Sentinel. The Log Analytics agent is leveraged to send custom JSON into Azure Monitor, enabling the storage of the metadata into a custom table. For more information, refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json).\n1. Download config file for the log analytics agent: VectraStream.conf (located in the Connector folder within the Vectra solution: https://aka.ms/sentinel-aivectrastream-conf).\n2. Login to the server where you have installed Azure Log Analytics agent.\n3. Copy VectraStream.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n4. Edit VectraStream.conf as follows:\n\n\t i. configure an alternate port to send data to, if desired. Default port is 29009.\n\n\t ii. replace **workspace_id** with real value of your Workspace ID.\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "2. Configure the logs to be collected"
            },
            {
              "description": "Configure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft Sentinel workspace via the Log Analytics Agent.\n\nFrom the Vectra UI, navigate to Settings > Cognito Stream and Edit the destination configuration:\n\n- Select Publisher: RAW JSON\n\n- Set the server IP or hostname (which is the host which run the Log Analytics Agent)\n\n- Set all the port to **29009** (this port can be modified if required)\n\n- Save\n\n- Set Log types (Select all log types available)\n\n- Click on **Save**\n\n",
              "title": "3. Configure and connect Vectra AI Stream"
            }
          ],
          "id": "[variables('_uiConfigId1')]",
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which is deployed with the Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Vectra AI Stream data connector with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId2')]",
                  "title": "[Recommended] Vectra AI Stream via AMA",
                  "publisher": "Vectra AI",
                  "descriptionMarkdown": "The Vectra AI Stream connector allows to send Network Metadata collected by Vectra Sensors accross the Network and Cloud to Microsoft Sentinel",
                  "additionalRequirementBanner": "This data connector depends on parsers based on Kusto Functions to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which are deployed with this Microsoft Sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "Vectar AI Stream",
                      "baseQuery": "vectra_isession_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "List all DNS Queries",
                      "query": "vectra_dns_CL \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, query, answers"
                    },
                    {
                      "description": "Number of DNS requests per type",
                      "query": "vectra_dns_CL \n| summarize count() by qtype_name"
                    },
                    {
                      "description": "Top 10 of query to non existing domain",
                      "query": "vectra_dns_CL \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by query\n| order by Count desc\n| limit 10"
                    },
                    {
                      "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
                      "query": "vectra_ssl_CL \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "vectra_isession",
                      "lastDataReceivedQuery": "vectra_isession\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_dns",
                      "lastDataReceivedQuery": "vectra_dns\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_ssl",
                      "lastDataReceivedQuery": "vectra_ssl\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_beacon",
                      "lastDataReceivedQuery": "vectra_beacon\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_dcerpc",
                      "lastDataReceivedQuery": "vectra_dcerpc\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_dhcp",
                      "lastDataReceivedQuery": "vectra_dhcp\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_http",
                      "lastDataReceivedQuery": "vectra_http\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_kerberos",
                      "lastDataReceivedQuery": "vectra_kerberos\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_ldap",
                      "lastDataReceivedQuery": "vectra_ldap\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_ntlm",
                      "lastDataReceivedQuery": "vectra_ntlm\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_radius",
                      "lastDataReceivedQuery": "vectra_radius\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_rdp",
                      "lastDataReceivedQuery": "vectra_rdp\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_smbfiles",
                      "lastDataReceivedQuery": "vectra_smbfiles\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_smbmapping",
                      "lastDataReceivedQuery": "vectra_smbmapping\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_smtp",
                      "lastDataReceivedQuery": "vectra_smtp\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_ssh",
                      "lastDataReceivedQuery": "vectra_ssh\n |  summarize Time = max(TimeGenerated)"
                    },
                    {
                      "name": "vectra_x509",
                      "lastDataReceivedQuery": "vectra_x509\n |  summarize Time = max(TimeGenerated)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "\nvectra_stream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(1h)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Vectra AI Stream configuration",
                        "description": "must be configured to export Stream metadata in JSON"
                      },
                      {
                        "description": "To collect data from non-Azure VMs, they must have Azure Arc installed and enabled. [Learn more](https://docs.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-install?tabs=ARMAgentPowerShell,PowerShellWindows,PowerShellWindowsArc,CLIWindows,CLIWindowsArc)"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This data connector depends on parsers based on a Kusto Function to work as expected which are deployed as part of the Microsoft Sentinel Solution."
                    },
                    {
                      "description": ">**IMPORTANT:** Vectra AI Stream connector is only available for **Linux** agents with **syslog-ng**. Make sure that syslog-ng is installed!\n\n In the first part, we are going to create the custom tables requires for this solution (using an ARM template). Then we are going to configure the Data Connector.",
                      "instructions": [
                        {
                          "parameters": {
                            "title": "Please proceed with these steps:",
                            "instructionSteps": [
                              {
                                "title": "Step 1. Create custom  tables in Log Analytic Workspace (ARM Template)",
                                "description": "1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fvectranetworks%2FMicrosoft_Sentinel%2Fmain%2FStream%2FAMA%2FARM_Templates%2Fazuredeploy_CustomTables_connector.json)\n2. Provide the required details such as the resource group and Microsoft Log Analytics Workspace (**the workspace must exist!**)\n4. Click **Review + Create** to deploy.\n\n\t_Note: Once deployed, you must be able to see the custom tables in your Log Analytic Workspace (Settings ---> Tables)._"
                              },
                              {
                                "title": "Step 2. Install the Syslog via AMA Data connector",
                                "description": "_Note: This is only required if it has not been install yet in Microsoft Sentinel._\n1. Microsoft Sentinel workspace ---> Content Management ---> Content Hub.\n\n2. Search for 'Syslog' (Provider is Microsoft) and select it.\n\n3. Check 'Install' buton on the bottom of the right panel."
                              },
                              {
                                "title": "Step 3. Configure the Syslog via AMA data connector",
                                "description": "_Note: Two different Data Collection Rules (DCR) are going to be created during this step_\n1. Navigate to Microsoft Sentinel workspace ---> configuration ---> Data connector.\n\n2. Search for 'Syslog via AMA' data connector and open it.\n\n3. Check If there is no existing DCR configured to collect required facility of logs: LOG_USER/LOG_NOTICE and LOG_LOCAL0/LOG_NOTICE.\n\n4. Create a first DCR (Data Collection Rule). Specify a name. Then, in the Resources tab, select the instance where AMA is going to run. In the Collect tab, select LOG_USER/LOG_NOTICE.\n\n5. Create a second DCR. Specify a different name. Then, in the Resources tab, choose the same host. In the Collect tab, select LOG_LOCAL0/LOG_NOTICE\n\n\n\n\tNote:- It is recommended to install minimum 1.27 version of AMA agent [Learn more](https://learn.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-manage?tabs=azure-portal ) and ensure there is no duplicate DCR as it can cause log duplicacy."
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ]
                    },
                    {
                      "description": "In the next section, we are goning to modify the syslog-ng configuration that has been created where the AMA is deployed. Then, we are going to modify the DCR configuration to be able to sent the network metadata from Vectra Stream to different custom tables.",
                      "instructions": [
                        {
                          "parameters": {
                            "title": "Please proceed with these steps:",
                            "instructionSteps": [
                              {
                                "title": "Step 1. Modify the syslog-ng configuration",
                                "description": "_Note: A DCR cannot have more than 10 output flows. As we have 16 custom tables in this solution, we need to split the traffic to two DCR using syslog-ng._\n1. Download the modified syslog-ng configuration file: [azuremonitoragent-tcp.conf](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/syslog-ng/azuremonitoragent-tcp.conf).\n2. Log into the instance where syslog-ng/AMA is running.\n3. Browse to /etc/syslog-ng/conf.d/  and replace the content of _azuremonitoragent-tcp.conf_ file with the one that you just downloaded.\n4. Save and restart syslog-ng (_systemctl restart syslog-ng_)."
                              },
                              {
                                "title": "Step 2. Modify the Data Collection rules configuration",
                                "description": "_Note: The Data Collection Rules that have been created are located in Azure Monitor (**Monitor ---> Settings ---> Data Collection Rules**)_\n 1. Locate the 2 DCR that you created in Microsoft Sentinel.\n 2. Open the first DCR where Syslog facility is LOG_USER. Then go to Automation ---> Export template ---> Deploy --> Edit template.\n 3. Download the dataFlows configuration for LOG_USER DCR: [Stream_DataFlows_dcr1.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr1.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your workspace name.\n 4. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 5. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace (same as step 3).\n 6. Save --> Review + Create --> Create.\n 7. Open the second DCR than you created (Facilily is LOG_LOCAL0) and edit the template (Automation ---> Export template ---> Deploy --> Edit template).\n 8. Download the dataFlows configuration for LOG_LOCAL0 DCR: [Stream_DataFlows_dcr2.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr2.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your wokrspace name.\n 9. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 10. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace.\n 11. Save --> Review + Create --> Create."
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ]
                    },
                    {
                      "description": "\nConfigure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft Sentinel workspace via AMA.\n\nFrom the Vectra UI, navigate to Settings > Stream and Edit the destination configuration:\n\n 1. Select Publisher: RAW JSON\n 2. Set the server IP or hostname (which is the host whhere AMA is running)\n 3. Set all the port to **514**.\n 4. Save.",
                      "title": "Configure Vectra AI Stream"
                    },
                    {
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId",
                              "PrimaryKey"
                            ],
                            "label": "",
                            "value": "sudo wget -O Forwarder_AMA_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Forwarder_AMA_installer.py&&sudo python Forwarder_AMA_installer.py"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "Run the following command to validate (or set up) that syslog-ng is listening on port 514"
                    }
                  ],
                  "metadata": {
                    "id": "ec069726-811c-4f50-b141-295057367f49",
                    "kind": "dataConnector",
                    "version": "1.0.0",
                    "source": {
                      "kind": "solution",
                      "name": "Vectra AI"
                    },
                    "author": {
                      "name": "Vectra AI Technical Marketing"
                    },
                    "support": {
                      "tier": "developer",
                      "name": "Vectra AI",
                      "email": "tme@vectra.ai",
                      "link": "https://www.vectra.ai/support"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
                "contentId": "[variables('_dataConnectorContentId2')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "contentKind": "DataConnector",
        "displayName": "[Recommended] Vectra AI Stream via AMA",
        "contentProductId": "[variables('_dataConnectorcontentProductId2')]",
        "id": "[variables('_dataConnectorcontentProductId2')]",
        "version": "[variables('dataConnectorVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId2'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId2')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId2'))]",
        "contentId": "[variables('_dataConnectorContentId2')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion2')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId2'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "[Recommended] Vectra AI Stream via AMA",
          "publisher": "Vectra AI",
          "descriptionMarkdown": "The Vectra AI Stream connector allows to send Network Metadata collected by Vectra Sensors accross the Network and Cloud to Microsoft Sentinel",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "Vectar AI Stream",
              "baseQuery": "vectra_isession_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "vectra_isession",
              "lastDataReceivedQuery": "vectra_isession\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_dns",
              "lastDataReceivedQuery": "vectra_dns\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_ssl",
              "lastDataReceivedQuery": "vectra_ssl\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_beacon",
              "lastDataReceivedQuery": "vectra_beacon\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_dcerpc",
              "lastDataReceivedQuery": "vectra_dcerpc\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_dhcp",
              "lastDataReceivedQuery": "vectra_dhcp\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_http",
              "lastDataReceivedQuery": "vectra_http\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_kerberos",
              "lastDataReceivedQuery": "vectra_kerberos\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_ldap",
              "lastDataReceivedQuery": "vectra_ldap\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_ntlm",
              "lastDataReceivedQuery": "vectra_ntlm\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_radius",
              "lastDataReceivedQuery": "vectra_radius\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_rdp",
              "lastDataReceivedQuery": "vectra_rdp\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_smbfiles",
              "lastDataReceivedQuery": "vectra_smbfiles\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_smbmapping",
              "lastDataReceivedQuery": "vectra_smbmapping\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_smtp",
              "lastDataReceivedQuery": "vectra_smtp\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_ssh",
              "lastDataReceivedQuery": "vectra_ssh\n |  summarize Time = max(TimeGenerated)"
            },
            {
              "name": "vectra_x509",
              "lastDataReceivedQuery": "vectra_x509\n |  summarize Time = max(TimeGenerated)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "\nvectra_stream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(1h)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "List all DNS Queries",
              "query": "vectra_dns_CL \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, query, answers"
            },
            {
              "description": "Number of DNS requests per type",
              "query": "vectra_dns_CL \n| summarize count() by qtype_name"
            },
            {
              "description": "Top 10 of query to non existing domain",
              "query": "vectra_dns_CL \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by query\n| order by Count desc\n| limit 10"
            },
            {
              "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
              "query": "vectra_ssl_CL \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Vectra AI Stream configuration",
                "description": "must be configured to export Stream metadata in JSON"
              },
              {
                "description": "To collect data from non-Azure VMs, they must have Azure Arc installed and enabled. [Learn more](https://docs.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-install?tabs=ARMAgentPowerShell,PowerShellWindows,PowerShellWindowsArc,CLIWindows,CLIWindowsArc)"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on parsers based on a Kusto Function to work as expected which are deployed as part of the Microsoft Sentinel Solution."
            },
            {
              "description": ">**IMPORTANT:** Vectra AI Stream connector is only available for **Linux** agents with **syslog-ng**. Make sure that syslog-ng is installed!\n\n In the first part, we are going to create the custom tables requires for this solution (using an ARM template). Then we are going to configure the Data Connector.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Please proceed with these steps:",
                    "instructionSteps": [
                      {
                        "title": "Step 1. Create custom  tables in Log Analytic Workspace (ARM Template)",
                        "description": "1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fvectranetworks%2FMicrosoft_Sentinel%2Fmain%2FStream%2FAMA%2FARM_Templates%2Fazuredeploy_CustomTables_connector.json)\n2. Provide the required details such as the resource group and Microsoft Log Analytics Workspace (**the workspace must exist!**)\n4. Click **Review + Create** to deploy.\n\n\t_Note: Once deployed, you must be able to see the custom tables in your Log Analytic Workspace (Settings ---> Tables)._"
                      },
                      {
                        "title": "Step 2. Install the Syslog via AMA Data connector",
                        "description": "_Note: This is only required if it has not been install yet in Microsoft Sentinel._\n1. Microsoft Sentinel workspace ---> Content Management ---> Content Hub.\n\n2. Search for 'Syslog' (Provider is Microsoft) and select it.\n\n3. Check 'Install' buton on the bottom of the right panel."
                      },
                      {
                        "title": "Step 3. Configure the Syslog via AMA data connector",
                        "description": "_Note: Two different Data Collection Rules (DCR) are going to be created during this step_\n1. Navigate to Microsoft Sentinel workspace ---> configuration ---> Data connector.\n\n2. Search for 'Syslog via AMA' data connector and open it.\n\n3. Check If there is no existing DCR configured to collect required facility of logs: LOG_USER/LOG_NOTICE and LOG_LOCAL0/LOG_NOTICE.\n\n4. Create a first DCR (Data Collection Rule). Specify a name. Then, in the Resources tab, select the instance where AMA is going to run. In the Collect tab, select LOG_USER/LOG_NOTICE.\n\n5. Create a second DCR. Specify a different name. Then, in the Resources tab, choose the same host. In the Collect tab, select LOG_LOCAL0/LOG_NOTICE\n\n\n\n\tNote:- It is recommended to install minimum 1.27 version of AMA agent [Learn more](https://learn.microsoft.com/azure/azure-monitor/agents/azure-monitor-agent-manage?tabs=azure-portal ) and ensure there is no duplicate DCR as it can cause log duplicacy."
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ]
            },
            {
              "description": "In the next section, we are goning to modify the syslog-ng configuration that has been created where the AMA is deployed. Then, we are going to modify the DCR configuration to be able to sent the network metadata from Vectra Stream to different custom tables.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Please proceed with these steps:",
                    "instructionSteps": [
                      {
                        "title": "Step 1. Modify the syslog-ng configuration",
                        "description": "_Note: A DCR cannot have more than 10 output flows. As we have 16 custom tables in this solution, we need to split the traffic to two DCR using syslog-ng._\n1. Download the modified syslog-ng configuration file: [azuremonitoragent-tcp.conf](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/syslog-ng/azuremonitoragent-tcp.conf).\n2. Log into the instance where syslog-ng/AMA is running.\n3. Browse to /etc/syslog-ng/conf.d/  and replace the content of _azuremonitoragent-tcp.conf_ file with the one that you just downloaded.\n4. Save and restart syslog-ng (_systemctl restart syslog-ng_)."
                      },
                      {
                        "title": "Step 2. Modify the Data Collection rules configuration",
                        "description": "_Note: The Data Collection Rules that have been created are located in Azure Monitor (**Monitor ---> Settings ---> Data Collection Rules**)_\n 1. Locate the 2 DCR that you created in Microsoft Sentinel.\n 2. Open the first DCR where Syslog facility is LOG_USER. Then go to Automation ---> Export template ---> Deploy --> Edit template.\n 3. Download the dataFlows configuration for LOG_USER DCR: [Stream_DataFlows_dcr1.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr1.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your workspace name.\n 4. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 5. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace (same as step 3).\n 6. Save --> Review + Create --> Create.\n 7. Open the second DCR than you created (Facilily is LOG_LOCAL0) and edit the template (Automation ---> Export template ---> Deploy --> Edit template).\n 8. Download the dataFlows configuration for LOG_LOCAL0 DCR: [Stream_DataFlows_dcr2.json](https://raw.githubusercontent.com/vectranetworks/Microsoft_Sentinel/main/Stream/AMA/dcr/Stream_DataFlows_dcr2.json) and find/replace the destination placeholder '<WORKSPACE_NAME>' with your wokrspace name.\n 9. Locate the dataFlows section in the template (Azure Monitor) and replace it with the content of the configuration you downloaded.\n 10. In the same DCR, locate the key: resources -> properties -> destinations -> name and replace 'DataCollectionEvent' with the name of the Log Analytics Workspace.\n 11. Save --> Review + Create --> Create."
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ]
            },
            {
              "description": "\nConfigure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft Sentinel workspace via AMA.\n\nFrom the Vectra UI, navigate to Settings > Stream and Edit the destination configuration:\n\n 1. Select Publisher: RAW JSON\n 2. Set the server IP or hostname (which is the host whhere AMA is running)\n 3. Set all the port to **514**.\n 4. Save.",
              "title": "Configure Vectra AI Stream"
            },
            {
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId",
                      "PrimaryKey"
                    ],
                    "label": "",
                    "value": "sudo wget -O Forwarder_AMA_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Forwarder_AMA_installer.py&&sudo python Forwarder_AMA_installer.py"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "Run the following command to validate (or set up) that syslog-ng is listening on port 514"
            }
          ],
          "id": "[variables('_uiConfigId2')]",
          "additionalRequirementBanner": "This data connector depends on parsers based on Kusto Functions to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which are deployed with this Microsoft Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraStream_function Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra Data Parser",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraStream_function",
                "query": "VectraStream_CL\n| extend\n    EventVendor=\"Vectra AI\",\n    EventProduct=\"Vectra Stream\",\n    EventEndTime=column_ifexists('ts_d', ''),\n    metadata_type_s = column_ifexists('metadata_type_s', ''),\n    community_id_s = column_ifexists('community_id_s', ''),\n    id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),\n    id_orig_h_s = column_ifexists('id_orig_h_s', ''),\n    id_orig_p_d = column_ifexists('id_orig_p_d', ''),\n    id_resp_h_s = column_ifexists('id_resp_h_s', ''),\n    id_resp_p_d = column_ifexists('id_resp_p_d', ''),\n    resp_hostname_s = column_ifexists('resp_hostname_s', ''),\n    local_orig_b = column_ifexists('local_orig_b', ''),\n    local_resp_b = column_ifexists('local_resp_b', ''),\n    orig_huid_s = column_ifexists('orig_huid_s', ''),\n    orig_hostname_s = column_ifexists('orig_hostname_s', ''),\n    orig_sluid_s = column_ifexists('orig_sluid_s', ''),\n    resp_huid_s = column_ifexists('resp_huid_s', ''),\n    resp_sluid_s = column_ifexists('resp_sluid_s', ''),\n    sensor_uid_s = column_ifexists('sensor_uid_s', ''),\n    uid_s = column_ifexists('uid_s', ''),\n    ts_d = column_ifexists('ts_d', ''),\n    error_s = column_ifexists('error_s', ''),\n\tconn_state_s = column_ifexists('conn_state_s', ''),\n    duration_d = column_ifexists('duration_d', ''),\n    service_s = column_ifexists('service_s', ''),\n    proto_d = column_ifexists('proto_d', ''),\n    protoName_s = column_ifexists('protoName_s', ''),\n    orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),\n    resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),\n    orig_pkts_d = column_ifexists('orig_pkts_d', ''),\n    resp_pkts_d = column_ifexists('resp_pkts_d', ''),\n    session_start_time_d = column_ifexists('session_start_time_d', ''),\n    resp_domain_s = column_ifexists('resp_domain_s', ''),\n    orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),\n    resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),\n    first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),\n    first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),\n    first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),\n    first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),\n    first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),\n    first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),\n    resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),\n    dir_confidence_d = column_ifexists('dir_confidence_d', ''),\n    //beacon specific attributes\n\tbeacon_type_s = column_ifexists('beacon_type_s', ''),\n    beacon_uid_s = column_ifexists('beacon_uid_s', ''),\n    first_event_time_d = column_ifexists('first_event_time_d', ''),\n    last_event_time_d = column_ifexists('last_event_time_d', ''),\n    resp_domains_s = column_ifexists('resp_domains_s', ''),\n    session_count_d = column_ifexists('session_count_d', ''),\n    //dcerpc\n\trtt_s = column_ifexists('rtt_s', ''),\n    endpoint_s = column_ifexists('endpoint_s', ''),\n    username_s = column_ifexists('username_s', ''),\n    hostname_s = column_ifexists('hostname_s', ''),\n    domain_s = column_ifexists('domain_s', ''),\n    operation_s = column_ifexists('operation_s', ''),\n\t//dhcp\n    mac_s = column_ifexists('mac_s', ''),\n    assigned_ip_s = column_ifexists('assigned_ip_s', ''),\n    lease_time_d = column_ifexists('lease_time_d', ''),\n    trans_id_s = column_ifexists('trans_id_s', ''),\n    dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),\n    dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),\n\t//dns\n    trans_id_d = column_ifexists('trans_id_d', ''),\n    query_s = column_ifexists('query_s', ''),\n    qclass_d = column_ifexists('qclass_d', ''),\n    qclass_name_s = column_ifexists('qclass_name_s', ''),\n    qtype_d = column_ifexists('qtype_d', ''),\n    qtype_name_s = column_ifexists('qtype_name_s', ''),\n    rcode_d = column_ifexists('rcode_d', ''),\n    rcode_name_s = column_ifexists('rcode_name_s', ''),\n    AA_b = column_ifexists('AA_b', ''),\n    TC_b = column_ifexists('TC_b', ''),\n    RD_b = column_ifexists('RD_b', ''),\n    RA_b = column_ifexists('RA_b', ''),\n    answers_s = column_ifexists('answers_s', ''),\n    TTLs_s = column_ifexists('TTLs_s', ''),\n    auth_s = column_ifexists('auth_s', ''),\n    total_answers_d = column_ifexists('total_answers_d', ''),\n    total_replies_d = column_ifexists('total_replies_d', ''),\n    rejected_b = column_ifexists('rejected_b', ''),\n    saw_query_b = column_ifexists('saw_query_b', ''),\n    saw_reply_b = column_ifexists('saw_reply_b', ''),\n    values_s = column_ifexists('values_s', ''),\n\t//http\n    method_s = column_ifexists('method_s', ''),\n    host_s = column_ifexists('host_s', ''),\n    uri_s = column_ifexists('uri_s', ''),\n    referrer_s = column_ifexists('referrer_s', ''),\n    user_agent_s = column_ifexists('user_agent_s', ''),\n    request_body_len_d = column_ifexists('request_body_len_d', ''),\n    response_body_len_d = column_ifexists('response_body_len_d', ''),\n    orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),\n    resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),\n    status_code_d = column_ifexists('status_code_d', ''),\n    status_msg_s = column_ifexists('status_msg_s', ''),\n    proxied_s = column_ifexists('proxied_s', ''),\n    cookie_s = column_ifexists('cookie_s', ''),\n    cookie_vars_s = column_ifexists('cookie_vars_s', ''),\n    request_cache_control_s = column_ifexists('request_cache_control_s', ''),\n    response_cache_control_s = column_ifexists('response_cache_control_s', ''),\n    response_expires_s = column_ifexists('response_expires_s', ''),\n    request_header_count_d = column_ifexists('request_header_count_d', ''),\n    response_header_count_d = column_ifexists('response_header_count_d', ''),\n    is_proxied_b = column_ifexists('is_proxied_b', ''),\n    host_multihomed_b = column_ifexists('host_multihomed_b', ''),\n    resp_filename_s = column_ifexists('resp_filename_s', ''),\n    response_content_disposition_s = column_ifexists('response_content_disposition_s', ''),\n\t//Kerberos\n    client_s = column_ifexists('client_s', ''),\n    data_source_s = column_ifexists('data_source_s', ''),\n    success_b = column_ifexists('success_b', ''),\n    error_code_s = column_ifexists('error_code_s', ''),\n    error_msg_s = column_ifexists('error_msg_s', ''),\n    request_type_s = column_ifexists('request_type_s', ''),\n    protocol_s = column_ifexists('protocol_s', ''),\n    reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),\n    orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),\n    req_ciphers_s = column_ifexists('req_ciphers_s', ''),\n    rep_cipher_s = column_ifexists('rep_cipher_s', ''),\n    //ldap\n    message_id_d = column_ifexists('message_id_d', ''),\n    base_object_s = column_ifexists('base_object_s', ''),\n    query_scope_s = column_ifexists('query_scope_s', ''),\n    result_s = column_ifexists('result_s', ''),\n    matched_dn_s = column_ifexists('matched_dn_s', ''),\n    attributes_s = column_ifexists('attributes_s', ''),\n    bind_error_count_d = column_ifexists('bind_error_count_d', ''),\n    encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),\n    logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),\n    response_bytes_s = column_ifexists('response_bytes_s', ''),\n    request_bytes_s = column_ifexists('request_bytes_s', ''),\n    result_code_s = column_ifexists('result_code_s', ''),\n    result_count_d = column_ifexists('result_count_d', ''),\n    is_query_b = column_ifexists('is_query_b', ''),\n    is_close_b = column_ifexists('is_close_b', ''),\n\t//ntlm\n    status_d = column_ifexists('status_d', ''),\n\t//rdp\n    keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),\n    client_build_s = column_ifexists('client_build_s', ''),\n    date_s = column_ifexists('date_s', ''),\n    client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),\n    client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),\n    client_name_s = column_ifexists('client_name_s', ''),\n    desktop_width_d = column_ifexists('desktop_width_d', ''),\n    desktop_height_d = column_ifexists('desktop_height_d', ''),\n\t//smbfiles\n    action_s = column_ifexists('action_s', ''),\n    delete_on_close_b = column_ifexists('delete_on_close_b', ''),\n    path_s = column_ifexists('path_s', ''),\n    name_s = column_ifexists('name_s', ''),\n    prev_name_s = column_ifexists('prev_name_s', ''),\n    version_s = column_ifexists('version_s', ''),\n\t//smtp\n    helo_s = column_ifexists('helo_s', ''),\n    mail_from_s = column_ifexists('mail_from_s', ''),\n    rcpt_to_s = column_ifexists('rcpt_to_s', ''),\n    date_d = column_ifexists('date_d', ''),\n    from_s = column_ifexists('from_s', ''),\n    to_s = column_ifexists('to_s', ''),\n    cc_s = column_ifexists('cc_s', ''),\n    reply_to_s = column_ifexists('reply_to_s', ''),\n    msgid_d = column_ifexists('msgid_d', ''),\n    in_reply_to_s = column_ifexists('in_reply_to_s', ''),\n    subject_s = column_ifexists('subject_s', ''),\n    x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),\n    first_received_s = column_ifexists('first_received_s', ''),\n    second_received_s = column_ifexists('second_received_s', ''),\n    useragent_s = column_ifexists('useragent_s', ''),\n    tls_s = column_ifexists('tls_s', ''),\n    spf_helo_s = column_ifexists('spf_helo_s', ''),\n    spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),\n    dkim_status_s = column_ifexists('dkim_status_s', ''),\n    dmarc_status_s = column_ifexists('dmarc_status_s', ''),\n\t//ssh\n    server_s = column_ifexists('server_s', ''),\n    cipher_alg_s = column_ifexists('cipher_alg_s', ''),\n    mac_alg_s = column_ifexists('mac_alg_s', ''),\n    compression_alg_s = column_ifexists('compression_alg_s', ''),\n    kex_alg_s = column_ifexists('kex_alg_s', ''),\n    host_key_alg_s = column_ifexists('host_key_alg_s', ''),\n    host_key_s = column_ifexists('host_key_s', ''),\n    hassh_g = column_ifexists('hassh_g', ''),\n    hasshServer_g = column_ifexists('hasshServer_g', ''),\n\t//ssl\n    server_name_s = column_ifexists('server_name_s', ''),\n    established_b = column_ifexists('established_b', ''),\n    next_protocol_s = column_ifexists('next_protocol_s', ''),\n    cipher_s = column_ifexists('cipher_s', ''),\n    version_num_d = column_ifexists('version_num_d', ''),\n    curve_s = column_ifexists('curve_s', ''),\n    issuer_s = column_ifexists('issuer_s', ''),\n    client_issuer_s = column_ifexists('client_issuer_s', ''),\n    client_subject_s = column_ifexists('client_subject_s', ''),\n    client_version_num_d = column_ifexists('client_version_num_d', ''),\n    client_version_s = column_ifexists('client_version_s', ''),\n    client_extension_s = column_ifexists('client_extension_s', ''),\n    client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),\n    client_curve_num_s = column_ifexists('client_curve_num_s', ''),\n    ja3_g = column_ifexists('ja3_g', ''),\n    ja3s_g = column_ifexists('ja3s_g', ''),\n    server_extensions_s = column_ifexists('server_extensions_s', ''),\n\t//x509\n    certificate_version_d = column_ifexists('certificate_version_d', ''),\n    certificate_serial_s = column_ifexists('certificate_serial_s', ''),\n    certificate_serial_g = column_ifexists('certificate_serial_g', ''),\n    certificate_subject_s = column_ifexists('certificate_subject_s', ''),\n    certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),\n    certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),\n    certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),\n    certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),\n    certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),\n    certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),\n    certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),\n    certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),\n    certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),\n    certificate_curve_s = column_ifexists('certificate_curve_s', ''),\n    certificate_cn_s = column_ifexists('certificate_cn_s', ''),\n    san_dns_s = column_ifexists('san_dns_s', ''),\n    san_email_s = column_ifexists('san_email_s', ''),\n    san_ip_s = column_ifexists('san_ip_s', ''),\n    san_other_fields_b = column_ifexists('san_other_fields_b', ''),\n    basic_constraints_ca_b = column_ifexists('basic_constraints_ca_b', ''),\n    basic_constraints_path_len_d = column_ifexists('basic_constraints_path_len_d', ''),\n    certificate_serial = case(isnotempty(certificate_serial_s), certificate_serial_s, isnotempty(certificate_serial_g), certificate_serial_g, '')\n| project-rename\n    metadata_type = metadata_type_s,\n    community_id = community_id_s,\n    id_ip_ver = id_ip_ver_s,\n    id_orig_h = id_orig_h_s,\n    id_orig_p = id_orig_p_d,\n    id_resp_h = id_resp_h_s,\n    id_resp_p = id_resp_p_d,\n    resp_hostname = resp_hostname_s,\n    local_orig = local_orig_b,\n    local_resp = local_resp_b,\n    orig_huid = orig_huid_s,\n    orig_hostname = orig_hostname_s,\n    orig_sluid = orig_sluid_s,\n    resp_huid = resp_huid_s,\n    resp_sluid = resp_sluid_s,\n    sensor_uid = sensor_uid_s,\n    uid = uid_s,\n    ts = ts_d,\n    error = error_s,\n\tconn_state = conn_state_s,\n    duration = duration_d,\n    service = service_s,\n    proto = proto_d,\n    protoName = protoName_s,\n    orig_ip_bytes = orig_ip_bytes_d,\n    resp_ip_bytes = resp_ip_bytes_d,\n    orig_pkts = orig_pkts_d,\n    resp_pkts = resp_pkts_d,\n    session_start_time = session_start_time_d,\n    resp_domain = resp_domain_s,\n    orig_vlan_id = orig_vlan_id_d,\n    resp_vlan_id = resp_vlan_id_d,\n    first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,\n    first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,\n    first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,\n    first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,\n    first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,\n    first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,\n    resp_multihomed = resp_multihomed_b,\n    dir_confidence = dir_confidence_d,\n    //beacon specific attributes\n\tbeacon_type = beacon_type_s,\n    beacon_uid = beacon_uid_s,\n    first_event_time = first_event_time_d,\n    last_event_time = last_event_time_d,\n    resp_domains = resp_domains_s,\n    session_count = session_count_d,\n    //dcerpc\n\trtt = rtt_s,\n    endpoint = endpoint_s,\n    username = username_s,\n    hostname = hostname_s,\n    domain = domain_s,\n    operation = operation_s,\n\t//dhcp\n    mac = mac_s,\n    assigned_ip = assigned_ip_s,\n    lease_time = lease_time_d,\n    dhcp_server_ip = dhcp_server_ip_s,\n    dns_server_ips = dns_server_ips_s,\n\t//dns\n    trans_id = trans_id_d,\n    query = query_s,\n    qclass = qclass_d,\n    qclass_name = qclass_name_s,\n    qtype = qtype_d,\n    qtype_name = qtype_name_s,\n    rcode = rcode_d,\n    rcode_name = rcode_name_s,\n    AA = AA_b,\n    TC = TC_b,\n    RD = RD_b,\n    RA = RA_b,\n    answers = answers_s,\n    TTLs = TTLs_s,\n    auth = auth_s,\n    total_answers = total_answers_d,\n    total_replies = total_replies_d,\n    rejected = rejected_b,\n    saw_query = saw_query_b,\n    saw_reply = saw_reply_b,\n    values = values_s,\n\t//http\n    method = method_s,\n    host = host_s,\n    uri = uri_s,\n    referrer = referrer_s,\n    user_agent = user_agent_s,\n    request_body_len = request_body_len_d,\n    response_body_len = response_body_len_d,\n    orig_mime_types = orig_mime_types_s,\n    resp_mime_types = resp_mime_types_s,\n    status_code = status_code_d,\n    status_msg = status_msg_s,\n    proxied = proxied_s,\n    cookie = cookie_s,\n    cookie_vars = cookie_vars_s,\n    request_cache_control = request_cache_control_s,\n    response_cache_control = response_cache_control_s,\n    response_expires = response_expires_s,\n    request_header_count = request_header_count_d,\n    response_header_count = response_header_count_d,\n    is_proxied = is_proxied_b,\n    host_multihomed = host_multihomed_b,\n    resp_filename = resp_filename_s,\n    response_content_disposition = response_content_disposition_s,\n\t//Kerberos\n    client = client_s,\n    data_source = data_source_s,\n    success = success_b,\n    error_code = error_code_s,\n    error_msg = error_msg_s,\n    request_type = request_type_s,\n    protocol = protocol_s,\n    reply_timestamp = reply_timestamp_d,\n    orig_host_observed_privilege = orig_host_observed_privilege_d,\n    req_ciphers = req_ciphers_s,\n    rep_cipher = rep_cipher_s,\n    //ldap\n    message_id = message_id_d,\n    base_object = base_object_s,\n    query_scope = query_scope_s,\n    result = result_s,\n    matched_dn = matched_dn_s,\n    attributes = attributes_s,\n    bind_error_count = bind_error_count_d,\n    encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,\n    logon_failure_error_count = logon_failure_error_count_s,\n    response_bytes = response_bytes_s,\n    request_bytes = request_bytes_s,\n    result_code = result_code_s,\n    result_count = result_count_d,\n    is_query = is_query_b,\n    is_close = is_close_b,\n\t//ntlm\n    status = status_d,\n\t//rdp\n    keyboard_layout = keyboard_layout_s,\n    client_build = client_build_s,\n    client_dig_protocol_id = client_dig_protocol_id_d,\n    client_dig_product_id = client_dig_product_id_d,\n    client_name = client_name_s,\n    desktop_width = desktop_width_d,\n    desktop_height = desktop_height_d,\n\t//smbfiles\n    action = action_s,\n    delete_on_close = delete_on_close_b,\n    path = path_s,\n    name = name_s,\n    prev_name = prev_name_s,\n    version = version_s,\n\t//smtp\n    helo = helo_s,\n    mail_from = mail_from_s,\n    rcpt_to = rcpt_to_s,\n    date_msg = date_d,\n    from = from_s,\n    to_msg = to_s,\n    cc = cc_s,\n    reply_to = reply_to_s,\n    msgid = msgid_d,\n    in_reply_to = in_reply_to_s,\n    subject = subject_s,\n    x_originating_ip = x_originating_ip_s,\n    first_received = first_received_s,\n    second_received = second_received_s,\n    useragent = useragent_s,\n    tls = tls_s,\n    spf_helo = spf_helo_s,\n    spf_mailfrom = spf_mailfrom_s,\n    dkim_status = dkim_status_s,\n    dmarc_status = dmarc_status_s,\n\t//ssh\n    server = server_s,\n    cipher_alg = cipher_alg_s,\n    mac_alg = mac_alg_s,\n    compression_alg = compression_alg_s,\n    kex_alg = kex_alg_s,\n    host_key_alg = host_key_alg_s,\n    host_key = host_key_s,\n    hassh = hassh_g,\n    hasshServer = hasshServer_g,\n\t//ssl\n    server_name = server_name_s,\n    established = established_b,\n    next_protocol = next_protocol_s,\n    cipher = cipher_s,\n    version_num = version_num_d,\n    curve = curve_s,\n    issuer = issuer_s,\n    client_issuer = client_issuer_s,\n    client_subject = client_subject_s,\n    client_version_num = client_version_num_d,\n    client_version = client_version_s,\n    client_extension = client_extension_s,\n    client_ec_point_format = client_ec_point_format_s,\n    client_curve_num = client_curve_num_s,\n    ja3 = ja3_g,\n    ja3s = ja3s_g,\n    server_extensions = server_extensions_s,\n\t//x509\n    certificate_version = certificate_version_d,\n    certificate_subject = certificate_subject_s,\n    certificate_issuer = certificate_issuer_s,\n    certificate_key_alg = certificate_key_alg_s,\n    certificate_key_length = certificate_key_length_s,\n    certificate_key_type = certificate_key_type_s,\n    certificate_not_valid_after = certificate_not_valid_after_d,\n    certificate_not_valid_before = certificate_not_valid_before_d,\n    certificate_exponent = certificate_exponent_s,\n    certificate_sig_alg = certificate_sig_alg_s,\n    certificate_self_issued = certificate_self_issued_b,\n    certificate_curve = certificate_curve_s,\n    certificate_cn = certificate_cn_s,\n    san_dns = san_dns_s,\n    san_email = san_email_s,\n    san_ip = san_ip_s,\n    san_other_fields = san_other_fields_b,\n    basic_constraints_ca = basic_constraints_ca_b,\n    basic_constraints_path_len = basic_constraints_path_len_d\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Vectra Data Parser')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "Vectra Data Parser",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Vectra Data Parser",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraStream_function",
        "query": "VectraStream_CL\n| extend\n    EventVendor=\"Vectra AI\",\n    EventProduct=\"Vectra Stream\",\n    EventEndTime=column_ifexists('ts_d', ''),\n    metadata_type_s = column_ifexists('metadata_type_s', ''),\n    community_id_s = column_ifexists('community_id_s', ''),\n    id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),\n    id_orig_h_s = column_ifexists('id_orig_h_s', ''),\n    id_orig_p_d = column_ifexists('id_orig_p_d', ''),\n    id_resp_h_s = column_ifexists('id_resp_h_s', ''),\n    id_resp_p_d = column_ifexists('id_resp_p_d', ''),\n    resp_hostname_s = column_ifexists('resp_hostname_s', ''),\n    local_orig_b = column_ifexists('local_orig_b', ''),\n    local_resp_b = column_ifexists('local_resp_b', ''),\n    orig_huid_s = column_ifexists('orig_huid_s', ''),\n    orig_hostname_s = column_ifexists('orig_hostname_s', ''),\n    orig_sluid_s = column_ifexists('orig_sluid_s', ''),\n    resp_huid_s = column_ifexists('resp_huid_s', ''),\n    resp_sluid_s = column_ifexists('resp_sluid_s', ''),\n    sensor_uid_s = column_ifexists('sensor_uid_s', ''),\n    uid_s = column_ifexists('uid_s', ''),\n    ts_d = column_ifexists('ts_d', ''),\n    error_s = column_ifexists('error_s', ''),\n\tconn_state_s = column_ifexists('conn_state_s', ''),\n    duration_d = column_ifexists('duration_d', ''),\n    service_s = column_ifexists('service_s', ''),\n    proto_d = column_ifexists('proto_d', ''),\n    protoName_s = column_ifexists('protoName_s', ''),\n    orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),\n    resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),\n    orig_pkts_d = column_ifexists('orig_pkts_d', ''),\n    resp_pkts_d = column_ifexists('resp_pkts_d', ''),\n    session_start_time_d = column_ifexists('session_start_time_d', ''),\n    resp_domain_s = column_ifexists('resp_domain_s', ''),\n    orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),\n    resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),\n    first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),\n    first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),\n    first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),\n    first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),\n    first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),\n    first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),\n    resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),\n    dir_confidence_d = column_ifexists('dir_confidence_d', ''),\n    //beacon specific attributes\n\tbeacon_type_s = column_ifexists('beacon_type_s', ''),\n    beacon_uid_s = column_ifexists('beacon_uid_s', ''),\n    first_event_time_d = column_ifexists('first_event_time_d', ''),\n    last_event_time_d = column_ifexists('last_event_time_d', ''),\n    resp_domains_s = column_ifexists('resp_domains_s', ''),\n    session_count_d = column_ifexists('session_count_d', ''),\n    //dcerpc\n\trtt_s = column_ifexists('rtt_s', ''),\n    endpoint_s = column_ifexists('endpoint_s', ''),\n    username_s = column_ifexists('username_s', ''),\n    hostname_s = column_ifexists('hostname_s', ''),\n    domain_s = column_ifexists('domain_s', ''),\n    operation_s = column_ifexists('operation_s', ''),\n\t//dhcp\n    mac_s = column_ifexists('mac_s', ''),\n    assigned_ip_s = column_ifexists('assigned_ip_s', ''),\n    lease_time_d = column_ifexists('lease_time_d', ''),\n    trans_id_s = column_ifexists('trans_id_s', ''),\n    dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),\n    dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),\n\t//dns\n    trans_id_d = column_ifexists('trans_id_d', ''),\n    query_s = column_ifexists('query_s', ''),\n    qclass_d = column_ifexists('qclass_d', ''),\n    qclass_name_s = column_ifexists('qclass_name_s', ''),\n    qtype_d = column_ifexists('qtype_d', ''),\n    qtype_name_s = column_ifexists('qtype_name_s', ''),\n    rcode_d = column_ifexists('rcode_d', ''),\n    rcode_name_s = column_ifexists('rcode_name_s', ''),\n    AA_b = column_ifexists('AA_b', ''),\n    TC_b = column_ifexists('TC_b', ''),\n    RD_b = column_ifexists('RD_b', ''),\n    RA_b = column_ifexists('RA_b', ''),\n    answers_s = column_ifexists('answers_s', ''),\n    TTLs_s = column_ifexists('TTLs_s', ''),\n    auth_s = column_ifexists('auth_s', ''),\n    total_answers_d = column_ifexists('total_answers_d', ''),\n    total_replies_d = column_ifexists('total_replies_d', ''),\n    rejected_b = column_ifexists('rejected_b', ''),\n    saw_query_b = column_ifexists('saw_query_b', ''),\n    saw_reply_b = column_ifexists('saw_reply_b', ''),\n    values_s = column_ifexists('values_s', ''),\n\t//http\n    method_s = column_ifexists('method_s', ''),\n    host_s = column_ifexists('host_s', ''),\n    uri_s = column_ifexists('uri_s', ''),\n    referrer_s = column_ifexists('referrer_s', ''),\n    user_agent_s = column_ifexists('user_agent_s', ''),\n    request_body_len_d = column_ifexists('request_body_len_d', ''),\n    response_body_len_d = column_ifexists('response_body_len_d', ''),\n    orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),\n    resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),\n    status_code_d = column_ifexists('status_code_d', ''),\n    status_msg_s = column_ifexists('status_msg_s', ''),\n    proxied_s = column_ifexists('proxied_s', ''),\n    cookie_s = column_ifexists('cookie_s', ''),\n    cookie_vars_s = column_ifexists('cookie_vars_s', ''),\n    request_cache_control_s = column_ifexists('request_cache_control_s', ''),\n    response_cache_control_s = column_ifexists('response_cache_control_s', ''),\n    response_expires_s = column_ifexists('response_expires_s', ''),\n    request_header_count_d = column_ifexists('request_header_count_d', ''),\n    response_header_count_d = column_ifexists('response_header_count_d', ''),\n    is_proxied_b = column_ifexists('is_proxied_b', ''),\n    host_multihomed_b = column_ifexists('host_multihomed_b', ''),\n    resp_filename_s = column_ifexists('resp_filename_s', ''),\n    response_content_disposition_s = column_ifexists('response_content_disposition_s', ''),\n\t//Kerberos\n    client_s = column_ifexists('client_s', ''),\n    data_source_s = column_ifexists('data_source_s', ''),\n    success_b = column_ifexists('success_b', ''),\n    error_code_s = column_ifexists('error_code_s', ''),\n    error_msg_s = column_ifexists('error_msg_s', ''),\n    request_type_s = column_ifexists('request_type_s', ''),\n    protocol_s = column_ifexists('protocol_s', ''),\n    reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),\n    orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),\n    req_ciphers_s = column_ifexists('req_ciphers_s', ''),\n    rep_cipher_s = column_ifexists('rep_cipher_s', ''),\n    //ldap\n    message_id_d = column_ifexists('message_id_d', ''),\n    base_object_s = column_ifexists('base_object_s', ''),\n    query_scope_s = column_ifexists('query_scope_s', ''),\n    result_s = column_ifexists('result_s', ''),\n    matched_dn_s = column_ifexists('matched_dn_s', ''),\n    attributes_s = column_ifexists('attributes_s', ''),\n    bind_error_count_d = column_ifexists('bind_error_count_d', ''),\n    encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),\n    logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),\n    response_bytes_s = column_ifexists('response_bytes_s', ''),\n    request_bytes_s = column_ifexists('request_bytes_s', ''),\n    result_code_s = column_ifexists('result_code_s', ''),\n    result_count_d = column_ifexists('result_count_d', ''),\n    is_query_b = column_ifexists('is_query_b', ''),\n    is_close_b = column_ifexists('is_close_b', ''),\n\t//ntlm\n    status_d = column_ifexists('status_d', ''),\n\t//rdp\n    keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),\n    client_build_s = column_ifexists('client_build_s', ''),\n    date_s = column_ifexists('date_s', ''),\n    client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),\n    client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),\n    client_name_s = column_ifexists('client_name_s', ''),\n    desktop_width_d = column_ifexists('desktop_width_d', ''),\n    desktop_height_d = column_ifexists('desktop_height_d', ''),\n\t//smbfiles\n    action_s = column_ifexists('action_s', ''),\n    delete_on_close_b = column_ifexists('delete_on_close_b', ''),\n    path_s = column_ifexists('path_s', ''),\n    name_s = column_ifexists('name_s', ''),\n    prev_name_s = column_ifexists('prev_name_s', ''),\n    version_s = column_ifexists('version_s', ''),\n\t//smtp\n    helo_s = column_ifexists('helo_s', ''),\n    mail_from_s = column_ifexists('mail_from_s', ''),\n    rcpt_to_s = column_ifexists('rcpt_to_s', ''),\n    date_d = column_ifexists('date_d', ''),\n    from_s = column_ifexists('from_s', ''),\n    to_s = column_ifexists('to_s', ''),\n    cc_s = column_ifexists('cc_s', ''),\n    reply_to_s = column_ifexists('reply_to_s', ''),\n    msgid_d = column_ifexists('msgid_d', ''),\n    in_reply_to_s = column_ifexists('in_reply_to_s', ''),\n    subject_s = column_ifexists('subject_s', ''),\n    x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),\n    first_received_s = column_ifexists('first_received_s', ''),\n    second_received_s = column_ifexists('second_received_s', ''),\n    useragent_s = column_ifexists('useragent_s', ''),\n    tls_s = column_ifexists('tls_s', ''),\n    spf_helo_s = column_ifexists('spf_helo_s', ''),\n    spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),\n    dkim_status_s = column_ifexists('dkim_status_s', ''),\n    dmarc_status_s = column_ifexists('dmarc_status_s', ''),\n\t//ssh\n    server_s = column_ifexists('server_s', ''),\n    cipher_alg_s = column_ifexists('cipher_alg_s', ''),\n    mac_alg_s = column_ifexists('mac_alg_s', ''),\n    compression_alg_s = column_ifexists('compression_alg_s', ''),\n    kex_alg_s = column_ifexists('kex_alg_s', ''),\n    host_key_alg_s = column_ifexists('host_key_alg_s', ''),\n    host_key_s = column_ifexists('host_key_s', ''),\n    hassh_g = column_ifexists('hassh_g', ''),\n    hasshServer_g = column_ifexists('hasshServer_g', ''),\n\t//ssl\n    server_name_s = column_ifexists('server_name_s', ''),\n    established_b = column_ifexists('established_b', ''),\n    next_protocol_s = column_ifexists('next_protocol_s', ''),\n    cipher_s = column_ifexists('cipher_s', ''),\n    version_num_d = column_ifexists('version_num_d', ''),\n    curve_s = column_ifexists('curve_s', ''),\n    issuer_s = column_ifexists('issuer_s', ''),\n    client_issuer_s = column_ifexists('client_issuer_s', ''),\n    client_subject_s = column_ifexists('client_subject_s', ''),\n    client_version_num_d = column_ifexists('client_version_num_d', ''),\n    client_version_s = column_ifexists('client_version_s', ''),\n    client_extension_s = column_ifexists('client_extension_s', ''),\n    client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),\n    client_curve_num_s = column_ifexists('client_curve_num_s', ''),\n    ja3_g = column_ifexists('ja3_g', ''),\n    ja3s_g = column_ifexists('ja3s_g', ''),\n    server_extensions_s = column_ifexists('server_extensions_s', ''),\n\t//x509\n    certificate_version_d = column_ifexists('certificate_version_d', ''),\n    certificate_serial_s = column_ifexists('certificate_serial_s', ''),\n    certificate_serial_g = column_ifexists('certificate_serial_g', ''),\n    certificate_subject_s = column_ifexists('certificate_subject_s', ''),\n    certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),\n    certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),\n    certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),\n    certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),\n    certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),\n    certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),\n    certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),\n    certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),\n    certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),\n    certificate_curve_s = column_ifexists('certificate_curve_s', ''),\n    certificate_cn_s = column_ifexists('certificate_cn_s', ''),\n    san_dns_s = column_ifexists('san_dns_s', ''),\n    san_email_s = column_ifexists('san_email_s', ''),\n    san_ip_s = column_ifexists('san_ip_s', ''),\n    san_other_fields_b = column_ifexists('san_other_fields_b', ''),\n    basic_constraints_ca_b = column_ifexists('basic_constraints_ca_b', ''),\n    basic_constraints_path_len_d = column_ifexists('basic_constraints_path_len_d', ''),\n    certificate_serial = case(isnotempty(certificate_serial_s), certificate_serial_s, isnotempty(certificate_serial_g), certificate_serial_g, '')\n| project-rename\n    metadata_type = metadata_type_s,\n    community_id = community_id_s,\n    id_ip_ver = id_ip_ver_s,\n    id_orig_h = id_orig_h_s,\n    id_orig_p = id_orig_p_d,\n    id_resp_h = id_resp_h_s,\n    id_resp_p = id_resp_p_d,\n    resp_hostname = resp_hostname_s,\n    local_orig = local_orig_b,\n    local_resp = local_resp_b,\n    orig_huid = orig_huid_s,\n    orig_hostname = orig_hostname_s,\n    orig_sluid = orig_sluid_s,\n    resp_huid = resp_huid_s,\n    resp_sluid = resp_sluid_s,\n    sensor_uid = sensor_uid_s,\n    uid = uid_s,\n    ts = ts_d,\n    error = error_s,\n\tconn_state = conn_state_s,\n    duration = duration_d,\n    service = service_s,\n    proto = proto_d,\n    protoName = protoName_s,\n    orig_ip_bytes = orig_ip_bytes_d,\n    resp_ip_bytes = resp_ip_bytes_d,\n    orig_pkts = orig_pkts_d,\n    resp_pkts = resp_pkts_d,\n    session_start_time = session_start_time_d,\n    resp_domain = resp_domain_s,\n    orig_vlan_id = orig_vlan_id_d,\n    resp_vlan_id = resp_vlan_id_d,\n    first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,\n    first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,\n    first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,\n    first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,\n    first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,\n    first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,\n    resp_multihomed = resp_multihomed_b,\n    dir_confidence = dir_confidence_d,\n    //beacon specific attributes\n\tbeacon_type = beacon_type_s,\n    beacon_uid = beacon_uid_s,\n    first_event_time = first_event_time_d,\n    last_event_time = last_event_time_d,\n    resp_domains = resp_domains_s,\n    session_count = session_count_d,\n    //dcerpc\n\trtt = rtt_s,\n    endpoint = endpoint_s,\n    username = username_s,\n    hostname = hostname_s,\n    domain = domain_s,\n    operation = operation_s,\n\t//dhcp\n    mac = mac_s,\n    assigned_ip = assigned_ip_s,\n    lease_time = lease_time_d,\n    dhcp_server_ip = dhcp_server_ip_s,\n    dns_server_ips = dns_server_ips_s,\n\t//dns\n    trans_id = trans_id_d,\n    query = query_s,\n    qclass = qclass_d,\n    qclass_name = qclass_name_s,\n    qtype = qtype_d,\n    qtype_name = qtype_name_s,\n    rcode = rcode_d,\n    rcode_name = rcode_name_s,\n    AA = AA_b,\n    TC = TC_b,\n    RD = RD_b,\n    RA = RA_b,\n    answers = answers_s,\n    TTLs = TTLs_s,\n    auth = auth_s,\n    total_answers = total_answers_d,\n    total_replies = total_replies_d,\n    rejected = rejected_b,\n    saw_query = saw_query_b,\n    saw_reply = saw_reply_b,\n    values = values_s,\n\t//http\n    method = method_s,\n    host = host_s,\n    uri = uri_s,\n    referrer = referrer_s,\n    user_agent = user_agent_s,\n    request_body_len = request_body_len_d,\n    response_body_len = response_body_len_d,\n    orig_mime_types = orig_mime_types_s,\n    resp_mime_types = resp_mime_types_s,\n    status_code = status_code_d,\n    status_msg = status_msg_s,\n    proxied = proxied_s,\n    cookie = cookie_s,\n    cookie_vars = cookie_vars_s,\n    request_cache_control = request_cache_control_s,\n    response_cache_control = response_cache_control_s,\n    response_expires = response_expires_s,\n    request_header_count = request_header_count_d,\n    response_header_count = response_header_count_d,\n    is_proxied = is_proxied_b,\n    host_multihomed = host_multihomed_b,\n    resp_filename = resp_filename_s,\n    response_content_disposition = response_content_disposition_s,\n\t//Kerberos\n    client = client_s,\n    data_source = data_source_s,\n    success = success_b,\n    error_code = error_code_s,\n    error_msg = error_msg_s,\n    request_type = request_type_s,\n    protocol = protocol_s,\n    reply_timestamp = reply_timestamp_d,\n    orig_host_observed_privilege = orig_host_observed_privilege_d,\n    req_ciphers = req_ciphers_s,\n    rep_cipher = rep_cipher_s,\n    //ldap\n    message_id = message_id_d,\n    base_object = base_object_s,\n    query_scope = query_scope_s,\n    result = result_s,\n    matched_dn = matched_dn_s,\n    attributes = attributes_s,\n    bind_error_count = bind_error_count_d,\n    encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,\n    logon_failure_error_count = logon_failure_error_count_s,\n    response_bytes = response_bytes_s,\n    request_bytes = request_bytes_s,\n    result_code = result_code_s,\n    result_count = result_count_d,\n    is_query = is_query_b,\n    is_close = is_close_b,\n\t//ntlm\n    status = status_d,\n\t//rdp\n    keyboard_layout = keyboard_layout_s,\n    client_build = client_build_s,\n    client_dig_protocol_id = client_dig_protocol_id_d,\n    client_dig_product_id = client_dig_product_id_d,\n    client_name = client_name_s,\n    desktop_width = desktop_width_d,\n    desktop_height = desktop_height_d,\n\t//smbfiles\n    action = action_s,\n    delete_on_close = delete_on_close_b,\n    path = path_s,\n    name = name_s,\n    prev_name = prev_name_s,\n    version = version_s,\n\t//smtp\n    helo = helo_s,\n    mail_from = mail_from_s,\n    rcpt_to = rcpt_to_s,\n    date_msg = date_d,\n    from = from_s,\n    to_msg = to_s,\n    cc = cc_s,\n    reply_to = reply_to_s,\n    msgid = msgid_d,\n    in_reply_to = in_reply_to_s,\n    subject = subject_s,\n    x_originating_ip = x_originating_ip_s,\n    first_received = first_received_s,\n    second_received = second_received_s,\n    useragent = useragent_s,\n    tls = tls_s,\n    spf_helo = spf_helo_s,\n    spf_mailfrom = spf_mailfrom_s,\n    dkim_status = dkim_status_s,\n    dmarc_status = dmarc_status_s,\n\t//ssh\n    server = server_s,\n    cipher_alg = cipher_alg_s,\n    mac_alg = mac_alg_s,\n    compression_alg = compression_alg_s,\n    kex_alg = kex_alg_s,\n    host_key_alg = host_key_alg_s,\n    host_key = host_key_s,\n    hassh = hassh_g,\n    hasshServer = hasshServer_g,\n\t//ssl\n    server_name = server_name_s,\n    established = established_b,\n    next_protocol = next_protocol_s,\n    cipher = cipher_s,\n    version_num = version_num_d,\n    curve = curve_s,\n    issuer = issuer_s,\n    client_issuer = client_issuer_s,\n    client_subject = client_subject_s,\n    client_version_num = client_version_num_d,\n    client_version = client_version_s,\n    client_extension = client_extension_s,\n    client_ec_point_format = client_ec_point_format_s,\n    client_curve_num = client_curve_num_s,\n    ja3 = ja3_g,\n    ja3s = ja3s_g,\n    server_extensions = server_extensions_s,\n\t//x509\n    certificate_version = certificate_version_d,\n    certificate_subject = certificate_subject_s,\n    certificate_issuer = certificate_issuer_s,\n    certificate_key_alg = certificate_key_alg_s,\n    certificate_key_length = certificate_key_length_s,\n    certificate_key_type = certificate_key_type_s,\n    certificate_not_valid_after = certificate_not_valid_after_d,\n    certificate_not_valid_before = certificate_not_valid_before_d,\n    certificate_exponent = certificate_exponent_s,\n    certificate_sig_alg = certificate_sig_alg_s,\n    certificate_self_issued = certificate_self_issued_b,\n    certificate_curve = certificate_curve_s,\n    certificate_cn = certificate_cn_s,\n    san_dns = san_dns_s,\n    san_email = san_email_s,\n    san_ip = san_ip_s,\n    san_other_fields = san_other_fields_b,\n    basic_constraints_ca = basic_constraints_ca_b,\n    basic_constraints_path_len = basic_constraints_path_len_d\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Vectra Data Parser')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_beacon Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_beacon parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_beacon",
                "query": "let vectra_beacon = view () {\n    vectra_beacon_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_beacon\"\n};\nvectra_beacon\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_beacon')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "vectra_beacon parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_beacon parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_beacon",
        "query": "let vectra_beacon = view () {\n    vectra_beacon_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_beacon\"\n};\nvectra_beacon\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_beacon')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_dcerpc Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_dcerpc parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_dcerpc",
                "query": "let vectra_dcerpc = view () {\n    vectra_dcerpc_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dcerpc\"\n};\nvectra_dcerpc\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dcerpc')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "vectra_dcerpc parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_dcerpc parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_dcerpc",
        "query": "let vectra_dcerpc = view () {\n    vectra_dcerpc_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dcerpc\"\n};\nvectra_dcerpc\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dcerpc')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject4').parserTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_dhcp Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject4').parserVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject4')._parserName4]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_dhcp parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_dhcp",
                "query": "let vectra_dhcp = view () {\n    vectra_dhcp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dhcp\"\n};\nvectra_dhcp\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
              "dependsOn": [
                "[variables('parserObject4')._parserId4]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dhcp')]",
                "contentId": "[variables('parserObject4').parserContentId4]",
                "kind": "Parser",
                "version": "[variables('parserObject4').parserVersion4]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "contentKind": "Parser",
        "displayName": "vectra_dhcp parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "version": "[variables('parserObject4').parserVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject4')._parserName4]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_dhcp parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_dhcp",
        "query": "let vectra_dhcp = view () {\n    vectra_dhcp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dhcp\"\n};\nvectra_dhcp\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
      "dependsOn": [
        "[variables('parserObject4')._parserId4]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dhcp')]",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "kind": "Parser",
        "version": "[variables('parserObject4').parserVersion4]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject5').parserTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_dns Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject5').parserVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject5')._parserName5]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_dns parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_dns",
                "query": "let vectra_dns = view () {\n    vectra_dns_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dns\"\n};\nvectra_dns\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
              "dependsOn": [
                "[variables('parserObject5')._parserId5]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dns')]",
                "contentId": "[variables('parserObject5').parserContentId5]",
                "kind": "Parser",
                "version": "[variables('parserObject5').parserVersion5]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "contentKind": "Parser",
        "displayName": "vectra_dns parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "version": "[variables('parserObject5').parserVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject5')._parserName5]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_dns parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_dns",
        "query": "let vectra_dns = view () {\n    vectra_dns_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_dns\"\n};\nvectra_dns\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
      "dependsOn": [
        "[variables('parserObject5')._parserId5]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_dns')]",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "kind": "Parser",
        "version": "[variables('parserObject5').parserVersion5]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject6').parserTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_http Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject6').parserVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject6')._parserName6]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_http parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_http",
                "query": "let vectra_http = view () {\n    vectra_http_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_http\"\n};\nvectra_http\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject6')._parserId6,'/'))))]",
              "dependsOn": [
                "[variables('parserObject6')._parserId6]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_http')]",
                "contentId": "[variables('parserObject6').parserContentId6]",
                "kind": "Parser",
                "version": "[variables('parserObject6').parserVersion6]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject6').parserContentId6]",
        "contentKind": "Parser",
        "displayName": "vectra_http parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject6').parserContentId6,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject6').parserContentId6,'-', '1.0.0')))]",
        "version": "[variables('parserObject6').parserVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject6')._parserName6]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_http parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_http",
        "query": "let vectra_http = view () {\n    vectra_http_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_http\"\n};\nvectra_http\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject6')._parserId6,'/'))))]",
      "dependsOn": [
        "[variables('parserObject6')._parserId6]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_http')]",
        "contentId": "[variables('parserObject6').parserContentId6]",
        "kind": "Parser",
        "version": "[variables('parserObject6').parserVersion6]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject7').parserTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_isession Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject7').parserVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject7')._parserName7]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_isession parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_isession",
                "query": "let vectra_isession = view () {\n    vectra_isession_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_isession\"\n};\nvectra_isession\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject7')._parserId7,'/'))))]",
              "dependsOn": [
                "[variables('parserObject7')._parserId7]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_isession')]",
                "contentId": "[variables('parserObject7').parserContentId7]",
                "kind": "Parser",
                "version": "[variables('parserObject7').parserVersion7]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject7').parserContentId7]",
        "contentKind": "Parser",
        "displayName": "vectra_isession parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject7').parserContentId7,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject7').parserContentId7,'-', '1.0.0')))]",
        "version": "[variables('parserObject7').parserVersion7]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject7')._parserName7]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_isession parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_isession",
        "query": "let vectra_isession = view () {\n    vectra_isession_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_isession\"\n};\nvectra_isession\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject7')._parserId7,'/'))))]",
      "dependsOn": [
        "[variables('parserObject7')._parserId7]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_isession')]",
        "contentId": "[variables('parserObject7').parserContentId7]",
        "kind": "Parser",
        "version": "[variables('parserObject7').parserVersion7]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject8').parserTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_kerberos Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject8').parserVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject8')._parserName8]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_kerberos parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_kerberos",
                "query": "let vectra_kerberos = view () {\n    vectra_kerberos_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_kerberos\"\n};\nvectra_kerberos\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject8')._parserId8,'/'))))]",
              "dependsOn": [
                "[variables('parserObject8')._parserId8]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_kerberos')]",
                "contentId": "[variables('parserObject8').parserContentId8]",
                "kind": "Parser",
                "version": "[variables('parserObject8').parserVersion8]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject8').parserContentId8]",
        "contentKind": "Parser",
        "displayName": "vectra_kerberos parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject8').parserContentId8,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject8').parserContentId8,'-', '1.0.0')))]",
        "version": "[variables('parserObject8').parserVersion8]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject8')._parserName8]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_kerberos parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_kerberos",
        "query": "let vectra_kerberos = view () {\n    vectra_kerberos_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_kerberos\"\n};\nvectra_kerberos\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject8')._parserId8,'/'))))]",
      "dependsOn": [
        "[variables('parserObject8')._parserId8]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_kerberos')]",
        "contentId": "[variables('parserObject8').parserContentId8]",
        "kind": "Parser",
        "version": "[variables('parserObject8').parserVersion8]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject9').parserTemplateSpecName9]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_ldap Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject9').parserVersion9]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject9')._parserName9]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_ldap parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_ldap",
                "query": "let vectra_ldap = view () {\n    vectra_ldap_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ldap\"\n};\nvectra_ldap\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject9')._parserId9,'/'))))]",
              "dependsOn": [
                "[variables('parserObject9')._parserId9]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ldap')]",
                "contentId": "[variables('parserObject9').parserContentId9]",
                "kind": "Parser",
                "version": "[variables('parserObject9').parserVersion9]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject9').parserContentId9]",
        "contentKind": "Parser",
        "displayName": "vectra_ldap parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject9').parserContentId9,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject9').parserContentId9,'-', '1.0.0')))]",
        "version": "[variables('parserObject9').parserVersion9]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject9')._parserName9]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_ldap parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_ldap",
        "query": "let vectra_ldap = view () {\n    vectra_ldap_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ldap\"\n};\nvectra_ldap\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject9')._parserId9,'/'))))]",
      "dependsOn": [
        "[variables('parserObject9')._parserId9]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ldap')]",
        "contentId": "[variables('parserObject9').parserContentId9]",
        "kind": "Parser",
        "version": "[variables('parserObject9').parserVersion9]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject10').parserTemplateSpecName10]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_ntlm Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject10').parserVersion10]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject10')._parserName10]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_ntlm parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_ntlm",
                "query": "let vectra_ntlm = view () {\n  vectra_ntlm_CL\n  | extend\n      EventVendor=\"Vectra AI\",\n      EventProduct=\"Stream\",\n      EventType=\"vectra_ntlm\"\n};\nvectra_ntlm\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject10')._parserId10,'/'))))]",
              "dependsOn": [
                "[variables('parserObject10')._parserId10]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ntlm')]",
                "contentId": "[variables('parserObject10').parserContentId10]",
                "kind": "Parser",
                "version": "[variables('parserObject10').parserVersion10]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject10').parserContentId10]",
        "contentKind": "Parser",
        "displayName": "vectra_ntlm parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject10').parserContentId10,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject10').parserContentId10,'-', '1.0.0')))]",
        "version": "[variables('parserObject10').parserVersion10]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject10')._parserName10]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_ntlm parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_ntlm",
        "query": "let vectra_ntlm = view () {\n  vectra_ntlm_CL\n  | extend\n      EventVendor=\"Vectra AI\",\n      EventProduct=\"Stream\",\n      EventType=\"vectra_ntlm\"\n};\nvectra_ntlm\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject10')._parserId10,'/'))))]",
      "dependsOn": [
        "[variables('parserObject10')._parserId10]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ntlm')]",
        "contentId": "[variables('parserObject10').parserContentId10]",
        "kind": "Parser",
        "version": "[variables('parserObject10').parserVersion10]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject11').parserTemplateSpecName11]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_radius Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject11').parserVersion11]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject11')._parserName11]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_radius parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_radius",
                "query": "let vectra_radius = view () {\n    vectra_radius_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_radius\"\n};\nvectra_radius\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject11')._parserId11,'/'))))]",
              "dependsOn": [
                "[variables('parserObject11')._parserId11]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_radius')]",
                "contentId": "[variables('parserObject11').parserContentId11]",
                "kind": "Parser",
                "version": "[variables('parserObject11').parserVersion11]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject11').parserContentId11]",
        "contentKind": "Parser",
        "displayName": "vectra_radius parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject11').parserContentId11,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject11').parserContentId11,'-', '1.0.0')))]",
        "version": "[variables('parserObject11').parserVersion11]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject11')._parserName11]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_radius parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_radius",
        "query": "let vectra_radius = view () {\n    vectra_radius_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_radius\"\n};\nvectra_radius\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject11')._parserId11,'/'))))]",
      "dependsOn": [
        "[variables('parserObject11')._parserId11]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_radius')]",
        "contentId": "[variables('parserObject11').parserContentId11]",
        "kind": "Parser",
        "version": "[variables('parserObject11').parserVersion11]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject12').parserTemplateSpecName12]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_rdp Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject12').parserVersion12]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject12')._parserName12]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_rdp parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_rdp",
                "query": "let vectra_rdp = view () {\n    vectra_rdp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_rdp\"\n};\nvectra_rdp\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject12')._parserId12,'/'))))]",
              "dependsOn": [
                "[variables('parserObject12')._parserId12]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_rdp')]",
                "contentId": "[variables('parserObject12').parserContentId12]",
                "kind": "Parser",
                "version": "[variables('parserObject12').parserVersion12]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject12').parserContentId12]",
        "contentKind": "Parser",
        "displayName": "vectra_rdp parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject12').parserContentId12,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject12').parserContentId12,'-', '1.0.0')))]",
        "version": "[variables('parserObject12').parserVersion12]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject12')._parserName12]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_rdp parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_rdp",
        "query": "let vectra_rdp = view () {\n    vectra_rdp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_rdp\"\n};\nvectra_rdp\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject12')._parserId12,'/'))))]",
      "dependsOn": [
        "[variables('parserObject12')._parserId12]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_rdp')]",
        "contentId": "[variables('parserObject12').parserContentId12]",
        "kind": "Parser",
        "version": "[variables('parserObject12').parserVersion12]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject13').parserTemplateSpecName13]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_smbfiles Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject13').parserVersion13]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject13')._parserName13]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_smbfiles parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_smbfiles",
                "query": "let vectra_smbfiles = view () {\n    vectra_smbfiles_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smbfiles\"\n};\nvectra_smbfiles\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject13')._parserId13,'/'))))]",
              "dependsOn": [
                "[variables('parserObject13')._parserId13]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbfiles')]",
                "contentId": "[variables('parserObject13').parserContentId13]",
                "kind": "Parser",
                "version": "[variables('parserObject13').parserVersion13]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject13').parserContentId13]",
        "contentKind": "Parser",
        "displayName": "vectra_smbfiles parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject13').parserContentId13,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject13').parserContentId13,'-', '1.0.0')))]",
        "version": "[variables('parserObject13').parserVersion13]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject13')._parserName13]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_smbfiles parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_smbfiles",
        "query": "let vectra_smbfiles = view () {\n    vectra_smbfiles_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smbfiles\"\n};\nvectra_smbfiles\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject13')._parserId13,'/'))))]",
      "dependsOn": [
        "[variables('parserObject13')._parserId13]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbfiles')]",
        "contentId": "[variables('parserObject13').parserContentId13]",
        "kind": "Parser",
        "version": "[variables('parserObject13').parserVersion13]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject14').parserTemplateSpecName14]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_smbmapping Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject14').parserVersion14]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject14')._parserName14]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_smbmapping parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_smbmapping",
                "query": "let vectra_smbmapping = view () {\n    vectra_smbmapping_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smbmapping\"\n};\nvectra_smbmapping\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject14')._parserId14,'/'))))]",
              "dependsOn": [
                "[variables('parserObject14')._parserId14]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbmapping')]",
                "contentId": "[variables('parserObject14').parserContentId14]",
                "kind": "Parser",
                "version": "[variables('parserObject14').parserVersion14]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject14').parserContentId14]",
        "contentKind": "Parser",
        "displayName": "vectra_smbmapping parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject14').parserContentId14,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject14').parserContentId14,'-', '1.0.0')))]",
        "version": "[variables('parserObject14').parserVersion14]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject14')._parserName14]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_smbmapping parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_smbmapping",
        "query": "let vectra_smbmapping = view () {\n    vectra_smbmapping_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smbmapping\"\n};\nvectra_smbmapping\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject14')._parserId14,'/'))))]",
      "dependsOn": [
        "[variables('parserObject14')._parserId14]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smbmapping')]",
        "contentId": "[variables('parserObject14').parserContentId14]",
        "kind": "Parser",
        "version": "[variables('parserObject14').parserVersion14]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject15').parserTemplateSpecName15]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_smtp Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject15').parserVersion15]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject15')._parserName15]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_smtp parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_smtp",
                "query": "let vectra_smtp = view () {\n    vectra_smtp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smtp\"\n};\nvectra_smtp\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject15')._parserId15,'/'))))]",
              "dependsOn": [
                "[variables('parserObject15')._parserId15]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smtp')]",
                "contentId": "[variables('parserObject15').parserContentId15]",
                "kind": "Parser",
                "version": "[variables('parserObject15').parserVersion15]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject15').parserContentId15]",
        "contentKind": "Parser",
        "displayName": "vectra_smtp parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject15').parserContentId15,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject15').parserContentId15,'-', '1.0.0')))]",
        "version": "[variables('parserObject15').parserVersion15]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject15')._parserName15]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_smtp parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_smtp",
        "query": "let vectra_smtp = view () {\n    vectra_smtp_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_smtp\"\n};\nvectra_smtp\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject15')._parserId15,'/'))))]",
      "dependsOn": [
        "[variables('parserObject15')._parserId15]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_smtp')]",
        "contentId": "[variables('parserObject15').parserContentId15]",
        "kind": "Parser",
        "version": "[variables('parserObject15').parserVersion15]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject16').parserTemplateSpecName16]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_ssh Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject16').parserVersion16]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject16')._parserName16]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_ssh parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_ssh",
                "query": "let vectra_ssh = view () {\n    vectra_ssh_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ssh\"\n};\nvectra_ssh\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject16')._parserId16,'/'))))]",
              "dependsOn": [
                "[variables('parserObject16')._parserId16]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssh')]",
                "contentId": "[variables('parserObject16').parserContentId16]",
                "kind": "Parser",
                "version": "[variables('parserObject16').parserVersion16]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject16').parserContentId16]",
        "contentKind": "Parser",
        "displayName": "vectra_ssh parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject16').parserContentId16,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject16').parserContentId16,'-', '1.0.0')))]",
        "version": "[variables('parserObject16').parserVersion16]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject16')._parserName16]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_ssh parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_ssh",
        "query": "let vectra_ssh = view () {\n    vectra_ssh_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ssh\"\n};\nvectra_ssh\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject16')._parserId16,'/'))))]",
      "dependsOn": [
        "[variables('parserObject16')._parserId16]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssh')]",
        "contentId": "[variables('parserObject16').parserContentId16]",
        "kind": "Parser",
        "version": "[variables('parserObject16').parserVersion16]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject17').parserTemplateSpecName17]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_ssl Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject17').parserVersion17]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject17')._parserName17]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_ssl parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_ssl",
                "query": "let vectra_ssl = view () {\n    vectra_ssl_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ssl\"\n};\nvectra_ssl\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject17')._parserId17,'/'))))]",
              "dependsOn": [
                "[variables('parserObject17')._parserId17]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssl')]",
                "contentId": "[variables('parserObject17').parserContentId17]",
                "kind": "Parser",
                "version": "[variables('parserObject17').parserVersion17]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject17').parserContentId17]",
        "contentKind": "Parser",
        "displayName": "vectra_ssl parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject17').parserContentId17,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject17').parserContentId17,'-', '1.0.0')))]",
        "version": "[variables('parserObject17').parserVersion17]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject17')._parserName17]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_ssl parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_ssl",
        "query": "let vectra_ssl = view () {\n    vectra_ssl_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_ssl\"\n};\nvectra_ssl\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject17')._parserId17,'/'))))]",
      "dependsOn": [
        "[variables('parserObject17')._parserId17]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_ssl')]",
        "contentId": "[variables('parserObject17').parserContentId17]",
        "kind": "Parser",
        "version": "[variables('parserObject17').parserVersion17]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject18').parserTemplateSpecName18]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_stream Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject18').parserVersion18]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject18')._parserName18]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_stream parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_stream",
                "query": "let vectra_stream = view () {\nunion isfuzzy=true vectra_beacon, vectra_dcerpc, vectra_dhcp, vectra_dns, vectra_http, vectra_isession, vectra_kerberos, vectra_ldap, vectra_ntlm, vectra_radius, vectra_rdp, vectra_smbfiles, vectra_smbmapping, vectra_smtp, vectra_ssh, vectra_ssl, vectra_x509, vectra_match\n};\nvectra_stream",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject18')._parserId18,'/'))))]",
              "dependsOn": [
                "[variables('parserObject18')._parserId18]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_stream')]",
                "contentId": "[variables('parserObject18').parserContentId18]",
                "kind": "Parser",
                "version": "[variables('parserObject18').parserVersion18]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject18').parserContentId18]",
        "contentKind": "Parser",
        "displayName": "vectra_stream parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject18').parserContentId18,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject18').parserContentId18,'-', '1.0.1')))]",
        "version": "[variables('parserObject18').parserVersion18]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject18')._parserName18]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_stream parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_stream",
        "query": "let vectra_stream = view () {\nunion isfuzzy=true vectra_beacon, vectra_dcerpc, vectra_dhcp, vectra_dns, vectra_http, vectra_isession, vectra_kerberos, vectra_ldap, vectra_ntlm, vectra_radius, vectra_rdp, vectra_smbfiles, vectra_smbmapping, vectra_smtp, vectra_ssh, vectra_ssl, vectra_x509, vectra_match\n};\nvectra_stream",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject18')._parserId18,'/'))))]",
      "dependsOn": [
        "[variables('parserObject18')._parserId18]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_stream')]",
        "contentId": "[variables('parserObject18').parserContentId18]",
        "kind": "Parser",
        "version": "[variables('parserObject18').parserVersion18]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject19').parserTemplateSpecName19]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_x509 Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject19').parserVersion19]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject19')._parserName19]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_x509 parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_x509",
                "query": "let vectra_x509 = view () {\n    vectra_x509_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_x509\"\n};\nvectra_x509\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject19')._parserId19,'/'))))]",
              "dependsOn": [
                "[variables('parserObject19')._parserId19]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_x509')]",
                "contentId": "[variables('parserObject19').parserContentId19]",
                "kind": "Parser",
                "version": "[variables('parserObject19').parserVersion19]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject19').parserContentId19]",
        "contentKind": "Parser",
        "displayName": "vectra_x509 parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject19').parserContentId19,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject19').parserContentId19,'-', '1.0.0')))]",
        "version": "[variables('parserObject19').parserVersion19]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject19')._parserName19]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_x509 parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_x509",
        "query": "let vectra_x509 = view () {\n    vectra_x509_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_x509\"\n};\nvectra_x509\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject19')._parserId19,'/'))))]",
      "dependsOn": [
        "[variables('parserObject19')._parserId19]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_x509')]",
        "contentId": "[variables('parserObject19').parserContentId19]",
        "kind": "Parser",
        "version": "[variables('parserObject19').parserVersion19]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject20').parserTemplateSpecName20]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "vectra_match Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject20').parserVersion20]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject20')._parserName20]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "vectra_match parser for Vectra AI",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "vectra_match",
                "query": "let vectra_match = view () {\n    vectra_match_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_match\"\n};\nvectra_match\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject20')._parserId20,'/'))))]",
              "dependsOn": [
                "[variables('parserObject20')._parserId20]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_match')]",
                "contentId": "[variables('parserObject20').parserContentId20]",
                "kind": "Parser",
                "version": "[variables('parserObject20').parserVersion20]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Vectra TME Team",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject20').parserContentId20]",
        "contentKind": "Parser",
        "displayName": "vectra_match parser for Vectra AI",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject20').parserContentId20,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject20').parserContentId20,'-', '1.0.0')))]",
        "version": "[variables('parserObject20').parserVersion20]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject20')._parserName20]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "vectra_match parser for Vectra AI",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "vectra_match",
        "query": "let vectra_match = view () {\n    vectra_match_CL\n    | extend\n        EventVendor=\"Vectra AI\",\n        EventProduct=\"Stream\",\n        EventType=\"vectra_match\"\n};\nvectra_match\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject20')._parserId20,'/'))))]",
      "dependsOn": [
        "[variables('parserObject20')._parserId20]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'vectra_match')]",
        "contentId": "[variables('parserObject20').parserContentId20]",
        "kind": "Parser",
        "version": "[variables('parserObject20').parserVersion20]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.1",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Vectra AI Stream",
        "publisherDisplayName": "Vectra AI",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Vectra%20AI%20Stream/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.vectra.ai/products/platform\">Vectra AI Stream</a> solution allows you to easily connect your Vectra Platform with Microsoft Sentinel, to ingest network metadata collected at scale throughout your environment by Vectra sensors (On-premise or Cloud). This gives you deep insight into your organization's network traffic and improves your security operation capabilities. For a complete list of protocols and attributes supported, check out our <a href=\"https://support.vectra.ai/s/article/KB-VS-1245\">Network Metadata reference guide</a></p>\n<ol>\n<li><p>** Vectra AI Stream (Network Enriched Metadata) via AMA** - This data connector helps ingest Vectra AI Stream events into your Log Analytics Workspace using the new Azure Monitor Agent. Learn more about ingesting using the new Azure Monitor Agent <a href=\"https://learn.microsoft.com/en-us/azure/sentinel/connect-cef-syslog-ama\">here</a>. <strong>Microsoft recommends using this Data Connector</strong>.</p>\n</li>\n<li><p>** Vectra AI Stream (Network Enriched Metadata) via Legacy Agent** - This data connector helps ingest Vectra AI Stream events into your Log Analytics Workspace using the legacy Log Analytics agent.</p>\n</li>\n</ol>\n<p><strong>NOTE:</strong> Microsoft recommends installation of ** Vectra AI Stream (Network Enriched Metadata) via AMA Connector. Legacy connector uses the Log Analytics agent which is about to be deprecated by <strong>Aug 31, 2024,</strong> and thus should only be installed where AMA is not supported. Using MMA and AMA on same machine can cause log duplication and extra ingestion cost <a href=\"https://learn.microsoft.com/en-us/azure/sentinel/ama-migrate\">more details</a>.</p>\n<p><strong>Data Connectors:</strong> 2, <strong>Parsers:</strong> 20</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/AIVectraDetect.svg\"width=\"75px\"height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Vectra TME Team",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId2')]",
              "version": "[variables('dataConnectorVersion2')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject4').parserContentId4]",
              "version": "[variables('parserObject4').parserVersion4]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject5').parserContentId5]",
              "version": "[variables('parserObject5').parserVersion5]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject6').parserContentId6]",
              "version": "[variables('parserObject6').parserVersion6]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject7').parserContentId7]",
              "version": "[variables('parserObject7').parserVersion7]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject8').parserContentId8]",
              "version": "[variables('parserObject8').parserVersion8]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject9').parserContentId9]",
              "version": "[variables('parserObject9').parserVersion9]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject10').parserContentId10]",
              "version": "[variables('parserObject10').parserVersion10]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject11').parserContentId11]",
              "version": "[variables('parserObject11').parserVersion11]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject12').parserContentId12]",
              "version": "[variables('parserObject12').parserVersion12]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject13').parserContentId13]",
              "version": "[variables('parserObject13').parserVersion13]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject14').parserContentId14]",
              "version": "[variables('parserObject14').parserVersion14]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject15').parserContentId15]",
              "version": "[variables('parserObject15').parserVersion15]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject16').parserContentId16]",
              "version": "[variables('parserObject16').parserVersion16]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject17').parserContentId17]",
              "version": "[variables('parserObject17').parserVersion17]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject18').parserContentId18]",
              "version": "[variables('parserObject18').parserVersion18]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject19').parserContentId19]",
              "version": "[variables('parserObject19').parserVersion19]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject20').parserContentId20]",
              "version": "[variables('parserObject20').parserVersion20]"
            }
          ]
        },
        "firstPublishDate": "2021-10-18",
        "lastPublishDate": "2024-05-02",
        "providers": [
          "Vectra AI"
        ],
        "categories": {
          "domains": [
            "Security - Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
