Parser:
  Title: File Activity ASIM filtering parser for Azure Blob Storage
  Version: '0.1.1'
  LastUpdated: Nov 03, 2023
Product:
  Name: Microsoft Azure Blob Storage
Normalization:
  Schema: FileEvent
  Version: '0.1.0'
References:
- Title: ASIM File Schema
  Link: https://aka.ms/ASimFileEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Storage Analytics log format
  Link: https://docs.microsoft.comrest/api/storageservices/storage-analytics-log-format
Description: This ASIM parser supports normalizing Azure Blob Storage events, stored in the StorageBlobLogs table, to the ASIM file activity schema.
ParserName: vimFileEventAzureBlobStorage
EquivalentBuiltInParser: _Im_FileEvent_AzureBlobStorage
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  // https://docs.microsoft.comrest/api/storageservices/storage-analytics-logged-operations-and-status-messages
  let parser=(
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      eventtype_in: dynamic=dynamic([]),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      actorusername_has_any: dynamic=dynamic([]),
      targetfilepath_has_any: dynamic=dynamic([]),
      srcfilepath_has_any: dynamic=dynamic([]),
      hashes_has_any: dynamic=dynamic([]),
      dvchostname_has_any: dynamic=dynamic([]),
      disabled: bool=false
      )
  {
      let bloboperations=datatable(OperationName: string, EventType: string)
  [
      "PutBlock", "FileCreated",
      "PutBlob", "FileCreated",
      "PutPage", "FileCreated",
      "CreateContainer", "FolderCreated",
      "CopyBlob", "FileCopied",
      "QueryBlobContents", "FileAccessed",
      "GetBlob", "FileAccessed",
      "AppendBlock", "FileModified",
      "ClearPage", "FileModified",
      "PutBlockFromURL", "FileModified",
      "DeleteBlob", "FileDeleted",
      "DeleteContainer", "FolderDeleted"
  ];
      StorageBlobLogs
      | where not(disabled)
      | where (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
      // **** relevant data filtering;
      | where OperationName in (bloboperations)
      | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(CallerIpAddress, srcipaddr_has_any_prefix))) and 
          (array_length(actorusername_has_any) == 0) and
          ((array_length(targetfilepath_has_any) == 0) or (Uri has_any (targetfilepath_has_any))) and 
          (array_length(srcfilepath_has_any) == 0) and
          (array_length(hashes_has_any) == 0) and 
          (array_length(dvchostname_has_any) == 0)
      //
      | lookup bloboperations on OperationName
      | where ((array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))) 
      | project-rename 
          EventOriginalUid = CorrelationId
          ,
          EventOriginalType=OperationName
          ,
          HttpUserAgent=UserAgentHeader
          ,
          TargetUrl=Uri
      | extend 
          EventCount=int(1)
          ,
          EventStartTime=TimeGenerated
          ,
          EventEndTime=TimeGenerated
          //	, EventType :string  ---> see lookup below
          ,
          EventResult=iff(StatusText == 'Success', 'Success', 'Failure') 
          ,
          EventProduct='Azure File Storage' 
          ,
          EventVendor='Microsoft'
          ,
          EventSchemaVersion='0.1.0'
          ,
          TargetFilePath=tostring(split(TargetUrl, '?')[0]) 
          ,
          TargetFilePathType='URL'
          ,
          SrcIpAddr=tostring(split(CallerIpAddress, ':')[0])
          ,
          SrcPortNumber=tostring(split(CallerIpAddress, ':')[1])
      | extend TargetFileName=tostring(split(TargetFilePath, '/')[-1])
      // Aliases
      | extend 
          FilePath=TargetFilePath
  };
  parser
  (
      starttime=starttime, 
      endtime=endtime, 
      eventtype_in=eventtype_in,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      actorusername_has_any=actorusername_has_any,
      targetfilepath_has_any=targetfilepath_has_any,
      srcfilepath_has_any=srcfilepath_has_any,
      hashes_has_any=hashes_has_any,
      dvchostname_has_any=dvchostname_has_any,
      disabled=disabled
  )