Parser:
  Title: File Event ASIM parser for Microsoft 365 Defender for Endpoint
  Version: '0.2.1'
  LastUpdated: Oct 26 2023
Product:
  Name: 'Microsoft 365 Defender for EndPoint'
Normalization:
  Schema: FileEvent
  Version: '0.2.1'
References:
- Title: ASIM File Event Schema
  Link: https://aka.ms/ASimFileEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Microsoft 365 Defender DeviceFileEvents
  Link: https://docs.microsoft.commicrosoft-365/security/defender/advanced-hunting-devicefileevents-table?view=o365-worldwide
Description: This ASIM parser supports normalizing M365 Defender, stored in the DeviceFileEvents table, for Endpoint events to the ASIM file activity schema.
ParserName: ASimFileEventMicrosoft365D
EquivalentBuiltInParser: _ASim_FileEvent_Microsoft365D
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let protocols = dynamic(['smb']);
  let parser=(disabled:bool=false){
    let remote_events = 
        DeviceFileEvents
        | where not(disabled)
        | where isnotempty(RequestAccountName)
        | project-rename    
            SrcIpAddr = RequestSourceIP,
            ActorUserSid = RequestAccountSid,
            TargetUserSid = InitiatingProcessAccountSid,
            TargetUserAadId = InitiatingProcessAccountObjectId,
            TargetUserUpn = InitiatingProcessAccountUpn
        | extend
            ActorWindowsUsername = strcat(RequestAccountDomain,'\\', RequestAccountName),
            TargetWindowsUsername = strcat(InitiatingProcessAccountDomain,'\\', InitiatingProcessAccountName),
            ActorUserUpn = "",
            ActorUserAadId = ""
        | extend
            ActorUserType = _ASIM_GetWindowsUserType(ActorWindowsUsername, ActorUserSid),
            TargetUserType = _ASIM_GetWindowsUserType(TargetWindowsUsername, TargetUserSid)
        | extend
            SrcPortNumber = toint(RequestSourcePort),
            TargetUsername = coalesce(TargetUserUpn, TargetWindowsUsername),
            TargetUsernameType = iff(isempty(TargetUserUpn), 'Windows', 'UPN'),
            TargetUserId = coalesce(TargetUserAadId, TargetUserSid), 
            TargetUserIdType = iff(isempty(TargetUserSid),'AADID','SID'),
            IpAddr = SrcIpAddr,
            Src = SrcIpAddr
    ;
    let local_events = 
       DeviceFileEvents
        | where not(disabled)
        | where isempty(RequestAccountName)    
        | project-rename
            ActorUserSid = InitiatingProcessAccountSid,
            ActorUserAadId = InitiatingProcessAccountObjectId,
            ActorUserUpn = InitiatingProcessAccountUpn
        | extend 
            ActorWindowsUsername = strcat(InitiatingProcessAccountDomain,'\\', InitiatingProcessAccountName) 
        | extend
            ActorUserType = _ASIM_GetWindowsUserType(ActorWindowsUsername, ActorUserSid)
        | project-away RequestAccountSid, RequestSourceIP
    ;
    union 
        remote_events
        , 
        local_events
    | project-rename
       EventType = ActionType,
       DvcId = DeviceId,
       TargetFileMD5 = MD5,
       TargetFileSHA1 = SHA1,
       TargetFileSHA256 = SHA256,
       ActingProcessCommandLine = InitiatingProcessCommandLine,
       ActingProcessName =InitiatingProcessFolderPath,
       ActingProcessMD5 = InitiatingProcessMD5,
       ActingProcessSHA1 = InitiatingProcessSHA1,
       ActingProcessSHA256 = InitiatingProcessSHA256,
       ActingProcessParentFileName = InitiatingProcessParentFileName,
       ActingProcessCreationTime = InitiatingProcessCreationTime,
       ActingProcessParentCreationTime = InitiatingProcessParentCreationTime,
       TargetFileName = FileName,
       SrcFileName = PreviousFileName
    | extend
       DvcOs = iff(FolderPath startswith "/", "Linux", "Windows"),
      TargetFileSize = tolong(FileSize)
    | extend
       EventCount = int(1),
       EventOriginalUid = tostring(ReportId),
       ActingProcessId = tostring(InitiatingProcessId),
       EventStartTime = Timestamp, 
       EventEndTime= Timestamp,
       EventResult = 'Success',
       EventProduct = 'M365 Defender for Endpoint',
       EventSchema = 'FileEvent',
       EventVendor = 'Microsoft',
       EventSeverity = 'Informational',
       EventSchemaVersion = '0.2.1',
       DvcIdType = "MDEid",
       ActorUsername = coalesce(ActorUserUpn, ActorWindowsUsername),
       ActorUsernameType = iff(isempty(ActorUserUpn), 'Windows', 'UPN'),
       ActorUserId = coalesce(ActorUserAadId, ActorUserSid), 
       ActorUserIdType = iff(isempty(ActorUserSid),'AADID','SID'),
       TargetFilePath = strcat(FolderPath, iff(DvcOs == "Linux", "/", "\\"), TargetFileName),
       TargetFilePathType = iff(DvcOs == "Linux", "Unix", "Windows Local"),
       SrcFilePath = strcat(PreviousFolderPath, iff(DvcOs == "Linux", "/", "\\"), SrcFileName),
       SrcFilePathType = iff(DvcOs == "Linux", "Unix", "Windows Local"),
       Hash=coalesce(TargetFileSHA256, TargetFileSHA1, TargetFileMD5),
       NetworkApplicationProtocol = iff (RequestProtocol in (protocols), toupper(RequestProtocol), "")
     | invoke _ASIM_ResolveDvcFQDN ('DeviceName')
     | project-away DeviceName
     | extend
         HashType = tostring(dynamic(["SHA256", "SHA1", "MD5"])[array_index_of(pack_array(TargetFileSHA256, TargetFileSHA1, TargetFileMD5),Hash)])     
     //  ****** Aliases
     | extend 
        User = ActorUsername,
        Dvc = coalesce(DvcFQDN, DvcHostname),
        FilePath = TargetFilePath,
        Process = ActingProcessName,
        CommandLine = ActingProcessCommandLine,
        DvcMDEid = DvcId,
        FileName = TargetFileName
    | project-away MachineGroup, ReportId, SourceSystem, Initiating*, Timestamp, TenantId, Request*, PreviousFolderPath, FolderPath, AppGuardContainerId
    | project-away ShareName, IsAzureInfoProtectionApplied, FileOrigin*, Sensitivity*
    };
    parser (disabled = disabled)