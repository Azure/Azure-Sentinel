Parser:
  Title: File Activity ASIM filtering parser for Sharepoint and OneDrive for business
  Version: "0.3.1"
  LastUpdated: Nov 02 2023
Product:
  Name: Microsoft SharePoint
Normalization:
  Schema: FileEvent
  Version: "0.2.1"
References:
  - Title: ASIM File Event Schema
    Link: https://aka.ms/ASimFileEventDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Office 365 Management Activity API schema
    Link: https://docs.microsoft.com/office/office-365-management-api/office-365-management-activity-api-schema#sharepoint-file-operations
Description: This ASIM parser supports normalizing Sharepoint and OneDrive for business events, stored in the OfficeActivity table, to the ASIM file activity schema.
ParserName: vimFileEventMicrosoftSharePoint
EquivalentBuiltInParser: _Im_FileEvent_MicrosoftSharePoint
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let _ASIM_ResolveActorUsername = (T: (*), UsernameField: string) { 
    T
    | extend ActorUsername = column_ifexists(UsernameField, "")
    | extend windows = ActorUsername has '\\'
    | extend 
        ActorUsernameType = iff (windows, "Windows", "UPN"),
        ActorUserUpn =  iff (windows, "", ActorUsername),
        ActorWindowsUsername = iff (windows, ActorUsername, "")
  };
  let operations = datatable (Operation: string, EventType: string, EventSubType: string) [
      "FileUploaded", "FileCreated", "Upload",
      "FileAccessedExtended", "FileAccessed", "Extended",
      "FileRecycled", "FileDeleted", "Recycle",
      "FileDeleted", "FileDeleted", "",
      "FileAccessed", "FileAccessed", "",
      "FolderCreated", "FolderCreated", "",
      "FilePreviewed", "FileAccessed", "Preview",
      "FileDownloaded", "FileAccessed", "Download",
      "FileSyncDownloadedFull", "FileAccessed", "Download",
      "FolderModified", "FolderModified", "",
      "FileModifiedExtended", "FolderModified", "Extended",
      "FileModified", "FolderModified", "",
      "FileVersionsAllDeleted", "FolderDeleted", "Versions",
      "FileSyncUploadedFull", "FileCreated", "Upload",
      "FileSensitivityLabelApplied", "FileAttributesUpdated", "",
      "FileSensitivityLabelChanged", "FileAttributesUpdated", "",
      "FileSensitivityLabelRemoved", "FileAttributesUpdated", "",
      "SiteDeleted", "FolderDeleted", "Site",
      "FileRenamed", "FileRenamed", "",
      "FileMoved", "FileMoved", "",
      "FileCopied", "FileCopied", "",
      "FolderCopied", "FolderCopied", "",
      "FolderMoved", "FolderMoved", "",
      "FolderRenamed", "FolderRenamed", "",
      "FolderRecycled", "FolderDeleted", "Recycle",
      "FolderDeleted", "FolderDeleted", "",
      "FileCheckedIn", "FileCreatedOrModified", "Checkin",
      "FileCheckedOut", "FileAccessed", "Checkout"
  ];
  let multiple_file_operations = dynamic([
      "FileRenamed",
      "FileMoved",
      "FileCopied",
      "FolderCopied",
      "FolderMoved",
      "FolderRenamed"
      ]);
  let parser=(
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      eventtype_in: dynamic=dynamic([]),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      actorusername_has_any: dynamic=dynamic([]),
      targetfilepath_has_any: dynamic=dynamic([]),
      srcfilepath_has_any: dynamic=dynamic([]),
      hashes_has_any: dynamic=dynamic([]),
      dvchostname_has_any: dynamic=dynamic([]),
      disabled: bool=false
      ) {
      let OfficeActivityProjected = 
          OfficeActivity
          | where not(disabled)
          | where (isnull(starttime) or TimeGenerated >= starttime) 
              and (isnull(endtime) or TimeGenerated <= endtime)
          | where RecordType == "SharePointFileOperation" and Operation != "FileMalwareDetected"
          | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(ClientIP, srcipaddr_has_any_prefix))) and 
              ((array_length(actorusername_has_any) == 0) or (UserId has_any (actorusername_has_any))) and
              ((array_length(targetfilepath_has_any) == 0) or (OfficeObjectId has_any (targetfilepath_has_any)) or (strcat (Site_Url, DestinationRelativeUrl, "/", DestinationFileName) has_any (targetfilepath_has_any))) and
              ((array_length(srcfilepath_has_any) == 0) or (OfficeObjectId has_any (srcfilepath_has_any))) and
              (array_length(hashes_has_any) == 0) and
              (array_length(dvchostname_has_any) == 0)
          | project
              Operation,
              OrganizationId,
              OrganizationName,
              SourceRecordId,
              OfficeWorkload,
              UserId,
              ClientIP,
              UserAgent,
              Start_Time,
              TimeGenerated,
              Type,
              OfficeObjectId,
              SourceFileName,
              SourceFileExtension,
              DestinationFileName,
              DestinationFileExtension,
              Site_Url,
              DestinationRelativeUrl,
              UserKey,
              MachineDomainInfo,
              MachineId; // ,_ItemId 
      let SingleFileOperationEvents = 
          OfficeActivityProjected
          | where Operation !in (multiple_file_operations)
          | project-rename 
              TargetFilePath = OfficeObjectId,
              TargetFileName = SourceFileName,
              TargetFileExtension = SourceFileExtension
          // Post-filtering
          | where (array_length(srcfilepath_has_any) == 0) and
              ((array_length(targetfilepath_has_any) == 0) or (TargetFilePath has_any (targetfilepath_has_any)))
          | extend 
              TargetFilePathType = "URL"
          | project-away DestinationFileName, DestinationFileExtension, DestinationRelativeUrl
      ;
      // single in dest: SiteDeleted
      let MultipleFileOperationsEvents = 
          OfficeActivityProjected
          | where Operation in (multiple_file_operations)
          | project-rename 
              SrcFilePath = OfficeObjectId,
              TargetFileName = DestinationFileName,
              TargetFileExtension = DestinationFileExtension,
              SrcFileName = SourceFileName,
              SrcFileExtension = SourceFileExtension
          | extend 
              TargetFilePath = strcat (Site_Url, DestinationRelativeUrl, "/", TargetFileName),
              TargetFilePathType = "URL",
              SrcFilePathType = "URL"
          // Post-filtering
          | where ((array_length(srcfilepath_has_any) == 0) or (SrcFilePath has_any (srcfilepath_has_any))) and
              ((array_length(targetfilepath_has_any) == 0) or (TargetFilePath has_any (targetfilepath_has_any)))
          | project-away DestinationRelativeUrl
      ;
      union SingleFileOperationEvents, MultipleFileOperationsEvents
      | lookup operations on Operation
      | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))
      | invoke _ASIM_ResolveActorUsername('UserId')
      | project-away UserId
      | project-rename 
          EventOriginalType = Operation,
          ActorScopeId = OrganizationId,
          ActorScope = OrganizationName,
          EventOriginalUid = SourceRecordId,
          EventProduct = OfficeWorkload,
          ActorUserId = UserKey,
          HttpUserAgent = UserAgent,
          SrcIpAddr = ClientIP,
          EventStartTime = Start_Time,
          // EvetUid = _ItemId,
          TargetUrl = Site_Url,
          SrcDvcId = MachineId,
          SrcDvcScopeId = MachineDomainInfo
      | extend
          EventCount = int(1),
          EventStartTime = TimeGenerated, 
          EventEndTime = TimeGenerated,
          EventResult = "Success",
          EventVendor = 'Microsoft',
          EventSchemaVersion = '0.2.1',
          EventSchema = "FileEvent",
          ActorUserIdType = 'Other',
          SrcDvcIdType = 'Other',
          TargetAppName = EventProduct,
          TargetAppType = 'SaaS application',
          Dvc = strcat ('Microsoft ', EventProduct)
      // Aliases
      | extend 
          User = ActorUsername,
          FilePath = TargetFilePath,
          FileName = TargetFileName,
          Src = SrcIpAddr,
          IpAddr = SrcIpAddr,
          Url = TargetUrl,
          Dvc = EventProduct,
          Application = EventProduct
  };
  parser (
      starttime=starttime, 
      endtime=endtime, 
      eventtype_in=eventtype_in,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      actorusername_has_any=actorusername_has_any,
      targetfilepath_has_any=targetfilepath_has_any,
      srcfilepath_has_any=srcfilepath_has_any,
      hashes_has_any=hashes_has_any,
      dvchostname_has_any=dvchostname_has_any,
      disabled=disabled
  )