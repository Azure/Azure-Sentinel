{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimFileEventAzureTableStorage')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "File Activity ASIM filtering parser for Azure Table Storage",
        "category": "ASIM",
        "FunctionAlias": "vimFileEventAzureTableStorage",
        "query": "// https://docs.microsoft.comrest/api/storageservices/storage-analytics-logged-operations-and-status-messages\nlet parser=(\n    starttime: datetime=datetime(null),\n    endtime: datetime=datetime(null),\n    eventtype_in: dynamic=dynamic([]),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]),\n    actorusername_has_any: dynamic=dynamic([]),\n    targetfilepath_has_any: dynamic=dynamic([]),\n    srcfilepath_has_any: dynamic=dynamic([]),\n    hashes_has_any: dynamic=dynamic([]),\n    dvchostname_has_any: dynamic=dynamic([]),\n    disabled: bool=false\n    )\n{\n    let tableoperations=datatable(OperationName: string, EventType: string)\n[\n        ,\n    \"CreateTable\", \"FileCreated\"\n        ,\n    \"DeleteTable\", \"FileDeleted\"\n        ,\n    \"DeleteEntity\", \"FileModified\"\n        ,\n    \"InsertEntity\", \"FileModified\"\n        ,\n    \"InsertOrMergeEntity\", \"FileModified\"\n        ,\n    \"InsertOrReplaceEntity\", \"FileModified\"\n        ,\n    \"QueryEntity\", \"FileAccessed\"\n        ,\n    \"QueryEntities\", \"FileAccessed\"\n        ,\n    \"QueryTable\", \"FileAccessed\"\n        ,\n    \"QueryTables\", \"FileAccessed\"\n        ,\n    \"UpdateEntity\", \"FileModified\"\n        ,\n    \"MergeEntity\", \"FileModified\"\n];\n    StorageTableLogs\n    | where not(disabled)\n    | where (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n    // **** relevant data filtering;\n    | where OperationName in (tableoperations)\n    //\n    | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(CallerIpAddress, srcipaddr_has_any_prefix))) and \n        (array_length(actorusername_has_any) == 0) and\n        ((array_length(targetfilepath_has_any) == 0) or (Uri has_any (targetfilepath_has_any))) and \n        (array_length(srcfilepath_has_any) == 0) and\n        (array_length(hashes_has_any) == 0) and \n        (array_length(dvchostname_has_any) == 0)\n    | extend \n        EventCount=int(1)\n        ,\n        EventStartTime=TimeGenerated\n        ,\n        EventEndTime=TimeGenerated\n        //\t, EventType :string  ---> see lookup below\n        ,\n        EventResult=iff(StatusText == 'Success', 'Success', 'Failure') \n        ,\n        EventOriginalUid = CorrelationId\n        ,\n        EventOriginalType=OperationName\n        ,\n        EventProduct='Azure File Storage' \n        ,\n        EventVendor='Microsoft'\n        ,\n        EventSchemaVersion='0.1.0'\n        ,\n        TargetFilePath=tostring(split(Uri, '?')[0]) \n        ,\n        TargetFilePathType='URL'\n        ,\n        TargetUrl=Uri\n        ,\n        SrcIpAddr=tostring(split(CallerIpAddress, ':')[0])\n        ,\n        SrcPortNumber=tostring(split(CallerIpAddress, ':')[0])\n        ,\n        HttpUserAgent=UserAgentHeader\n    | extend TargetFileName=tostring(split(TargetFilePath, '/')[-1])\n    | lookup tableoperations on OperationName\n    | where ((array_length(eventtype_in) == 0 or EventType in~ (eventtype_in)))\n    // Aliases\n    | extend \n        FilePath=TargetFilePath\n};\nparser\n(\n    starttime=starttime, \n    endtime=endtime, \n    eventtype_in=eventtype_in,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    actorusername_has_any=actorusername_has_any,\n    targetfilepath_has_any=targetfilepath_has_any,\n    srcfilepath_has_any=srcfilepath_has_any,\n    hashes_has_any=hashes_has_any,\n    dvchostname_has_any=dvchostname_has_any,\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetfilepath_has_any:dynamic=dynamic([]),srcfilepath_has_any:dynamic=dynamic([]),hashes_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
