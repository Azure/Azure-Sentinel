{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimFileEventNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "File Event ASIM filtering parser for Microsoft Sentinel native File Event table",
        "category": "ASIM",
        "FunctionAlias": "vimFileEventNative",
        "query": "let parser=(\n  starttime: datetime=datetime(null),\n  endtime: datetime=datetime(null),\n  eventtype_in: dynamic=dynamic([]),\n  srcipaddr_has_any_prefix: dynamic=dynamic([]),\n  actorusername_has_any: dynamic=dynamic([]),\n  targetfilepath_has_any: dynamic=dynamic([]),\n  srcfilepath_has_any: dynamic=dynamic([]),\n  hashes_has_any: dynamic=dynamic([]),\n  dvchostname_has_any: dynamic=dynamic([]),\n  disabled: bool=false\n  ) {\n  ASimFileEventLogs\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n  | where ((array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))) and\n      ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))) and \n      ((array_length(actorusername_has_any) == 0) or (ActorUsername has_any (actorusername_has_any))) and\n      ((array_length(targetfilepath_has_any) == 0) or (TargetFilePath has_any (targetfilepath_has_any))) and \n      ((array_length(srcfilepath_has_any) == 0) or (SrcFilePath has_any (srcfilepath_has_any))) and\n      ((array_length(hashes_has_any) == 0) or (TargetFileMD5 in (hashes_has_any)) or (TargetFileSHA1 in (hashes_has_any)) or (TargetFileSHA256 in (hashes_has_any)) or (TargetFileSHA512 in (hashes_has_any))) and \n      (array_length(dvchostname_has_any) == 0 or DvcHostname has_any (dvchostname_has_any))\n  | project-rename\n      EventUid = _ItemId\n  | extend          \n      EventSchema = \"FileEvent\",\n      DvcScopeId = iff(isempty(DvcScopeId), _SubscriptionId, DvcScopeId)\n  //  -- Aliases\n  | extend\n      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),\n      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),\n      Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId),\n      Src = SrcIpAddr,\n      IpAddr = SrcIpAddr,\n      Rule = coalesce(RuleName, tostring(RuleNumber)),\n      User = ActorUsername,\n      FileName = TargetFileName,\n      FilePath = TargetFilePath,\n      Process = ActingProcessName,\n      Url = TargetUrl,\n      Application = TargetAppName\n  | project-away\n      TenantId,\n      SourceSystem,\n      _SubscriptionId,\n      _ResourceId\n};\nparser (\n    starttime=starttime, \n    endtime=endtime, \n    eventtype_in=eventtype_in,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    actorusername_has_any=actorusername_has_any,\n    targetfilepath_has_any=targetfilepath_has_any,\n    srcfilepath_has_any=srcfilepath_has_any,\n    hashes_has_any=hashes_has_any,\n    dvchostname_has_any=dvchostname_has_any,\n    disabled=disabled\n  )\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetfilepath_has_any:dynamic=dynamic([]),srcfilepath_has_any:dynamic=dynamic([]),hashes_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
