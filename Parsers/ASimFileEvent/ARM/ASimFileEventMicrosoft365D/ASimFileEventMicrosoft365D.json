{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimFileEventMicrosoft365D')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "File Event ASIM parser for Microsoft 365 Defender for Endpoint",
        "category": "ASIM",
        "FunctionAlias": "ASimFileEventMicrosoft365D",
        "query": "let protocols = dynamic(['smb']);\nlet parser=(disabled:bool=false){\n  let remote_events = \n      DeviceFileEvents\n      | where not(disabled)\n      | where isnotempty(RequestAccountName)\n      | project-rename    \n          SrcIpAddr = RequestSourceIP,\n          ActorUserSid = RequestAccountSid,\n          TargetUserSid = InitiatingProcessAccountSid,\n          TargetUserAadId = InitiatingProcessAccountObjectId,\n          TargetUserUpn = InitiatingProcessAccountUpn\n      | extend\n          ActorWindowsUsername = strcat(RequestAccountDomain,'\\\\', RequestAccountName),\n          TargetWindowsUsername = strcat(InitiatingProcessAccountDomain,'\\\\', InitiatingProcessAccountName),\n          ActorUserUpn = \"\",\n          ActorUserAadId = \"\"\n      | extend\n          ActorUserType = _ASIM_GetWindowsUserType(ActorWindowsUsername, ActorUserSid),\n          TargetUserType = _ASIM_GetWindowsUserType(TargetWindowsUsername, TargetUserSid)\n      | extend\n          SrcPortNumber = toint(RequestSourcePort),\n          TargetUsername = coalesce(TargetUserUpn, TargetWindowsUsername),\n          TargetUsernameType = iff(isempty(TargetUserUpn), 'Windows', 'UPN'),\n          TargetUserId = coalesce(TargetUserAadId, TargetUserSid), \n          TargetUserIdType = iff(isempty(TargetUserSid),'AADID','SID'),\n          IpAddr = SrcIpAddr,\n          Src = SrcIpAddr\n  ;\n  let local_events = \n     DeviceFileEvents\n      | where not(disabled)\n      | where isempty(RequestAccountName)    \n      | project-rename\n          ActorUserSid = InitiatingProcessAccountSid,\n          ActorUserAadId = InitiatingProcessAccountObjectId,\n          ActorUserUpn = InitiatingProcessAccountUpn\n      | extend \n          ActorWindowsUsername = strcat(InitiatingProcessAccountDomain,'\\\\', InitiatingProcessAccountName) \n      | extend\n          ActorUserType = _ASIM_GetWindowsUserType(ActorWindowsUsername, ActorUserSid)\n      | project-away RequestAccountSid, RequestSourceIP\n  ;\n  union \n      remote_events\n      , \n      local_events\n  | project-rename\n     EventType = ActionType,\n     DvcId = DeviceId,\n     TargetFileMD5 = MD5,\n     TargetFileSHA1 = SHA1,\n     TargetFileSHA256 = SHA256,\n     ActingProcessCommandLine = InitiatingProcessCommandLine,\n     ActingProcessName =InitiatingProcessFolderPath,\n     ActingProcessMD5 = InitiatingProcessMD5,\n     ActingProcessSHA1 = InitiatingProcessSHA1,\n     ActingProcessSHA256 = InitiatingProcessSHA256,\n     ActingProcessParentFileName = InitiatingProcessParentFileName,\n     ActingProcessCreationTime = InitiatingProcessCreationTime,\n     ActingProcessParentCreationTime = InitiatingProcessParentCreationTime,\n     TargetFileName = FileName,\n     SrcFileName = PreviousFileName\n  | extend\n     DvcOs = iff(FolderPath startswith \"/\", \"Linux\", \"Windows\"),\n    TargetFileSize = tolong(FileSize)\n  | extend\n     EventCount = int(1),\n     EventOriginalUid = tostring(ReportId),\n     ActingProcessId = tostring(InitiatingProcessId),\n     EventStartTime = Timestamp, \n     EventEndTime= Timestamp,\n     EventResult = 'Success',\n     EventProduct = 'M365 Defender for Endpoint',\n     EventSchema = 'FileEvent',\n     EventVendor = 'Microsoft',\n     EventSeverity = 'Informational',\n     EventSchemaVersion = '0.2.1',\n     DvcIdType = \"MDEid\",\n     ActorUsername = coalesce(ActorUserUpn, ActorWindowsUsername),\n     ActorUsernameType = iff(isempty(ActorUserUpn), 'Windows', 'UPN'),\n     ActorUserId = coalesce(ActorUserAadId, ActorUserSid), \n     ActorUserIdType = iff(isempty(ActorUserSid),'AADID','SID'),\n     TargetFilePath = strcat(FolderPath, iff(DvcOs == \"Linux\", \"/\", \"\\\\\"), TargetFileName),\n     TargetFilePathType = iff(DvcOs == \"Linux\", \"Unix\", \"Windows Local\"),\n     SrcFilePath = strcat(PreviousFolderPath, iff(DvcOs == \"Linux\", \"/\", \"\\\\\"), SrcFileName),\n     SrcFilePathType = iff(DvcOs == \"Linux\", \"Unix\", \"Windows Local\"),\n     Hash=coalesce(TargetFileSHA256, TargetFileSHA1, TargetFileMD5),\n     NetworkApplicationProtocol = iff (RequestProtocol in (protocols), toupper(RequestProtocol), \"\")\n   | invoke _ASIM_ResolveDvcFQDN ('DeviceName')\n   | project-away DeviceName\n   | extend\n       HashType = tostring(dynamic([\"SHA256\", \"SHA1\", \"MD5\"])[array_index_of(pack_array(TargetFileSHA256, TargetFileSHA1, TargetFileMD5),Hash)])     \n   //  ****** Aliases\n   | extend \n      User = ActorUsername,\n      Dvc = coalesce(DvcFQDN, DvcHostname),\n      FilePath = TargetFilePath,\n      Process = ActingProcessName,\n      CommandLine = ActingProcessCommandLine,\n      DvcMDEid = DvcId,\n      FileName = TargetFileName\n  | project-away MachineGroup, ReportId, SourceSystem, Initiating*, Timestamp, TenantId, Request*, PreviousFolderPath, FolderPath, AppGuardContainerId\n  | project-away ShareName, IsAzureInfoProtectionApplied, FileOrigin*, Sensitivity*\n  };\n  parser (disabled = disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
