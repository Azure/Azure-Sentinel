// Epic Systems SIEM Parser
// Last Updated Date: June 23, 2025
//
// Updated by: [CHABBERL@MICROSOFT.COM]
//
// This parser parses the CommonSecurityLog source for events from the Epic SIEM platform.
// //
// Parser Notes:
// 1. This parser assumes logs are collected into the CommonSecurityLog table using a Syslog solution and that the logs have been configured to send CEF logs to the CSE table in Azure Log Analytics.
// 2. Based on the Schema from Epic Systems SIEM Feed documentation found here https://open.epic.com/Tech/TechSpec?spec=5188
// 3. A few extract fields from an older version have been kept for potential undocumented fields, however most have been updated to match the latest Epic documentation.
//
// Usage Instruction: 
// Paste below query in log analytics, click on "Save" button and select as "Function" from drop down by specifying function name and alias as "Epic" or a variant.
// Functions usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Epic_CL | take 10).
//
//


CommonSecurityLog
| where DeviceVendor == "Epic"
| extend AdditionalExtensions = replace(@'\^', @'/', AdditionalExtensions),
SourceUserName = replace(@'\^', @'/', SourceUserName)
| extend AdditionalExtensions = replace(@"$", @";", AdditionalExtensions),
workstationID = extract("workstationID=(.*?);", 1, AdditionalExtensions),
end = coalesce(
                extract("end=(.*?);", 1, AdditionalExtensions),
                tostring(column_ifexists("EndTime", ""))
            ),
flag = extract("flag=(.*?);", 1, AdditionalExtensions),
ACTNDTL = extract("ACTNDTL=(.*?);", 1, AdditionalExtensions),
ADDRESS = extract("ADDRESS=(.*?);", 1, AdditionalExtensions),
APIID = extract("APIID=(.*?);", 1, AdditionalExtensions),
APP = extract("APP=(.*?);", 1, AdditionalExtensions),
APPLICATIONID = extract("APPLICATIONID=(.*?);", 1, AdditionalExtensions),
AUDACTN = extract("AUDACTN=(.*?);", 1, AdditionalExtensions),
AUDITSESSION = extract("AUDITSESSION=(.*?);", 1, AdditionalExtensions),
AUTH_SOURCE = extract("AUTH_SOURCE=(.*?);", 1, AdditionalExtensions),
BCA_UNLOCK_USER = extract("BCA_UNLOCK_USER=(.*?);", 1, AdditionalExtensions),
BCAPCS = extract("BCAPCS=(.*?);", 1, AdditionalExtensions),
BCAWEB_NAME = extract("BCAWEB_NAME=(.*?);", 1, AdditionalExtensions),
BTGEXPLANATION = extract("BTGEXPLANATION=(.*?);", 1, AdditionalExtensions),
BTGNOACCESSREAS = extract("BTGNOACCESSREAS=(.*?);", 1, AdditionalExtensions),
BTGREASON = extract("BTGREASON=(.*?);", 1, AdditionalExtensions),
CLIENTNAME = extract("CLIENTNAME=(.*?);", 1, AdditionalExtensions),
CSISESS_TOKEN = extract("CSISESS_TOKEN=(.*?);", 1, AdditionalExtensions),
CSN = extract("CSN=(.*?);", 1, AdditionalExtensions),
CTXT = extract("CTXT=(.*?);", 1, AdditionalExtensions),
CUSTSIGNUPFIELD = extract("CUSTSIGNUPFIELD=(.*?);", 1, AdditionalExtensions),
CVG = extract("CVG=(.*?);", 1, AdditionalExtensions),
DAT = extract("DAT=(.*?);", 1, AdditionalExtensions),
DEP = extract("DEP=(.*?);", 1, AdditionalExtensions),
DLGLINE = extract("DLGLINE=(.*?);", 1, AdditionalExtensions),
DOB = extract("DOB=(.*?);", 1, AdditionalExtensions),
E3MID = extract("E3MID=(.*?);", 1, AdditionalExtensions),
E5F_ID = extract("E5F_ID=(.*?);", 1, AdditionalExtensions),
EAR = extract("EAR=(.*?);", 1, AdditionalExtensions),
EMAIL = extract("EMAIL=(.*?);", 1, AdditionalExtensions),
ENCRYPTED = extract("ENCRYPTED=(.*?);", 1, AdditionalExtensions),
ENTRYMRN = extract("ENTRYMRN=(.*?);", 1, AdditionalExtensions),
ERRMSG = extract("ERRMSG=(.*?);", 1, AdditionalExtensions),
EWMBORG = extract("EWMBORG=(.*?);", 1, AdditionalExtensions),
EWMBORGIP = extract("EWMBORGIP=(.*?);", 1, AdditionalExtensions),
EWMBPAT = extract("EWMBPAT=(.*?);", 1, AdditionalExtensions),
EWMBUSR = extract("EWMBUSR=(.*?);", 1, AdditionalExtensions),
FILENAME = extract("FILENAME=(.*?);", 1, AdditionalExtensions),
GENDER = extract("GENDER=(.*?);", 1, AdditionalExtensions),
HAR = extract("HAR=(.*?);", 1, AdditionalExtensions),
HKUAPVER = extract("HKUAPVER=(.*?);", 1, AdditionalExtensions),
HKUDVCID = extract("HKUDVCID=(.*?);", 1, AdditionalExtensions),
HKUOSNAM = extract("HKUOSNAM=(.*?);", 1, AdditionalExtensions),
HKUOSVER = extract("HKUOSVER=(.*?);", 1, AdditionalExtensions),
HOME_PHONE = extract("HOME_PHONE=(.*?);", 1, AdditionalExtensions),
HOSTNAME = extract("HOSTNAME=(.*?);", 1, AdditionalExtensions),
HSB_ID = extract("HSB_ID=(.*?);", 1, AdditionalExtensions),
HSB_IDS = extract("HSB_IDS=(.*?);", 1, AdditionalExtensions),
INSTANCEURN = extract("INSTANCEURN=(.*?);", 1, AdditionalExtensions),
IP = extract("IP=(.*?);", 1, AdditionalExtensions),
ISINSTACT = extract("ISINSTACT=(.*?);", 1, AdditionalExtensions),
LAST_FOUR_SSN = extract("LAST_FOUR_SSN=(.*?);", 1, AdditionalExtensions),
LOGIN = extract("LOGIN=(.*?);", 1, AdditionalExtensions),
LOGIN_CONTEXT = extract("LOGIN_CONTEXT=(.*?);", 1, AdditionalExtensions),
LOGIN_DEVICE = extract("LOGIN_DEVICE=(.*?);", 1, AdditionalExtensions),
LOGIN_LDAP_ID = extract("LOGIN_LDAP_ID=(.*?);", 1, AdditionalExtensions),
LOGIN_REASON = extract("LOGIN_REASON=(.*?);", 1, AdditionalExtensions),
LOGIN_REVAL = extract("LOGIN_REVAL=(.*?);", 1, AdditionalExtensions),
LOGINERROR = extract("LOGINERROR=(.*?);", 1, AdditionalExtensions),
MASKMODE = extract("MASKMODE=(.*?);", 1, AdditionalExtensions),
MOBILE_PHONE = extract("MOBILE_PHONE=(.*?);", 1, AdditionalExtensions),
MSGID = extract("MSGID=(.*?);", 1, AdditionalExtensions),
MYACCT = extract("MYACCT=(.*?);", 1, AdditionalExtensions),
MYC_APP = extract("MYC_APP=(.*?);", 1, AdditionalExtensions),
MYC_DEVICE = extract("MYC_DEVICE=(.*?);", 1, AdditionalExtensions),
MYCACCT = extract("MYCACCT=(.*?);", 1, AdditionalExtensions),
MYCDEACT = extract("MYCDEACT=(.*?);", 1, AdditionalExtensions),
NATIONAL_ID = extract("NATIONAL_ID=(.*?);", 1, AdditionalExtensions),
NEWDEPARTMENT = extract("NEWDEPARTMENT=(.*?);", 1, AdditionalExtensions),
NEWPROVIDER = extract("NEWPROVIDER=(.*?);", 1, AdditionalExtensions),
NEWUSER = extract("NEWUSER=(.*?);", 1, AdditionalExtensions),
NSC = extract("NSC=(.*?);", 1, AdditionalExtensions),
OSUSR = extract("OSUSR=(.*?);", 1, AdditionalExtensions),
PATIENT = extract("PATIENT=(.*?);", 1, AdditionalExtensions),
PATNAME = extract("PATNAME=(.*?);", 1, AdditionalExtensions),
PREVDEPARTMENT = extract("PREVDEPARTMENT=(.*?);", 1, AdditionalExtensions),
PREVPROVIDER = extract("PREVPROVIDER=(.*?);", 1, AdditionalExtensions),
PREVUSER = extract("PREVUSER=(.*?);", 1, AdditionalExtensions),
PRTCTDSRCUSERID = extract("PRTCTDSRCUSERID=(.*?);", 1, AdditionalExtensions),
PULID = extract("PULID=(.*?);", 1, AdditionalExtensions),
PWCHGFAILRSN = extract("PWCHGFAILRSN=(.*?);", 1, AdditionalExtensions),
PWD_ATTEMPT_CNT = extract("PWD_ATTEMPT_CNT=(.*?);", 1, AdditionalExtensions),
PWREASON = extract("PWREASON=(.*?);", 1, AdditionalExtensions),
ROLE = extract("ROLE=(.*?);", 1, AdditionalExtensions),
SERVICE_USER = extract("SERVICE_USER=(.*?);", 1, AdditionalExtensions),
SERVICE_USERTYP = extract("SERVICE_USERTYP=(.*?);", 1, AdditionalExtensions),
SERVICECATEGORY = extract("SERVICECATEGORY=(.*?);", 1, AdditionalExtensions),
SERVICEID = extract("SERVICEID=(.*?);", 1, AdditionalExtensions),
SERVICEMSGID = extract("SERVICEMSGID=(.*?);", 1, AdditionalExtensions),
SERVICENAME = extract("SERVICENAME=(.*?);", 1, AdditionalExtensions),
SERVICETYPE = extract("SERVICETYPE=(.*?);", 1, AdditionalExtensions),
SIGNUP_METHOD = extract("SIGNUP_METHOD=(.*?);", 1, AdditionalExtensions),
SIGNUPSOURCE = extract("SIGNUPSOURCE=(.*?);", 1, AdditionalExtensions),
SOURCE = extract("SOURCE=(.*?);", 1, AdditionalExtensions),
src_dest_IPs = extract("IP=(.*?);", 1, AdditionalExtensions),
SSUPATLNAME = extract("SSUPATLNAME=(.*?);", 1, AdditionalExtensions),
SUCCESS = extract("SUCCESS=(.*?);", 1, AdditionalExtensions),
THIRD_PARTY = extract("THIRD_PARTY=(.*?);", 1, AdditionalExtensions),
TIMEOUT = extract("TIMEOUT=(.*?);", 1, AdditionalExtensions),
UACODE = extract("UACODE=(.*?);", 1, AdditionalExtensions),
UID = extract("UID=(.*?);", 1, AdditionalExtensions),
USERJOB = extract("USERJOB=(.*?);", 1, AdditionalExtensions),
WEBLGAPP = extract("WEBLGAPP=(.*?);", 1, AdditionalExtensions),
WEBLGUTP = extract("WEBLGUTP=(.*?);", 1, AdditionalExtensions),
WORK_PHONE = extract("WORK_PHONE=(.*?);", 1, AdditionalExtensions),
ZIPCODE = extract("ZIPCODE=(.*?);", 1, AdditionalExtensions)
| extend AllIPs = extract_all(@"(?P<ecIP>.*?)/(?P<wsIP>.*)", dynamic(['ecIP','wsIP']), src_dest_IPs)
| extend ecIP = tostring(AllIPs[0][0])
| extend wsIP = tostring(AllIPs[0][1])
