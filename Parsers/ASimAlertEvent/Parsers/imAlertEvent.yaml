Parser:
  Title: Alert Event ASIM filtering parser
  Version: '0.1.0'
  LastUpdated: Mar 11 2024
Product:
  Name: Source agnostic
Normalization:
  Schema: AlertEvent
  Version: '0.1'
References:
- Title: ASIM Alert Schema
  Link: https://aka.ms/ASimAlertEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
    This ASIM parser supports filtering and normalizing Alert logs from all supported sources to the ASIM 'Alert' normalized schema.
ParserName: imAlertEvent
EquivalentBuiltInParser: _Im_AlertEvent
Parsers:
  - _Im_AlertEvent_Empty
  - _Im_AlertEvent_MicrosoftDefenderXDR
  - _Im_AlertEvent_SentinelOneSingularity
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktactics_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktechniques_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: threatcategory_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: alertverdict_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventseverity_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeimAlertEvent') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser | where isnotempty(SourceSpecificParser));
  let vimBuiltInDisabled=toscalar('ExcludevimAlertEvent' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
  let parser=(
    starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        ipaddr_has_any_prefix: dynamic=dynamic([]),
        hostname_has_any: dynamic=dynamic([]),
        username_has_any: dynamic=dynamic([]),
        attacktactics_has_any: dynamic=dynamic([]),
        attacktechniques_has_any: dynamic=dynamic([]),
        threatcategory_has_any: dynamic=dynamic([]),
        alertverdict_has_any: dynamic=dynamic([]),
        eventseverity_has_any: dynamic=dynamic([]),
        pack:bool=false)
  {
  union isfuzzy=true
    vimAlertEventEmpty,
    vimAlertEventMicrosoftDefenderXDR (starttime=starttime, endtime=endtime, ipaddr_has_any_prefix=ipaddr_has_any_prefix, hostname_has_any=hostname_has_any, username_has_any=username_has_any, attacktactics_has_any=attacktactics_has_any, attacktechniques_has_any=attacktechniques_has_any, threatcategory_has_any=threatcategory_has_any, alertverdict_has_any=alertverdict_has_any, eventseverity_has_any=eventseverity_has_any, disabled=(vimBuiltInDisabled or ('ExcludevimAlertMicrosoftDefenderXDR' in (DisabledParsers))),
    vimAlertEventSentinelOneSingularity (starttime=starttime, endtime=endtime, ipaddr_has_any_prefix=ipaddr_has_any_prefix, hostname_has_any=hostname_has_any, username_has_any=username_has_any, attacktactics_has_any=attacktactics_has_any, attacktechniques_has_any=attacktechniques_has_any, threatcategory_has_any=threatcategory_has_any, alertverdict_has_any=alertverdict_has_any, eventseverity_has_any=eventseverity_has_any, disabled=(vimBuiltInDisabled or ('ExcludevimAlertSentinelOneSingularity' in (DisabledParsers))))
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, username_has_any=username_has_any, attacktactics_has_any=attacktactics_has_any, attacktechniques_has_any=attacktechniques_has_any, threatcategory_has_any=threatcategory_has_any, alertverdict_has_any=alertverdict_has_any, eventseverity_has_any=eventseverity_has_any, pack=pack)
