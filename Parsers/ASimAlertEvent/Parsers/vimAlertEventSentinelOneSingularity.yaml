Parser:
  Title: Alert Event ASIM filtering parser for SentinelOne Singularity platform
  Version: '0.1.0'
  LastUpdated: Oct 09, 2024
Product:
  Name: SentinelOne
Normalization:
  Schema: AlertEvent
  Version: '0.1'
References:
- Title: ASIM Alert Schema
  Link: https://aka.ms/ASimAlertEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing and filtering the SentinelOne alerts to the ASIM Alert normalized schema.
ParserName: vimAlertEventSentinelOneSingularity
EquivalentBuiltInParser: _Im_AlertEvent_SentinelOneSingularity
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktactics_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktechniques_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: threatcategory_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: alertverdict_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventseverity_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let AlertVerdictLookup = datatable (analystVerdict_s: string, AlertVerdict: string)
    [
    "Undefined", "Unknown",
    "true_positive", "True Positive",
    "suspicious", "True Positive",
    "false_positive", "False Positive"
  ];
  let ThreatCategoryArray = dynamic(["Malware", "Ransomware", "Trojan", "Virus", "Worm", "Adware", "Spyware", "Rootkit", "Cryptominor", "Phishing", "Spam", "MaliciousUrl", "Spoofing", "Security Policy Violation", "Unknown", "SuspiciousActivity"]);
  let DetectionMethodLookup = datatable (
      threatInfo_engines_s: string,
      DetectionMethod: string
  )
      [
      "Intrusion Detection", "Intrusion Detection",
      "User-Defined Blocklist", "User Defined Blocked List",
      "Reputation", "Reputation"
  ];
  let parser = (starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      ipaddr_has_any_prefix: dynamic=dynamic([]),
      hostname_has_any: dynamic=dynamic([]),
      username_has_any: dynamic=dynamic([]),
      attacktactics_has_any: dynamic=dynamic([]),
      attacktechniques_has_any: dynamic=dynamic([]),
      threatcategory_has_any: dynamic=dynamic([]),
      alertverdict_has_any: dynamic=dynamic([]),
      eventseverity_has_any: dynamic=dynamic([]),
      disabled: bool=false) {
      SentinelOne_CL
      | where not(disabled)
      | where event_name_s in ("Threats.")
      | where (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and ((array_length(ipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(agentDetectionInfo_agentIpV4_s, ipaddr_has_any_prefix)))
          and ((array_length(hostname_has_any) == 0) or (agentRealtimeInfo_agentComputerName_s has_any (hostname_has_any)))
          //and ((array_length(username_has_any) == 0) or (agentDetectionInfo_agentLastLoggedInUpn_s has_any (username_has_any)) or (threatInfo_processUser_s has_any (username_has_any)))
          and ((array_length(attacktactics_has_any) == 0) or (indicators_s has_any (attacktactics_has_any)))
          and ((array_length(attacktechniques_has_any) == 0) or (indicators_s has_any (attacktechniques_has_any)))
          // ThreatCategory filtering done later in the parser
          // AlertVerdict filtering done later in the parser
          and (array_length(eventseverity_has_any) == 0) // EventSeverity details not coming from source
      // Mapping Inspection Fields
      | extend 
          AlertId = threatInfo_threatId_s,
          AlertName = threatInfo_threatName_s,
          AlertStatus = iif(threatInfo_incidentStatus_s == "resolved", "Closed", "Active"),
          AlertOriginalStatus = threatInfo_incidentStatus_s,
          Names = extract_all('"name":"([^"]+)"', dynamic([1]), indicators_s),
          ThreatId = threatInfo_threatId_s,
          ThreatName = threatInfo_threatName_s,
          ThreatFirstReportedTime = threatInfo_identifiedAt_t,
          ThreatLastReportedTime = threatInfo_updatedAt_t,
          ThreatCategory = iif(threatInfo_classification_s in (ThreatCategoryArray), threatInfo_classification_s, ""),
          ThreatOriginalCategory = threatInfo_classification_s
      // Filter for ThreatCategory
      | where ((array_length(threatcategory_has_any) == 0) or (ThreatCategory has_any (threatcategory_has_any)))
      | extend
          AttackTechniques = tostring(extract_all('"(T[0-9]+\\.[0-9]+|T[0-9]+)"', dynamic([1]), tostring(Names))),
          AttackTactics = tostring(extract_all('"([^T][^0-9]+)"', dynamic([1]), tostring(Names)))
      | project-away Names
      | lookup DetectionMethodLookup on threatInfo_engines_s
      | extend analystVerdict_s = threatInfo_analystVerdict_s
      | lookup AlertVerdictLookup on analystVerdict_s
      // Filter for AlertVerdict
      | where ((array_length(alertverdict_has_any) == 0) or (AlertVerdict has_any (alertverdict_has_any)))
      // Mapping Dvc Fields
      | extend 
          DvcHostname = agentRealtimeInfo_agentComputerName_s,
          DvcOs =  agentRealtimeInfo_agentOsName_s,
          DvcOsVersion =  agentRealtimeInfo_agentOsRevision_s,
          DvcId =  agentRealtimeInfo_agentId_s,
          DvcIdType = "Other",
          DvcDomain = agentRealtimeInfo_agentDomain_s,
          DvcDomainType = "Windows",
          DvcIpAddr = agentDetectionInfo_agentIpV4_s
      // Mapping Process Entity
      | extend
          ProcessCommandLine = threatInfo_maliciousProcessArguments_s,
          ProcessName = threatInfo_originatorProcess_s
      // Mapping File Fields
      | extend 
          FileMD5 = threatInfo_md5_g,
          FileSHA1 = threatInfo_sha1_s,
          FileSHA256 = threatInfo_sha256_s,
          FilePath=threatInfo_filePath_s,
          FileSize = threatInfo_fileSize_d
      // Mapping User Fields
        | extend 
            Username = coalesce(agentDetectionInfo_agentLastLoggedInUpn_s, threatInfo_processUser_s)
      | extend UsernameType = _ASIM_GetUsernameType(Username)
      // Event Fields
      | extend
          EventType = 'Alert',
          EventOriginalType = event_name_s,
          EventUid = threatInfo_threatId_s,
          EventCount = int(1),
          EventEndTime = TimeGenerated,
          EventStartTime = TimeGenerated,
          EventProduct = 'Singularity',
          EventVendor = 'SentinelOne',
          EventSchemaVersion = '0.1',
          EventSchema = "AlertEvent"
      | extend EventSubType = "Threat"
      // Aliases
      | extend
          IpAddr = DvcIpAddr,
          User = Username,
          Hostname = DvcHostname
      | project-away *_s, *_g, SourceSystem, ManagementGroupName, Computer, RawData, *_t, *_b, *_d
  };
  parser (
      starttime = starttime, 
      endtime = endtime, 
      ipaddr_has_any_prefix = ipaddr_has_any_prefix,
      hostname_has_any = hostname_has_any,
      username_has_any = username_has_any,
      attacktactics_has_any = attacktactics_has_any,
      attacktechniques_has_any = attacktechniques_has_any,
      threatcategory_has_any = threatcategory_has_any,
      alertverdict_has_any = alertverdict_has_any,
      eventseverity_has_any = eventseverity_has_any,
      disabled = disabled
  )
