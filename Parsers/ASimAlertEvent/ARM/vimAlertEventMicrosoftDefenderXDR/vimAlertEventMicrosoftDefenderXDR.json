{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAlertEventMicrosoftDefenderXDR')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Alert Event ASIM filtering parser for Microsoft Defender XDR",
        "category": "ASIM",
        "FunctionAlias": "vimAlertEventMicrosoftDefenderXDR",
        "query": "let IndicatorTypeLookup = datatable (EntityType: string, IndicatorType: string)\n     [\n     \"User\", \"User\",\n     \"Machine\", \"Host\",\n     \"Process\", \"Process\",\n     \"File\", \"File\",\n     \"Ip\", \"Ip\",\n     \"Url\", \"Url\",\n     \"RegistryValue\", \"Registry\",\n     \"CloudLogonSession\", \"LogonSession\",\n     \"CloudApplication\", \"Application\",\n     \"Mailbox\", \"Mailbox\",\n     \"MailMessage\", \"Email\",\n     \"CloudResource\", \"Cloud Resource\"\n ];\n let IndicatorAssociationLookup = datatable (EvidenceRole: string, IndicatorAssociation: string)\n     [\n     \"Related\", \"Associated\",\n     \"Impacted\", \"Targeted\"\n ];\n let RegistryValueTypeLookup = datatable (ValueType: string, RegistryValueType: string)\n     [\n     \"ExpandString\", \"Reg_Expand_Sz\"\n ];\n let AlertVerdictLookup = datatable (AlertVerdict_Custom: string, AlertVerdict: string)\n     [\n     \"Malicious\", \"True Positive\",\n     \"Suspicious\", \"True Positive\",\n     \"NoThreatsFound\", \"Benign Positive\"\n ];\n let AttackTacticSet = dynamic([\"Exfiltration\", \"PrivilegeEscalation\", \"Persistence\", \"LateralMovement\", \"Execution\", \"Discovery\", \"InitialAccess\", \"CredentialAccess\", \"DefenseEvasion\", \"CommandAndControl\", \"Impact\"]);\n let ThreatCategorySet = dynamic([\"Malware\", \"Ransomware\", \"Trojan\", \"Virus\", \"Worm\", \"Adware\", \"Spyware\", \"Rootkit\", \"Cryptominor\", \"Phishing\", \"Spam\", \"MaliciousUrl\", \"Spoofing\", \"Security Policy Violation\", \"Unknown\", \"SuspiciousActivity\"]);\n let parser = (\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null), \n     ipaddr_has_any_prefix: dynamic=dynamic([]),\n     hostname_has_any: dynamic=dynamic([]),\n     username_has_any: dynamic=dynamic([]),\n     attacktactics_has_any: dynamic=dynamic([]),\n     attacktechniques_has_any: dynamic=dynamic([]),\n     threatcategory_has_any: dynamic=dynamic([]),\n     alertverdict_has_any: dynamic=dynamic([]),\n     eventseverity_has_any: dynamic=dynamic([]),\n     disabled: bool=false) {\n     AlertEvidence\n     | where not(disabled)\n     | where (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and ((array_length(ipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(LocalIP, ipaddr_has_any_prefix)) or (has_any_ipv4_prefix(tostring(AdditionalFields.Host.IpInterfaces[0].Address), ipaddr_has_any_prefix)) or (has_any_ipv4_prefix(RemoteIP, ipaddr_has_any_prefix)))\n         and ((array_length(hostname_has_any) == 0) or (DeviceName has_any (hostname_has_any)) or (tostring(AdditionalFields.Host.NetBiosName) has_any (hostname_has_any)))\n         and ((array_length(username_has_any) == 0) or (AccountUpn has_any (username_has_any)) or (tostring(AdditionalFields.Account.UserPrincipalName) has_any (username_has_any)))\n         and ((array_length(attacktactics_has_any) == 0) or (Categories has_any (attacktactics_has_any)))\n         and ((array_length(attacktechniques_has_any) == 0) or (AttackTechniques has_any (attacktechniques_has_any)))\n         // ThreatCategory filtering done later in the parser\n         // AlertVerdict filtering done later in the parser\n         and ((array_length(eventseverity_has_any) == 0)) // EventSeverity detail not available in this parser.\n     // Mapping Inspection Fields\n     | extend \n         EventUid = AlertId,\n         AlertName = Title,\n         AlertVerdict_Custom = tostring(AdditionalFields.ThreatAnalysisSummary[0].Verdict),\n         AlertVerdictDate_s = todatetime(AdditionalFields.ThreatAnalysisSummary[0].AnalysisDate),\n         AttackTactics = iff(Categories has_any (AttackTacticSet), replace(@\"[\\[\\]\\\"\"]\", \"\", Categories), \"\"),\n         AlertOriginalStatus = tostring(AdditionalFields.LastRemediationState),\n         AlertStatus = iif(isnotempty(AdditionalFields.LastRemediationState), iif(AdditionalFields.LastRemediationState == \"Active\", \"Active\", \"Closed\"), \"\"),\n         DetectionMethod = DetectionSource\n     | lookup AlertVerdictLookup on AlertVerdict_Custom\n     // Filter for AlertVerdict\n     | where ((array_length(alertverdict_has_any) == 0) or (AlertVerdict has_any (alertverdict_has_any)))\n     | lookup IndicatorTypeLookup on EntityType\n     | lookup IndicatorAssociationLookup on EvidenceRole\n     // Mapping Threat Fields\n     | extend\n         ThreatCategory = iif(Categories has_any (ThreatCategorySet), replace(@\"[\\[\\]\\\"\"]\", \"\", Categories), \"\")\n     // Filter for ThreatCategory\n     | where ((array_length(threatcategory_has_any) == 0) or (ThreatCategory has_any (threatcategory_has_any)))\n     // Mapping User Entity\n     | extend \n         UserId = coalesce(AccountObjectId, tostring(AdditionalFields.Account.AadUserId)),\n         UserSid = coalesce(AccountSid, tostring(AdditionalFields.Account.Sid)),\n         Username = coalesce(AccountUpn, tostring(AdditionalFields.Account.UserPrincipalName)),\n         UserSessionId = tostring(AdditionalFields.SessionId),\n         UserScopeId = tostring(AdditionalFields.AadTenantId),\n         HttpUserAgent_s = tostring(AdditionalFields.UserAgent)\n     | extend\n         UserIdType = iif(isnotempty(UserId), \"EntraUserID\", iif(isnotempty(UserSid), \"SID\", \"\")),\n         UserId = coalesce(UserId, UserSid),\n         UserType = _ASIM_GetUserType(Username, UserSid),\n         UsernameType = _ASIM_GetUsernameType(Username)\n     // Mapping Device Entity\n     | extend \n         DvcId = coalesce(DeviceId, tostring(AdditionalFields.Host.MachineId)),\n         DvcIpAddr = coalesce(LocalIP, tostring(AdditionalFields.Host.IpInterfaces[0].Address), RemoteIP),\n         DvcOs = tostring(coalesce(AdditionalFields.OSFamily, AdditionalFields.Host.OSFamily)),\n         DvcOsVersion = tostring(coalesce(AdditionalFields.OSVersion, AdditionalFields.Host.OSVersion)),\n         DeviceName = coalesce(DeviceName, tostring(AdditionalFields.Host.NetBiosName)),\n         DvcScopeId = coalesce(tostring(split(AdditionalFields.AzureID, \"/\")[2]), (tostring(split(AdditionalFields.ResourceId, \"/\")[2])))\n     | extend DvcIdType = iif(isnotempty(DvcId), \"MDEid\", \"\")\n     | invoke _ASIM_ResolveDvcFQDN(\"DeviceName\")\n     // Mapping Additional Fields\n     | extend\n         GeoCity_s = AdditionalFields.Location.City,\n         GeoCountry_s = AdditionalFields.Location.CountryCode,\n         GeoLatitude_s = AdditionalFields.Location.Latitude,\n         GeoLongitude_s = AdditionalFields.Location.Longitude,\n         GeoRegion_s = AdditionalFields.Location.State\n     // Mapping Process Entity\n     | extend \n         ProcessId = AdditionalFields.ProcessId,\n         ProcessCommandLine,\n         ProcessName = iif(IndicatorType == \"Process\", iif(isnotempty(FolderPath) and isnotempty(FileName), strcat(FolderPath, '\\\\', FileName), FileName), \"\"),\n         ProcessFileCompany = AdditionalFields.Publisher,\n         // Parent Process Fields\n         ParentProcessId_s = AdditionalFields.ParentProcess.ProcessId,\n         ParentProcessCommandLine_s = AdditionalFields.ParentProcess.CommandLine,\n         ParentProcessName_s = iif(IndicatorType == \"Process\", iif(isnotempty(AdditionalFields.ParentProcess.ImageFile.Directory) and isnotempty(AdditionalFields.ParentProcess.ImageFile.Name), strcat (AdditionalFields.ParentProcess.ImageFile.Directory, \"\\\\\", AdditionalFields.ParentProcess.ImageFile.Name), coalesce(AdditionalFields.ParentProcess.ImageFile.Name, AdditionalFields.ParentProcess.FriendlyName)), \"\"),\n         ParentProcessSHA1_s = AdditionalFields.ParentProcess.ImageFile[0].SHA1,\n         ParentProcessSHA256_s = AdditionalFields.ParentProcess.ImageFile[2].SHA256,\n         ParentProcessMD5_s = AdditionalFields.ParentProcess.ImageFile[1].MD5\n     // Mapping File Entity\n     | extend \n         FileName,\n         FileDirectory = FolderPath,\n         FilePath = iff(isnotempty(FolderPath) and isnotempty(FileName), strcat(FolderPath, '\\\\', FileName), FileName),\n         FileSHA1 = SHA1,\n         FileSHA256 = SHA256,\n         FileMD5 = AdditionalFields.FileHashes[1].Value,\n         FileSize = FileSize\n     // Mapping Url Entity\n     | extend \n         Url = RemoteUrl\n     // Mapping Registry Entity\n     | extend \n         RegistryKey,\n         RegistryValue = RegistryValueName,\n         RegistryValueData,\n         ValueType = tostring(AdditionalFields.ValueType)\n     | lookup RegistryValueTypeLookup on ValueType\n     // Mapping Application Entity\n     | extend \n         AppId_s = ApplicationId,\n         AppName_s = Application\n     // Mapping Email Entity\n     | extend \n         EmailMessageId = NetworkMessageId,\n         EmailSubject\n     | extend AdditionalFields = bag_pack(\n                                 \"AlertVerdictDate\",\n                                 AlertVerdictDate_s,\n                                 \"HttpUserAgent\",\n                                 HttpUserAgent_s,\n                                 \"GeoCity\",\n                                 GeoCity_s,\n                                 \"GeoCountry\",\n                                 GeoCountry_s,\n                                 \"GeoLatitude\",\n                                 GeoLatitude_s,\n                                 \"GeoLongitude\",\n                                 GeoLongitude_s,\n                                 \"GeoRegion\",\n                                 GeoRegion_s,\n                                 \"ParentProcessId\",\n                                 ParentProcessId_s,\n                                 \"ParentProcessCommandLine\",\n                                 ParentProcessCommandLine_s,\n                                 \"ParentProcessName\",\n                                 ParentProcessName_s,\n                                 \"ParentProcessSHA256\",\n                                 ParentProcessSHA256_s,\n                                 \"ParentProcessMD5\",\n                                 ParentProcessMD5_s\n                             )\n     // Mapping common event fields\n     | extend\n         EventSubType = \"Threat\", // All events in AlertEvidence contains threat info\n         EventEndTime = TimeGenerated,\n         EventStartTime = TimeGenerated,\n         EventProduct = ServiceSource,\n         EventVendor = 'Microsoft',\n         EventSchema = 'AlertEvent',\n         EventSchemaVersion = '0.1',\n         EventType = 'Alert',\n         EventCount = int(1)\n     // MApping Alias\n     | extend \n         IpAddr = DvcIpAddr,\n         Hostname = DvcHostname,\n         User = Username\n     | project-away\n         Title,\n         Categories,\n         EntityType,\n         EvidenceRole,\n         DetectionSource,\n         ServiceSource,\n         ThreatFamily,\n         RemoteIP,\n         RemoteUrl,\n         AccountName,\n         AccountDomain,\n         DeviceName,\n         LocalIP,\n         AlertVerdict_Custom,\n         EvidenceDirection,\n         Account*,\n         ApplicationId,\n         Application,\n         *_s\n };\n parser(\n     starttime = starttime, \n     endtime = endtime, \n     ipaddr_has_any_prefix = ipaddr_has_any_prefix,\n     hostname_has_any = hostname_has_any,\n     username_has_any = username_has_any,\n     attacktactics_has_any = attacktactics_has_any,\n     attacktechniques_has_any = attacktechniques_has_any,\n     threatcategory_has_any = threatcategory_has_any,\n     alertverdict_has_any = alertverdict_has_any,\n     eventseverity_has_any = eventseverity_has_any,\n     disabled = disabled\n )\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),ipaddr_has_any_prefix:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),username_has_any:dynamic=dynamic([]),attacktactics_has_any:dynamic=dynamic([]),attacktechniques_has_any:dynamic=dynamic([]),threatcategory_has_any:dynamic=dynamic([]),alertverdict_has_any:dynamic=dynamic([]),eventseverity_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}