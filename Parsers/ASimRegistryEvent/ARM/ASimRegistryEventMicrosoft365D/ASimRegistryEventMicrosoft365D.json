{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimRegistryEventMicrosoft365D')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Registry Event ASIM parser for Microsoft 365 Defender for Endpoint",
        "category": "ASIM",
        "FunctionAlias": "ASimRegistryEventMicrosoft365D",
        "query": "let RegistryType = datatable (TypeCode: string, TypeName: string)\n  [\n  \"None\", \"Reg_None\",\n  \"String\", \"Reg_Sz\",\n  \"ExpandString\", \"Reg_Expand_Sz\",\n  \"Binary\", \"Reg_Binary\",\n  \"Dword\", \"Reg_DWord\",\n  \"MultiString\", \"Reg_Multi_Sz\",\n  \"QWord\", \"Reg_QWord\"\n];\nlet parser = (\n    disabled: bool=false\n    ) {\n    DeviceRegistryEvents\n    | where not(disabled)\n    | extend\n        // Event\n        EventOriginalUid = tostring(ReportId), \n        EventCount = int(1), \n        EventProduct = 'M365 Defender for Endpoint', \n        EventVendor = 'Microsoft', \n        EventSchemaVersion = '0.1.0', \n        EventStartTime = TimeGenerated, \n        EventEndTime = TimeGenerated, \n        EventType = ActionType,\n        // Registry\n        RegistryKey = iff (ActionType in (\"RegistryKeyDeleted\", \"RegistryValueDeleted\"), PreviousRegistryKey, RegistryKey),\n        RegistryValue = iff (ActionType == \"RegistryValueDeleted\", PreviousRegistryValueName, RegistryValueName),\n        // RegistryValueType -- original name is fine \n        // RegistryValueData -- original name is fine \n        RegistryKeyModified = iff (ActionType == \"RegistryKeyRenamed\", PreviousRegistryKey, \"\"),\n        RegistryValueModified = iff (ActionType == \"RegistryValueSet\", PreviousRegistryValueName, \"\"),\n        // RegistryValueTypeModified -- Not provided by Defender\n        RegistryValueDataModified = PreviousRegistryValueData\n    | lookup RegistryType on $left.RegistryValueType == $right.TypeCode\n    | extend RegistryValueType = TypeName\n    | project-away\n        TypeName,\n        PreviousRegistryKey,\n        PreviousRegistryValueName,\n        PreviousRegistryValueData\n    // Device\n    | extend\n        DvcHostname = DeviceName, \n        DvcId = DeviceId, \n        Dvc = DeviceName \n    // Users\n    | extend\n        ActorUsername = iff (InitiatingProcessAccountDomain == '', InitiatingProcessAccountName, strcat(InitiatingProcessAccountDomain, '\\\\', InitiatingProcessAccountName)), \n        ActorUsernameType = iff(InitiatingProcessAccountDomain == '', 'Simple', 'Windows'), \n        ActorUserIdType = 'SID'\n    //| project-away InitiatingProcessAccountDomain, InitiatingProcessAccountName\n    | project-rename\n        ActorUserId = InitiatingProcessAccountSid, \n        ActorUserAadId = InitiatingProcessAccountObjectId, \n        ActorUserUpn = InitiatingProcessAccountUpn\n    // Processes\n    | extend\n        ActingProcessId = tostring(InitiatingProcessId), \n        ParentProcessId = tostring(InitiatingProcessParentId) \n    | project-away InitiatingProcessId, InitiatingProcessParentId\n    | project-rename\n        ParentProcessName = InitiatingProcessParentFileName, \n        ParentProcessCreationTime = InitiatingProcessParentCreationTime, \n        ActingProcessName = InitiatingProcessFolderPath, \n        ActingProcessFileName = InitiatingProcessFileName,\n        ActingProcessCommandLine = InitiatingProcessCommandLine, \n        ActingProcessMD5 = InitiatingProcessMD5, \n        ActingProcessSHA1 = InitiatingProcessSHA1, //OK\n        ActingProcessSHA256 = InitiatingProcessSHA256, \n        ActingProcessIntegrityLevel = InitiatingProcessIntegrityLevel, \n        ActingProcessTokenElevation = InitiatingProcessTokenElevation, \n        ActingProcessCreationTime = InitiatingProcessCreationTime \n    // -- aliases\n    | extend \n        Username = ActorUsername,\n        UserId = ActorUserId,\n        UserIdType = ActorUserIdType,\n        User = ActorUsername,\n        CommandLine = ActingProcessCommandLine,\n        Process = ActingProcessName\n};\nparser (\n    disabled = disabled\n)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
