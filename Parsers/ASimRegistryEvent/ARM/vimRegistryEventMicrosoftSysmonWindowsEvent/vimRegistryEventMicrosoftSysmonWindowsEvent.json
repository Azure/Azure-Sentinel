{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimRegistryEventMicrosoftSysmonWindowsEvent')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Registry Event ASIM filtering parser for Microsoft Sysmon (registry creation event)",
        "category": "ASIM",
        "FunctionAlias": "vimRegistryEventMicrosoftSysmonWindowsEvent",
        "query": "let parser = (\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null),\n  eventtype_in: dynamic=dynamic([]),\n  actorusername_has_any: dynamic=dynamic([]),\n  registrykey_has_any: dynamic =dynamic([]),\n  registryvalue_has_any: dynamic =dynamic([]),\n  registrydata_has_any: dynamic =dynamic([]),\n  dvchostname_has_any: dynamic=dynamic([]),\n  disabled: bool=false\n  ) {\n  let RegistryAction = datatable (EventType: string, NewEventType: string)\n      [\n  \"CreateKey\", \"RegistryKeyCreated\",\n  \"DeleteKey\", \"RegistryKeyDeleted\",\n  \"DeleteValue\", \"RegistryValueDeleted\", \n  \"SetValue\", \"RegistryValueSet\",\n  \"RenameKey\", \"RegistryKeyRenamed\"\n  ];     \n      let Hives = datatable (KeyPrefix: string, Hive: string)\n          [\n      \"HKLM\", \"HKEY_LOCAL_MACHINE\",\n      \"HKU\", \"HKEY_USERS\", \n      \"HKCR\", \"HKEY_LOCAL_MACHINE\\\\Classes\" \n  ];\n      // this is the parser for sysmon from WindowsEvent table\n      let ParsedRegistryEvent_WindowsEvent=() {\n      WindowsEvent\n          | where not(disabled)\n          | where (isnull(starttime) or TimeGenerated >= starttime) \n              and (isnull(endtime) or TimeGenerated <= endtime)\n          | where Provider == \"Microsoft-Windows-Sysmon\" and EventID in (12, 13, 14)\n          | where (array_length(actorusername_has_any) == 0 or (tostring(EventData.User) has_any (actorusername_has_any))) and\n              (array_length(registrydata_has_any) == 0 or (tostring(EventData.Parameter) has_any (registrydata_has_any))) and\n              (array_length(dvchostname_has_any) == 0 or Computer has_any (dvchostname_has_any))\n          | extend \n              EventStartTime = todatetime(TimeGenerated), \n              EventEndTime = todatetime(TimeGenerated), \n              EventCount = int(1), \n              EventVendor = \"Microsoft\",\n              EventSchemaVersion = \"0.1.0\", \n              EventProduct = \"Sysmon\",\n              EventOriginalType = tostring(EventID),\n              EventType = tostring(EventData.EventType),\n              DvcOs = \"Windows\",\n              EventMessage = tostring(EventData.RenderedDescription), \n              ActorUsername = tostring(EventData.User),\n              ActingProcessId = tostring(EventData.ProcessId),\n              ActingProcessGuid = extract ('^{(.*)}$', 1, tostring(EventData.ProcessGuid), typeof(string)),\n              ActingProcessName = tostring(EventData.Image),\n              TargetObject = tostring(EventData.TargetObject),\n              Parameter = tostring(EventData.Parameter)\n          | project-rename\n              DvcHostName = Computer \n          | lookup RegistryAction on EventType\n          | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))\n          | project-rename EventOriginalSubType = EventType\n          | project-rename EventType = NewEventType\n          // Normalize Key Hive\n          | parse TargetObject with KeyPrefix \"\\\\\" KeyMain\n          | lookup Hives on KeyPrefix\n          | extend Key = strcat (Hive, \"\\\\\", KeyMain)\n          | parse Parameter with KeyPrefix \"\\\\\" KeyMain\n          | lookup Hives on KeyPrefix\n          | extend NewName = strcat (Hive, \"\\\\\", KeyMain)\n          | project-away KeyPrefix, KeyMain, Hive\n          // Split Key and Value for relevant events \n          | extend ParsedKey = extract_all (@\"^(.+)\\\\(.+)$\", Key)\n          | extend Key = iff (EventType in (\"RegistryValueSet\", \"RegistryValueDeleted\"), ParsedKey[0][0], Key)\n          | extend Value = iff (EventType in (\"RegistryValueSet\", \"RegistryValueDeleted\"), ParsedKey[0][1], \"\")\n          | extend ParsedKey = extract_all (@\"^(.+)\\\\(.+)$\", NewName)\n          | extend NewKey = ParsedKey[0][0]\n          | extend NewValue = ParsedKey[0][1]\n          | project-away ParsedKey, TargetObject, NewName\n          // Set normalized registry fields\n          | extend\n              RegistryKey = iff (EventType == \"RegistryKeyRenamed\", NewKey, Key),\n              RegistryKeyModified = iff (EventType in (\"RegistryKeyRenamed\", \"RegistryValueSet\"), Key, \"\"),\n              RegistryValue = iff (EventType in (\"RegistryValueSet\", \"RegistryValueDeleted\"), Value, \"\"),\n              RegistryValueModified = iff (EventType == \"RegistryValueSet\", Value, \"\"),\n              RegistryValueData = iff (EventType == \"RegistryValueSet\", Parameter, \"\"),\n              ActorUsernameType =  iff(isnotempty(ActorUsername), 'Windows', '')\n          | where (array_length(registrykey_has_any) == 0 or (RegistryKey has_any (registrykey_has_any))) and \n              (array_length(registryvalue_has_any) == 0 or (RegistryValue has_any (registryvalue_has_any))) and \n              (array_length(registrydata_has_any) == 0 or RegistryValueData has_any (registrydata_has_any))\n          | extend // aliases\n              User = ActorUsername,\n              Process = ActingProcessName,\n              Dvc = DvcHostName,\n              EventResult = \"Success\",\n              EventSchema = \"RegistryEvent\"\n          | project-away\n              Parameter,\n              Value,\n              Key,\n              NewKey,\n              NewValue,\n              EventData,\n              Channel,Correlation,Data,DvcHostName,EventID,EventLevelName,EventLevel,EventOriginId,EventRecordId,Hive1,Keywords,ManagementGroupName,_ResourceId,Opcode,Provider,RawEventData,RegistryKeyModified,RegistryValueModified,SourceSystem,SystemProcessId,SystemThreadId,SystemUserId,Task,TenantId,TimeCreated,Version,_ResourceId\n  };\n          ParsedRegistryEvent_WindowsEvent\n  };\n  parser (\n      starttime                = starttime,\n      endtime                  = endtime,\n      eventtype_in             = eventtype_in,\n      actorusername_has_any    = actorusername_has_any,\n      registrykey_has_any = registrykey_has_any,\n      registryvalue_has_any = registryvalue_has_any,\n      registrydata_has_any = registrydata_has_any,\n      dvchostname_has_any= dvchostname_has_any,\n      disabled                 = disabled\n  )\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),registrykey_has_any:dynamic=dynamic([]),registryvalue_has_any:dynamic=dynamic([]),registrydata_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
