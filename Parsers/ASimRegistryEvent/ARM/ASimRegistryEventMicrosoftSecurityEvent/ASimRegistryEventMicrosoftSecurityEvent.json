{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimRegistryEventMicrosoftSecurityEvent')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Registry Event ASIM parser for Microsoft Windows Events (registry creation event)",
        "category": "ASIM",
        "FunctionAlias": "ASimRegistryEventMicrosoftSecurityEvent",
        "query": "let parser = (\ndisabled: bool=false\n) {\nlet ASIM_GetAccountType = (sid: string) { \niif ( \nsid in (\"S-1-0-0\", \"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"),\n\"Simple\"\n    ,\n\"Windows\"\n)\n};\n    let ASIM_ParseSecurityEvents = (SecurityEvent: (SubjectDomainName: string, SubjectUserName: string, ProcessId: string, ObjectName: string, SubjectUserSid: string, SubjectLogonId: string, ProcessName: string)) {\n    SecurityEvent\n        | project-rename\n            ActorUsername = SubjectUserName\n            ,\n            ActorUserId = SubjectUserSid\n            ,\n            ActorSessionId = SubjectLogonId\n            ,\n            ActingProcessName = ProcessName\n            ,\n            ActorDomainName = SubjectDomainName\n        | extend\n            ActorUsername = iif(isnotempty(ActorDomainName), strcat(ActorDomainName, @'\\', ActorUsername), ActorUsername)\n            ,\n            ActingProcessId = tostring(toint(tolong(ProcessId)))\n            ,\n            RegistryKey = iif(\n                ObjectName startswith @\"\\REGISTRY\\MACHINE\",\n                replace_string(ObjectName, @\"\\REGISTRY\\MACHINE\", \"HKEY_LOCAL_MACHINE\")\n            ,\n                replace_string(ObjectName, @\"\\REGISTRY\\USER\", \"HKEY_USERS\")\n            )\n};\n    let Event4663TypeLookup = datatable (AccessMask: string, EventType: string)\n        [\n    \"0x1\", \"RegistryValueRead\"\n        ,\n    \"0x10\", \"RegistryKeyNotify\"\n        ,\n    \"0x10000\", \"RegistryKeyDeleted\"\n        ,\n    \"0x2\", \"RegistryValueSet\"\n        ,\n    \"0x20000\", \"MetadataAccessed\"\n        ,\n    \"0x20006\", \"RegistryValueSet\"\n        ,\n    \"0x40000\", \"MetadataModified\"\n        ,\n    \"0x8\", \"RegistrySubkeyEnumerated\"\n];\n    let Event4567TypeLookup = datatable (EventOriginalSubType: string, EventType: string)\n        [\n    \"%%1904\", \"RegistryValueSet\"\n        ,\n    \"%%1905\", \"RegistryValueSet\"\n        ,\n    \"%%1906\", \"RegistryValueDeleted\"\n];\n    let RegistryType = datatable (TypeCode: string, TypeName: string)\n        [\n    \"%%1872\", \"REG_NONE\"\n        ,\n    \"%%1873\", \"REG_SZ\"\n        ,\n    \"%%1874\", \"REG_EXPAND_SZ\"\n        ,\n    \"%%1875\", \"REG_BINARY\"\n        ,\n    \"%%1876\", \"REG_DWORD\"\n        ,\n    \"%%1879\", \"REG_MULTI_SZ\"\n        ,\n    \"%%1883\", \"REG_QWORD\"\n];\n    union isfuzzy=false\n        (\n        SecurityEvent\n        | where not(disabled)\n        | where EventID == 4663 and ObjectType == \"Key\"\n        | lookup Event4663TypeLookup on AccessMask\n        | extend EventType = iif(isempty(EventType), \"Other\", EventType)\n        | invoke ASIM_ParseSecurityEvents()\n        | project\n            TimeGenerated,\n            Computer,\n            EventID,\n            EventType,\n            ActorUsername,\n            ActorDomainName,\n            ActorUserId,\n            ActorSessionId,\n            ActingProcessName,\n            ActingProcessId,\n            RegistryKey,\n            _ResourceId,\n            Type\n        ),\n        (\n            SecurityEvent\n            | where not(disabled)\n            | where EventID == 4657\n            | invoke ASIM_ParseSecurityEvents()\n            | extend\n                EventOriginalSubType = OperationType\n                ,\n                RegistryValue = ObjectValueName\n            | lookup Event4567TypeLookup on EventOriginalSubType\n            | extend EventType = iif(isempty(EventType), \"Other\", EventType)\n            | project\n                TimeGenerated,\n                Computer,\n                EventID,\n                EventType,\n                ActorUsername,\n                ActorDomainName,\n                ActorUserId,\n                ActorSessionId,\n                ActingProcessName,\n                ActingProcessId,\n                RegistryKey,\n                _ResourceId,\n                Type,\n                NewValueType,\n                OldValueType,\n                EventOriginalSubType,\n                OldValue,\n                NewValue,\n                RegistryValue\n        )\n        | lookup RegistryType on $left.NewValueType == $right.TypeCode\n        | project-rename RegistryValueType = TypeName\n        | lookup RegistryType on $left.OldValueType == $right.TypeCode\n        | project-rename RegistryPreviousValueType = TypeName\n        | extend\n            RegistryValueData = iff (EventOriginalSubType == \"%%1906\", OldValue, NewValue)\n            ,\n            RegistryPreviousKey = iff (EventOriginalSubType == \"%%1905\", RegistryKey, \"\")\n            ,\n            RegistryPreviousValue = iff (EventOriginalSubType == \"%%1905\", RegistryValue, \"\")\n            ,\n            RegistryPreviousValueData = iff (EventOriginalSubType == \"%%1905\", OldValue, \"\")\n        | project-away\n            NewValueType,\n            OldValueType,\n            EventOriginalSubType,\n            OldValue,\n            NewValue\n    | invoke _ASIM_ResolveFQDN (\"Computer\")\n    | extend\n        ActorUserIdType = iff (ActorUserId <> \"S-1-0-0\", \"SID\", \"\"),\n        ActorUserId = iff (ActorUserId <> \"S-1-0-0\", ActorUserId, \"\")\n    | project-rename\n        DvcDomainType = DomainType\n        ,\n        DvcHostname = ExtractedHostname\n    | extend\n        DvcFQDN = iif(DvcDomainType == \"FQDN\", FQDN, \"\")\n        ,\n        DvcDomain = iif(isnotempty(Domain), Domain, \"\")\n        ,\n        Dvc = iif(DvcDomainType == \"FQDN\", FQDN, \"DvcHostname\")\n    | extend\n        ActorUserType = _ASIM_GetWindowsUserType(ActorUsername, ActorUserId)\n        ,\n        ActorUsernameType = ASIM_GetAccountType(ActorUserId)\n    | extend\n        User = ActorUsername\n        ,\n        UserId = ActorUserId\n        ,\n        ActorUserSid = ActorUserId\n        ,\n        Process = ActingProcessName\n        ,\n        Dvc = iif(DvcDomainType == \"FQDN\", Computer, \"\")\n        ,\n        EventStartTime = TimeGenerated\n        ,\n        EventEndTime = TimeGenerated\n        ,\n        EventOriginalType = tostring(EventID)\n    | extend\n        EventSchemaVersion = \"0.1\" \n        ,\n        EventSchema = \"RegistryEvent\"\n        ,\n        EventCount = toint(1)\n        ,\n        EventResult = \"Success\"\n        ,\n        EventVendor = \"Microsoft\"\n        ,\n        EventProduct = \"Security Events\" \n        ,\n        DvcOs = \"Windows\"\n        | project-away ActorDomainName,ActorUserSid,ActorUserType,Computer,Domain,DvcDomainType,DvcDomain,DvcFQDN,EventID,FQDN,UserId,_ResourceId\n};\nparser (\n    disabled                 = disabled\n)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
