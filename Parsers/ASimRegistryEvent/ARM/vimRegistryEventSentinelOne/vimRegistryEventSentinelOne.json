{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimRegistryEventSentinelOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Registry Event ASIM Parser for SentinelOne",
        "category": "ASIM",
        "FunctionAlias": "vimRegistryEventSentinelOne",
        "query": "let EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)\n  [\n  \"REGVALUEMODIFIED\", \"RegistryValueSet\",\n  \"REGVALUECREATE\", \"RegistryValueSet\",\n  \"REGKEYCREATE\", \"RegistryKeyCreated\",\n  \"REGKEYDELETE\", \"RegistryKeyDeleted\",\n  \"REGVALUEDELETE\", \"RegistryValueDeleted\",\n  \"REGKEYRENAME\", \"RegistryKeyRenamed\"\n];\nlet RegistryKeyPrefixLookup = datatable (\n    RegistryKeyPrefix: string,\n    RegistryKeyNormalizedPrefix: string\n)\n    [\n    \"MACHINE\", \"HKEY_LOCAL_MACHINE\",\n    \"USER\", \"HKEY_USERS\",\n    \"CONFIG\", \"HKEY_CURRENT_CONFIG\",\n    \"ROOT\", \"HKEY_CLASSES_ROOT\"\n];\nlet RegistryPreviousValueTypeLookup = datatable (\n    alertInfo_registryOldValueType_s: string,\n    RegistryPreviousValueType_lookup: string\n)\n    [\n    \"BINARY\", \"Reg_Binary\",\n    \"DWORD\", \"Reg_DWord\",\n    \"QWORD\", \"Reg_QWord\",\n    \"SZ\", \"Reg_Sz\",\n    \"EXPAND_SZ\", \"Reg_Expand_Sz\",\n    \"MULTI_SZ\", \"Reg_Multi_Sz\",\n    \"DWORD_BIG_ENDIAN\", \"Reg_DWord\"\n];\nlet ThreatConfidenceLookup_undefined = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_undefined: int\n)\n    [\n    \"FALSE_POSITIVE\", 5,\n    \"Undefined\", 15,\n    \"SUSPICIOUS\", 25,\n    \"TRUE_POSITIVE\", 33 \n];\nlet ThreatConfidenceLookup_suspicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_suspicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 40,\n    \"Undefined\", 50,\n    \"SUSPICIOUS\", 60,\n    \"TRUE_POSITIVE\", 67 \n];\nlet ThreatConfidenceLookup_malicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_malicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 75,\n    \"Undefined\", 80,\n    \"SUSPICIOUS\", 90,\n    \"TRUE_POSITIVE\", 100 \n];\nlet parser = (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null),\n    eventtype_in: dynamic=dynamic([]),\n    actorusername_has_any: dynamic=dynamic([]),\n    registrykey_has_any: dynamic =dynamic([]),\n    registryvalue_has_any: dynamic =dynamic([]),\n    registrydata_has_any: dynamic =dynamic([]),\n    dvchostname_has_any: dynamic=dynamic([]),\n    disabled: bool=false\n    ) { \n    let alldata = \n        SentinelOne_CL\n        | where not(disabled)\n        | where (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and ((array_length(actorusername_has_any) == 0) or (sourceProcessInfo_user_s has_any (actorusername_has_any)))\n            and ((array_length(registrydata_has_any) == 0) or (alertInfo_registryValue_s has_any (registrydata_has_any)))\n            and event_name_s == \"Alerts.\"\n            and alertInfo_eventType_s in (\"REGVALUEMODIFIED\", \"REGVALUECREATE\", \"REGKEYCREATE\", \"REGKEYDELETE\", \"REGVALUEDELETE\", \"REGKEYRENAME\")\n        | lookup EventTypeLookup on alertInfo_eventType_s\n        | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))\n        | lookup RegistryPreviousValueTypeLookup on alertInfo_registryOldValueType_s;\n    let undefineddata = alldata\n        | where ruleInfo_treatAsThreat_s == \"UNDEFINED\"\n        | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;\n    let suspiciousdata = alldata\n        | where ruleInfo_treatAsThreat_s == \"Suspicious\"\n        | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;\n    let maliciousdata = alldata\n        | where ruleInfo_treatAsThreat_s == \"Malicious\"\n        | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;\n    union undefineddata, suspiciousdata, maliciousdata\n    | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')\n    | where (array_length(dvchostname_has_any) == 0 or DvcHostname has_any (dvchostname_has_any))\n    | extend RegistryKeyPrefix = tostring(split(alertInfo_registryKeyPath_s, @'\\')[0])\n    | lookup RegistryKeyPrefixLookup on RegistryKeyPrefix\n    | extend RegistryKey = replace_string(alertInfo_registryKeyPath_s, RegistryKeyPrefix, RegistryKeyNormalizedPrefix)\n    | where ((array_length(registrykey_has_any) == 0) or (RegistryKey has_any (registrykey_has_any)))\n    | extend RegistryValue = iff(alertInfo_eventType_s in (\"REGVALUEMODIFIED\", \"REGVALUECREATE\", \"REGVALUEDELETE\"), tostring(split(alertInfo_registryKeyPath_s, @'\\')[-1]), \"\")\n    | where ((array_length(registryvalue_has_any) == 0) or (RegistryValue has_any (registryvalue_has_any)))\n    | extend RegistryValueType = case(\n                                alertInfo_registryValue_s matches regex '^[0-9]+$',\n                                \"Reg_Dword\",\n                                alertInfo_registryValue_s startswith \"0x\" and strlen(alertInfo_registryValue_s) <= 10,\n                                \"Reg_DWord\",\n                                alertInfo_registryValue_s startswith \"0x\" and strlen(alertInfo_registryValue_s) > 10,\n                                \"Reg_QWord\",\n                                alertInfo_registryValue_s matches regex '^[A-Fa-f0-9]+$',\n                                \"Reg_Binary\",\n                                \"\"\n                            )\n    | extend\n        RegistryValueType = iff(alertInfo_eventType_s in (\"REGVALUEMODIFIED\", \"REGVALUECREATE\") and isempty(RegistryValueType), \"Reg_Sz\", RegistryValueType),\n        ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)\n    | project-rename\n        ActingProcessId = sourceProcessInfo_pid_s,\n        ActorUsername = sourceProcessInfo_user_s,\n        EventStartTime= sourceProcessInfo_pidStarttime_t,\n        EventOriginalSeverity = ruleInfo_severity_s,\n        EventUid = _ItemId,\n        ParentProcessId = sourceParentProcessInfo_pid_s,\n        ActingProcessName = sourceProcessInfo_name_s,\n        DvcId = agentDetectionInfo_uuid_g,\n        DvcOs = agentDetectionInfo_osName_s,\n        DvcOsVersion = agentDetectionInfo_osRevision_s,\n        EventOriginalType = alertInfo_eventType_s,\n        ParentProcessName = sourceParentProcessInfo_name_s,\n        RegistryValueData = alertInfo_registryValue_s,\n        EventOriginalUid = alertInfo_dvEventId_s,\n        RuleName = ruleInfo_name_s,\n        ThreatOriginalConfidence = ruleInfo_treatAsThreat_s\n    | extend\n        EventCount = int(1),\n        EventProduct = \"SentinelOne\",\n        EventVendor = \"SentinelOne\",\n        EventResult = \"Success\",\n        DvcAction = \"Allowed\",\n        EventSchema = \"RegistryEvent\",\n        EventSchemaVersion = \"0.1.2\"\n    | extend\n        Dvc = coalesce(DvcHostname, EventProduct), \n        EventEndTime = EventStartTime,\n        EventSeverity = iff(EventOriginalSeverity == \"Critical\", \"High\", EventOriginalSeverity),\n        RegistryPreviousKey = RegistryKey,\n        RegistryPreviousValueData = coalesce(alertInfo_registryOldValue_s, RegistryValueData),\n        RegistryPreviousValueType = coalesce(RegistryPreviousValueType_lookup, RegistryValueType),\n        RegistryPreviousValue = RegistryValue,\n        Process = ActingProcessName,\n        User = ActorUsername,\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        ActorUsernameType =  _ASIM_GetUsernameType(ActorUsername),\n        ActorUserType = _ASIM_GetUserType(ActorUsername, \"\"),\n        Rule = RuleName\n    | project-away \n        *_d,\n        *_s,\n        *_g,\n        *_t,\n        *_b,\n        _ResourceId,\n        Computer,\n        MG,\n        ManagementGroupName,\n        RawData,\n        SourceSystem,\n        TenantId,\n        RegistryKeyPrefix,\n        RegistryKeyNormalizedPrefix,\n        RegistryPreviousValueType_lookup,\n        ThreatConfidence_*\n};\nparser (\n    starttime                = starttime,\n    endtime                  = endtime,\n    eventtype_in             = eventtype_in,\n    actorusername_has_any    = actorusername_has_any,\n    registrykey_has_any = registrykey_has_any,\n    registryvalue_has_any = registryvalue_has_any,\n    registrydata_has_any = registrydata_has_any,\n    dvchostname_has_any= dvchostname_has_any,\n    disabled                 = disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),registrykey_has_any:dynamic=dynamic([]),registryvalue_has_any:dynamic=dynamic([]),registrydata_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
