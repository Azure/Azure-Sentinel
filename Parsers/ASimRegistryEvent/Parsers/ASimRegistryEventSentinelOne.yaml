Parser:
  Title: Registry Event ASIM Parser for SentinelOne
  Version: '0.1.0'
  LastUpdated: Sep 20, 2023
Product:
  Name: SentinelOne
Normalization:
  Schema: RegistryEvent
  Version: '0.1.2'
References:
- Title: ASIM Registry Schema
  Link: https://aka.ms/ASimRegistryEventDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: SentinelOne documentation 
  Link: https://<SOneInstanceDomain>.sentinelone.net/api-doc/overview
Description: |
  This ASIM parser supports normalizing SentinelOne logs to the ASIM Registry Event normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.
ParserName: ASimRegistryEventSentinelOne
EquivalentBuiltInParser: _ASim_RegistryEvent_SentinelOne
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)
  [
      "REGVALUEMODIFIED", "RegistryValueSet",
      "REGVALUECREATE", "RegistryValueSet",
      "REGKEYCREATE", "RegistryKeyCreated",
      "REGKEYDELETE", "RegistryKeyDeleted",
      "REGVALUEDELETE", "RegistryValueDeleted",
      "REGKEYRENAME", "RegistryKeyRenamed"
  ];
  let RegistryKeyPrefixLookup = datatable (
      RegistryKeyPrefix: string,
      RegistryKeyNormalizedPrefix: string
  )
      [
      "MACHINE", "HKEY_LOCAL_MACHINE",
      "USER", "HKEY_USERS",
      "CONFIG", "HKEY_CURRENT_CONFIG",
      "ROOT", "HKEY_CLASSES_ROOT"
  ];
  let RegistryPreviousValueTypeLookup = datatable (
      alertInfo_registryOldValueType_s: string,
      RegistryPreviousValueType_lookup: string
  )
      [
      "BINARY", "Reg_Binary",
      "DWORD", "Reg_DWord",
      "QWORD", "Reg_QWord",
      "SZ", "Reg_Sz",
      "EXPAND_SZ", "Reg_Expand_Sz",
      "MULTI_SZ", "Reg_Multi_Sz",
      "DWORD_BIG_ENDIAN", "Reg_DWord"
  ];
  let ThreatConfidenceLookup_undefined = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_undefined: int
  )
      [
      "FALSE_POSITIVE", 5,
      "Undefined", 15,
      "SUSPICIOUS", 25,
      "TRUE_POSITIVE", 33 
  ];
  let ThreatConfidenceLookup_suspicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_suspicious: int
  )
      [
      "FALSE_POSITIVE", 40,
      "Undefined", 50,
      "SUSPICIOUS", 60,
      "TRUE_POSITIVE", 67 
  ];
  let ThreatConfidenceLookup_malicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_malicious: int
  )
      [
      "FALSE_POSITIVE", 75,
      "Undefined", 80,
      "SUSPICIOUS", 90,
      "TRUE_POSITIVE", 100 
  ];
  let parser = (disabled: bool=false) { 
      let alldata = SentinelOne_CL 
      | where not(disabled)
          and event_name_s == "Alerts."
          and alertInfo_eventType_s in ("REGVALUEMODIFIED", "REGVALUECREATE", "REGKEYCREATE", "REGKEYDELETE", "REGVALUEDELETE", "REGKEYRENAME")
      | lookup EventTypeLookup on alertInfo_eventType_s
      | lookup RegistryPreviousValueTypeLookup on alertInfo_registryOldValueType_s;
      let undefineddata = alldata
      | where ruleInfo_treatAsThreat_s == "UNDEFINED"
      | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;
      let suspiciousdata = alldata
      | where ruleInfo_treatAsThreat_s == "Suspicious"
      | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;
      let maliciousdata = alldata
      | where ruleInfo_treatAsThreat_s == "Malicious"
      | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;
      union undefineddata, suspiciousdata, maliciousdata
      | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')
      | extend RegistryKeyPrefix = tostring(split(alertInfo_registryKeyPath_s, @'\')[0])
      | lookup RegistryKeyPrefixLookup on RegistryKeyPrefix
      | extend RegistryKey = replace_string(alertInfo_registryKeyPath_s, RegistryKeyPrefix, RegistryKeyNormalizedPrefix)
      | extend RegistryValue = iff(alertInfo_eventType_s in ("REGVALUEMODIFIED", "REGVALUECREATE", "REGVALUEDELETE"), tostring(split(alertInfo_registryKeyPath_s, @'\')[-1]), "")
      | extend RegistryValueType = case(
                                  alertInfo_registryValue_s matches regex '^[0-9]+$',
                                  "Reg_Dword",
                                  alertInfo_registryValue_s startswith "0x" and strlen(alertInfo_registryValue_s) <= 10,
                                  "Reg_DWord",
                                  alertInfo_registryValue_s startswith "0x" and strlen(alertInfo_registryValue_s) > 10,
                                  "Reg_QWord",
                                  alertInfo_registryValue_s matches regex '^[A-Fa-f0-9]+$',
                                  "Reg_Binary",
                                  ""
                              )
      | extend RegistryValueType = iff(alertInfo_eventType_s in ("REGVALUEMODIFIED", "REGVALUECREATE") and isempty(RegistryValueType), "Reg_Sz", RegistryValueType),
              ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)
      | project-rename
          ActingProcessId = sourceProcessInfo_pid_s,
          ActorUsername = sourceProcessInfo_user_s,
          EventStartTime= sourceProcessInfo_pidStarttime_t,
          EventOriginalSeverity = ruleInfo_severity_s,
          EventUid = _ItemId,
          ParentProcessId = sourceParentProcessInfo_pid_s,
          ActingProcessName = sourceProcessInfo_name_s,
          DvcId = agentDetectionInfo_uuid_g,
          DvcOs = agentDetectionInfo_osName_s,
          DvcOsVersion = agentDetectionInfo_osRevision_s,
          EventOriginalType = alertInfo_eventType_s,
          ParentProcessName = sourceParentProcessInfo_name_s,
          RegistryValueData = alertInfo_registryValue_s,
          EventOriginalUid = alertInfo_dvEventId_s,
          RuleName = ruleInfo_name_s,
          ThreatOriginalConfidence = ruleInfo_treatAsThreat_s
      | extend
          EventCount = int(1),
          EventProduct = "SentinelOne",
          EventVendor = "SentinelOne",
          EventResult = "Success",
          DvcAction = "Allowed",
          EventSchema = "RegistryEvent",
          EventSchemaVersion = "0.1.2"
      | extend
          Dvc = coalesce(DvcHostname, EventProduct), 
          EventEndTime = EventStartTime,
          EventSeverity = iff(EventOriginalSeverity == "Critical", "High", EventOriginalSeverity),
          RegistryPreviousKey = RegistryKey,
          RegistryPreviousValueData = coalesce(alertInfo_registryOldValue_s, RegistryValueData),
          RegistryPreviousValueType = coalesce(RegistryPreviousValueType_lookup, RegistryValueType),
          RegistryPreviousValue = RegistryValue,
          Process = ActingProcessName,
          User = ActorUsername,
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          ActorUsernameType =  _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
          Rule = RuleName
      | project-away 
          *_d,
          *_s,
          *_g,
          *_t,
          *_b,
          _ResourceId,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          RegistryKeyPrefix,
          RegistryKeyNormalizedPrefix,
          RegistryPreviousValueType_lookup,
          ThreatConfidence_*
  };
  parser(disabled = disabled)