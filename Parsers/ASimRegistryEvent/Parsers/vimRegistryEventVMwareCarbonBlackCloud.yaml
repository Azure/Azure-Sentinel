Parser:
  Title: Registry Event ASIM Parser for VMware Carbon Black Cloud
  Version: '0.1.1'
  LastUpdated: Oct 10, 2023
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: RegistryEvent
  Version: '0.1.2'
References:
- Title: ASIM Registry Schema
  Link: https://aka.ms/ASimRegistryEventDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation 
  Link: https://developer.carbonblack.com/reference/carbon-black-cloud/
        https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Registry Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimRegistryEventVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_RegistryEvent_VMwareCarbonBlackCloud
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: registrykey_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: registryvalue_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: registryvaluedata_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventTypeLookup = datatable (temp_action: string, EventType: string)
    [
      "ACTION_WRITE_VALUE", "RegistryValueSet",
      "ACTION_CREATE_KEY", "RegistryKeyCreated",
      "ACTION_DELETE_KEY", "RegistryKeyDeleted",
      "ACTION_DELETE_VALUE", "RegistryValueDeleted",
      "ACTION_RENAME_KEY", "RegistryKeyRenamed"
  ];
  let RegistryKeyPrefixLookup = datatable(
      RegistryKeyPrefix: string,
      RegistryKeyNormalizedPrefix: string
  )[
      "HKLM", "HKEY_LOCAL_MACHINE",
      "HKU", "HKEY_USERS",
      "HKCU", "HKEY_CURRENT_USER",
      "HKCR", "HKEY_CLASSES_ROOT",
      "HKCC", "HKEY_CURRENT_CONFIG"
  ];
  let actionvalues = dynamic(["ACTION_WRITE_VALUE", "ACTION_CREATE_KEY", "ACTION_DELETE_KEY", "ACTION_DELETE_VALUE", "ACTION_RENAME_KEY"]);
  let parser=(
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      eventtype_in: dynamic=dynamic([]), 
      actorusername_has_any: dynamic=dynamic([]), 
      registrykey_has_any: dynamic=dynamic([]), 
      registryvalue_has_any: dynamic=dynamic([]), 
      registryvaluedata_has_any: dynamic=dynamic([]), 
      dvchostname_has_any: dynamic=dynamic([]), 
      disabled: bool=false
      ) {
      CarbonBlackEvents_CL
      | where not(disabled)
      | where ((isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime))
          and eventType_s == "endpoint.event.regmod"
          and isnotempty(regmod_name_s)
      | where array_length(registryvalue_has_any) == 0
          and array_length(registryvaluedata_has_any) == 0
          and (array_length(actorusername_has_any) == 0 or process_username_s has_any (actorusername_has_any))
          and (array_length(dvchostname_has_any) == 0 or device_name_s has_any (dvchostname_has_any))
      | extend
          temp_action = case(
                    action_s has "|" and action_s has "delete",
                    "ACTION_DELETE_KEY",
                    action_s has "|" and action_s !has "delete",
                    "ACTION_CREATE_KEY",
                    action_s
                ),
          RegistryKeyPrefix = tostring(split(regmod_name_s, @'\')[0])
      | where temp_action in (actionvalues)
      | lookup EventTypeLookup on temp_action
      | lookup RegistryKeyPrefixLookup on RegistryKeyPrefix
      | extend RegistryKey = replace_string(regmod_name_s, RegistryKeyPrefix, RegistryKeyNormalizedPrefix)
      | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
          and (array_length(registrykey_has_any) == 0 or RegistryKey has_any (registrykey_has_any))
      | extend
          ActingProcessId = tostring(toint(process_pid_d)),
          EventStartTime = todatetime(split(createTime_s, '+')[0]),
          ParentProcessId = tostring(toint(parent_pid_d)),
          AdditionalFields = bag_pack(
                        "process_guid", process_guid_s,
                        "parent_guid", parent_guid_s 
                    )
      | project-rename
          ActorUsername = process_username_s,
          DvcIpAddr = device_external_ip_s,
          DvcScope = device_group_s,
          EventUid = _ItemId,
          ActingProcessName = process_path_s,
          DvcId = device_id_s,
          DvcOs = device_os_s,
          EventMessage = event_description_s,
          EventOriginalType = action_s,
          EventOriginalUid = event_id_g,
          EventOwner = event_origin_s,
          ParentProcessName = processDetails_parentName_s,
          ActorScopeId = org_key_s
      | invoke _ASIM_ResolveDvcFQDN('device_name_s')
      | extend
          EventCount = toint(1),
          EventProduct = "Carbon Black Cloud",
          EventVendor = "VMware",
          EventResult = "Success",
          DvcAction = "Allowed",
          EventSchema = "RegistryEvent",
          EventSchemaVersion = "0.1.2"
      | extend
          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          EventEndTime = EventStartTime,
          Process = ActingProcessName,
          User = ActorUsername,
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, "")
      | project-away
          *_d,
          *_s,
          *_g,
          *_b,
          temp_action,
          _ResourceId,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          RegistryKeyPrefix,
          RegistryKeyNormalizedPrefix
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      eventtype_in=eventtype_in, 
      actorusername_has_any=actorusername_has_any, 
      registrykey_has_any=registrykey_has_any, 
      registryvalue_has_any=registryvalue_has_any, 
      registryvaluedata_has_any=registryvaluedata_has_any, 
      dvchostname_has_any=dvchostname_has_any, 
      disabled = disabled
  )