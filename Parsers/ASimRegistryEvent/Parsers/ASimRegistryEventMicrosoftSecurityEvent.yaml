Parser:
    Title: Registry Event ASIM parser for Microsoft Windows Events (registry creation event)
    Version: "0.3.1"
    LastUpdated: Jun 18, 2024
Product:
    Name: Security Events
Normalization:
    Schema: RegistryEvent
    Version: "0.1.2"
References:
    - Title: ASIM Registry Schema
      Link: https://aka.ms/ASimRegistryEventDoc
    - Title: ASIM
      Link: https://aka.ms/AboutASIM
    - Title: Reference for access rights
      Link: https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights
Description: |
    This ASIM parser supports normalizing Microsoft Windows events (event numbers 4657 and 4663), logs ingested in 'SecurityEvent' table to the ASIM Registry Event normalized schema.
ParserName: ASimRegistryEventMicrosoftSecurityEvent
EquivalentBuiltInParser: _ASim_RegistryEvent_MicrosoftSecurityEvent
ParserParams:
    - Name: disabled
      Type: bool
      Default: false
ParserQuery: |
    let parser = (
    disabled: bool=false
    ) {
    let ASIM_GetAccountType = (sid: string) { 
    iif ( 
    sid in ("S-1-0-0", "S-1-5-18", "S-1-5-19", "S-1-5-20"),
    "Simple"
        ,
    "Windows"
    )
    };
        let ASIM_ParseSecurityEvents = (SecurityEvent: (SubjectDomainName: string, SubjectUserName: string, ProcessId: string, ObjectName: string, SubjectUserSid: string, SubjectLogonId: string, ProcessName: string)) {
        SecurityEvent
            | project-rename
                ActorUsername = SubjectUserName
                ,
                ActorUserId = SubjectUserSid
                ,
                ActorSessionId = SubjectLogonId
                ,
                ActingProcessName = ProcessName
                ,
                ActorDomainName = SubjectDomainName
            | extend
                ActorUsername = iif(isnotempty(ActorDomainName), strcat(ActorDomainName, @'\', ActorUsername), ActorUsername)
                ,
                ActingProcessId = tostring(toint(tolong(ProcessId)))
                ,
                RegistryKey = iif(
                    ObjectName startswith @"\REGISTRY\MACHINE",
                    replace_string(ObjectName, @"\REGISTRY\MACHINE", "HKEY_LOCAL_MACHINE")
                ,
                    replace_string(ObjectName, @"\REGISTRY\USER", "HKEY_USERS")
                )
    };
        let Event4663TypeLookup = datatable (AccessMask: string, EventType: string)
            [
        "0x1", "RegistryValueRead"
            ,
        "0x10", "RegistryKeyNotify"
            ,
        "0x10000", "RegistryKeyDeleted"
            ,
        "0x2", "RegistryValueSet"
            ,
        "0x20000", "MetadataAccessed"
            ,
        "0x20006", "RegistryValueSet"
            ,
        "0x40000", "MetadataModified"
            ,
        "0x8", "RegistrySubkeyEnumerated"
    ];
        let Event4567TypeLookup = datatable (EventOriginalSubType: string, EventType: string)
            [
        "%%1904", "RegistryValueSet"
            ,
        "%%1905", "RegistryValueSet"
            ,
        "%%1906", "RegistryValueDeleted"
    ];
        let RegistryType = datatable (TypeCode: string, TypeName: string)
            [
        "%%1872", "REG_NONE"
            ,
        "%%1873", "REG_SZ"
            ,
        "%%1874", "REG_EXPAND_SZ"
            ,
        "%%1875", "REG_BINARY"
            ,
        "%%1876", "REG_DWORD"
            ,
        "%%1879", "REG_MULTI_SZ"
            ,
        "%%1883", "REG_QWORD"
    ];
        union isfuzzy=false
            (
            SecurityEvent
            | where not(disabled)
            | where EventID == 4663 and ObjectType == "Key"
            | lookup Event4663TypeLookup on AccessMask
            | extend EventType = iif(isempty(EventType), "Other", EventType)
            | invoke ASIM_ParseSecurityEvents()
            | project
                TimeGenerated,
                Computer,
                EventID,
                EventType,
                ActorUsername,
                ActorDomainName,
                ActorUserId,
                ActorSessionId,
                ActingProcessName,
                ActingProcessId,
                RegistryKey,
                _ResourceId,
                Type
            ),
            (
                SecurityEvent
                | where not(disabled)
                | where EventID == 4657
                | invoke ASIM_ParseSecurityEvents()
                | extend
                    EventOriginalSubType = OperationType
                    ,
                    RegistryValue = ObjectValueName
                | lookup Event4567TypeLookup on EventOriginalSubType
                | extend EventType = iif(isempty(EventType), "Other", EventType)
                | project
                    TimeGenerated,
                    Computer,
                    EventID,
                    EventType,
                    ActorUsername,
                    ActorDomainName,
                    ActorUserId,
                    ActorSessionId,
                    ActingProcessName,
                    ActingProcessId,
                    RegistryKey,
                    _ResourceId,
                    Type,
                    NewValueType,
                    OldValueType,
                    EventOriginalSubType,
                    OldValue,
                    NewValue,
                    RegistryValue
            )
            | lookup RegistryType on $left.NewValueType == $right.TypeCode
            | project-rename RegistryValueType = TypeName
            | lookup RegistryType on $left.OldValueType == $right.TypeCode
            | project-rename RegistryPreviousValueType = TypeName
            | extend
                RegistryValueData = iff (EventOriginalSubType == "%%1906", OldValue, NewValue)
                ,
                RegistryPreviousKey = iff (EventOriginalSubType == "%%1905", RegistryKey, "")
                ,
                RegistryPreviousValue = iff (EventOriginalSubType == "%%1905", RegistryValue, "")
                ,
                RegistryPreviousValueData = iff (EventOriginalSubType == "%%1905", OldValue, "")
            | project-away
                NewValueType,
                OldValueType,
                EventOriginalSubType,
                OldValue,
                NewValue
        | invoke _ASIM_ResolveFQDN ("Computer")
        | extend
            ActorUserIdType = iff (ActorUserId <> "S-1-0-0", "SID", ""),
            ActorUserId = iff (ActorUserId <> "S-1-0-0", ActorUserId, "")
        | project-rename
            DvcDomainType = DomainType
            ,
            DvcHostname = ExtractedHostname
        | extend
            DvcFQDN = iif(DvcDomainType == "FQDN", FQDN, "")
            ,
            DvcDomain = iif(isnotempty(Domain), Domain, "")
            ,
            Dvc = iif(DvcDomainType == "FQDN", FQDN, "DvcHostname")
        | extend
            ActorUserType = _ASIM_GetWindowsUserType(ActorUsername, ActorUserId)
            ,
            ActorUsernameType = ASIM_GetAccountType(ActorUserId)
        | extend
            User = ActorUsername
            ,
            UserId = ActorUserId
            ,
            ActorUserSid = ActorUserId
            ,
            Process = ActingProcessName
            ,
            Dvc = iif(DvcDomainType == "FQDN", Computer, "")
            ,
            EventStartTime = TimeGenerated
            ,
            EventEndTime = TimeGenerated
            ,
            EventOriginalType = tostring(EventID)
        | extend
            EventSchemaVersion = "0.1" 
            ,
            EventSchema = "RegistryEvent"
            ,
            EventCount = toint(1)
            ,
            EventResult = "Success"
            ,
            EventVendor = "Microsoft"
            ,
            EventProduct = "Security Events" 
            ,
            DvcOs = "Windows"
            | project-away ActorDomainName,ActorUserSid,ActorUserType,Computer,Domain,DvcDomainType,DvcDomain,DvcFQDN,EventID,FQDN,UserId,_ResourceId
    };
    parser (
        disabled                 = disabled
    )