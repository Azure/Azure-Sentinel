{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionIllumioSaaSCore')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "NetworkSession ASIM Parser for Illumio SaaS Core",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionIllumioSaaSCore",
        "query": "let ProtocolLookup = datatable(proto:int, NetworkProtocol:string) [\n      0,\"HOPOPT\",\n      1,\"ICMP\",\n      2,\"IGMP\",\n      3,\"GGP\",\n      4,\"IPv4\",\n      5,\"ST\",\n      6,\"TCP\",\n      7,\"CBT\",\n      8,\"EGP\",\n      9,\"IGP\",\n      10,\"BBN-RCC-MON\",\n      11,\"NVP-II\",\n      12,\"PUP\",\n      13,\"ARGUS (deprecated)\",\n      14,\"EMCON\",\n      15,\"XNET\",\n      16,\"CHAOS\",\n      17,\"UDP\",\n      18,\"MUX\",\n      19,\"DCN-MEAS\",\n      20,\"HMP\",\n      21,\"PRM\",\n      22,\"XNS-IDP\",\n      23,\"TRUNK-1\",\n      24,\"TRUNK-2\",\n      25,\"LEAF-1\",\n      26,\"LEAF-2\",\n      27,\"RDP\",\n      28,\"IRTP\",\n      29,\"ISO-TP4\",\n      30,\"NETBLT\",\n      31,\"MFE-NSP\",\n      32,\"MERIT-INP\",\n      33,\"DCCP\",\n      34,\"3PC\",\n      35,\"IDPR\",\n      36,\"XTP\",\n      37,\"DDP\",\n      38,\"IDPR-CMTP\",\n      39,\"TP++\",\n      40,\"IL\",\n      41,\"IPv6\",\n      42,\"SDRP\",\n      43,\"IPv6-Route\",\n      44,\"IPv6-Frag\",\n      45,\"IDRP\",\n      46,\"RSVP\",\n      47,\"GRE\",\n      48,\"DSR\",\n      49,\"BNA\",\n      50,\"ESP\",\n      51,\"AH\",\n      52,\"I-NLSP\",\n      53,\"SWIPE (deprecated)\",\n      54,\"NARP\",\n      55,\"MOBILE\",\n      56,\"TLSP\",\n      57,\"SKIP\",\n      58,\"IPv6-ICMP\",\n      59,\"IPv6-NoNxt\",\n      60,\"IPv6-Opts\",\n      61,\"\",\n      62,\"CFTP\",\n      63,\"\",\n      64,\"SAT-EXPAK\",\n      65,\"KRYPTOLAN\",\n      66,\"RVD\",\n      67,\"IPPC\",\n      68,\"\",\n      69,\"SAT-MON\",\n      70,\"VISA\",\n      71,\"IPCV\",\n      72,\"CPNX\",\n      73,\"CPHB\",\n      74,\"WSN\",\n      75,\"PVP\",\n      76,\"BR-SAT-MON\",\n      77,\"SUN-ND\",\n      78,\"WB-MON\",\n      79,\"WB-EXPAK\",\n      80,\"ISO-IP\",\n      81,\"VMTP\",\n      82,\"SECURE-VMTP\",\n      83,\"VINES\",\n      84,\"TTP\",\n      84,\"IPTM\",\n      85,\"NSFNET-IGP\",\n      86,\"DGP\",\n      87,\"TCF\",\n      88,\"EIGRP\",\n      89,\"OSPFIGP\",\n      90,\"Sprite-RPC\",\n      91,\"LARP\",\n      92,\"MTP\",\n      93,\"AX.25\",\n      94,\"IPIP\",\n      95,\"MICP (deprecated)\",\n      96,\"SCC-SP\",\n      97,\"ETHERIP\",\n      98,\"ENCAP\",\n      99,\"\",\n      100,\"GMTP\",\n      101,\"IFMP\",\n      102,\"PNNI\",\n      103,\"PIM\",\n      104,\"ARIS\",\n      105,\"SCPS\",\n      106,\"QNX\",\n      107,\"A/N\",\n      108,\"IPComp\",\n      109,\"SNP\",\n      110,\"Compaq-Peer\",\n      111,\"IPX-in-IP\",\n      112,\"VRRP\",\n      113,\"PGM\",\n      114,\"\",\n      115,\"L2TP\",\n      116,\"DDX\",\n      117,\"IATP\",\n      118,\"STP\",\n      119,\"SRP\",\n      120,\"UTI\",\n      121,\"SMP\",\n      122,\"SM (deprecated)\",\n      123,\"PTP\",\n      124,\"ISIS over IPv4\",\n      125,\"FIRE\",\n      126,\"CRTP\",\n      127,\"CRUDP\",\n      128,\"SSCOPMCE\",\n      129,\"IPLT\",\n      130,\"SPS\",\n      131,\"PIPE\",\n      132,\"SCTP\",\n      133,\"FC\",\n      134,\"RSVP-E2E-IGNORE\",\n      135,\"Mobility Header\",\n      136,\"UDPLite\",\n      137,\"MPLS-in-IP\",\n      138,\"manet\",\n      139,\"HIP\",\n      140,\"Shim6\",\n      141,\"WESP\",\n      142,\"ROHC\",\n      143,\"Ethernet\",\n      253,\"\",\n      254,\"\",\n      255,\"Reserved\"\n    ];\nlet NetworkProtocolVersionLookup = datatable(version: int, NetworkProtocolVersion: string)\n[\n  4,\"IPv4\",\n  6,\"IPv6\"\n];\nlet EventResultLookup = datatable(DvcAction: string, EventResult: string)\n[\n  \"Deny\", \"Failure\",\n  \"Allow\", \"Success\"\n];\nlet DvcActionLookup = datatable(pd: int, DvcAction: string)\n[\n// - Allow\n// - Deny\n// - Drop\n// - Drop ICMP\n// - Reset\n// - Reset Source\n// - Reset Destination\n// - Encrypt\n// - Decrypt\n// - VPNroute\n  2, \"Deny\",\n  1, \"Allow\",\n  0, \"Allow\"\n];\nlet ClassLookup = datatable(class: string, ClassDetail: string)\n[\n  \"M\", \"Multicast\",\n  \"B\", \"Broadcast\",\n  \"U\", \"Unicast\"\n];\nlet parser=(disabled:bool=false){\n  Illumio_Flow_Events_CL \n  | where not(disabled)\n  | lookup ProtocolLookup on proto\n  | lookup NetworkProtocolVersionLookup on version\n  | lookup DvcActionLookup on pd //set DvcAction\n  | extend EventResult = iff(DvcAction == \"Deny\", \"Failure\", \"Success\")\n  | lookup ClassLookup on class\n  | extend\n      EventCount = flow_count,\n      EventStartTime = TimeGenerated, \n      EventEndTime= TimeGenerated,\n      EventType = 'Flow',\n      EventProduct = 'Core',\n      EventVendor = 'Illumio',\n      EventSchemaVersion = '0.2.6',\n      EventSchema = 'NetworkSession',\n      Dvc = pce_fqdn    \n  | extend NetworkDirection = case(\n      dir=='I', 'Inbound',\n      dir=='O', 'Outbound',\n      'Unknown'\n  ),\n      NetworkDuration = interval_sec,\n      DstBytes = tolong(dst_dbo),\n      SrcBytes = tolong(dst_dbi),\n      DstIpAddr = dst_ip,\n      SrcIpAddr = src_ip,\n      DstPortNumber = dst_port,\n      DstHostname = dst_hostname,\n      SrcHostname = src_hostname,\n      EventSeverity = case( \n          DvcAction=='Deny', 'Low',\n          'Informational'        \n      )\n  | extend \n    SrcProcessName = iif(dir=='O', pn, ''),\n    DstProcessName = iif(dir=='I', pn, ''),\n    SrcUsername = iif(dir=='O', un, ''),\n    DstUsername = iif(dir=='I', un, '')\n  | extend\n    SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n    DstUsernameType = _ASIM_GetUsernameType(DstUsername)\n  //Aliases\n  | extend \n      DvcIpAddr = SrcIpAddr,\n      DvcHostname = SrcHostname\n  | extend\n      AdditionalFields = bag_pack(\"Class\", ClassDetail,\n      \"Network\",network,\n      \"Source_Labels\", src_labels,\n      \"Dest_Labels\", dst_labels,\n      \"Src_href\", src_href, // can this be stored in SrcId instead?\n      \"Dst_href\", dst_href // can this be stored in DvcId instead?\n      // need to add SN here\n      )\n  // aliases    \n  | extend\n      Duration = NetworkDuration,\n      User = DstUsername,\n      Hostname = DstHostname,\n      IpAddr = SrcIpAddr,\n      EventUid = _ItemId\n  | project-away \n      code,\n      icmp_type,\n      dst_dbi,\n      dst_dbo,\n      dst_tbi,\n      dst_tbo,\n      pce_fqdn,\n      proto,\n      dst_port,\n      src_ip,\n      dst_ip,\n      dst_hostname,\n      src_hostname,\n      dir,\n      flow_count,\n      src_href,\n      dst_href,\n      src_labels,\n      dst_labels,\n      network,\n      class,\n      org_id,\n      state, // decide how to use this\n      pd_qualifier, //decide how to use this\n      interval_sec,\n      version,\n      ddms, // not needed\n      tdms, // not needed\n      pn, \n      un,\n      pd,\n      ClassDetail,\n      TenantId\n};\nparser(disabled=disabled)\n",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}