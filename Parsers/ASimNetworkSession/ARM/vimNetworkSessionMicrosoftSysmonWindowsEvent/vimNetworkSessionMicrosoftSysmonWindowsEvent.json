{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionMicrosoftSysmonWindowsEvent')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session Event ASIM parser for Sysmon (Event 3)",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionMicrosoftSysmonWindowsEvent",
        "query": "let parser = (\nstarttime: datetime=datetime(null), \nendtime: datetime=datetime(null), \nsrcipaddr_has_any_prefix: dynamic=dynamic([]), \ndstipaddr_has_any_prefix: dynamic=dynamic([]), \nipaddr_has_any_prefix: dynamic=dynamic([]),\ndstportnumber: int=int(null), \nhostname_has_any: dynamic=dynamic([]), \ndvcaction: dynamic=dynamic([]), \neventresult: string='*', \ndisabled: bool=false\n) {\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\nlet Sysmon3_WindowsEvent=WindowsEvent\n    | where not(disabled) \n    | where (isnull(starttime) or TimeGenerated >= starttime) \n      and (isnull(endtime) or TimeGenerated <= endtime)\n    // -- Pre-filtering:\n    | where (eventresult == '*' or eventresult == 'Success') \n        and array_length(dvcaction) == 0\n        // dstportnumber filter used later in the parser\n        // hostname_has_any used later in the parser \n    // -- End pre-filtering\n    | where Provider == \"Microsoft-Windows-Sysmon\" and EventID == 3\n    | extend\n        SourceIp = tostring(EventData.SourceIp),\n        DestinationIp = tostring(EventData.DestinationIp),\n        DstHostname = tostring(EventData.DestinationHostname),\n        SrcHostname = tostring(EventData.SrcHostname),\n        RuleName = tostring(EventData.RuleName),\n        UtcTime = todatetime(EventData.UtcTime),\n        ProcessId = tostring(EventData.ProcessId),\n        Image = tostring(EventData.Image),\n        User = tostring(EventData.User),\n        Protocol = tostring(EventData.Protocol),\n        Initiated = tobool(EventData.Initiated), // Initiated indicates the process initiated a connection (meaning outbound)\n        SourceIsIpv6 = tobool(EventData.SourceIsIpv6),\n        SourcePort = toint(EventData.SourcePort),\n        SourcePortName = tostring(EventData.SourcePortName),\n        DestinationIsIpv6 = tobool(EventData.DestinationIsIpv6),\n        DestinationPort = toint(EventData.DestinationPort),\n        DestinationPortName = tostring(EventData.DestinationPortName)\n    | where (array_length(ip_any) == 0 \n        or has_any_ipv4_prefix(EventData, ip_any)\n        ) \n        and (isnull(dstportnumber)) or dstportnumber == DestinationPort\n        and (array_length(hostname_has_any) == 0) or SrcHostname has_any (hostname_has_any) or DstHostname has_any (hostname_has_any)\n    | extend\n        temp_isSrcMatch=has_any_ipv4_prefix(SourceIp, src_or_any)\n        ,\n        temp_isDstMatch=has_any_ipv4_prefix(DestinationIp, dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n                              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                              \"-\" // match not requested: probably most common case\n        ,\n                              (temp_isSrcMatch and temp_isDstMatch),\n                              \"Both\" // has to be checked before the individual \n        ,\n                              temp_isSrcMatch,\n                              \"SrcIpAddr\"\n        ,\n                              temp_isDstMatch,\n                              \"DstIpAddr\"\n        ,\n                              \"No match\"\n                          )\n    | where ASimMatchingIpAddr != \"No match\"\n    | parse EventData.ProcessGuid with \"{\" ProcessGuid \"}\"\n    | project-away EventData\n    | project-away\n        Provider,\n        Channel,\n        Task,\n        Data,\n        RawEventData,\n        EventOriginId;\nSysmon3_WindowsEvent\n| extend\n    AppName = tostring(split(Image, \"\\\\\")[-1])\n| extend\n    SrcUsernameType = iff(not(Initiated), \"Windows\", \"\"),\n    SrcUsername = iff(not(Initiated), tostring(User), \"\"),\n    SrcProcessId = iff(not(Initiated), tostring(ProcessId), \"\"),\n    SrcProcessGuid = iff(not(Initiated), ProcessGuid, \"\"),\n    SrcProcessName = iff(not(Initiated), tostring(Image), \"\"),\n    SrcAppName = iff(not(Initiated), AppName, \"\"),\n    SrcAppType = iff(not(Initiated), 'Process', \"\"),\n    DstUsernameType = iff(Initiated, \"Windows\", \"\"),\n    DstUsername = iff(Initiated, tostring(User), \"\"),\n    DstProcessId = iff(Initiated, tostring(ProcessId), \"\"),\n    DstProcessGuid = iff(Initiated, ProcessGuid, \"\"),\n    DstProcessName = iff(Initiated, tostring(Image), \"\"),\n    DstAppName = iff(Initiated, AppName, \"\"),\n    DstAppType = iff(Initiated, 'Process', \"\")\n| project-away ProcessId, ProcessGuid, Image, AppName\n| project-rename \n    EventStartTime = UtcTime,\n    Dvc = Computer,\n    SrcIpAddr = SourceIp,\n    DstIpAddr  = DestinationIp,\n    DstPortNumber = DestinationPort,\n    SrcPortNumber = SourcePort,\n    NetworkRuleName = RuleName \n| extend \n    EventEndTime = EventStartTime,\n    Hostname = case(\n           Initiated,\n           DstHostname,\n           not(Initiated),\n           SrcHostname,\n           Dvc\n       ),\n    Src = SrcIpAddr,\n    Dst = DstIpAddr,\n    DvcIpAddr = iff(Initiated, SrcIpAddr, DstIpAddr),\n    IpAddr = SrcIpAddr,\n    EventType = 'EndpointNetworkSession',\n    EventCount = int(1),\n    EventVendor = 'Microsoft',\n    EventSchemaVersion = '0.2.5',\n    EventSchema = 'NetworkSession', \n    EventProduct = 'Sysmon',\n    EventResult = 'Success',\n    EventSeverity = 'Informational',\n    DvcOs = 'Windows',\n    Protocol = toupper(Protocol),\n    EventOriginalType = '3' // Set with a constant value to avoid parsing   \n| extend\n    DvcHostname = Hostname\n| extend\n    SrcHostname = iff(SrcHostname == \"-\", \"\", SrcHostname),\n    DvcHostname = iff(DvcHostname == \"-\", \"\", DvcHostname),\n    DstHostname = iff(DstHostname == \"-\", \"\", DstHostname) // let's make empty values actually empty\n| project-rename\n    TmpSrcHostname = SrcHostname,\n    TmpDvcHostname = DvcHostname,\n    TmpDstHostname = DstHostname\n| invoke \n    _ASIM_ResolveSrcFQDN('TmpSrcHostname')\n| invoke \n    _ASIM_ResolveDvcFQDN('TmpDvcHostname')\n| invoke \n    _ASIM_ResolveDstFQDN('TmpDstHostname')\n| project-away\n    TmpSrcHostname,\n    TmpDvcHostname,\n    TmpDstHostname\n| extend                         \n    NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), \"IPV6\", \"IPV4\"),\n    NetworkProtocol = toupper(Protocol)\n| project-away \n    Destination*,\n    Initiated,\n    ManagementGroupName,\n    TenantId,\n    Protocol,\n    Source*,\n    EventID,\n    EventLevelName,\n    EventLevel,\n    Correlation,\n    EventRecordId,\n    Keywords,\n    Opcode,\n    SystemProcessId,\n    SystemThreadId,\n    SystemUserId,\n    TimeCreated,\n    _ResourceId,\n    Version\n};\n  parser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix,dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),dvcaction:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
