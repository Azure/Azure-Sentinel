{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session  ASIM filtering parser for Microsoft Sentinel native Network Session table",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionNative",
        "query": "let parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  dstportnumber:int=int(null), \n  hostname_has_any:dynamic=dynamic([]), \n  dvcaction:dynamic=dynamic([]), \n  eventresult:string='*', \n  disabled:bool=false)\n{\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  ASimNetworkSessionLogs  \n  | where (isnull(starttime) or TimeGenerated>=starttime)\n    and (isnull(endtime) or TimeGenerated<=endtime)\n    and not(disabled)\n    and (isnull(dstportnumber) or DstPortNumber==dstportnumber)\n    and (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\n    and (eventresult == \"*\" or eventresult==EventResult)\n  | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n         , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n  | extend ASimMatchingIpAddr=case(\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n      temp_SrcMatch and temp_DstMatch, \"Both\",\n      temp_SrcMatch, \"SrcIpAddr\",\n      temp_DstMatch, \"DstIpAddr\",\n      \"No match\"\n    )\n  | where ASimMatchingIpAddr != \"No match\" \n  | project-away temp_*\n  |extend ASimMatchingHostname = case(\n      array_length(hostname_has_any) == 0 ,\"\",\n      SrcHostname has_any(hostname_has_any), \"SrcHostname\",\n      DstHostname has_any(hostname_has_any), \"DstHostname\",\n      \"No match\"\n    )\n  | where ASimMatchingHostname != \"No match\"\n  | project-rename\n        EventUid = _ItemId\n  | extend \n      EventSchema = \"NetworkSession\",\n      DvcScopeId = iff(isempty(DvcSubscriptionId), _SubscriptionId, DvcSubscriptionId)\n  //  -- Aliases\n  | extend\n      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),\n      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),\n      Dvc = case(EventType == 'L2NetworkSession',\n              coalesce (DvcFQDN, DvcHostname, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),\n              coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct))\n      ),\n      Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),\n      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),\n      DvcInterface = iff(isempty(DvcInterface), coalesce(DvcInboundInterface, DvcOutboundInterface), DvcInterface),\n      Hostname = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), SrcHostname, DstHostname),\n      IpAddr = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), DstIpAddr, SrcIpAddr),\n      Rule = coalesce(NetworkRuleName, tostring(NetworkRuleNumber)),\n      Duration = NetworkDuration,\n      SessionId = NetworkSessionId,\n      User = DstUsername,\n      InnerVlanId = SrcVlanId,\n      OuterVlanId = DstVlanId\n  | project-away\n        TenantId, SourceSystem, DvcSubscriptionId, _SubscriptionId, _ResourceId\n};\nparser (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n  dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n  dstportnumber=dstportnumber, \n  hostname_has_any=hostname_has_any, \n  dvcaction=dvcaction,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
