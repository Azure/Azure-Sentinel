{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionMicrosoft365Defender')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for M365 Defender for Endpoint",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionMicrosoft365Defender",
        "query": "let M365Defender=\n  (starttime:datetime=datetime(null)\n  , endtime:datetime=datetime(null)\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\n  , ipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstportnumber:int=int(null)\n  , hostname_has_any:dynamic=dynamic([])\n  , dvcaction:dynamic=dynamic([])\n  , eventresult:string='*'\n  , disabled:bool=false\n ){\nlet DirectionLookup=datatable(ActionType:string,NetworkDirection:string,Outbound:boolean)[\n  'ConnectionSuccess','Outbound', true\n  ,'ConnectionFailed', 'Outbound', true\n  ,'ConnectionRequest','Outbound', true\n  ,'InboundConnectionAccepted', 'Inbound', false\n  ,'ConnectionFound', 'Unknown', false\n  ,'ListeningConnectionCreated', 'Listen', false \n];\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \n// -- Common preprocessing to both input and outbound events\nlet RawNetworkEvents = (select_outbound:boolean) {\n  DeviceNetworkEvents \n  | where    (isnull(starttime) or TimeGenerated>=starttime) \n         and (isnull(endtime) or TimeGenerated<=endtime) \n  | where not(disabled)\n  | lookup DirectionLookup on ActionType\n  | where Outbound == select_outbound\n  | project-away AppGuardContainerId, LocalIPType, MachineGroup, RemoteIPType, Timestamp // , SourceSystem, TenantId, \n  // --  Pre-filtering\n  |where  (array_length(dvcaction)==0 )     /// if filtered by action return nothing\n         and (isnull(dstportnumber) or dstportnumber == LocalPort or dstportnumber == RemotePort)\n         and (array_length(hostname_has_any)==0 \n            or RemoteUrl has_any(hostname_has_any) or DeviceName has_any(hostname_has_any)\n            )\n  | extend temp_isSrcMatch=( // only one of each pair has_any_ipv4_prefix is calculated\n                  (Outbound and has_any_ipv4_prefix(LocalIP,src_or_any))\n                  or\n                  (not(Outbound) and has_any_ipv4_prefix(RemoteIP,src_or_any))\n                  ) \n         , temp_isDstMatch=(\n                  (not(Outbound) and has_any_ipv4_prefix(LocalIP,dst_or_any))\n                  or\n                  (Outbound and has_any_ipv4_prefix(RemoteIP,dst_or_any))\n                  ) \n  | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n  ) \n  | where ASimMatchingIpAddr != \"No match\"\n  | project-away temp_*\n  | extend EventResult = iff(ActionType=='ConnectionFailed','Failure','Success')\n  | where (eventresult=='*' or EventResult==eventresult)\n  // -- End of pre-filtering\n  | extend\n    // Event\n    EventOriginalUid = tostring(ReportId),\n    EventCount = int(1),\n    EventProduct = 'M365 Defender for Endpoint',\n    EventVendor = 'Microsoft',\n    EventSchema = 'NetworkSession',\n    EventSchemaVersion = '0.2.3',\n    EventStartTime = TimeGenerated,\n    EventEndTime = TimeGenerated,\n    EventType = 'NetworkSession',\n    EventSeverity = \"Informational\",\n    DvcIdType = 'MDEid'\n  | project-away \n      ReportId, Outbound\n  | project-rename \n      EventOriginalResultDetails = ActionType\n  | extend\n    RemoteUrl = extract (@\"(?:https?://)?(.*)\", 1, RemoteUrl)\n  | extend\n    User = iff (InitiatingProcessAccountDomain == '', InitiatingProcessAccountName, strcat(InitiatingProcessAccountDomain, '\\\\', InitiatingProcessAccountName)),\n    UsernameType = iff(InitiatingProcessAccountDomain == '','Simple', 'Windows'),\n    SplitHostname = split(DeviceName,\".\"),\n    SplitUrl = split(RemoteUrl,\".\"),\n    NetworkProtocol = case (\n      Protocol startswith \"Tcp\", \"TCP\",\n      Protocol == \"Unknown\", \"\",\n      toupper(Protocol)\n    )\n  | project-away Protocol\n  | extend  \n    DvcHostname = tostring(SplitHostname[0]),\n    DvcDomain = tostring(strcat_array(array_slice(SplitHostname, 1, -1), '.')),\n    DvcFQDN = iif (DeviceName contains \".\", DeviceName, \"\"),\n    UrlHostname = tostring(SplitUrl[0]),\n    UrlDomain = tostring(strcat_array(array_slice(SplitUrl, 1, -1), '.')),\n    UrlFQDN = iif(RemoteUrl contains \".\", RemoteUrl, \"\")\n  | project-away RemoteUrl, DeviceName\n  | extend\n    DvcDomainType = iif(DvcFQDN != \"\", \"FQDN\", \"\"),\n    UrlDomainType = iff(UrlFQDN != \"\", \"FQDN\", \"\"),\n    DvcIpAddr = LocalIP\n  | extend\n    Dvc = DvcHostname  \n  | project-rename\n    DvcId = DeviceId\n  | project-away SplitUrl, SplitHostname\n};\nlet OutboundNetworkEvents = \n  RawNetworkEvents (true)\n  // *************** Postfilterring *****************************************************************\n  | where (isnull(dstportnumber) or dstportnumber==RemotePort)\n  // *************** /Postfilterring *****************************************************************\n  | extend temp_isMatchSrcHostname=DvcHostname has_any(hostname_has_any)\n         , temp_isMatchDstHostname=UrlHostname has_any(hostname_has_any)\n  |extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,\"-\",\n                              temp_isMatchDstHostname and temp_isMatchSrcHostname, \"Both\",\n                              temp_isMatchDstHostname, \"DstHostname\",\n                              temp_isMatchSrcHostname, \"SrcHostname\",\n                                \"No match\"\n                            )\n  | project-away temp*\n  | where ASimMatchingHostname != \"No match\"\n  | project-rename\n     DstIpAddr = RemoteIP,\n     SrcIpAddr = LocalIP,\n     DstPortNumber = RemotePort,\n     SrcPortNumber = LocalPort,\n     SrcUsernameType = UsernameType,\n     SrcUserAadId = InitiatingProcessAccountObjectId,\n     SrcUserId = InitiatingProcessAccountSid,\n     SrcUserUpn = InitiatingProcessAccountUpn\n  | extend\n     SrcUsername = User,\n     SrcDvcId = DvcId,\n     SrcDvcIdType = 'MDEid',\n     SrcUserIdType = iff (SrcUserId <> \"S-1-0-0\", \"SID\", \"\"),\n     SrcUserId = iff (SrcUserId <> \"S-1-0-0\", SrcUserId, \"\"),\n     DstHostname = UrlHostname\n  | project-rename\n     DstDomain = UrlDomain,\n     DstFQDN = UrlFQDN,\n     DstDomainType = UrlDomainType\n  | extend  \n     SrcHostname = DvcHostname,\n     SrcDomain = DvcDomain,\n     SrcFQDN = DvcFQDN,\n     SrcDomainType = DvcDomainType\n  // Processes\n  | extend\n     SrcProcessId = tostring(InitiatingProcessId),\n     ParentProcessId = tostring(InitiatingProcessParentId)\n  | project-rename\n     SrcProcessName = InitiatingProcessFileName,\n     SrcProcessCommandLine = InitiatingProcessCommandLine,\n     SrcProcessCreationTime = InitiatingProcessCreationTime,\n     SrcProcessIntegrityLevel = InitiatingProcessIntegrityLevel,\n     SrcProcessTokenElevation = InitiatingProcessTokenElevation,\n     ParentProcessName = InitiatingProcessParentFileName,\n     ParentProcessCreationTime = InitiatingProcessParentCreationTime\n  | extend\n     Process = SrcProcessName,\n     ProcessId = SrcProcessId,\n     SrcAppName = SrcProcessName,\n     SrcAppType = \"Process\"\n;\nlet InboundNetworkEvents = \n  RawNetworkEvents (false)\n  // *************** Postfilterring *****************************************************************\n  | where (isnull(dstportnumber) or dstportnumber==LocalPort)\n  // *************** /Postfilterring *****************************************************************\n    |extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,\"\",\n                                UrlHostname has_any(hostname_has_any), \"SrcHostname\",\n                                DvcHostname has_any(hostname_has_any), \"DstHostname\",\n                                \"No match\"\n                            )\n  | where ASimMatchingHostname != \"No match\"\n  | project-rename\n     SrcIpAddr = RemoteIP,\n     DstIpAddr = LocalIP,\n     SrcPortNumber = RemotePort,\n     DstPortNumber = LocalPort,\n     DstUsernameType = UsernameType,\n     DstUserAadId = InitiatingProcessAccountObjectId,\n     DstUserId = InitiatingProcessAccountSid,\n     DstUserUpn = InitiatingProcessAccountUpn,\n     SrcDomain = UrlDomain,\n     SrcFQDN = UrlFQDN,\n     SrcDomainType = UrlDomainType\n  | extend\n     DstUsername = User,\n     DstDvcId = DvcId,\n     DstDvcIdType = 'MDEid',\n     DstUserIdType = 'SID',\n     SrcHostname = UrlHostname\n  | extend  \n     DstHostname = DvcHostname,\n     DstDomain = DvcDomain,\n     DstFQDN = DvcFQDN\n  // Processes\n  | extend\n     DstProcessId = tostring(InitiatingProcessId),\n     ParentProcessId = tostring(InitiatingProcessParentId)\n  | project-rename\n     DstProcessName = InitiatingProcessFileName,\n     DstProcessCommandLine = InitiatingProcessCommandLine,\n     DstProcessCreationTime = InitiatingProcessCreationTime,\n     DstProcessIntegrityLevel = InitiatingProcessIntegrityLevel,\n     DstProcessTokenElevation = InitiatingProcessTokenElevation,\n     ParentProcessName = InitiatingProcessParentFileName,\n     ParentProcessCreationTime = InitiatingProcessParentCreationTime\n  | extend\n     Process = DstProcessName,\n     DstAppName = DstProcessName,\n     DstAppType = \"Process\"\n;\nunion InboundNetworkEvents, OutboundNetworkEvents\n| project-rename \n   Hostname = UrlHostname\n| extend // aliases\n   IpAddr = SrcIpAddr,\n   Src = SrcIpAddr,\n   Dst = DstIpAddr \n};\nM365Defender (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
