{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionMicrosoftSecurityEventFirewall')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM  parser for Microsoft Windows Firewall Events",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionMicrosoftSecurityEventFirewall",
        "query": "// Data tables for mapping raw values into string\nlet LayerCodeTable = datatable (LayerCode:string,LayerName:string)[\n  '%%14596', 'IP Packet',\n  '%%14597', 'Transport',\n  '%%14598', 'Forward',\n  '%%14599', 'Stream',\n  '%%14600', 'Datagram Data',\n  '%%14601', 'ICMP Error',\n  '%%14602', 'MAC 802.3',\n  '%%14603', 'MAC Native',\n  '%%14604', 'vSwitch',\n  '%%14608', 'Resource Assignment',\n  '%%14609', 'Listen',\n  '%%14610', 'Receive/Accept',\n  '%%14611', 'Connect',\n  '%%14612', 'Flow Established',\n  '%%14614', 'Resource Release',\n  '%%14615', 'Endpoint Closure',\n  '%%14616', 'Connect Redirect',\n  '%%14617', 'Bind Redirect',\n  '%%14624', 'Stream Packet'];\nlet ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[\n  1, 'ICMP',\n  3, 'GGP',\n  6, 'TCP',\n  8, 'EGP',\n  12, 'PUP',\n  17, 'UDP',\n  20, 'HMP',\n  27, 'RDP',\n  46, 'RSVP',\n  47, 'PPTP data over GRE',\n  50, 'ESP',\n  51, 'AH',\n  66, 'RVD',\n  88, 'IGMP',\n  89, 'OSPF'];\nlet Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[\n  '%%14592', 'Inbound', false,\n  '%%14593', 'Outbound', true,\n  '%%14594', 'Forward',false,\n  '%%14595', 'Bidirectional', false,\n  '%%14609', 'Listen', false];\n///////////////////////////////////////////////////////\n// this query extract data fields from EventData column from SecurityEvent table\n///////////////////////////////////////////////////////\nlet parser = (disabled: bool=false) {\nlet WindowsFirewall_SecurityEvent=(){ // Event IDs between (5151 .. 5159)\n// will be extracting Event specific fields from 'EventData' field\n  let SecurityEventProjected =\n      SecurityEvent\n      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type\n  ;\n  let SecurityEvent_5152 = \n      SecurityEventProjected | where not(disabled)\n      | where EventID==5152\n      | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n      | project-away EventData;\n  let SecurityEvent_5154_5155_5158_5159 =\n      SecurityEventProjected | where not(disabled)\n      | where EventID in (5154, 5155, 5158, 5159)\n      | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>' \n          '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n      | extend DirectionCode = \"%%14609\"\n      | project-away EventData;\n  let SecurityEvent_5156_5157 =\n      SecurityEventProjected | where not(disabled)\n      | where EventID in (5156, 5157)\n      | parse EventData with * '<Data Name=\"ProcessID\">'ProcessId:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr:string'</Data>'\n          '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n          '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'\n          '\\x0d\\x0a  <Data Name=\"RemoteUserID\">'RemoteUserID'</Data>'\n          '\\x0d\\x0a  <Data Name=\"RemoteMachineID\">'RemoteMachineID'</Data>'*\n      | project-away EventData;\n  union SecurityEvent_5152, SecurityEvent_5156_5157, SecurityEvent_5154_5155_5158_5159\n      | lookup Directions on DirectionCode\n      | project-rename DvcHostname = Computer\n      | extend\n          SrcAppName = iff(isOutBound, Application, \"\"),\n          DstAppName = iff(not(isOutBound), Application, \"\"),\n          SrcDvcId = iff(isOutBound, RemoteMachineID, \"\"),\n          DstDvcId = iff(not(isOutBound), RemoteMachineID, \"\"),\n          SrcProcessId =  iff(isOutBound, tostring(ProcessId), \"\"),\n          DstProcessId =  iff(not(isOutBound), tostring(ProcessId), \"\"),\n          DstUserId = iff(isOutBound, RemoteUserID, \"\"),\n          SrcUserId = iff(not(isOutBound), RemoteUserID, \"\"),\n          DstHostname = iff(isOutBound, \"\", DvcHostname),\n          SrcHostname = iff(isOutBound, DvcHostname, \"\")\n      | project-away Application, RemoteMachineID, RemoteUserID, ProcessId\n};\nWindowsFirewall_SecurityEvent \n     | extend \n            DvcAction = iff(EventID in (5154, 5156, 5158), \"Allow\", \"Deny\"),\n            DvcOs = 'Windows',\n            DstAppType = \"Process\",\n            SrcUserIdType = iff (SrcUserId <> \"S-1-0-0\", \"SID\", \"\"),\n            SrcUserId = iff (SrcUserId <> \"S-1-0-0\", SrcUserId, \"\"),\n            DstUserIdType = iff (DstUserId <> \"S-1-0-0\", \"SID\", \"\"),\n            DstUserId = iff (DstUserId <> \"S-1-0-0\", DstUserId, \"\"),\n            SrcAppType = \"Process\",\n            EventType = \"NetworkSession\",\n            EventSchema = \"NetworkSession\",\n            EventSchemaVersion=\"0.2.0\",\n            EventCount=toint(1),\n            EventVendor = \"Microsoft\",\n            EventProduct = \"Windows Firewall\",\n            EventResult = iff(EventID in (5154, 5156, 5158), \"Success\", \"Failure\"),\n            EventStartTime = TimeGenerated,\n            EventEndTime = TimeGenerated,\n            EventSeverity = iff(EventID  in (5154, 5156, 5158), \"Informational\", \"Low\"),\n            EventOriginalType = tostring(EventID),\n            DstDvcIdType = iff (DstDvcId != \"\", \"SID\", \"\"),\n            SrcDvcIdType = iff (SrcDvcId != \"\", \"SID\", \"\")\n   // aliases\n    | extend\n            Dvc = DvcHostname,\n            Hostname = DstHostname,\n            IpAddr = SrcIpAddr,\n            Src = SrcIpAddr,\n            Dst = DstIpAddr,\n            Rule = tostring (NetworkRuleNumber)\n    | lookup LayerCodeTable on LayerCode\n    | lookup ProtocolTable on Protocol\n    | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID, LayerRTID,_ResourceId,_SubscriptionId\n    };\n    parser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
