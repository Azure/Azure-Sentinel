{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionMD4IoTAgent')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Microsoft Defender for IoT micro agent",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionMD4IoTAgent",
        "query": "let parser = (\n      starttime:datetime=datetime(null), \n      endtime:datetime=datetime(null), \n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \n      ipaddr_has_any_prefix:dynamic=dynamic([]),\n      dstportnumber:int=int(null), \n      hostname_has_any:dynamic=dynamic([]), \n      dvcaction:dynamic=dynamic([]), \n      eventresult:string='*', \n      disabled:bool=false)\n{\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let ip_any  =  set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix, srcipaddr_has_any_prefix); \n  let DirectionNetworkEvents =\n  SecurityIoTRawEvent \n  | where (isnull(starttime) or TimeGenerated>=starttime) \n      and (isnull(endtime) or TimeGenerated<=endtime)\n  | where not(disabled)\n  | where RawEventName == \"NetworkActivity\"\n  // ***************  Prefilterring *****************************************************************\n  |where  (eventresult=='*' or eventresult=='Success')\n      and (array_length(hostname_has_any)==0) \n      and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing\n      and EventDetails has tostring(dstportnumber)\n      and (array_length (ip_any)==0 or has_any_ipv4_prefix(EventDetails,ip_any))\n      // *************** Prefilterring *****************************************************************\n  | parse EventDetails with * ',\"LocalPort\":' LocalPort:int ',\"RemotePort\":' RemotePort:int ',' *\n  | extend outbound = LocalPort > RemotePort\n  | where (isnull(dstportnumber) or (not(outbound) and dstportnumber == LocalPort) or (outbound and dstportnumber == RemotePort) ) \n  ;\n  let parser = (T: (EventDetails: string)) {\n    T \n    | parse EventDetails with \n      '{\"LocalAddress\":\"' LocalAddress:string '\",'\n      '\"RemoteAddress\":\"' RemoteAddress:string '\",'\n      *\n      '\"BytesIn\":' BytesIn:long ','\n      '\"BytesOut\":' BytesOut:long ','\n      '\"Protocol\":\"' Protocol:string '\",'\n      '\"ProcessId\":' ProcessId:string ','\n      '\"UserId\":' UserId:string ','\n      '\"ApplicationProtocol\":\"' ApplicationProtocol:string '\",'\n      * // '\"AzureResourceId\":\"' AzureResourceId:string '\",'\n      '\"DeviceId\":\"' DeviceId:string '\",'\n      '\"MessageSource\":\"' MessageSource:string '\",'\n      '\"OriginalEventId\":\"' OriginalEventId:string '\",'\n      '\"TimestampUTC\":\"' TimestampUTC:datetime '\",'\n      *\n  }\n  ; \n  let OutboundNetworkEvents = \n    DirectionNetworkEvents\n    | where outbound\n    // ***************  Postfilterring *****************************************************************\n    | where (isnull(dstportnumber) or dstportnumber==LocalPort)\n    // ***************  Postfilterring *****************************************************************\n    | invoke parser ()\n    | extend temp_isSrcMatch=has_any_ipv4_prefix(LocalAddress,src_or_any)\n           , temp_isDstMatch=has_any_ipv4_prefix(RemoteAddress,dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n  ) \n  | where ASimMatchingIpAddr != \"No match\"\n  | project-away temp_*\n    | project-rename\n      SrcBytes = BytesOut,\n      DstBytes = BytesIn,\n      SrcPortNumber = LocalPort,\n      DstIpAddr = RemoteAddress,\n      DstPortNumber = RemotePort,\n      SrcProcessId = ProcessId\n    | extend\n      SrcIpAddr = LocalAddress,\n      SrcDvcIdType = \"MD4IoTid\",\n      SrcUserId = UserId,\n      SrcUserIdType = \"UID\",\n      SrcDvcId = DeviceId,\n      Process = SrcProcessId, // alias\n      SrcDvcOs = iif (MessageSource == \"Linux\", \"Linux\", \"Windows\")\n  ;\n  let InboundNetworkEvents = \n    DirectionNetworkEvents\n    | where not(outbound)\n    // ***************  Postfilterring *****************************************************************\n    | where (isnull(dstportnumber) or dstportnumber==RemotePort)\n    // ***************  Postfilterring *****************************************************************\n    | invoke parser ()\n    | extend temp_isSrcMatch=( // only one of each pair has_any_ipv4_prefix is calculated\n                      has_any_ipv4_prefix(RemoteAddress,src_or_any)\n                  ) \n         , temp_isDstMatch=(\n                   has_any_ipv4_prefix(LocalAddress,dst_or_any) \n                  ) \n    | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n  ) \n  | project-away temp_*\n  | where ASimMatchingIpAddr != \"No match\"\n    | project-rename\n      DstBytes = BytesOut,\n      SrcBytes = BytesIn,\n      DstPortNumber = LocalPort,\n      SrcIpAddr = RemoteAddress,\n      SrcPortNumber = RemotePort,\n      DstProcessId = ProcessId\n    | extend\n      DstIpAddr = LocalAddress,\n      DstDvcIdType = \"MD4IoTid\",\n      DstUserId = UserId,\n      DstUserIdType = \"UID\",\n      DstDvcId = DeviceId,\n      Process = DstProcessId, // alias\n      DstDvcOs = iif (MessageSource == \"Linux\", \"Linux\", \"Windows\")\n  ;\n  let NetworkSessionMD4IoT = \n    union InboundNetworkEvents, OutboundNetworkEvents\n    | extend\n      EventCount = int(1),\n      EventProduct = 'Azure Defender for IoT', \n      EventVendor = 'Microsoft',\n      EventSchemaVersion = '0.2.3',\n      EventSchema = \"NetworkSession\", \n      EventType = 'NetworkSession',\n      EventStartTime = TimeGenerated, \n      EventEndTime = TimeGenerated, \n      EventResult = 'Success',\n      EventSeverity = 'Informational'\n    | project-rename\n      EventProductVersion = AgentVersion, // Not available in Windows\n      _ResourceId = AssociatedResourceId, \n      _SubscriptionId = AzureSubscriptionId, \n      EventOriginalUid = OriginalEventId,  // OK pending question\n      DvcOs = MessageSource,\n      NetworkProtocol = Protocol,\n      NetworkApplicationProtocol = ApplicationProtocol,\n      DvcId = DeviceId,\n      DvcIpAddr = LocalAddress\n    | project-away outbound\n    | extend\n      Dvc = DvcId,\n      DvcIdType = \"MD4IoTid\",\n      User = UserId,\n      IpAddr = SrcIpAddr,\n      Src = SrcIpAddr,\n      Dst = DstIpAddr\n  ;\n  NetworkSessionMD4IoT};\n  parser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
