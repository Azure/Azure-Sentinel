{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionAzureFirewall')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Azure Firewall logs",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionAzureFirewall",
        "query": "let parser = (\n      starttime:datetime=datetime(null), \n      endtime:datetime=datetime(null), \n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \n      ipaddr_has_any_prefix:dynamic=dynamic([]),\n      dstportnumber:int=int(null), \n      hostname_has_any:dynamic=dynamic([]), \n      dvcaction:dynamic=dynamic([]), \n      eventresult:string='*', \n      disabled:bool=false)\n{\n    let ip_any=set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let AzureFirewallNetworkRuleLogs = \n        AzureDiagnostics\n        | where (isnull(starttime) or TimeGenerated >= starttime) \n          and (isnull(endtime)   or TimeGenerated <= endtime) \n          and not(disabled)\n        | where Category == \"AzureFirewallNetworkRule\"\n        | where isnotempty(msg_s)\n        | project msg_s, OperationName, SubscriptionId, ResourceId, TimeGenerated, Type, _ResourceId;\n    let prefilter = (T: (msg_s:string, TimeGenerated:datetime, OperationName:string)) {\n      T | where  \n      //(isnull(starttime) or TimeGenerated >= starttime) \n       // and (isnull(endtime)   or TimeGenerated <= endtime) \n       (array_length(hostname_has_any) == 0)\n       and (isnull(dstportnumber) or msg_s has (tostring(dstportnumber)))\n       and (array_length(ip_any)==0 \n          or has_any_ipv4_prefix(msg_s,ip_any)\n        ) \n    };\n    let AzureFirewallSessionLogs = \n        AzureFirewallNetworkRuleLogs\n        | where OperationName in (\"AzureFirewallNetworkRuleLog\",\"AzureFirewallThreatIntelLog\")\n        // -- pre-filter\n        | where (array_length(dvcaction) == 0) or (msg_s has_any (dvcaction))\n        | where (eventresult == \"*\") or ((eventresult == \"Success\") and (msg_s has \"Allow\")) or ((eventresult == \"Failure\") and (msg_s has \"Deny\"))\n        | invoke prefilter()\n        // -- end pre-filter\n        | parse-where\n            msg_s with           NetworkProtocol:string \n            \" request from \"     SrcIpAddr:string\n            \":\"                  SrcPortNumber:int\n            \" to \"               DstIpAddr:string\n            \":\"                  DstPortNumber:int\n            \". Action: \"         DvcAction:string\n            \".\"                  *\n        | project-away msg_s\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n               , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n         | extend ASimMatchingIpAddr = case(\n              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" \n              , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n              , temp_isSrcMatch, \"SrcIpAddr\"\n              , temp_isDstMatch, \"DstIpAddr\"\n              , \"No match\"\n           )\n        | project-away temp_*\n        | where ASimMatchingIpAddr != \"No match\"\n        | extend NetworkIcmpCode = iff(NetworkProtocol startswith \"ICMP\", toint(extract (\"type=(\\\\d+)\",1,NetworkProtocol)), int(null))\n        | extend NetworkIcmpType = iff(isnotnull(NetworkIcmpCode), _ASIM_LookupICMPType(NetworkIcmpCode), \"\")\n        | extend NetworkProtocol = iff(NetworkProtocol startswith \"ICMP\", \"ICMP\", NetworkProtocol)\n        | extend EventSeverity = case (\n            OperationName  == \"AzureFirewallThreatIntelLog\", \"Medium\",\n            DvcAction == \"Deny\", \"Low\",\n            \"Informational\")\n        | extend EventResult = iff(DvcAction == \"Allow\", \"Success\", \"Failure\")\n        ;\n    let AzureFirewallNATLogs = \n        AzureFirewallNetworkRuleLogs\n        | where OperationName == \"AzureFirewallNatRuleLog\"\n        // -- pre-filter\n        | where (array_length(dvcaction) == 0) or (\"Allow\" in (dvcaction))\n        | where eventresult in (\"*\", \"Success\")\n        | invoke prefilter()\n        // -- end pre-filter\n        | parse-where\n            msg_s with           NetworkProtocol:string \n            \" request from \"     SrcIpAddr:string\n            \":\"                  SrcPortNumber:int\n            \" to \"               DstIpAddr:string\n            \":\"                  DstPortNumber:int\n            \" was DNAT'ed to \"   DstNatIpAddr:string\n            \":\"                  DstNatPortNumber:int\n        | project-away msg_s\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n               , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n         | extend ASimMatchingIpAddr = case(\n              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" \n              , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n              , temp_isSrcMatch, \"SrcIpAddr\"\n              , temp_isDstMatch, \"DstIpAddr\"\n              , \"No match\"\n           )\n        | project-away temp_*\n        | where ASimMatchingIpAddr != \"No match\"\n        | extend EventSeverity = \"Informational\"\n        | extend EventResult = \"Success\"\n        | extend DvcAction = \"Allow\"\n        ;\n    union AzureFirewallSessionLogs, AzureFirewallNATLogs\n    | where \n        (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\n    // -- end post-filtering\n    | extend\n        EventVendor=\"Microsoft\",\n        EventProduct=\"Azure Firewall\",\n        EventType=\"NetworkSession\",\n        EventCount=toint(1),\n        EventSchemaVersion=\"0.2.3\",\n        EventSchema=\"NetworkSession\",\n        DvcIdType = \"AzureResourceId\"\n    | project-rename\n        DvcSubscriptionId = SubscriptionId,\n        DvcId = ResourceId\n    // -- Aliases\n    | extend\n        IpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        Dst = DstIpAddr,\n        Dvc = DvcId,\n        EventStartTime = TimeGenerated,\n        EventEndTime = TimeGenerated // ??\n    | project-keep\n        ASim*,\n        Src*,\n        Dst*,\n        Event*,\n        Dvc*,\n        IpAddr,\n        NetworkIcmpCode,\n        NetworkIcmpType,\n        NetworkProtocol,\n        Type,\n        _ResourceId,\n        TimeGenerated\n};\nparser  (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
