{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionVMConnection')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for VM connection information collected using the Log Analytics agent",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionVMConnection",
        "query": "let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity:string) [\n  '', 'Informational', \n  '0', 'Informational',\n  '1', 'Low',\n  '2', 'Medium',\n  '3', 'High'\n];\nlet VMConnectionProjected = VMConnection | project-away AdditionalInformation, AgentId, TenantId, TLPLevel, SourceSystem, IsActive, *ReportedDateTime, LinksFailed, LinksLive, LinksTerminated, Description, Responses, ResponseTimeMin, ResponseTimeMax, RemoteClassification, RemoteDnsQuestions;\nlet parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  dstportnumber:int=int(null), \n  hostname_has_any:dynamic=dynamic([]), \n  dvcaction:dynamic=dynamic([]), \n  eventresult:string='*', \n  disabled:bool=false)\n{\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \n  let outbound = \n      VMConnectionProjected\n      | where (isnull(starttime) or TimeGenerated >= starttime)\n          and (isnull(endtime) or TimeGenerated <= endtime)\n      | where not (disabled)\n      | where array_length(hostname_has_any)==0 \n      or (Computer has_any (hostname_has_any)) or ( RemoteDnsCanonicalNames has_any (hostname_has_any))\n      | where Direction == \"outbound\"\n      // -- Pre-filtering:\n      | where\n          eventresult in (\"*\", \"Success\") \n          and array_length(dvcaction) == 0\n          and  (isnull(dstportnumber) or (DestinationPort == dstportnumber))\n      | extend EventOriginalSeverity = tostring(Severity)\n      | lookup SeverityLookup on EventOriginalSeverity\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIp,src_or_any)\n         , temp_isDstMatch=has_any_ipv4_prefix(DestinationIp,dst_or_any)\n      | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n          )\n      | where ASimMatchingIpAddr != \"No match\"\n      // -- End pre-filtering\n      | invoke _ASIM_ResolveSrcFQDN (\"Computer\")\n      | extend FQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\n      | invoke _ASIM_ResolveDstFQDN(\"FQDN\")\n      | project-away RemoteDnsCanonicalNames, Computer\n      // -- post-filtering\n      | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any)\n            ,  temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\n      | extend ASimMatchingHostname = case(\n          array_length(hostname_has_any) == 0 , \"-\"\n          , (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" \n          , temp_isMatchSrcHostname, \"SrcHostname\"\n          , temp_isMatchDstHostname, \"DstHostname\"\n          , \"No match\"\n          )\n      | where ASimMatchingHostname != \"No match\"\n      | project-away temp_*\n      | extend\n          SrcAppType = \"Process\",\n          SrcDvcIdType = \"VMConnectionId\",\n          SrcHostnameType = \"Simple\",\n          DstGeoCountry = RemoteCountry,\n          DstGeoLongitude = RemoteLongitude,\n          DstGeoLatitude = RemoteLatitude,\n          SrcAppId = Process,\n          SrcAppName = ProcessName,\n          SrcDvcId = Machine,\n          ThreatField = iff (MaliciousIp != \"\", \"DstIpAddr\", \"\")\n      | extend\n          RemoteFQDN = DstFQDN,\n          RemoteHostname = DstHostname,\n          RemoteDomain = DstDomain,\n          RemoteDomainType = DstDomainType,\n          LocalFQDN = SrcFQDN,\n          LocalHostname = SrcHostname,\n          LocalDomain = SrcDomain,\n          LocalDomainType = SrcDomainType,\n          LocalIpAddr = SourceIp\n  ;\n  let inbound =\n      VMConnectionProjected\n      | where (starttime == datetime(null) or TimeGenerated >= starttime)\n          and (endtime == datetime(null) or TimeGenerated <= endtime)\n      | where not (disabled)\n      | where Direction == \"inbound\"\n      // -- Pre-filtering:\n      | where\n          eventresult  in (\"*\", \"Success\") \n          and array_length(dvcaction) == 0\n          and  (dstportnumber==int(null) or DestinationPort == dstportnumber)\n          and (array_length(hostname_has_any)==0 \n               or Computer has_any (hostname_has_any) or RemoteDnsCanonicalNames has_any (hostname_has_any)\n               )\n      | extend EventOriginalSeverity = tostring(Severity)\n      | lookup SeverityLookup on EventOriginalSeverity\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIp,src_or_any)\n         , temp_isDstMatch=has_any_ipv4_prefix(DestinationIp,dst_or_any)\n      | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n          )\n      | where ASimMatchingIpAddr != \"No match\"\n      // -- End pre-filtering\n      | invoke _ASIM_ResolveDstFQDN (\"Computer\")\n      | extend FQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\n      | invoke _ASIM_ResolveSrcFQDN(\"FQDN\")\n      | project-away Computer, RemoteDnsCanonicalNames\n      // -- post-filtering\n      | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any)\n            ,  temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\n      | extend ASimMatchingHostname = case(\n          array_length(hostname_has_any) == 0 , \"-\"\n          , (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" \n          , temp_isMatchSrcHostname, \"SrcHostname\"\n          , temp_isMatchDstHostname, \"DstHostname\"\n          , \"No match\"\n          )\n      | where ASimMatchingHostname != \"No match\"\n      | project-away temp_*\n      | extend\n          DstAppType = \"Process\",\n          DstDvcIdType = \"VMConnectionId\",\n          SrcGeoCountry = RemoteCountry,\n          SrcGeoLongitude = RemoteLongitude,\n          SrcGeoLatitude = RemoteLatitude,\n          DstAppId = Process,\n          DstAppName = ProcessName,\n          DstDvcId = Machine,\n          ThreatField = iff (MaliciousIp != \"\", \"SrcIpAddr\", \"\")\n      | extend\n          RemoteFQDN = SrcFQDN,\n          RemoteHostname = SrcHostname,\n          RemoteDomain = SrcDomain,\n          RemoteDomainType = SrcDomainType,\n          LocalFQDN = DstFQDN,\n          LocalHostname = DstHostname,\n          LocalDomain = DstDomain,\n          LocalDomainType = DstDomainType,\n          LocalIpAddr = DestinationIp\n  ;\n  union outbound, inbound\n  // Event fields\n  | extend \n    EventCount = toint(LinksEstablished), // -- prioritized over LinksLive and LinksTerminated\n    EventStartTime = TimeGenerated,\n    EventVendor = \"Microsoft\",\n    EventProduct = \"VMConnection\",\n    EventSchema = \"NetworkSession\",\n    EventSchemaVersion = \"0.2.3\",\n    EventType = \"EndpointNetworkSession\",\n    DvcIdType = \"VMConnectionId\",\n    NetworkDirection = iff(Direction==\"inbound\", \"Inbound\", \"Outbound\"),\n    EventEndTime = TimeGenerated\n  | project-rename\n    DstIpAddr = DestinationIp,\n    DstPortNumber = DestinationPort, \n    SrcIpAddr = SourceIp, \n    NetworkSessionId = ConnectionId,\n    ThreatName = IndicatorThreatType,\n    RemoteGeoCountry = RemoteCountry,\n    RemoteGeoLatitude = RemoteLatitude, \n    RemoteGeoLongitude = RemoteLongitude,\n    LocalAppId = Process,\n    LocalAppName = ProcessName,\n    DvcId = Machine,\n    RemoteIpAddr = RemoteIp,\n    EventReportUrl = ReportReferenceLink,\n    ThreatIpAddr = MaliciousIp\n  // -- Calculated fields\n  | extend\n    EventResult = \"Success\",\n    LocalAppType = \"Process\",\n    NetworkDuration = toint(ResponseTimeSum/LinksEstablished),\n    ThreatRiskLevel = toint(Confidence),\n    NetworkProtocol = toupper(Protocol),\n    SrcBytes = tolong(BytesSent),\n    DstBytes = tolong(BytesReceived)\n  | project-away BytesSent, BytesReceived, Confidence, ResponseTimeSum, Protocol, Direction, Severity, LinksEstablished\n  // -- Aliases\n  | extend\n    IpAddr = RemoteIpAddr,\n    Src = SrcIpAddr,\n    Local = LocalIpAddr,\n    DvcIpAddr = LocalIpAddr,\n    Dst = DstIpAddr,\n    Remote = RemoteIpAddr,\n    Dvc = LocalHostname,\n    DvcHostname = LocalHostname,\n    DvcDomain = LocalDomain,\n    DvcDomainType = LocalDomainType,\n    DvcFQDN = LocalFQDN,\n    Hostname = RemoteHostname,\n    Duration = NetworkDuration,\n    SessionId = NetworkSessionId\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
