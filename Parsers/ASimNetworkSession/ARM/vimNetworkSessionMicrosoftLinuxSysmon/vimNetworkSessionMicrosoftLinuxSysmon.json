{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionLinuxSysmon')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Sysmon for Linux",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionLinuxSysmon",
        "query": "let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    \nlet DirectionNetworkEvents =\n    Syslog \n    | where (isnull(starttime) or TimeGenerated>=starttime) \n        and (isnull(endtime) or TimeGenerated<=endtime) \n    | where not(disabled)\n    | project SyslogMessage, TimeGenerated, HostIP\n    | where SyslogMessage has_all ('<Provider Name=\"Linux-Sysmon\"', '<EventID>3</EventID>')\n    // ***************  Prefilterring *****************************************************************\n    | where  \n             (eventresult=='*' or eventresult=='Success')\n        and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing\n        and (array_length(ip_any)==0 \n              or has_any_ipv4_prefix(SyslogMessage,ip_any)\n            ) \n       and (array_length(hostname_has_any)==0 \n              or SyslogMessage has_any(hostname_has_any)) \n        and (isnull(dstportnumber) or SyslogMessage has (tostring(dstportnumber))) \n    // *************** / Prefilterring ***************************************************************\n    | parse SyslogMessage with * '<Data Name=\"SourceIp\">' SrcIpAddr:string '</Data>' *\n    | where (array_length(srcipaddr_has_any_prefix)==0 \n              or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix)\n            ) \n    | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))\n;\nlet parser = (T: (SyslogMessage: string)) {\n  T \n  | parse SyslogMessage with \n      *\n      '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'\n      *\n      '<Computer>' SysmonComputer:string '</Computer>'\n      *\n      '<Data Name=\"RuleName\">' RuleName:string '</Data>'\n      '<Data Name=\"UtcTime\">' EventEndTime:datetime '</Data>'\n      '<Data Name=\"ProcessGuid\">{' ProcessGuid:string '}</Data>'\n      '<Data Name=\"ProcessId\">' ProcessId:string '</Data>'\n      '<Data Name=\"Image\">' Process:string '</Data>'\n      '<Data Name=\"User\">' User:string '</Data>'\n      '<Data Name=\"Protocol\">' Protocol:string '</Data>' // -- source is lowercase\n      '<Data Name=\"Initiated\">' Initiated:bool '</Data>' \n      '<Data Name=\"SourceIsIpv6\">' SourceIsIpv6:bool '</Data>'\t\t\n      '<Data Name=\"SourceIp\">' * '</Data>'\n      '<Data Name=\"SourceHostname\">' SrcHostname:string '</Data>'\n      '<Data Name=\"SourcePort\">' SrcPortNumber:int '</Data>'\n      '<Data Name=\"SourcePortName\">' SrcPortName:string '</Data>'\n      '<Data Name=\"DestinationIsIpv6\">' DestinationIsIpv6:bool '</Data>'\n      '<Data Name=\"DestinationIp\">' DstIpAddr:string '</Data>'\n      '<Data Name=\"DestinationHostname\">' DstHostname:string '</Data>'\n      '<Data Name=\"DestinationPort\">' DstPortNumber:int '</Data>'\n      '<Data Name=\"DestinationPortName\">' DstPortName:string '</Data>'\n      *\n    | project-away DstPortName, DestinationIsIpv6, Initiated, SourceIsIpv6, SrcPortName, RuleName\n};\nlet OutboundNetworkEvents = \n  DirectionNetworkEvents\n  | where outbound\n  | invoke parser ()\n  | extend \n         temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) \n       , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n| extend ASimMatchingIpAddr = case(\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n        , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n        , temp_isSrcMatch, \"SrcIpAddr\"\n        , temp_isDstMatch, \"DstIpAddr\"\n        , \"No match\"\n)\n | where ASimMatchingIpAddr != \"No match\"\n | extend temp_isSrcHostMatch= (SrcHostname has_any (hostname_has_any))\n        , temp_isDstHostMatch = (DstHostname has_any (hostname_has_any))\n  | extend ASimMatchingHostname = case(\n        array_length(hostname_has_any) == 0, \"-\" // match not requested: probably most common case\n        , (temp_isSrcHostMatch and temp_isDstHostMatch), \"Both\" // has to be checked before the individual \n        , temp_isSrcHostMatch, \"SrcHostname\"\n        , temp_isDstHostMatch, \"DstHostname\"\n        , \"No match\"\n)\n | where ASimMatchingHostname != \"No match\"\n | project-away temp_*\n | extend\n    SrcUsernameType = 'Simple',\n    SrcUsername = User,\n    SrcAppType = 'Process'\n  | project-rename\n    SrcProcessId = ProcessId, \n    SrcProcessGuid = ProcessGuid,\n    SrcProcessName = Process\n  | extend\n    SrcAppName = SrcProcessName\n  | project-away SyslogMessage\n;\nlet InboundNetworkEvents = \n    DirectionNetworkEvents\n    | where not(outbound)\n    | invoke parser ()\n    // *************** Postfilterring ***************************************************************\n    | where (array_length(hostname_has_any)==0 or DstHostname has_any (hostname_has_any)or SrcHostname has_any (hostname_has_any) )\n    and  (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\n    // *************** Postfilterring ***************************************************************\n    | extend \n        temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) \n      , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n      , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n      , temp_isSrcMatch, \"SrcIpAddr\"\n      , temp_isDstMatch, \"DstIpAddr\"\n      , \"No match\"\n  )\n  | project-away temp_*\n  | where ASimMatchingIpAddr != \"No match\"\n  | extend\n    DstUsernameType = 'Simple',\n    DstAppType = 'Process' \n  | project-rename\n    DstUsername = User,\n    DstProcessId = ProcessId, \n    DstProcessGuid = ProcessGuid,\n    DstProcessName = Process\n  | extend\n    DstAppName = DstProcessName\n  | project-away SyslogMessage\n;\nlet SysmonForLinuxNetwork=\n    union OutboundNetworkEvents, InboundNetworkEvents\n    | extend \n        EventType = 'NetworkSession',\n        EventStartTime = EventEndTime,\n        EventCount = int(1),\n        EventVendor = 'Microsoft',\n        EventSchemaVersion = '0.2.3',\n        EventSchema = 'NetworkSession', \n        EventProduct = 'Sysmon for Linux',\n        EventResult = 'Success',\n        EventSeverity = 'Informational',\n        DvcOs = 'Linux',\n        NetworkProtocol = toupper(Protocol),\n        NetworkDirection = iff(outbound, \"Outbound\", \"Inbound\"),\n        EventOriginalType = '3' // Set with a constant value to avoid parsing\n    | project-away outbound, Protocol\n    | project-rename \n        DvcIpAddr = HostIP,\n        DvcHostname = SysmonComputer\n    | extend // aliases\n        Dvc = DvcHostname,\n        Hostname = DstHostname,\n        IpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        Dst = DstIpAddr\n;\nSysmonForLinuxNetwork ",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
