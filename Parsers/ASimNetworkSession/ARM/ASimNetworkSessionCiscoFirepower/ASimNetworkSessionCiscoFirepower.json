{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionCiscoFirepower')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for Cisco Firepower",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionCiscoFirepower",
        "query": "let ActionLookup = datatable(\n    DeviceAction: string,\n    DvcAction: string,\n    EventResult: string\n)\n    [\n    \"Blocked\", \"Deny\", \"Failure\",\n    \"Alerted\", \"Allow\", \"Success\",\n    \"Rewritten\", \"Allow\", \"Success\",\n    \"Would be Rewritten\", \"Allow\", \"Partial\",\n    \"Would be Blocked\", \"Deny\", \"Partial\",\n    \"Would Be Blocked\", \"Deny\", \"Partial\",\n    \"Dropped\", \"Drop\", \"Failure\",\n    \"Would be Dropped\", \"Drop\", \"Partial\",\n    \"Partially Dropped\", \"Drop\", \"Partial\",\n    \"Would be Block\", \"Deny\", \"Partial\",\n    \"Partial Blocked\", \"Deny\", \"Partial\",\n    \"Rejected\", \"Deny\", \"Failure\",\n    \"Would be Rejected\", \"Deny\", \"Partial\",\n    \"Would Rejected\", \"Deny\", \"Partial\",\n    \"Block\", \"Deny\", \"Failure\",\n    \"Partial Block\", \"Deny\", \"Partial\",\n    \"Drop\", \"Drop\", \"Failure\",\n    \"Would Drop\", \"Drop\", \"Partial\",\n    \"Reject\", \"Deny\", \"Failure\",\n    \"Rewrite\", \"Allow\", \"Success\",\n    \"Allow\", \"Allow\", \"Success\",\n    \"Monitor\", \"Allow\", \"Success\"\n];\nlet EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)\n    [\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Medium\",\n    \"5\", \"Medium\",\n    \"6\", \"Medium\",\n    \"7\", \"High\",\n    \"8\", \"High\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet EventResultDetailsLookup = datatable(Reason: string, EventResultDetails: string)\n    [\n    \"N/A\", \"NA\",\n    \"IP Block\", \"Terminated\",\n    \"IP Monitor\", \"Unknown\",\n    \"User Bypass\", \"Unknown\",\n    \"File Monitor\", \"Unknown\",\n    \"File Block\", \"Terminated\",\n    \"Intrusion Monitor\", \"Unknown\",\n    \"Intrusion Block\", \"Terminated\",\n    \"File Resume Block\", \"Terminated\",\n    \"File Resume Allow\", \"Unknown\",\n    \"File Custom Detection\", \"Unknown\"\n];\nlet parser = (disabled: bool=false) {\n    let AllLogs = CommonSecurityLog\n        | where not(disabled) \n        | where DeviceVendor == \"Cisco\" and DeviceProduct == \"Firepower\"\n            and DeviceEventClassID has_any(\"INTRUSION:400\", \"PV:112\", \"RNA:1003:1\")\n        | invoke _ASIM_ResolveNetworkProtocol('Protocol')\n        | extend NetworkProtocol = iff(NetworkProtocol == \"Unassigned\" and Protocol !in (63, 68, 99, 114, 253, 254), Protocol, NetworkProtocol);\n    let Connection_Statistics_Events = AllLogs\n        | where DeviceEventClassID has \"RNA:1003:1\"\n        | parse-kv AdditionalExtensions as (\n            start: long,\n            end: long,\n            bytesIn: long,\n            bytesOut: long,\n            )\n            with (pair_delimiter=';', kv_delimiter='=')\n        | lookup EventResultDetailsLookup on Reason\n        | extend\n            SrcBytes = bytesIn,\n            DstBytes = bytesOut,\n            EventOriginalResultDetails = Reason,\n            AdditionalFields = bag_pack(\"policy\", DeviceCustomString1,\n                                              \"instanceID\", ProcessID,\n                                              \"clientApplicationID\", RequestClientApplication,\n                                              \"clientUrl\", RequestURL);\n    let Intrusion_Events = AllLogs\n        | where DeviceEventClassID has \"INTRUSION:400\"\n        | parse-kv AdditionalExtensions as (\n            start: long\n            )\n            with (pair_delimiter=';', kv_delimiter='=')\n        | extend \n            EventMessage = Activity,\n            ThreatCategory = DeviceEventCategory,\n            AdditionalFields = bag_pack(\"policy\", DeviceCustomString1,\n                                              \"ipspolicy\", DeviceCustomString5,\n                                              \"clientApplicationID\", RequestClientApplication,\n                                              \"clientUrl\", RequestURL);\n    let Policy_Violation_Events = AllLogs\n        | where DeviceEventClassID has \"PV:112\"\n        | extend\n            EventMessage = Message,\n            AdditionalFields = bag_pack(\"policy\", DeviceCustomString1)\n        | project-rename DstUsername = DestinationUserName\n        | extend\n            DstUsernameType = _ASIM_GetUsernameType(DstUsername),\n            DstUserType = _ASIM_GetUserType(DstUsername, \"\");\n    union Connection_Statistics_Events, Intrusion_Events, Policy_Violation_Events\n    | extend\n        SrcPortNumber = iff(NetworkProtocol == \"ICMP\", int(null), SourcePort),\n        DstPortNumber = iff(NetworkProtocol == \"ICMP\", int(null), DestinationPort),\n        NetworkIcmpCode = iff(NetworkProtocol == \"ICMP\", DestinationPort, int(null)),\n        NetworkIcmpType = iff(NetworkProtocol == \"ICMP\", tostring(SourcePort), \"\"),\n        SrcZone = DeviceCustomString3,\n        DstZone = DeviceCustomString4\n    | lookup ActionLookup on DeviceAction\n    | lookup EventSeverityLookup on LogSeverity\n    | extend \n        EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),\n        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),\n        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),\n        EventOriginalType = iff(DeviceEventClassID has \"INTRUSION:400\", \"INTRUSION EVENT\", Activity),\n        SrcVlanId = tostring(DeviceCustomNumber1)\n    | extend\n        EventEndTime = coalesce(unixtime_milliseconds_todatetime(end), EventStartTime),\n        NetworkProtocolVersion = case(\n                            DstIpAddr contains \".\",\n                            \"IPv4\",\n                            DstIpAddr contains \":\",\n                            \"IPv6\",\n                            \"\"\n                        )\n    | extend Ip_device = iff(DeviceName matches regex \"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\", DeviceName, \"\")\n    | extend\n        DvcIpAddr = Ip_device,\n        DeviceName = iff(isempty(Ip_device), DeviceName, \"\")\n    | extend host = coalesce(DeviceName, Computer)\n    | invoke _ASIM_ResolveDvcFQDN('host')\n    | invoke _ASIM_ResolveDstFQDN('DestinationDnsDomain')\n    | extend\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventType = \"NetworkSession\",\n        EventCount = int(1)\n    | project-rename \n        EventProduct = DeviceProduct,\n        EventVendor = DeviceVendor,\n        SrcUsername = SourceUserName,\n        DvcInboundInterface = DeviceInboundInterface,\n        DvcOutboundInterface = DeviceOutboundInterface,\n        EventOriginalSeverity = LogSeverity,\n        DvcId = DeviceExternalID,\n        NetworkApplicationProtocol = ApplicationProtocol,\n        EventProductVersion = DeviceVersion,\n        EventOriginalUid = ExtID,\n        NetworkRuleName = DeviceCustomString2,\n        EventUid = _ItemId,\n        DvcOriginalAction = DeviceAction\n    | extend\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        SrcUserType = _ASIM_GetUserType(SrcUsername, \"\"),\n        DvcIdType = \"Other\"\n    | extend \n        IpAddr = SrcIpAddr,\n        InnerVlanId = SrcVlanId,\n        Src = SrcIpAddr,\n        Dst = DstIpAddr,\n        Dvc = coalesce(DvcIpAddr, DvcHostname),\n        Rule = NetworkRuleName,\n        User = SrcUsername,\n        Hostname = DstHostname\n    | project-away\n        bytesIn,\n        bytesOut,\n        start,\n        end,\n        CommunicationDirection,\n        AdditionalExtensions,\n        Device*,\n        Source*,\n        Destination*,\n        Activity,\n        ProcessID,\n        Protocol,\n        Reason,\n        ReceiptTime,\n        SimplifiedDeviceAction,\n        OriginalLogSeverity,\n        ProcessName,\n        EndTime,\n        ExternalID,\n        File*,\n        ReceivedBytes,\n        Message,\n        Old*,\n        EventOutcome,\n        Request*,\n        StartTime,\n        Field*,\n        Flex*,\n        Remote*,\n        Malicious*,\n        ThreatConfidence,\n        ThreatSeverity,\n        IndicatorThreatType,\n        ThreatDescription,\n        _ResourceId,\n        SentBytes,\n        ReportReferenceLink,\n        Computer,\n        TenantId,\n        Ip_*,\n        host,\n        NetworkProtocolNumber\n};\nparser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
