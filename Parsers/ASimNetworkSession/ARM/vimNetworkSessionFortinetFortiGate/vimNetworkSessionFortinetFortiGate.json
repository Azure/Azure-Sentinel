{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionFortinetFortiGate')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Fortinet FortiGate",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionFortinetFortiGate",
        "query": "let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventResultDetails:string)\n  [\n    \"accept\",\"Allow\",\"Success\",\"\"\n    , \"client-rst\",\"Reset Source\",\"Failure\",\"\"\n    , \"close\",\"\",\"Success\",\"\"\n    , \"deny\",\"Deny\",\"Failure\",\"\"\n    , \"ip-conn\",\"\",\"Failure\",\"IP connection error\"\n    , \"server-rst\",\"Reset Destination\",\"Failure\",\"\"\n    , \"timeout\",\"\",\"Failure\",\"\"\n  ];\n  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels\n  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)\n  [\n    \"1\", \"Informational\", // Debug\n    \"2\", \"Informational\", // Information\n    \"3\", \"Informational\", // Notification\n    \"4\", \"Low\", // Warning\n    \"5\", \"Low\", // Error\n    \"6\", \"Critical\", // High\n    \"7\", \"Alert\", // Medium\n    \"8\", \"High\" // Emergency\n  ];\n  let Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    CommonSecurityLog\n    | where not(disabled)\n    | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)\n    | where DeviceVendor == \"Fortinet\" and DeviceProduct startswith \"FortiGate\" and (column_ifexists(\"DeviceEventCategory\",\"\") has \"traffic\" or AdditionalExtensions has \"cat=traffic\")\n    | where DeviceAction != \"dns\" and Activity !has \"dns\" \n    | where (array_length(hostname_has_any)==0)\n    | where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\n    | extend temp_ResultMatch = case (\n        eventresult==\"*\", true,\n        (eventresult == \"Success\") and (DeviceAction in (\"accept\", \"close\") or Activity has_any (\"accept\", \"close\")), true,\n        (eventresult == \"Failure\") and (DeviceAction !in (\"accept\", \"close\") and not(Activity has_any (\"accept\", \"close\"))), true,\n        false\n    )\n    | where temp_ResultMatch\n    | extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n      , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n    | extend ASimMatchingIpAddr=case(\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n        temp_SrcMatch and temp_DstMatch, \"Both\",\n        temp_SrcMatch, \"SrcIpAddr\",\n        temp_DstMatch, \"DstIpAddr\",\n        \"No match\"\n    )\n    | where ASimMatchingIpAddr != \"No match\" \n    | parse Activity with \"traffic:forward \" temp_DeviceAction:string \n    | extend DeviceAction = coalesce(DeviceAction, temp_DeviceAction)  \n    | lookup EventLookup on DeviceAction \n    | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\n    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, ASimMatchingIpAddr, DvcAction\n    | project-rename DstBytes = ReceivedBytes\n      , DstInterfaceName = DeviceOutboundInterface\n      , DstIpAddr = DestinationIP\n      , DstPortNumber = DestinationPort\n      , Dvc = Computer\n      , EventMessage = Activity\n      , EventOriginalSeverity = LogSeverity\n      , EventProduct = DeviceProduct\n      , EventProductVersion = DeviceVersion\n      , SrcBytes = SentBytes\n      , SrcInterfaceName = DeviceInboundInterface\n      , SrcIpAddr = SourceIP\n      , SrcPortNumber = SourcePort\n      , DvcId = DeviceExternalID\n      , EventUid = _ItemId\n    | invoke _ASIM_ResolveNetworkProtocol ('Protocol')\n    | project-rename DvcOriginalAction = DeviceAction\n    | parse-kv AdditionalExtensions as (\n            FortinetFortiGatestart:datetime,\n            FortinetFortiGatesrcintfrole:string,\n            FortinetFortiGatedstintfrole:string,\n            FortinetFortiGateexternalID:string,\n            FortinetFortiGatepolicyid:int,\n            FortinetFortiGatedstcountry:string,\n            FortinetFortiGatesrccountry:string,\n            FortinetFortiGatecrscore:string,\n            FortinetFortiGateduration:int,\n            FortinetFortiGatesentpkt:long,\n            FortinetFortiGatercvdpkt:long\n        ) with (pair_delimiter=';', kv_delimiter='=')\n    | project-rename\n        EventStartTime          = FortinetFortiGatestart,\n        SrcZone                 = FortinetFortiGatesrcintfrole,\n        DstZone                 = FortinetFortiGatedstintfrole,\n        NetworkSessionId        = FortinetFortiGateexternalID,\n        NetworkRuleNumber       = FortinetFortiGatepolicyid,\n        NetworkDuration         = FortinetFortiGateduration,\n        DstGeoCountry           = FortinetFortiGatedstcountry,\n        SrcGeoCountry           = FortinetFortiGatesrccountry,\n        ThreatOriginalRiskLevel = FortinetFortiGatecrscore,\n        SrcPackets              = FortinetFortiGatesentpkt,\n        DstPackets              = FortinetFortiGatercvdpkt\n    | extend EventCount = int(1)\n      , EventSchema = \"NetworkSession\"\n      , EventSchemaVersion = \"0.2.3\"\n      , EventType = \"NetworkSession\"\n      , EventVendor = \"Fortinet\"\n      , DvcIdType = \"Other\"\n      , NetworkBytes = DstBytes + SrcBytes\n      , EventEndTime = TimeGenerated\n      , EventStartTime = coalesce(EventStartTime, TimeGenerated)\n      , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\n          , DstIpAddr contains \":\", \"IPv6\"\n          , \"\")\n      , NetworkPackets = DstPackets + SrcPackets\n      | lookup SeverityLookup on EventOriginalSeverity\n      | extend \n          Src = SrcIpAddr,\n          Dst = DstIpAddr,\n          SessionId = NetworkSessionId,\n          IpAddr = SrcIpAddr,\n          Duration = NetworkDuration,\n          Rule = tostring(NetworkRuleNumber)\n    | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber\n  };\n  Parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
