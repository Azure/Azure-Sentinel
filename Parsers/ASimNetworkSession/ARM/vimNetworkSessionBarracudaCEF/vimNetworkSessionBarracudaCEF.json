{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionBarracudaCEF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Barracuda WAF",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionBarracudaCEF",
        "query": "let ProtocolLookup = datatable(\n    Protocol_s: string,\n    NetworkProtocol: string,\n    NetworkProtocolVersion: string\n)[\n    \"TCP\", \"TCP\", \"\",\n    \"TCP/ip\", \"TCP\", \"\",\n    \"UDP\", \"UDP\", \"\",\n    \"UDP/ip\", \"UDP\", \"\",\n    \"ICMP\", \"ICMP\", \"IPV4\",\n    \"ICMPv6\", \"ICMP\", \"IPV6\",\n];\nlet SeverityLookup = datatable (severity: int, EventSeverity: string)\n    [\n    0, \"High\", \n    1, \"High\", \n    2, \"High\", \n    3, \"Medium\",\n    4, \"Low\",\n    5, \"Low\", \n    6, \"Informational\",\n    7, \"Informational\" \n];\nlet EventResultLookup = datatable (\n    ActionID_s: string,\n    EventResult: string,\n    DvcAction: string\n)\n    [\n    \"ALLOW\", \"Success\", \"Allow\",\n    \"DENY\", \"Failure\", \"Deny\"\n];\nlet parser = (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]), \n    dstipaddr_has_any_prefix: dynamic=dynamic([]),\n    ipaddr_has_any_prefix: dynamic=dynamic([]),\n    dstportnumber: int=int(null), \n    hostname_has_any: dynamic=dynamic([]),\n    dvcaction: dynamic=dynamic([]), \n    eventresult: string='*', \n    disabled: bool=false){\nlet src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\nlet BarracudaCEF = \n    CommonSecurityLog\n    | where not(disabled) and DeviceVendor startswith \"Barracuda\" and (DeviceProduct == \"WAF\" or DeviceProduct == \"WAAS\")\n    | where DeviceEventCategory == \"NF\"\n    | where (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n    | extend\n        temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any),\n        temp_DstMatch = has_any_ipv4_prefix(DestinationIP, dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n                                array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                                \"-\",\n                                temp_SrcMatch and temp_DstMatch,\n                                \"Both\",\n                                temp_SrcMatch,\n                                \"SrcIpAddr\",\n                                temp_DstMatch,\n                                \"DstIpAddr\",\n                                \"No match\"\n                            )\n    | where ASimMatchingIpAddr != \"No match\"\n        and (array_length(hostname_has_any) == 0 or DeviceName has_any (hostname_has_any))\n    | where (isnull(dstportnumber) or (DestinationPort == dstportnumber))\n    | lookup EventResultLookup on $left.DeviceAction == $right.ActionID_s\n    | where (array_length(dvcaction) == 0 or DvcAction has_any(dvcaction))\n    | where (eventresult == '*' or EventResult =~ eventresult)\n    | extend \n        severity = toint(LogSeverity)\n    | lookup SeverityLookup on severity\n    | lookup ProtocolLookup on $left.Protocol == $right.Protocol_s\n    | extend\n        EventCount = toint(1),\n        EventProduct = \"WAF\",\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventType = \"NetworkSession\",\n        EventVendor = \"Barracuda\"\n    | extend\n        Dvc = DeviceName,\n        DstIpAddr = DestinationIP,\n        SrcIpAddr = SourceIP,\n        DvcHostname = DeviceName,\n        DvcIpAddr = DestinationIP,                            \n        DstPortNumber = toint(DestinationPort),\n        SrcPortNumber = toint(SourcePort),\n        EventProductVersion = DeviceVersion,\n        EventUid = _ItemId,\n        EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))\n    | extend\n        IpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        Dst=DstIpAddr,\n        EventEndTime = EventStartTime\n    | project-away\n        ThreatConfidence,\n        CommunicationDirection,\n        AdditionalExtensions,\n        Device*,\n        Source*,\n        Destination*,\n        Activity,\n        LogSeverity,\n        ApplicationProtocol,\n        ProcessID,\n        ExtID,\n        Protocol,\n        Reason,\n        ReceiptTime,\n        SimplifiedDeviceAction,\n        OriginalLogSeverity,\n        ProcessName,\n        EndTime,\n        ExternalID,\n        File*,\n        ReceivedBytes,\n        Message,\n        Old*,\n        EventOutcome,\n        Request*,\n        StartTime,\n        Field*,\n        Flex*,\n        Remote*,\n        Malicious*,\n        severity,\n        ThreatSeverity,\n        IndicatorThreatType,\n        ThreatDescription,\n        _ResourceId,\n        SentBytes,\n        ReportReferenceLink,\n        Computer,\n        temp_*,\n        TenantId,CollectorHostName;\nBarracudaCEF\n};\nparser(\n    starttime=starttime, \n    endtime=endtime, \n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    dstportnumber=dstportnumber,\n    hostname_has_any=hostname_has_any, \n    dvcaction=dvcaction,\n    eventresult=eventresult, \n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
