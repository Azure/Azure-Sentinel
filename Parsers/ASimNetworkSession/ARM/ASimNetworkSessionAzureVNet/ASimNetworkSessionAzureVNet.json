{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionAzureVNet')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for Azure VNet flows",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionAzureVNet",
        "query": "let DvcActionLookup = datatable(FlowStatus:string, DvcAction:string, EventResult:string) [\n    'Allowed', 'Allow', 'Success',\n    'Denied', 'Deny', 'Failure',\n];\nlet NetworkDirectionLookup = datatable(FlowDirection:string, NetworkDirection:string, isOutBound:bool) [\n   'Inbound', 'Inbound', false,\n   'Outbound', 'Outbound', true\n];\nlet parser = (disabled:bool=false) \n{\n  let AzureNetworkAnalytics = (FlowDirection: string) {\n    NTANetAnalytics\n    | where not(disabled) and isnotempty(FlowType)\n    //| where FlowDirection == FlowDirection_s\n    | lookup NetworkDirectionLookup on FlowDirection\n  };\nlet NTANetAnalyticsInbound =\n    AzureNetworkAnalytics ('Inbound')\n    | where not(isOutBound)\n    | project-rename\n        DstMacAddr = MacAddress\n    | extend\n        DstBytes = tolong(BytesSrcToDest), // -- size fields seem not to be populated for inbound\n        DstPackets = tolong(PacketsSrcToDest),\n        SrcBytes = tolong(BytesDestToSrc),\n        SrcPackets = tolong(PacketsDestToSrc),\n        SrcInterfaceName = tostring(split(SrcNic, '/')[1]), //--need to check\n        SrcGeoCountry = toupper(Country)\n    | extend hostelements=split(DestVm,'/') \n    | extend \n        DstFQDN = strcat(hostelements[0], @\"\\\", hostelements[1]), \n        DstHostname = tostring(hostelements[1]), \n        DstDomain = tostring(hostelements[0]), \n        DstDomainType = \"ResourceGroup\"\n    | extend Hostname = DstHostname\n    | project-away hostelements, isOutBound\n  ;\nlet NTANetAnalyticsOutbound =\n    AzureNetworkAnalytics ('Outbound')\n    | where isOutBound\n    | project-rename\n        SrcMacAddr = MacAddress\n    | extend\n        SrcBytes = tolong(BytesSrcToDest), \n        SrcPackets = tolong(PacketsSrcToDest),\n        DstBytes = tolong(BytesDestToSrc),\n        DstPackets = tolong(PacketsDestToSrc),\n        DstInterfaceName = tostring(split(DestNic, '/')[1]), //--need to check\n        DstGeoCountry = toupper(Country)\n    | extend hostelements=split(SrcVm,'/')\n    | extend \n        SrcFQDN = strcat(hostelements[0], @\"\\\", hostelements[1]),\n        SrcHostname = tostring(hostelements[1]),\n        SrcDomain = tostring(hostelements[0]),\n        SrcDomainType = \"ResourceGroup\"\n    | extend Hostname = SrcHostname\n    | project-away hostelements, isOutBound\n  ;\n  union NTANetAnalyticsInbound, NTANetAnalyticsOutbound\n    | project-rename\n      Dvc = NsgList,\n      SrcSubscriptionId = SrcSubscription, //--need to check\n      DstSubscriptionId = DestSubscription, //--need to check\n      SrcGeoRegion = SrcRegion, //--need to check\n      DstGeoRegion = DestRegion, //--need to check\n      EventEndTime = FlowEndTime,\n      EventStartTime = FlowStartTime,\n      NetworkApplicationProtocol = L7Protocol,\n      NetworkRuleName = NsgRule,\n      NetworkSessionId = ConnectionName,\n      EventOriginalSubType = FlowType\n    | extend\n      DstPortNumber = toint(DestPort),\n      EventProduct = 'NSGFlow',\n      EventSchema = 'NetworkSession',\n      EventSchemaVersion='0.2.6',\n      EventSeverity = 'Informational', //??\n      EventType = 'Flow',\n      EventVendor = 'Microsoft',\n      EventCount = toint(AllowedInFlows+DeniedInFlows+AllowedOutFlows+DeniedOutFlows),\n      NetworkDuration = toint((((EventEndTime - datetime(1970-01-01)) / 1s) - ((EventStartTime - datetime(1970-01-01)) / 1s )) * 1000),\n      Rule = NetworkRuleName,\n      SessionId = NetworkSessionId\n    | lookup DvcActionLookup on FlowStatus  //--need to check\n    | extend \n      DstIpAddr = iff(isnotempty(DestIp),\n                      DestIp,\n                      split(DestPublicIps, '|')[0]),\n      Duration = NetworkDuration,\n      NetworkBytes = tolong(DstBytes + SrcBytes),\n      NetworkPackets = tolong(DstPackets + SrcPackets),\n      SrcIpAddr = iff(isnotempty(SrcIp),\n                      SrcIp,\n                      split(SrcPublicIps, '|')[0])\n    | extend\n      Dst = DstIpAddr,\n      IpAddr = SrcIpAddr,\n      Src = SrcIpAddr\n    | extend NetworkProtocol = L4Protocol\n    | project-keep\n      Src*,\n      Dst*,\n      Event*,\n      Dvc*,\n      Network*,\n      IpAddr,\n      Hostname,\n      Type,\n      Duration,\n      SessionId,\n      TimeGenerated\n  };\nparser (disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}