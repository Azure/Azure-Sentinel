{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionCrowdStrikeFalconHost')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "NetworkSession ASIM Parser for CrowdStrike Falcon Endpoint Protection",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionCrowdStrikeFalconHost",
        "query": "let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)\n[\n    \"0\", \"Informational\",\n    \"1\", \"Informational\",\n    \"2\", \"Low\",\n    \"3\", \"Medium\",\n    \"4\", \"High\",\n    \"5\", \"High\"\n];\nlet EventFieldsLookup = datatable (\n    ruleAction: int,\n    DvcOriginalAction: string,\n    DvcAction: string,\n    EventResult: string\n)\n[\n    0, \"invalid\", \"Deny\", \"Failure\",\n    1, \"allowed\", \"Allow\", \"Success\",\n    2, \"blocked\", \"Deny\", \"Failure\"\n];\n//ActionLokkup is prepapred by considering facts as below:\n//Response bit: KILL PROCESS, modifier bit: '', DvcAction: Deny\n//Response bit: KILL PROCESS, modifier bit: POLICY_DISABLED, DvcAction: Allow as here process would have been killed or blocked if policy was enabled so current event is not killed.\nlet ActionLookup = datatable (\n    EventOutcome: string,\n    DvcOriginalAction: string,\n    DvcAction: string,\n    EventResult: string\n)\n[\n    \"0\", \"Detection\", \"Allow\", \"Success\",\n    \"2\", \"Detection\", \"Allow\", \"Success\",\n    \"16\", \"Prevention-killed\", \"Deny\", \"Failure\",\n    \"128\", \"Quarantine\", \"Allow\", \"Success\",\n    \"144\", \"Prevention-killed,quarantine\", \"Deny\", \"Failure\",\n    \"272\", \"Detection\", \"Allow\", \"Success\",\n    \"400\", \"Detection-quarantine\", \"Allow\", \"Success\",\n    \"512\", \"Prevention-killed\", \"Deny\", \"Failure\",\n    \"640\", \"Prevention-killed,quarantine\", \"Deny\", \"Failure\",\n    \"768\", \"Detection\", \"Allow\", \"Success\", \n    \"1024\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"1040\", \"Prevention-killed,blocked\", \"Deny\", \"Failure\",\n    \"1152\", \"Prevention-blocked,quarantine\", \"Deny\", \"Failure\",\n    \"1168\", \"Prevention-killed,blocked,quarnatine\", \"Deny\", \"Failure\",\n    \"1280\", \"Detection\", \"Allow\", \"Success\",\n    \"1296\", \"Detection\", \"Allow\", \"Success\",\n    \"2048\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"2176\", \"Prevention-quarantine,blocked \", \"Deny\", \"Failure\",\n    \"2304\", \"Detection\", \"Allow\", \"Success\",\n    \"2432\", \"Detection-quarantine\", \"Allow\", \"Success\",\n    \"4096\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"4112\", \"Prevention-blocked,killed\", \"Deny\", \"Failure\",\n    \"4224\", \"Prevention-blocked,quarantine\", \"Deny\", \"Failure\",\n    \"4240\", \"Prevention-killed,blocked,quarantine\", \"Deny\", \"Failure\",\n    \"4352\", \"Detection\", \"Allow\", \"Success\",\n    \"4368\", \"Detection\", \"Allow\", \"Success\",\n    \"4638\", \"Detection\", \"Allow\", \"Success\",\n    \"5120\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"8192\", \"Disabled\", \"Allow\", \"Success\",\n    \"8208\", \"Detection\", \"Allow\", \"Success\",\n    \"8320\", \"Detection-quarnatine\", \"Allow\", \"Success\",\n    \"8704\", \"Detection\", \"Allow\", \"Success\",\n    \"9216\", \"Detection\", \"Allow\", \"Success\",\n    \"10240\", \"Detection\", \"Allow\", \"Success\",\n    \"12304\", \"Detection\", \"Allow\", \"Success\",\n    \"16400\", \"Killed\", \"Deny\", \"Failure\",\n    \"32768\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"32896\", \"Prevention-blocked,quarantine\", \"Deny\", \"Failure\",\n    \"33024\", \"Detection\", \"Allow\", \"Success\",\n    \"65536\", \"Downgraded\", \"Allow\", \"Success\",\n    \"65552\", \"Prevention-killed\", \"Deny\", \"Failure\",\n    \"65792\", \"Detection-downgraded\", \"Allow\", \"Success\",\n    \"65808\", \"Detection-downgraded\", \"Allow\", \"Success\",\n    \"73728\", \"Detection-downgraded\", \"Allow\", \"Success\",\n    \"73744\", \"Detection-downgraded\", \"Allow\", \"Success\",\n    \"131088\", \"Prevention-killed\", \"Deny\", \"Failure\",\n    \"131216\", \"Prevention-killed,quarantine\", \"Deny\", \"Failure\",\n    \"131584\", \"Prevention-killed\", \"Deny\", \"Failure\",\n    \"131712\", \"Prevention-killed,quarantine\", \"Deny\", \"Failure\",\n    \"2099200\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"2099328\", \"Prevention-blocked,quarantine\", \"Deny\", \"Failure\",\n    \"4196352\", \"Prevention-blocked\", \"Deny\", \"Failure\",\n    \"4196480\", \"Prevention-blocked,quarantine\", \"Deny\", \"Failure\",\n    \"1048576\", \"Prevention-suspend\", \"Deny\", \"Failure\",\n    \"524288\", \"Prevention-suspend\", \"Deny\", \"Failure\",\n    \"262144\", \"Blocking Disabled\", \"Allow\", \"Success\",\n    \"16384\", \"Safeguard Enabled\", \"Allow\", \"Success\",\n    \"131072\", \"Kill Failed\", \"Deny\", \"Failure\",\n    \"256\", \"Policy Disabled\", \"Allow\", \"Success\",\n    \"2097152\", \"Response Action Already Applied\", \"Deny\", \"Failure\",\n    \"4194304\", \"Response Failed\", \"Deny\", \"Failure\"\n];\nlet parser = (starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]), \n    dstipaddr_has_any_prefix: dynamic=dynamic([]), \n    ipaddr_has_any_prefix: dynamic=dynamic([]),\n    dstportnumber: int=int(null), \n    hostname_has_any: dynamic=dynamic([]), \n    dvcaction: dynamic=dynamic([]), \n    eventresult: string='*', \n    disabled: bool=false) {\n    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let alldata = CommonSecurityLog\n        | where not(disabled)\n            and (isnull(starttime) or TimeGenerated >= starttime)\n            and (isnull(endtime) or TimeGenerated <= endtime)\n        | where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n        | where DeviceEventClassID in (\"Network Access In A Detection Summary Event\", \"FirewallMatchEvent\")\n        | where (array_length(hostname_has_any) == 0 or DestinationHostName has_any (hostname_has_any))\n            and (isnull(dstportnumber) or (DestinationPort == dstportnumber) or (AdditionalExtensions has tostring(dstportnumber)))\n    ;\n    let firewalldata = alldata\n        | where DeviceEventClassID == \"FirewallMatchEvent\"\n        | parse-kv AdditionalExtensions as (deviceId: string, cmdLine: string, connectionDirection: int, eventType: string, hostName: string, icmpCode: int, icmpType: string, localAddress: string, localPort: int, matchCount: int, networkProfile: string, protocol: int, remoteAddress: string, remotePort: int, ruleAction: int, ruleDescription: string, ruleGroupName: string, ruleName: string, status: string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n        | lookup EventFieldsLookup on ruleAction\n        | where ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\n        | where ((eventresult == \"*\") or EventResult == eventresult)\n        | extend\n            EventCount = matchCount,\n            EventStartTime = unixtime_milliseconds_todatetime(tolong(ReceiptTime)),\n            NetworkDirection = case(\n                      connectionDirection == 1, \"Inbound\",\n                      connectionDirection == 2, \"Outbound\",\n                      \"\"\n                  ),\n              SrcIpAddr = case(\n                  connectionDirection == 1, remoteAddress,\n                  connectionDirection == 2, localAddress,\n                  \"\"\n              ),\n              SrcPortNumber = case(\n                      connectionDirection == 1, remotePort,\n                      connectionDirection == 2, localPort,\n                      int(null)\n                  ),\n              DstIpAddr = case(\n                  connectionDirection == 1, remoteAddress,\n                  connectionDirection == 2, localAddress,\n                  \"\"\n              ),\n              DstPortNumber = case(\n                      connectionDirection == 1, localPort,\n                      connectionDirection == 2, remotePort,\n                      int(null)\n                  )\n        | where (isnull(dstportnumber) or (DstPortNumber == dstportnumber))\n        | extend\n            temp_isSrcMatch = has_any_ipv4_prefix(SrcIpAddr, src_or_any), \n            temp_isDstMatch = has_any_ipv4_prefix(DstIpAddr, dst_or_any)\n        | extend ASimMatchingIpAddr = case(\n                                  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                                  \"-\", \n                                  (temp_isSrcMatch and temp_isDstMatch),\n                                  \"Both\", \n                                  temp_isSrcMatch,\n                                  \"SrcIpAddr\",\n                                  temp_isDstMatch,\n                                  \"DstIpAddr\",\n                                  \"No match\" \n                              )        \n        | where ASimMatchingIpAddr != \"No match\"\n        | extend deviceIp = iff(hostName matches regex \"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\", hostName, \"\")\n        | extend \n            hostName = iff(isempty(deviceIp), hostName, \"\"),\n            AdditionalFields = bag_pack(\n                      \"networkProfile\", networkProfile,\n                      \"ruleDescription\", ruleDescription,\n                      \"ruleGroupName\", ruleGroupName,\n                      \"cmdLine\", cmdLine\n                  ),\n            NetworkIcmpCode = icmpCode\n        | invoke _ASIM_ResolveDvcFQDN('hostName')\n        | invoke _ASIM_ResolveNetworkProtocol('protocol')\n        | extend NetworkIcmpType = _ASIM_LookupICMPType('icmpType')\n        | project-rename\n            DvcId = deviceId,\n            DvcIpAddr = deviceIp,\n            EventOriginalSubType = eventType,\n            NetworkRuleName = ruleName\n        | extend\n            Rule = NetworkRuleName,\n            Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr);\n    let networkaccessdata = alldata\n        | where DeviceEventClassID has \"Network Access In A Detection Summary Event\"\n        | lookup ActionLookup on EventOutcome\n        | where ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\n        | where ((eventresult == \"*\") or EventResult == eventresult)\n        | extend\n            temp_isSrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any), \n            temp_isDstMatch = has_any_ipv4_prefix(DestinationIP, dst_or_any)\n        | extend ASimMatchingIpAddr = case(\n                                  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                                  \"-\", \n                                  (temp_isSrcMatch and temp_isDstMatch),\n                                  \"Both\", \n                                  temp_isSrcMatch,\n                                  \"SrcIpAddr\",\n                                  temp_isDstMatch,\n                                  \"DstIpAddr\",\n                                  \"No match\" \n                              )        \n        | where ASimMatchingIpAddr != \"No match\"\n        | parse-kv AdditionalExtensions as (CSMTRPatternDisposition: string, tactic: string, technique: string, objective: string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n        | invoke _ASIM_ResolveSrcFQDN('DestinationHostName')\n        | extend ASimMatchingHostname = case(\n                                    array_length(hostname_has_any) == 0,\n                                    \"-\",\n                                    SrcHostname has_any (hostname_has_any),\n                                    \"SrcHostname\",\n                                    \"No match\"\n                                )\n        | where ASimMatchingHostname != \"No match\"\n        | extend\n            EventStartTime = todatetime(DeviceCustomDate1),\n            DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),\n            SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),\n            EventCount = int(1),\n            SrcDomain = coalesce(SrcDomain, DestinationNTDomain),\n            EventOriginalResultDetails = CSMTRPatternDisposition,\n            SrcProcessId = tostring(FieldDeviceCustomNumber2),\n            SrcDomainType = iff(isnotempty(DestinationNTDomain), \"Windows\", SrcDomainType),\n            AdditionalFields = bag_pack(\n                      \"CSMTRPatternDisposition\", CSMTRPatternDisposition, \n                      \"Tactic\", coalesce(tactic, Activity),\n                      \"Technique\", coalesce(technique, DeviceAction),\n                      \"Objective\", coalesce(objective, Reason),\n                      DeviceCustomString6Label, DeviceCustomString6\n                  )\n        | project-rename\n            DvcId = ExtID,\n            DstPortNumber = DestinationPort,\n            SrcPortNumber = SourcePort,\n            SrcMacAddr = SourceMACAddress,\n            SrcUsername = DestinationUserName,\n            SrcProcessName = FileName\n        | extend\n            Dvc = DvcId,\n            Hostname = SrcHostname,\n            User = SrcUsername,\n            SrcAppId = SrcProcessId,\n            SrcAppName = SrcProcessName,\n            SrcAppType = \"Process\",\n            SrcUserType = _ASIM_GetUserType(SrcUsername, \"\"),\n            SrcUsernameType = _ASIM_GetUsernameType(SrcUsername);\n    union firewalldata, networkaccessdata\n    | lookup EventSeverityLookup on LogSeverity\n    | extend NetworkProtocolVersion = case(\n                                      DstIpAddr contains \".\", \"IPv4\",\n                                      DstIpAddr contains \":\", \"IPv6\",\n                                      \"\"\n                                  )\n    | extend\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventVendor = \"CrowdStrike\",\n        EventProduct = \"FalconHost\",\n        EventType = \"EndpointNetworkSession\"\n    | project-rename\n        EventOriginalType = DeviceEventClassID,\n        EventProductVersion = DeviceVersion,\n        EventUid = _ItemId,\n        EventOriginalSeverity= LogSeverity\n    | extend\n        EventEndTime = EventStartTime,\n        Dst = DstIpAddr,\n        Src = coalesce(SrcFQDN, SrcHostname, SrcIpAddr),\n        IpAddr = SrcIpAddr,\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\")\n    | project-away \n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        Computer,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        Protocol,\n        Activity,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        SimplifiedDeviceAction,\n        StartTime,\n        TenantId,\n        Threat*,\n        ExternalID,\n        ReportReferenceLink,\n        ReceiptTime,\n        Reason,\n        ApplicationProtocol,\n        _ResourceId,\n        ExtID,\n        Message,\n        EventOutcome,\n        IndicatorThreatType,\n        cmdLine,\n        connectionDirection,\n        hostName,\n        matchCount,\n        networkProfile,\n        protocol,\n        ruleAction,\n        ruleDescription,\n        ruleGroupName,\n        icmpCode,\n        icmpType,\n        status,\n        CSMTRPatternDisposition,\n        temp_*,\n        NetworkProtocolNumber,\n        localAddress,\n        localPort,\n        remoteAddress,\n        remotePort\n};\nparser(\n    starttime=starttime, \n    endtime=endtime,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    dstportnumber=dstportnumber, \n    hostname_has_any=hostname_has_any, \n    dvcaction=dvcaction, \n    eventresult=eventresult, \n    disabled=disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),dvcaction:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
