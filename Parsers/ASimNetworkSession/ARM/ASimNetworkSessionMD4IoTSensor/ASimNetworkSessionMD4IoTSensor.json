{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionMD4IoTSensor')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for Microsoft Defender for IoT sensor logs",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionMD4IoTSensor",
        "query": "let parser = (disabled:bool=false) \n{\n  DefenderIoTRawEvent\n  | where RawEventName == \"NetworkConnectionData\"\n  | project-rename \n      DvcSubscriptionId = AzureSubscriptionId\n  | extend \n      Dvc = tostring(EventDetails.SourceId),\n      DstDvcId = tostring(EventDetails.Destination.DeviceId),\n      DstMacAddr = tostring(EventDetails.Destination.MacAddress),\n      DstIpAddr = tostring(EventDetails.Destination.IPAddress),\n      DstPortNumber = toint(EventDetails.Destination.Port),\n      DstDescription = tostring(EventDetails.Destination.DeviceName),\n      SrcDvcId = tostring(EventDetails.Source.DeviceId),\n      SrcMacAddr = tostring(EventDetails.Source.MacAddress),\n      SrcIpAddr = tostring(EventDetails.Source.IPAddress),\n      SrcPortNumber = toint(EventDetails.Source.Port),\n      SrcDescription = tostring(EventDetails.Source.DeviceName),\n      EventOriginalUid = tostring(EventDetails.Id),\n      EventEndTime = todatetime(EventDetails.LastSeen),\n      EventStartTime = todatetime(EventDetails.StartTime),\n      NetworkProtocol = tostring(EventDetails.TransportProtocol)\n  | extend\n      EventProduct = 'Defender for IoT',\n      EventResult = 'Success',\n      EventSchema = 'NetworkSession',\n      EventSchemaVersion='0.2.4',\n      EventCount = toint(1),\n      EventSeverity = 'Informational',\n      EventType = iff(DstIpAddr=='' and SrcIpAddr == '','L2NetworkSession','NetworkSession'),\n      NetworkDirection = iff(tobool(EventDetails.IsInternal), 'Local',''),\n      EventVendor = 'Microsoft',\n      DstDvcIdType = 'MD4IoTid',\n      SrcDvcIdType = 'MD4IoTid'\n  | extend // -- Aliases\n      Dst = coalesce(DstIpAddr,DstMacAddr),\n      Src = coalesce(SrcIpAddr,SrcMacAddr),\n      IpAddr = SrcIpAddr,\n      EventStartTime = EventEndTime\n  | project-away \n      RawEventCategory, RawEventName, RawEventType, SourceSystem, TenantId, AgentVersion, IoTRawEventId, IsEmpty, AgentId, DeviceId, TimeStamp\n  | project-away EventDetails, AssociatedResourceId\n};\nparser (disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
