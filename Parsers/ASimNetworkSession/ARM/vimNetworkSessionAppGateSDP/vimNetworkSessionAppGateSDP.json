{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionAppGateSDP')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for AppGate SDP",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionAppGateSDP",
        "query": "let parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstportnumber:int=int(null), \n  hostname_has_any:dynamic=dynamic([]), \n  dvcaction:dynamic=dynamic([]), \n  eventresult:string='*', \n  disabled:bool=false\n) \n{\n  let DirectionLookup = datatable (direction:string, NetworkDirection:string) \n  [\n    'up', 'Inbound',\n    'down', 'Outbound'\n  ];\n  let ActionLookup = datatable (DvcOriginalAction:string, DvcAction:string, EventSeverity:string, EventResult:string)\n  [\n    'allow', 'Allow', 'Informational', 'Success',\n    'drop', 'Drop', 'Low', 'Failure',\n    'reject', 'Deny', 'Low', 'Failure',\n    'block', 'Deny', 'Low', 'Failure',\n    'block_report', 'Deny', 'Low', 'Failure',\n    'allow_report', 'Allow', 'Informational', 'Success'\n  ];\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    \n  let ip_access_events = \n    Syslog\n    | where (isnull(starttime) or TimeGenerated>=starttime) \n      and (isnull(endtime) or TimeGenerated<=endtime) \n      and not(disabled)\n      and (array_length(hostname_has_any) == 0)\n      and ProcessName in (\"cz-sessiond\", \"cz-vpnd\")\n      and SyslogMessage has_all (\"[AUDIT]\",'\"event_type\":\"ip_access\"')\n    | project TimeGenerated, SyslogMessage, Computer\n  ;\n  let tcpupd_success = \n    ip_access_events\n    | where \n      SyslogMessage has '\"rule_name\"'\n      and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \n      and (isnull(dstportnumber) or SyslogMessage has (strcat('\"destination_port\":', tostring(dstportnumber)))) \n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \n    | lookup ActionLookup on DvcOriginalAction\n    | where \n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\n      and (eventresult=='*' or EventResult == eventresult)\n    | parse-where SyslogMessage with \n        *\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\n        '\"client_port\":' SrcPortNumber:int ',' *\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\n        '\"destination_port\":' DstPortNumber:int ',' *\n        '\"direction\":\"' direction:string '\",' * \n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\n        '\"packet_size\":' SrcBytes:long ',' *\n        '\"protocol\":\"' NetworkProtocol:string '\",' *          \n        '\"rule_name\":\"' NetworkRuleName:string '\",' *  \n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\n        '\"source_port\":' SrcNatPortNumber:int ',' * \n        '\"version\":' EventProductVersion:string '}' *\n    ;\n  let tcpupd_fail = \n    ip_access_events\n    | where \n      SyslogMessage has'\"drop-reason\"'\n      and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \n      and (isnull(dstportnumber) or SyslogMessage has (strcat('\"destination_port\":', tostring(dstportnumber)))) \n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \n    | lookup ActionLookup on DvcOriginalAction\n    | where \n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\n      and (eventresult=='*' or EventResult == eventresult)\n    | parse-where SyslogMessage with \n        *\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\n        '\"client_port\":' SrcPortNumber:int ',' *\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\n        '\"destination_port\":' DstPortNumber:int ',' *\n        '\"direction\":\"' direction:string '\",' * \n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\n        '\"drop-reason\":\"' EventOriginalResultDetails:string '\",' *\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\n        '\"packet_size\":' SrcBytes:long ',' *\n        '\"protocol\":\"' NetworkProtocol:string '\",' *\n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\n        '\"source_port\":' SrcNatPortNumber:int ',' * \n        '\"version\":' EventProductVersion:string '}' *\n      ;\n  let icmp_success = \n    ip_access_events\n    | where \n      SyslogMessage has '\"ICMP\"'\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \n      and (isnull(dstportnumber)) \n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \n    | lookup ActionLookup on DvcOriginalAction\n    | where \n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\n      and (eventresult=='*' or EventResult == eventresult)\n    | parse-where SyslogMessage with \n        *\n        '\"action\":\"' DvcOriginalAction:string '\",' * \n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\n        '\"client_port\":' SrcPortNumber:int ',' *\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\n        '\"direction\":\"' direction:string '\",' * \n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\n        '\"icmp_code\":' NetworkIcmpSubCode:int ',' *\n        '\"icmp_type\":' NetworkIcmpCode:int ',' *  \n        '\"packet_size\":' SrcBytes:long ',' *\n        '\"protocol\":\"' NetworkProtocol:string '\",' *          \n        '\"rule_name\":\"' NetworkRuleName:string '\",' *  \n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\n        '\"version\":' EventProductVersion:string '}' *\n    ;\n  union  tcpupd_success, tcpupd_fail, icmp_success \n  | extend \n    temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), \n    temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n  | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n  )\n  | project-away temp*\n  | where ASimMatchingIpAddr != \"No match\"\n  | parse SyslogMessage with \n      *\n      '\"country_name\":\"' SrcGeoCountry:string '\",' *\n      '\"lat\":' SrcGeoLatitude:real ',' *        \n      '\"lon\":' SrcGeoLongitude:real '}' *\n  | parse SyslogMessage with \n       *\n      '\"city_name\":\"' SrcGeoCity:string '\",' *\n      '\"region_name\":\"' SrcGeoRegion:string '\",' *\n  | extend \n      SrcDvcIdType = 'AppGateId',\n      SrcUsernameType = 'UPN'\n  // -- Event fields\n  | project-rename \n      DvcHostname = Computer\n  | extend \n      EventCount = int(1),\n      EventEndTime = TimeGenerated,\n      EventStartTime = TimeGenerated,\n      EventSchema = 'NetworkSession',\n      EventSchemaVersion = '0.2.3',\n      EventVendor = 'AppGate',\n      EventProduct = 'SDP',\n      EventType = 'NetworkSession'\n  | lookup DirectionLookup on direction\n  // -- Aliases\n  | extend \n      Src = SrcIpAddr,\n      Dst = DstIpAddr,\n      Dvc = DvcHostname,\n      SessionId = NetworkSessionId,\n      IpAddr = SrcIpAddr,\n      Rule = NetworkRuleName,\n  // -- Entity identifier explicit aliases\n      SrcUserUpn = SrcUsername\n  | project-away \n      SyslogMessage, direction\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
