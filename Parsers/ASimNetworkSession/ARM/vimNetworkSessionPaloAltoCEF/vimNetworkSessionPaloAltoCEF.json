{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionPaloAltoCEF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Palo Alto PanOS",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionPaloAltoCEF",
        "query": "let Actions=datatable(DeviceAction:string,DvcAction:string)\n[ \"reset client\",\"Reset Source\"\n, \"reset server\",\"Reset Destination\"\n, \"reset both\", \"Reset\"\n, \"allow\",\"Allow\"\n, \"deny\",\"Deny\"\n, \"drop\", \"Drop\"\n, \"drop ICMP\", \"Drop ICMP\"\n, \"reset-client\",\"Reset Source\"\n, \"reset-server\",\"Reset Destination\"\n, \"reset-both\", \"Reset\"\n, \"drop-icmp\", \"Drop ICMP\"];\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \nlet NWParser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\nCommonSecurityLog \n| where (isnull(starttime) or TimeGenerated>=starttime)\n  and     (isnull(endtime) or TimeGenerated<=endtime)\n| where not(disabled)\n| where DeviceVendor == \"Palo Alto Networks\" and DeviceProduct == \"PAN-OS\" and Activity == \"TRAFFIC\"\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\n  and (array_length(hostname_has_any)==0)\n    // dvcaction - post filterring\n    and (eventresult==\"*\" or (DeviceAction==\"allow\" and eventresult==\"Success\") or (eventresult==\"Failure\" and DeviceAction!=\"allow\"))\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n       , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n                              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n                              temp_SrcMatch and temp_DstMatch, \"Both\",\n                              temp_SrcMatch, \"SrcIpAddr\",\n                              temp_DstMatch, \"DstIpAddr\",\n                              \"No match\"\n                          )\n  | where ASimMatchingIpAddr != \"No match\" \n  | project-away temp_*\n| parse AdditionalExtensions with \"PanOSPacketsReceived=\" DstPackets:long * \"PanOSPacketsSent=\" SrcPackets:long *\n  // -- Adjustment to support both old and new CSL fields.\n| extend \n  EventStartTime =  coalesce(\n    todatetime(StartTime), \n    extract(@'start=(.*?)(?:;|$)',1, AdditionalExtensions,typeof(datetime)),\n    datetime(null)\n  ),\n  EventOriginalResultDetails = coalesce(\n    column_ifexists(\"Reason\", \"\"),\n    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string)),\n    \"\"\n  )\n| project-rename \n      EventProductVersion=DeviceVersion // Not Documented\n    , Dvc=DeviceName   \n    , NetworkApplicationProtocol=ApplicationProtocol\n    , SrcZone=DeviceCustomString4 \n    , DstZone=DeviceCustomString5\n    , NetworkRuleName=DeviceCustomString1\n    , SrcUsername=SourceUserName \n    , DstUsername=DestinationUserName \n    , EventOriginalSeverity=LogSeverity\n    , SrcNatIpAddr=SourceTranslatedAddress\n    , DstNatIpAddr=DestinationTranslatedAddress\n    , PaloAltoFlags=FlexString1 // Flags\n| extend\n  EventVendor=\"Palo Alto\"\n    ,EventProduct=\"PanOS\"\n    , DstBytes=tolong(ReceivedBytes) \n    , SrcBytes=tolong(SentBytes)      \n    , NetworkProtocol=toupper(Protocol)\n    , NetworkBytes=tolong(FlexNumber1)\n    , SrcUsernameType=case(isempty(SrcUsername), \"\", SrcUsername contains \"@\", \"UPN\", \"Simple\")\n    , DstUsernameType=case(isempty(DstUsername), \"\", DstUsername contains \"@\", \"UPN\", \"Simple\")\n    , EventType=\"NetworkSession\"\n    , EventCount=toint(1)\n    , EventResult=case(DeviceAction==\"allow\",\"Success\",\"Failure\")\n    // -- Adjustment to support both old and new CSL fields.\n    , NetworkPackets = coalesce(\n        tolong(column_ifexists(\"FieldDeviceCustomNumber2\", long(null))),\n        tolong(column_ifexists(\"DeviceCustomNumber2\",long(null)))\n      )\n    , NetworkSessionId = coalesce(\n        tostring(column_ifexists(\"FieldDeviceCustomNumber1\", long(null))),\n        tostring(column_ifexists(\"DeviceCustomNumber1\",long(null)))\n      )\n    , NetworkDuration= coalesce(\n        toint(1000*column_ifexists(\"FieldDeviceCustomNumber3\", 0)),\n        toint(1000*column_ifexists(\"DeviceCustomNumber3\",0)),\n        int(null)\n      )\n    , EventSchemaVersion=\"0.2.3\"\n    , EventSchema=\"NetworkSession\"\n    , EventSeverity = \"Informational\"\n  | extend hostelements=split(Dvc,'.')\n  | extend DvcHostname=tostring(hostelements[0])\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\n  | extend DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\n        , DvcDomainType=iff(Dvc contains \".\",\"FQDN\",\"\" )\n| project-away hostelements\n| lookup Actions on DeviceAction\n// Action post filtering\n| where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\n| project-rename\n    DstMacAddr=DestinationMACAddress\n    , SrcMacAddr=SourceMACAddress\n    , DstIpAddr=DestinationIP\n    , DstPortNumber=DestinationPort\n    , DstNatPortNumber=DestinationTranslatedPort\n  , SrcPortNumber=SourcePort\n    , SrcIpAddr=SourceIP\n  , SrcNatPortNumber=SourceTranslatedPort\n  , DvcOutboundInterface=DeviceOutboundInterface\n  , DvcInboundInterface=DeviceInboundInterface\n  , EventMessage=Message\n  , DvcOriginalAction=DeviceAction\n// -- Aliases\n| extend\n  IpAddr = SrcIpAddr,\n  Rule=NetworkRuleName,\n  Dst=DstIpAddr,\n  // Host=DstHostname,\n  User=DstUsername,\n  Duration=NetworkDuration,\n  SessionId=NetworkSessionId,\n  EventEndTime =EventStartTime,\n  Src=SrcIpAddr\n  | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, EventOutcome, FieldDevice*, ExtID, Reason, Activity, Computer, OriginalLogSeverity, PaloAltoFlags, Protocol\n};\nNWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
