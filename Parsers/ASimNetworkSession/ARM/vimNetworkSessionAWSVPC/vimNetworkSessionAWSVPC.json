{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionAWSVPC')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for AWS VPC logs",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionAWSVPC",
        "query": "let ProtocolLookup = datatable(Protocol:int, NetworkProtocol:string) [\n    0,\"HOPOPT\",\n    1,\"ICMP\",\n    2,\"IGMP\",\n    3,\"GGP\",\n    4,\"IPv4\",\n    5,\"ST\",\n    6,\"TCP\",\n    7,\"CBT\",\n    8,\"EGP\",\n    9,\"IGP\",\n    10,\"BBN-RCC-MON\",\n    11,\"NVP-II\",\n    12,\"PUP\",\n    13,\"ARGUS (deprecated)\",\n    14,\"EMCON\",\n    15,\"XNET\",\n    16,\"CHAOS\",\n    17,\"UDP\",\n    18,\"MUX\",\n    19,\"DCN-MEAS\",\n    20,\"HMP\",\n    21,\"PRM\",\n    22,\"XNS-IDP\",\n    23,\"TRUNK-1\",\n    24,\"TRUNK-2\",\n    25,\"LEAF-1\",\n    26,\"LEAF-2\",\n    27,\"RDP\",\n    28,\"IRTP\",\n    29,\"ISO-TP4\",\n    30,\"NETBLT\",\n    31,\"MFE-NSP\",\n    32,\"MERIT-INP\",\n    33,\"DCCP\",\n    34,\"3PC\",\n    35,\"IDPR\",\n    36,\"XTP\",\n    37,\"DDP\",\n    38,\"IDPR-CMTP\",\n    39,\"TP++\",\n    40,\"IL\",\n    41,\"IPv6\",\n    42,\"SDRP\",\n    43,\"IPv6-Route\",\n    44,\"IPv6-Frag\",\n    45,\"IDRP\",\n    46,\"RSVP\",\n    47,\"GRE\",\n    48,\"DSR\",\n    49,\"BNA\",\n    50,\"ESP\",\n    51,\"AH\",\n    52,\"I-NLSP\",\n    53,\"SWIPE (deprecated)\",\n    54,\"NARP\",\n    55,\"MOBILE\",\n    56,\"TLSP\",\n    57,\"SKIP\",\n    58,\"IPv6-ICMP\",\n    59,\"IPv6-NoNxt\",\n    60,\"IPv6-Opts\",\n    61,\"\",\n    62,\"CFTP\",\n    63,\"\",\n    64,\"SAT-EXPAK\",\n    65,\"KRYPTOLAN\",\n    66,\"RVD\",\n    67,\"IPPC\",\n    68,\"\",\n    69,\"SAT-MON\",\n    70,\"VISA\",\n    71,\"IPCV\",\n    72,\"CPNX\",\n    73,\"CPHB\",\n    74,\"WSN\",\n    75,\"PVP\",\n    76,\"BR-SAT-MON\",\n    77,\"SUN-ND\",\n    78,\"WB-MON\",\n    79,\"WB-EXPAK\",\n    80,\"ISO-IP\",\n    81,\"VMTP\",\n    82,\"SECURE-VMTP\",\n    83,\"VINES\",\n    84,\"TTP\",\n    84,\"IPTM\",\n    85,\"NSFNET-IGP\",\n    86,\"DGP\",\n    87,\"TCF\",\n    88,\"EIGRP\",\n    89,\"OSPFIGP\",\n    90,\"Sprite-RPC\",\n    91,\"LARP\",\n    92,\"MTP\",\n    93,\"AX.25\",\n    94,\"IPIP\",\n    95,\"MICP (deprecated)\",\n    96,\"SCC-SP\",\n    97,\"ETHERIP\",\n    98,\"ENCAP\",\n    99,\"\",\n    100,\"GMTP\",\n    101,\"IFMP\",\n    102,\"PNNI\",\n    103,\"PIM\",\n    104,\"ARIS\",\n    105,\"SCPS\",\n    106,\"QNX\",\n    107,\"A/N\",\n    108,\"IPComp\",\n    109,\"SNP\",\n    110,\"Compaq-Peer\",\n    111,\"IPX-in-IP\",\n    112,\"VRRP\",\n    113,\"PGM\",\n    114,\"\",\n    115,\"L2TP\",\n    116,\"DDX\",\n    117,\"IATP\",\n    118,\"STP\",\n    119,\"SRP\",\n    120,\"UTI\",\n    121,\"SMP\",\n    122,\"SM (deprecated)\",\n    123,\"PTP\",\n    124,\"ISIS over IPv4\",\n    125,\"FIRE\",\n    126,\"CRTP\",\n    127,\"CRUDP\",\n    128,\"SSCOPMCE\",\n    129,\"IPLT\",\n    130,\"SPS\",\n    131,\"PIPE\",\n    132,\"SCTP\",\n    133,\"FC\",\n    134,\"RSVP-E2E-IGNORE\",\n    135,\"Mobility Header\",\n    136,\"UDPLite\",\n    137,\"MPLS-in-IP\",\n    138,\"manet\",\n    139,\"HIP\",\n    140,\"Shim6\",\n    141,\"WESP\",\n    142,\"ROHC\",\n    143,\"Ethernet\",\n    253,\"\",\n    254,\"\",\n    255,\"Reserved\"\n  ];\n  let DirectionLookup = datatable (FlowDirection:string, NetworkDirection:string)  [\n    'ingress', 'Inbound',\n    'egress', 'Outbound'\n  ];\n  let ActionLookup = datatable (Action:string, DvcAction:string)  [\n    'ACCEPT', 'Allow',\n    'REJECT', 'Deny'\n  ];\n  let parser = (\n      starttime:datetime=datetime(null), \n      endtime:datetime=datetime(null), \n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \n      ipaddr_has_any_prefix:dynamic=dynamic([]),\n      dstportnumber:int=int(null), \n      hostname_has_any:dynamic=dynamic([]), \n      dvcaction:dynamic=dynamic([]), \n      eventresult:string='*', \n      disabled:bool=false\n      )\n  {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \n  AWSVPCFlow \n  | where(isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime)   or TimeGenerated <= endtime)\n  | where not(disabled)\n  | where LogStatus == \"OK\"\n  // -- Pre-filtering:\n  | where\n         (isnull(dstportnumber) or (DstPort == dstportnumber))\n    and (array_length(hostname_has_any) == 0)\n  | extend EventResult = iff (Action==\"ACCEPT\",\"Success\",\"Failure\")\n  | where (eventresult == \"*\" or eventresult == EventResult) \n  | lookup ActionLookup on Action\n  | where  (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\n  | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcAddr,src_or_any)\n         , temp_isDstMatch=has_any_ipv4_prefix(DstAddr,dst_or_any)\n  | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n  )\n  | project-away temp_*\n  | where ASimMatchingIpAddr != \"No match\"\n  // -- End pre-filtering\n  | extend\n      EventVendor=\"AWS\", \n      EventProduct=\"VPC\",\n      NetworkBytes = tolong(Bytes),\n      NetworkPackets = tolong(Packets),\n      EventProductVersion = tostring(Version),\n      EventType=\"NetworkSession\",\n      EventCount=toint(1),\n      EventSeverity = iff (Action==\"ACCEPT\",\"Informational\",\"Low\"),\n      EventSchemaVersion=\"0.2.3\",\n      EventSchema=\"NetworkSession\",\n      SrcAppType = iff (PktSrcAwsService != \"\", \"CloudService\", \"\"),\n      DstAppType = iff (PktDstAwsService != \"\", \"CloudService\", \"\"),\n      DvcIdType = \"AwsVpcId\"\n  | lookup ProtocolLookup on Protocol\n  | lookup DirectionLookup on FlowDirection\n  | project-rename\n      DstIpAddr = DstAddr,  \n      DstPortNumber = DstPort, \n      SrcNatIpAddr=PktSrcAddr, \n      DstNatIpAddr=PktDstAddr, \n      SrcPortNumber = SrcPort,  \n      SrcIpAddr = SrcAddr, \n      EventEndTime = End, \n      DvcInboundInterface = InterfaceId,\n      DvcSubscriptionId = AccountId,\n      DvcId = VpcId,\n      NetworkProtocolVersion = TrafficType,\n      EventOriginalResultDetails = LogStatus,\n      SrcAppName = PktSrcAwsService,\n      DstAppName = PktDstAwsService\n  // -- Aliases\n  | extend\n      IpAddr = SrcIpAddr,\n      Src = SrcIpAddr,\n      Dst = DstIpAddr,\n      Dvc = DvcId,\n      EventStartTime = TimeGenerated,\n      DvcInterface = DvcInboundInterface\n  | project-away Action, AzId, Bytes, FlowDirection, InstanceId, Packets, Protocol, Region, SourceSystem, SublocationId, SublocationType, SubnetId, TcpFlags, TenantId, TrafficPath, Version\n  };\n  parser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix,dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
