{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionWatchGuardFirewareOS')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for WatchGuard Fireware OS",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionWatchGuardFirewareOS",
        "query": "let Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let EventLookup=datatable(DvcAction:string,EventResult:string,EventSeverity:string)\n  [\n      \"Allow\",\"Success\",\"Informational\"\n      , \"Deny\",\"Failure\",\"Low\"\n  ];\n  let SyslogParser = (Syslog:(SyslogMessage:string)) {\n    Syslog\n    | parse-kv SyslogMessage as (geo_src:string\n    , geo_dst:string\n    , src_user:string\n    , dst_user:string\n    , duration:int\n    , sent_bytes:long\n    , rcvd_bytes:long\n    , fqdn_src_match:string\n    , fqdn_dst_match:string) with (pair_delimiter=' ', kv_delimiter='=', quote='\"')\n    | project-rename SrcGeoCountry = geo_src\n    , DstGeoCountry = geo_dst\n    , SrcUsername = src_user\n    , DstUsername = dst_user\n    , NetworkDuration = duration\n    , SrcBytes = sent_bytes\n    , DstBytes = rcvd_bytes\n    , DstDomain = fqdn_dst_match\n    , SrcDomain = fqdn_src_match\n    | extend DstDomainType = iif(isnotempty(DstDomain),\"FQDN\",\"\")\n    | extend SrcDomainType = iif(isnotempty(SrcDomain),\"FQDN\",\"\")\n    | extend NetworkProtocol = extract(@\" (tcp|udp|icmp|igmp) \", 1, SyslogMessage)\n    | extend SrcUsernameType = case(isempty(SrcUsername), \"\"\n      , SrcUsername contains \"@\" , \"UPN\"\n      , \"Simple\"\n    )\n    | extend DstUsernameType = case(isempty(DstUsername), \"\"\n      , DstUsername contains \"@\" , \"UPN\"\n      , \"Simple\"\n    )\n    | parse SyslogMessage with * \"repeated \" EventCount:int \" times\" *\n    | extend EventCount = iif(isnotempty(EventCount), EventCount, toint(1))\n    | project-away SyslogMessage\n  };\n  let IPParser = (T:(SrcIpAddr:string,DstIpAddr:string)){\n    T\n    | extend temp_SrcMatch = has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n    , temp_DstMatch = has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\",\n      temp_SrcMatch and temp_DstMatch, \"Both\",\n      temp_SrcMatch, \"SrcIpAddr\",\n      temp_DstMatch, \"DstIpAddr\",\n      \"No match\"\n    )\n  | where ASimMatchingIpAddr != \"No match\" \n  | project-away temp_*\n  };\n  let HostParser = (Syslog:(SrcDomain:string,DstDomain:string)){\n  Syslog\n  | extend temp_SrcMatch = SrcDomain has_any(hostname_has_any)\n    , temp_DstMatch= DstDomain has_any(hostname_has_any)\n  | extend ASimMatchingHostname =case(\n      array_length(hostname_has_any) == 0, \"-\",\n      temp_SrcMatch and temp_DstMatch, \"Both\",\n      temp_SrcMatch, \"SrcDomain\",\n      temp_DstMatch, \"DstDomain\",\n      \"No match\"\n    )\n  | where ASimMatchingHostname != \"No match\" \n  | project-away temp_*\n  };\n  let AllSyslog = \n  Syslog\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)\n  | where SyslogMessage has_any('msg_id=\"3000-0148\"' \n      , 'msg_id=\"3000-0149\"' \n      , 'msg_id=\"3000-0150\"'\n      , 'msg_id=\"3000-0151\"'\n      , 'msg_id=\"3000-0173\"'\n  ) and SyslogMessage !has 'msg=\"DNS Forwarding\" '\n    and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any))\n    and (array_length(hostname_has_any)==0 or SyslogMessage has_any(hostname_has_any))\n  | where (array_length(dvcaction)==0 or SyslogMessage has_any (dvcaction))\n  | extend DvcAction = extract(@'\" (Allow|Deny) ', 1, SyslogMessage)\n  | lookup EventLookup on DvcAction\n  | where (eventresult=='*' or EventResult == eventresult)\n  | project TimeGenerated, SyslogMessage, HostName, DvcAction, EventResult, EventSeverity\n  ;\n  let Parse1 = \n  AllSyslog\n  | where SyslogMessage !has \"icmp\" and SyslogMessage !has \"igmp\" and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} (tcp|udp) \\d{2,5} \\d{2,5} \" SrcIpAddr \" \" DstIpAddr \" \" SrcPortNumber:int @\" \" DstPortNumber:int @\" \" *\n  | where  (isnull(dstportnumber) or DstPortNumber==dstportnumber)\n  | invoke SyslogParser()\n  | invoke IPParser()\n  | invoke HostParser()\n  ;\n  let Parse2 = \n  AllSyslog\n  | where SyslogMessage !has \"icmp\" and SyslogMessage !has \"igmp\" and SyslogMessage has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" (tcp|udp) \" SrcIpAddr \" \" DstIpAddr \" \" SrcPortNumber:int @\" \" DstPortNumber:int @\" \" *\n  | where  (isnull(dstportnumber) or DstPortNumber==dstportnumber)\n  | invoke SyslogParser()\n  | invoke IPParser()\n  | invoke HostParser()\n  ;\n  let Parse3 = \n  AllSyslog\n  | where SyslogMessage has \"icmp\" and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} icmp \\d{2,5} \\d{1,5} \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  | invoke IPParser()\n  | invoke HostParser()\n  ;\n  let Parse4 = \n  AllSyslog\n  | where SyslogMessage has \"icmp\" and SyslogMessage has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" icmp \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  | invoke IPParser()\n  | invoke HostParser()\n  ;\n  let Parse5 = \n  AllSyslog\n  | where SyslogMessage has \"igmp\" and SyslogMessage !has \"3000-0151\"\n  | parse kind=regex flags=U SyslogMessage with * @'\" (Allow|Deny) ' RuleName @\" \\d{2,5} igmp \\d{2,5} \\d{1,5} \" SrcIpAddr \" \" DstIpAddr \" \" * \n  | invoke SyslogParser()\n  | invoke IPParser()\n  | invoke HostParser()\n  ;\n  union isfuzzy=false Parse1, Parse2, Parse3, Parse4, Parse5\n  | extend EventSchema = \"NetworkSession\"\n      , EventSchemaVersion = \"0.2.4\"\n      , EventVendor = \"WatchGuard\"\n      , EventProduct = \"Fireware\"\n      , EventType = \"NetworkSession\"\n      , DvcHostname = HostName\n      , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\n          , DstIpAddr contains \":\", \"IPv6\"\n          , \"\")\n      , NetworkProtocol = toupper(NetworkProtocol)\n      , NetworkDuration = toint(NetworkDuration * toint(1000))\n      , NetworkBytes = SrcBytes + DstBytes\n      , EventEndTime = TimeGenerated\n      , EventStartTime = TimeGenerated\n      , Src = SrcIpAddr\n      , Dst = DstIpAddr\n      , Duration = NetworkDuration\n      , User = DstUsername\n      , IpAddr = SrcIpAddr\n  | project-rename Dvc = HostName\n};\nParser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
