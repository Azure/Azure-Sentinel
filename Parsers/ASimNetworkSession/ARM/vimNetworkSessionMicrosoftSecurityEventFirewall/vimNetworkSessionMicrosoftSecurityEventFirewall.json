{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionMicrosoftSecurityEventFirewall')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Microsoft Windows Firewall",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionMicrosoftSecurityEventFirewall",
        "query": "let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[\n  '%%14596', 'IP Packet',\n  '%%14597', 'Transport',\n  '%%14598', 'Forward',\n  '%%14599', 'Stream',\n  '%%14600', 'Datagram Data',\n  '%%14601', 'ICMP Error',\n  '%%14602', 'MAC 802.3',\n  '%%14603', 'MAC Native',\n  '%%14604', 'vSwitch',\n  '%%14608', 'Resource Assignment',\n  '%%14609', 'Listen',\n  '%%14610', 'Receive/Accept',\n  '%%14611', 'Connect',\n  '%%14612', 'Flow Established',\n  '%%14614', 'Resource Release',\n  '%%14615', 'Endpoint Closure',\n  '%%14616', 'Connect Redirect',\n  '%%14617', 'Bind Redirect',\n  '%%14624', 'Stream Packet'];\nlet ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[\n  1, 'ICMP',\n  3, 'GGP',\n  6, 'TCP',\n  8, 'EGP',\n  12, 'PUP',\n  17, 'UDP',\n  20, 'HMP',\n  27, 'RDP',\n  46, 'RSVP',\n  47, 'PPTP data over GRE',\n  50, 'ESP',\n  51, 'AH',\n  66, 'RVD',\n  88, 'IGMP',\n  89, 'OSPF'];\nlet Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[\n  '%%14592', 'Inbound', false,\n  '%%14593', 'Outbound', true,\n  '%%14594', 'Forward',false,\n  '%%14595', 'Bidirectional', false,\n  '%%14609', 'Listen', false];\n///////////////////////////////////////////////////////\n// this query extract data fields from EventData column from SecurityEvent table\n///////////////////////////////////////////////////////\nlet parser = (starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n, srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null)\n, hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]),eventresult:string='*', disabled:bool=false\n) {   \n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let SecurityEventProjected =\n      SecurityEvent\n      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type\n    ;\n    // Event IDs between (5151 .. 5159)\n    // will be extracting Event specific fields from 'EventData' field\n    let SecurityEvent_5152 = \n      SecurityEventProjected \n      | where not(disabled)\n      | where (isnull(starttime) or TimeGenerated>=starttime)\n        and  (isnull(endtime) or TimeGenerated<=endtime)\n      | where EventID==5152\n      // ***************  Prefilterring *****************************************************************\n      |where  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \n        and  (array_length(ip_any)==0 \n              or has_any_ipv4_prefix(EventData ,ip_any)\n              ) \n        and (array_length(dvcaction)==0 or (dvcaction=='Deny') ) \n        and (array_length(hostname_has_any)==0 )\n        and (eventresult=='*' or eventresult=='Failure')\n        // *************** / Prefilterring *****************************************************************\n      | extend EventResult =  \"Failure\"\n        | parse EventData with * \n            '<Data Name=\"ProcessId\">'ProcessId:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n        , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n        | extend ASimMatchingIpAddr = case(\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n          )\n        | where ASimMatchingIpAddr != \"No match\"\n        | project-away temp_*, EventData\n      ;\n    let SecurityEvent_5154_5155_5158_5159 =\n    SecurityEventProjected \n      | where not(disabled)\n      | where (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n        | where EventID in (5154, 5155, 5158, 5159)\n        // ***************  Prefilterring *****************************************************************\n        |where   (array_length(dstipaddr_has_any_prefix)==0 ) \n          and  (array_length(hostname_has_any)==0 ) \n          and  (isnull(dstportnumber) ) \n          and  (array_length(ip_any)==0 \n                or has_any_ipv4_prefix(EventData ,ip_any)\n              ) \n          and (array_length(dvcaction)==0 \n              or (dvcaction=='Allow' and EventID in  (5154,5158))  \n              or (dvcaction=='Deny'  and EventID !in (5154,5158))\n              ) \n        | extend EventResult = iff(EventID in (5154, 5158), \"Success\", \"Failure\")\n        | where (eventresult=='*' or EventResult==eventresult)\n        // *************** / Prefilterring *****************************************************************\n        | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>' \n            '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n        | extend DirectionCode = \"%%14609\"\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\n          , temp_isDstMatch=false\n        | extend ASimMatchingIpAddr = case(\n            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n          , temp_isSrcMatch, \"SrcIpAddr\"\n          , temp_isDstMatch, \"DstIpAddr\"\n          , \"No match\"\n          )\n        | where ASimMatchingIpAddr != \"No match\"\n        | project-away temp_* , EventData\n        ;\n    let SecurityEvent_5156_5157 =\n        SecurityEventProjected\n        | where not(disabled) \n        | where (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n        | where EventID in (5156, 5157)\n        | extend EventResult = iff(EventID == 5156, \"Success\", \"Failure\")\n        // ***************  Prefilterring *****************************************************************\n        | where (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n                      and  (array_length(ip_any)==0 \n                or has_any_ipv4_prefix(EventData ,ip_any)\n              ) \n          and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \n          and (array_length(dvcaction)==0 \n              or (dvcaction=='Allow' and EventID == 5156)  \n              or (dvcaction=='Deny'  and EventID <> 5156)\n              )\n          and (array_length(hostname_has_any)==0 )\n          and (eventresult=='*' or EventResult==eventresult) \n        // *************** / Prefilterring *****************************************************************\n        | parse EventData with * '<Data Name=\"ProcessID\">'ProcessId:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'\n            '\\x0d\\x0a  <Data Name=\"RemoteUserID\">'RemoteUserID:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"RemoteMachineID\">'RemoteMachineID:string'</Data>'*\n            | project-away EventData\n            | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n            | extend ASimMatchingIpAddr = case(\n            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\n            , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \n            , temp_isSrcMatch, \"SrcIpAddr\"\n            , temp_isDstMatch, \"DstIpAddr\"\n            , \"No match\"\n            )\n          | where ASimMatchingIpAddr != \"No match\"\n          | project-away temp_*\n        ;\n    union SecurityEvent_5154_5155_5158_5159, SecurityEvent_5156_5157, SecurityEvent_5152\n    | lookup Directions on DirectionCode\n    | project-rename DvcHostname = Computer\n    | extend\n          SrcAppName = iff(isOutBound, Application, \"\"),\n          DstAppName = iff(not(isOutBound), Application, \"\"),\n          SrcDvcId = iff(isOutBound, RemoteMachineID, \"\"),\n          DstDvcId = iff(not(isOutBound), RemoteMachineID, \"\"),\n          SrcProcessId =  iff(isOutBound, tostring(ProcessId), \"\"),\n          DstProcessId =  iff(not(isOutBound), tostring(ProcessId), \"\"),\n          DstUserId = iff(isOutBound, RemoteUserID, \"\"),\n          SrcUserId = iff(not(isOutBound), RemoteUserID, \"\"),\n          DstHostname = iff(isOutBound, \"\", DvcHostname),\n          SrcHostname = iff(isOutBound, DvcHostname, \"\")\n        | project-away Application, RemoteMachineID, ProcessId, RemoteUserID\n          // *************** Postfilterring *****************************************************************\n        | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber )\n        // *************** / Postfilterring *****************************************************************\n        | extend \n            DvcAction = iff(EventID in (5154, 5156, 5158), \"Allow\", \"Deny\"),\n            DvcOs = 'Windows',\n            DstAppType = \"Process\",\n            SrcUserIdType = iff (SrcUserId <> \"S-1-0-0\", \"SID\", \"\"),\n            SrcUserId = iff (SrcUserId <> \"S-1-0-0\", SrcUserId, \"\"),\n            DstUserIdType = iff (DstUserId <> \"S-1-0-0\", \"SID\", \"\"),\n            DstUserId = iff (DstUserId <> \"S-1-0-0\", DstUserId, \"\"),\n            SrcAppType = \"Process\",\n            EventType = \"NetworkSession\",\n            EventSchema = \"NetworkSession\",\n            EventSchemaVersion=\"0.2.3\",\n            EventCount=toint(1),\n            EventVendor = \"Microsoft\",\n            EventProduct = \"Windows Firewall\",\n            EventStartTime = TimeGenerated,\n            EventEndTime = TimeGenerated,\n            EventSeverity = iff(EventID  in (5154, 5156, 5158), \"Informational\", \"Low\")\n    // -- Aliases\n    | extend \n        Dvc = DvcHostname,\n        Hostname = DvcHostname,\n        IpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        Dst = DstIpAddr,\n        Rule = tostring(NetworkRuleNumber),\n        DstDvcIdType = iff (DstDvcId != \"\", \"SID\", \"\"),\n        SrcDvcIdType = iff (SrcDvcId != \"\", \"SID\", \"\")\n    | lookup LayerCodeTable on LayerCode\n    | lookup ProtocolTable on Protocol\n    | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID, LayerRTID,_ResourceId,_SubscriptionId\n    };\n    parser(starttime=starttime, \n    endtime=endtime, \n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    dstportnumber=dstportnumber,\n    hostname_has_any=hostname_has_any, \n    dvcaction=dvcaction,\n    eventresult=eventresult, \n    disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
