{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionZscalerZIA')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for Zscaler ZIA firewall",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionZscalerZIA",
        "query": "let ActionLookup = datatable (DvcOriginalAction: string, DvcAction:string) [\n  // See https://help.zscaler.com/zia/firewall-insights-logs-filters\n  'Allow','Allow',\n  'Allow due to insufficient app data','Allow',\n  'Block/Drop','Drop',\n  'Block/ICMP','Drop ICMP',\n  'Block/Reset', 'Reset',\n  'IPS Drop', 'Drop',\n  'IPS Reset', 'Reset',\n  // Observed in real world events\n  'Block ICMP', 'Drop ICMP',\n  'Drop', 'Drop'\n];\nlet parser=  \n  (starttime:datetime=datetime(null)\n  , endtime:datetime=datetime(null)\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\n  , ipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstportnumber:int=int(null)\n  , hostname_has_any:dynamic=dynamic([])\n  , dvcaction:dynamic=dynamic([])\n  , eventresult:string='*'\n  , disabled:bool=false) {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \nCommonSecurityLog \n| where (isnull(starttime) or TimeGenerated >= starttime)\n   and  (isnull(endtime) or TimeGenerated <= endtime)\n| where not(disabled)\n| where DeviceVendor == \"Zscaler\"\n| where DeviceProduct == \"NSSFWlog\"\n|where\n  (array_length(hostname_has_any) == 0) // No host name information, so always filter out if hostname filter used. \n  and   (isnull(dstportnumber) or dstportnumber == DestinationPort) \n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any), temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n                                array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n                                temp_SrcMatch and temp_DstMatch, \"Both\",\n                                temp_SrcMatch, \"SrcIpAddr\",\n                                temp_DstMatch, \"DstIpAddr\",\n                                \"No match\"\n                            )\n// -- Pre-filtering\n| where ASimMatchingIpAddr != \"No match\"\n| project-away temp_*\n| project-rename DvcOriginalAction = DeviceAction\n| lookup ActionLookup on DvcOriginalAction \n| where array_length(dvcaction) == 0 or DvcAction in (dvcaction)\n| extend EventResult = iff (DvcOriginalAction == \"Allow\", \"Success\", \"Failure\") \n| where (eventresult=='*' or EventResult == eventresult)\n// -- Event fields\n| extend \n  EventStartTime=TimeGenerated, \n  EventVendor = \"Zscaler\", \n  EventProduct = \"ZIA Firewall\", \n  EventSchema = \"NetworkSession\", \n  EventSchemaVersion=\"0.2.3\", \n  EventType = 'NetworkSession', \n  EventSeverity = 'Informational',\n  EventEndTime=TimeGenerated \n| project-rename\n  DvcHostname = Computer, \n  EventProductVersion = DeviceVersion, \n  NetworkProtocol = Protocol, \n  DstIpAddr = DestinationIP, \n  DstPortNumber = DestinationPort, \n  DstNatIpAddr = DestinationTranslatedAddress, \n  DstNatPortNumber = DestinationTranslatedPort, \n  DstAppName = DeviceCustomString3, \n  NetworkApplicationProtocol = DeviceCustomString2, \n  SrcIpAddr = SourceIP, \n  SrcPortNumber = SourcePort, \n  SrcUsername = SourceUserName,\n  SrcNatIpAddr= SourceTranslatedAddress, \n  SrcNatPortNumber = SourceTranslatedPort, \n  SrcUserDepartment = DeviceCustomString1,  // Not in standard schema\n  SrcUserLocation = SourceUserPrivileges,  // Not in standard schema\n  ThreatName = DeviceCustomString6, \n  ThreatCategory = DeviceCustomString5, \n  NetworkRuleName = Activity,\n  EventOriginalSeverity = LogSeverity,\n  EventMessage = Message \n// -- Calculated fields\n| extend\n  // -- Adjustment to support both old and new CSL fields.\n  EventCount=coalesce(\n    toint(column_ifexists(\"FieldDeviceCustomNumber2\", int(null))), \n    toint(column_ifexists(\"DeviceCustomNumber2\",int(null)))\n  ),\n  NetworkDuration = coalesce(\n    toint(column_ifexists(\"FieldDeviceCustomNumber1\", int(null))),\n    toint(column_ifexists(\"DeviceCustomNumber1\",int(null)))\n  ),\n  ThreatCategory = iff(DeviceCustomString4 == \"None\", \"\", ThreatCategory),\n  SrcUsername = iff (SrcUsername == SrcUserLocation, \"\", SrcUsername),\n  DstBytes = tolong(ReceivedBytes), \n  SrcBytes = tolong(SentBytes)\n// -- Enrichment\n| extend\n  DstAppType = \"Service\", \n  SrcUsernameType = \"UPN\" \n// -- Aliases\n| extend\n  Dvc = DvcHostname,\n  User = SrcUsername,\n  IpAddr = SrcIpAddr,\n  Src = SrcIpAddr,\n  Dst = DstIpAddr,\n  Rule = NetworkRuleName,\n  Duration = NetworkDuration\n| project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, EventOutcome, FieldDevice*, ExtID, Reason, ApplicationProtocol, ReportReferenceLink\n};\nparser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
