{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionPaloAltoCortexDataLake')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for Palo Alto Cortex Data Lake",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionPaloAltoCortexDataLake",
        "query": "let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)\n[\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Low\",\n    \"5\", \"Low\",\n    \"6\", \"Medium\",\n    \"7\", \"Medium\",\n    \"8\", \"Medium\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet EventResultDvcActionLookup = datatable (\n    DeviceAction: string,\n    DvcAction: string,\n    EventResult: string\n)\n    [\n    \"allow\", \"Allow\", \"Success\",\n    \"deny\", \"Deny\", \"Failure\",\n    \"reset client\", \"Reset Source\", \"Failure\",\n    \"reset server\", \"Reset Destination\", \"Failure\",\n    \"reset both\", \"Reset\", \"Failure\",\n    \"drop\", \"Drop\", \"Failure\",\n    \"drop ICMP\", \"Drop ICMP\", \"Failure\",\n    \"reset-both\", \"Reset\", \"Failure\"\n];\nlet EventResultDetailsLookup = datatable(Reason: string, EventResultDetails: string)[\n    \"threat\", \"Reset\",\n    \"policy-deny\", \"Unknown\",\n    \"decrypt-cert-validation\", \"Terminated\",\n    \"decrypt-unsupport-param\", \"Terminated\",\n    \"decrypt-error\", \"Terminated\",\n    \"tcp-rst-from-client\", \"Reset\",\n    \"tcp-rst-from-server\", \"Reset\",\n    \"resources-unavailable\", \"Unknown\",\n    \"tcp-fin\", \"Unknown\",\n    \"tcp-reuse\", \"Unknown\",\n    \"decoder\", \"Unknown\",\n    \"aged-out\", \"Unknown\",\n    \"unknown\", \"Unknown\",\n    \"n/a\", \"NA\",\n];\nlet ThreatRiskLevelLookup = datatable(PanOSApplicationRisk: string, ThreatRiskLevel: int)\n[\n    \"1\", 20,\n    \"2\", 40,\n    \"3\", 60,\n    \"4\", 80,\n    \"5\", 100\n];\nlet parser=(\n    disabled: bool=false, \n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    eventresult: string='*', \n    srcipaddr_has_any_prefix: dynamic=dynamic([]),\n    dstipaddr_has_any_prefix: dynamic=dynamic([]),\n    ipaddr_has_any_prefix: dynamic=dynamic([]), \n    hostname_has_any: dynamic=dynamic([]),\n    dstportnumber: int=int(null),\n    dvcaction: dynamic=dynamic([])\n    ) {\n    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    CommonSecurityLog\n    | where not(disabled)\n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and DeviceVendor == \"Palo Alto Networks\" and DeviceProduct == \"LF\"\n        and DeviceEventClassID == \"TRAFFIC\"\n        and (array_length(hostname_has_any) == 0 or AdditionalExtensions has_any (hostname_has_any))\n        and (isnull(dstportnumber) or toint(DestinationPort) == dstportnumber)\n    | extend\n        temp_SrcMatch = has_any_ipv4_prefix(coalesce(DeviceCustomIPv6Address2, SourceIP), src_or_any),\n        temp_DstMatch = has_any_ipv4_prefix(coalesce(DeviceCustomIPv6Address3, DestinationIP), dst_or_any)\n    | extend \n        ASimMatchingIpAddr=case(\n                      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                      \"-\",\n                      temp_SrcMatch and temp_DstMatch,\n                      \"Both\",\n                      temp_SrcMatch,\n                      \"SrcIpAddr\",\n                      temp_DstMatch,\n                      \"DstIpAddr\",\n                      \"No match\"\n                  )\n    | where ASimMatchingIpAddr != \"No match\"\n    | parse-kv AdditionalExtensions as (PanOSSessionStartTime: string, PanOSDestinationDeviceHost: string, PanOSSourceDeviceHost: string, PanOSDestinationUUID: string, PanOSDestinationLocation: string, PanOSSourceUUID: string, PanOSDestinationDeviceMac: string, PanOsBytes: long, PanOSIsClienttoServer: string, PanOSSourceLocation: string, PanOSSourceDeviceMac: string, PanOSPacketsReceived: long, PanOSPacketsSent: long, PanOSRuleUUID: int, PanOSApplicationCategory: string, PanOSApplicationSubcategory: string, PanOSChunksReceived: string, PanOSChunksSent: string, PanOSChunksTotal: string, PanOSApplicationContainer: string, PanOSDestinationDeviceCategory: string, PanOSLinkChangeCount: string, PanOSLinkSwitches: string, PanOSLogSource: string, PanOSNSSAINetworkSliceDifferentiator: string, PanOSNSSAINetworkSliceType: string, PanOSOutboundInterfaceDetailsPort: string, PanOSOutboundInterfaceDetailsSlot: string, PanOSOutboundInterfaceDetailsType: string, PanOSOutboundInterfaceDetailsUnit: string, PanOSParentSessionID: string, PanOsRuleUUID: string, PanOSSourceDeviceOS: string, PanOSSourceDeviceOSFamily: string, PanOSSourceDeviceOSVersion: string, PanOSSourceDeviceCategory: string, PanOSVirtualSystemID: string, PanOSVirtualSystemName: string, PanOSCortexDataLakeTenantID: string, PanOSApplicationRisk: string, PanOSIsSaaSApplication: string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n    | extend \n        temp_is_MatchSrcHostname = PanOSSourceDeviceHost has_any (hostname_has_any),\n        temp_is_MatchDstHostname = PanOSDestinationDeviceHost has_any (hostname_has_any)\n    | extend ASimMatchingHostname = case(\n                                    array_length(hostname_has_any) == 0,\n                                    \"-\",\n                                    temp_is_MatchSrcHostname and temp_is_MatchDstHostname,\n                                    \"Both\",\n                                    temp_is_MatchSrcHostname,\n                                    \"SrcHostname\",\n                                    temp_is_MatchDstHostname,\n                                    \"DstHostname\",\n                                    \"No match\"\n                                )\n    | where ASimMatchingHostname != \"No match\"\n    | invoke _ASIM_ResolveDvcFQDN('DeviceName')\n    | invoke _ASIM_ResolveDstFQDN('PanOSDestinationDeviceHost')\n    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')\n    | lookup EventResultDvcActionLookup on DeviceAction\n    // post-filtering\n    | where (eventresult == \"*\" or eventresult == EventResult)\n      and (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\n    | lookup EventSeverityLookup on LogSeverity\n    | lookup EventResultDetailsLookup on Reason\n    | lookup ThreatRiskLevelLookup on PanOSApplicationRisk\n    | extend\n        EventStartTime = todatetime(PanOSSessionStartTime),\n        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),\n        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),\n        NetworkSessionId = tostring(FieldDeviceCustomNumber1),\n        NetworkDuration = toint(FieldDeviceCustomNumber3),\n        DstBytes = tolong(ReceivedBytes),\n        SrcBytes = tolong(SentBytes),\n        SrcDomain = coalesce(SourceNTDomain, SrcDomain),\n        DstDomain = coalesce(DestinationNTDomain, DstDomain),\n        AdditionalFields = bag_pack(\n                      \"urlcategory\",\n                      DeviceCustomString2,\n                      \"virtualLocation\",\n                      DeviceCustomString3,\n                      \"PanOSApplicationCategory\",\n                      PanOSApplicationCategory,\n                      \"PanOSApplicationSubcategory\",\n                      PanOSApplicationSubcategory,\n                      \"PanOSChunksReceived\",\n                      PanOSChunksReceived,\n                      \"PanOSChunksSent\",\n                      PanOSChunksSent,\n                      \"PanOSChunksTotal\",\n                      PanOSChunksTotal,\n                      \"PanOSApplicationContainer\",\n                      PanOSApplicationContainer,\n                      \"PanOSDestinationDeviceCategory\",\n                      PanOSDestinationDeviceCategory,\n                      \"PanOSIsClienttoServer\",\n                      PanOSIsClienttoServer,\n                      \"PanOSLinkChangeCount\",\n                      PanOSLinkChangeCount,\n                      \"PanOSLinkSwitches\",\n                      PanOSLinkSwitches,\n                      \"PanOSLogSource\",\n                      PanOSLogSource,\n                      \"PanOSNSSAINetworkSliceDifferentiator\",\n                      PanOSNSSAINetworkSliceDifferentiator,\n                      \"PanOSNSSAINetworkSliceType\",\n                      PanOSNSSAINetworkSliceType,\n                      \"PanOSOutboundInterfaceDetailsPort\",\n                      PanOSOutboundInterfaceDetailsPort,\n                      \"PanOSOutboundInterfaceDetailsSlot\",\n                      PanOSOutboundInterfaceDetailsSlot,\n                      \"PanOSOutboundInterfaceDetailsType\",\n                      PanOSOutboundInterfaceDetailsType,\n                      \"PanOSOutboundInterfaceDetailsUnit\",\n                      PanOSOutboundInterfaceDetailsUnit,\n                      \"PanOSParentSessionID\",\n                      PanOSParentSessionID,\n                      \"PanOsRuleUUID\",\n                      PanOsRuleUUID,\n                      \"PanOSSourceDeviceOS\",\n                      PanOSSourceDeviceOS,\n                      \"PanOSSourceDeviceOSFamily\",\n                      PanOSSourceDeviceOSFamily,\n                      \"PanOSSourceDeviceOSVersion\",\n                      PanOSSourceDeviceOSVersion,\n                      \"PanOSSourceDeviceCategory\",\n                      PanOSSourceDeviceCategory,\n                      \"PanOSVirtualSystemID\",\n                      PanOSVirtualSystemID,\n                      \"PanOSVirtualSystemName\",\n                      PanOSVirtualSystemName\n                  ),\n        TcpFlagsFin = iff(Reason== \"tcp-fin\", true, false),\n        TcpFlagsRst = iff(Reason in(\"tcp-rst-from-client\", \"tcp-rst-from-server\"), true, false)\n    | project-rename\n        DvcIpAddr = Computer,\n        EventUid = _ItemId,\n        DstDvcId = PanOSDestinationUUID,\n        DstGeoCountry = PanOSDestinationLocation,\n        DstMacAddr = PanOSDestinationDeviceMac,\n        DstNatIpAddr = DestinationTranslatedAddress,\n        DstNatPortNumber = DestinationTranslatedPort,\n        DstPackets = PanOSPacketsReceived,\n        DstPortNumber = DestinationPort,\n        DstUsername = DestinationUserName,\n        DvcId = DeviceExternalID,\n        DvcOriginalAction = DeviceAction,\n        EventOriginalSeverity = LogSeverity,\n        DstZone = DeviceCustomString5,\n        EventOriginalType = DeviceEventClassID,\n        EventOriginalUid = ExtID,\n        EventProductVersion = DeviceVersion,\n        NetworkPackets = FieldDeviceCustomNumber2,\n        NetworkRuleName = DeviceCustomString1,\n        SrcDvcId = PanOSSourceUUID,\n        SrcGeoCountry = PanOSSourceLocation,\n        SrcMacAddr = PanOSSourceDeviceMac,\n        SrcNatIpAddr = SourceTranslatedAddress,\n        SrcNatPortNumber = SourceTranslatedPort,\n        SrcPackets = PanOSPacketsSent,\n        SrcPortNumber = SourcePort,\n        SrcUsername = SourceUserName,\n        SrcZone = DeviceCustomString4,\n        DvcScopeId = PanOSCortexDataLakeTenantID,\n        EventOriginalSubType = Activity,\n        EventOriginalResultDetails = Reason,\n        SrcUserId = SourceUserID,\n        DstUserId = DestinationUserID,\n        DvcInboundInterface = DeviceInboundInterface,\n        DvcOutboundInterface = DeviceOutboundInterface,\n        SrcAppName = ApplicationProtocol,\n        ThreatOriginalRiskLevel = PanOSApplicationRisk\n    | extend\n        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),\n        EventEndTime = EventStartTime,\n        Dst = coalesce(DstDvcId, DstHostname, DstIpAddr),\n        Src = coalesce(SrcDvcId, SrcHostname, SrcIpAddr),\n        DstUserType = _ASIM_GetUserType(DstUsername, \"\"),\n        NetworkProtocol = toupper(Protocol),\n        NetworkBytes = SrcBytes + DstBytes,\n        NetworkProtocolVersion = case(\n                            DstIpAddr contains \".\",\n                            \"IPv4\",       \n                            DstIpAddr contains \":\",\n                            \"IPv6\", \n                            \"\"\n                        ),\n        NetworkDirection = iff(PanOSIsClienttoServer == \"true\", \"Outbound\", \"Inbound\"),\n        Rule = NetworkRuleName,\n        SrcUserType = _ASIM_GetUserType(SrcUsername, \"\"),\n        DstUsernameType = _ASIM_GetUsernameType(DstUsername),\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        Duration = NetworkDuration,\n        IpAddr = SrcIpAddr,\n        SessionId = NetworkSessionId,\n        User = DstUsername,\n        Hostname = DstHostname,\n        SrcDvcIdType = iff(isnotempty(SrcDvcId), \"Other\", \"\"),\n        DstDvcIdType = iff(isnotempty(DstDvcId), \"Other\", \"\"),\n        SrcDomainType = iff(isnotempty(SourceNTDomain), \"Windows\", SrcDomainType),\n        DstDomainType = iff(isnotempty(DestinationNTDomain), \"Windows\", DstDomainType),\n        SrcUserIdType = iff(isnotempty(SrcUserId), \"UID\", \"\"),\n        DstUserIdType = iff(isnotempty(DstUserId), \"UID\", \"\"),\n        SrcAppType = case(isnotempty(SrcAppName) and PanOSIsSaaSApplication == \"true\", \"SaaS Application\",\n                            isnotempty(SrcAppName) and PanOSIsSaaSApplication == \"false\", \"Other\",\n                            \"\")\n    | extend\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventType = \"NetworkSession\",\n        EventProduct = \"Cortex Data Lake\",\n        EventVendor = \"Palo Alto\"\n    | project-away\n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        EventOutcome,\n        PanOS*,\n        PanOs*,\n        Protocol,\n        SimplifiedDeviceAction,\n        temp*,\n        ExternalID,\n        Message,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        StartTime,\n        TenantId,\n        ReportReferenceLink,\n        ReceiptTime,\n        Indicator*,\n        _ResourceId,\n        ThreatConfidence,\n        ThreatDescription,\n        ThreatSeverity\n};\nparser(\n    disabled=disabled,\n    starttime=starttime, \n    endtime=endtime,\n    eventresult=eventresult,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix,\n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    hostname_has_any=hostname_has_any,\n    dstportnumber=dstportnumber,\n    dvcaction=dvcaction\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),dvcaction:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
