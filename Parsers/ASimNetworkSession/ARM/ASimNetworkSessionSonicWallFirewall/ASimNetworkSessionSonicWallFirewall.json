{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionSonicWallFirewall')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for SonicWall firewalls",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionSonicWallFirewall",
        "query": "let Actions=datatable(fw_action:string,DvcAction:string)\n[ \"reset client\",\"Reset Source\"\n, \"reset server\",\"Reset Destination\"\n, \"reset both\", \"Reset\" \n, \"allow\",\"Allow\"\n, \"\\\"forward\\\"\",\"Allow\"\n, \"\\\"mgmt\\\"\",\"Other\"\n, \"\\\"NA\\\"\",\"Other\"\n, \"deny\",\"Deny\"\n, \"\\\"drop\\\"\", \"Drop\"\n, \"drop ICMP\", \"Drop ICMP\"];\nlet Parser=(disabled:bool=false){\nCommonSecurityLog\n| where not(disabled)\n| where DeviceVendor == \"SonicWall\"\n| where DeviceEventClassID !in (14, 97, 1382, 440, 441, 442, 646, 647, 734, 735)\n| parse-kv AdditionalExtensions as (['gcat']:string, ['app']:string, ['arg']:string, ['dstV6']:string, ['srcV6']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n| extend\n  SourceIP = coalesce(SourceIP, srcV6)\n  , DestinationIP = coalesce(DestinationIP, dstV6)\n| where ( isnotempty(SourceIP) and isnotempty(DestinationIP) )\n| where gcat in (3, 5, 6, 10) // Include only these event categories.\n| lookup Actions on fw_action\n// Sets the mandatory EventResult based on the DvcAction.\n| extend EventResult = case(DvcAction == \"Allow\", \"Success\",\n                          DvcAction == \"Management\", \"NA\",\n                          DvcAction == \"NA\", \"NA\",\n                          DvcAction == \"Other\", \"NA\",\n                          \"Failure\"\n                          )\n| extend sosLogMsgSeverity = case(LogSeverity == 10, \"Emergency (0)\",\n                                            LogSeverity == 9, \"Alert (1)\",\n                                            LogSeverity == 8, \"Critical (2)\",\n                                            LogSeverity == 7, \"Error (3)\",\n                                            LogSeverity == 6, \"Warning (4)\",\n                                            LogSeverity == 5, \"Notice (5)\",\n                                            LogSeverity == 4, \"Info (6)/Debug (7)\",\n                                            LogSeverity == 3, \"Not Mapped (3)\",\n                                            LogSeverity == 2, \"Not Mapped (2)\",\n                                            LogSeverity == 1, \"Not Mapped (1)\",\n                                            \"Not Mapped\"\n                                            )\n| extend EventSeverity = case(tolong(LogSeverity) <= 4, \"Informational\"\n                              , tolong(LogSeverity) <= 6, \"Low\"\n                              , tolong(LogSeverity) <= 8, \"Medium\"\n                              , tolong(LogSeverity) > 8, \"High\"\n                              , \"\"\n                              )\n| extend NetworkProtocolVersion = case(DestinationIP has \".\", \"IPv4\"\n                                      , DestinationIP has \":\", \"IPv6\"\n                                      , \"\"\n                                      )\n  , NetworkProtocol = toupper(iff(Protocol contains \"-\" and Protocol !contains \"/\", toupper(trim_start(@\".*-\", Protocol)), toupper(trim_end(@\"/.*\", Protocol))))\n  , NetworkApplicationProtocol = tostring(toupper(trim_start(@\".*/\", Protocol)))\n  , EventOriginalType = DeviceEventClassID\n| project-rename\n  DstMacAddr = DestinationMACAddress\n  , SrcMacAddr = SourceMACAddress\n  , DstIpAddr = DestinationIP\n  , SrcIpAddr = SourceIP\n  , DstPortNumber = DestinationPort\n  , SrcPortNumber = SourcePort\n  , EventMessage = Activity\n  , sosEventMessageDetail = Message\n  , EventProductVersion = DeviceVersion\n  , sosSerialNumber = Computer\n  , DvcOutboundInterface = DeviceOutboundInterface\n  , DvcInboundInterface = DeviceInboundInterface\n  , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).\n  , sosCFSFullString = Reason // CFS Category ID and Name\n  , NetworkRuleName = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.\n  , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.\n  , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.\n  , sosLogMsgNote = DeviceCustomString6 // \"Note\" field. Additional information that is application-dependent.\n  , SrcNatIpAddr = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.\n  , DstNatIpAddr = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.\n  , sosSourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.\n  , sosDestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.\n  , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.\n  , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.\n  , NetworkIcmpType = FieldDeviceCustomNumber1 // ICMP Type\n  , NetworkIcmpCode = FieldDeviceCustomNumber2 // ICMP Code\n  , SrcUsername = SourceUserName\n  , ThreatOriginalConfidence = ThreatConfidence\n| extend sosLogMsgCategory = case(gcat == 1, \"System (1)\",\n                                              gcat == 2, \"Log (2)\",\n                                              gcat == 3, \"Security Services (3)\",\n                                              gcat == 4, \"Users (4)\",\n                                              gcat == 5, \"Firewall Settings (5)\",\n                                              gcat == 6, \"Network (6)\",\n                                              gcat == 7, \"VPN (7)\",\n                                              gcat == 8, \"High Availability (8)\",\n                                              gcat == 9, \"3G/4G, Modem, and Module (9)\",\n                                              gcat == 10, \"Firewall (10)\",\n                                              gcat == 11, \"Wireless (11)\",\n                                              gcat == 12, \"VoIP (12)\",\n                                              gcat == 13, \"SSL VPN (13)\",\n                                              gcat == 14, \"Anti-Spam (14)\",\n                                              gcat == 15, \"WAN Acceleration (15)\",\n                                              gcat == 16, \"Object (16)\",\n                                              gcat == 17, \"SD-WAN (17)\",\n                                              gcat == 18, \"Multi-Instance (18)\",\n                                              gcat == 19, \"Unified Policy Engine (19)\",\n                                              \"Log Category Not Mapped\"\n                                              )\n| extend sosLegacyMessageCategory = case(DeviceEventCategory == 0, \"None (0)\",\n                                            DeviceEventCategory == 1, \"System Maintenance (1)\",\n                                            DeviceEventCategory == 2, \"System Errors (2)\",\n                                            DeviceEventCategory == 4, \"Blocked Web Sites (4)\",\n                                            DeviceEventCategory == 8, \"Blocked Java Etc. (8)\",\n                                            DeviceEventCategory == 16, \"User Activity (16)\",\n                                            DeviceEventCategory == 32, \"Attacks (32)\",\n                                            DeviceEventCategory == 64, \"Dropped TCP (64)\",\n                                            DeviceEventCategory == 128, \"Dropped UDP (128)\",\n                                            DeviceEventCategory == 256, \"Dropped ICMP (256)\",\n                                            DeviceEventCategory == 512, \"Network Debug (512)\",\n                                            DeviceEventCategory == 1024, \"Connection Closed (1024)\",\n                                            DeviceEventCategory == 2048, \"Dropped LAN TCP (2048)\",\n                                            DeviceEventCategory == 4096, \"Dropped LAN UDP (4096)\",\n                                            DeviceEventCategory == 8192, \"Dropped LAN ICMP (8192)\",\n                                            DeviceEventCategory == 32768, \"Modem Debug (32768)\",\n                                            DeviceEventCategory == 65536, \"VPN Tunnel Status (65536)\",\n                                            DeviceEventCategory == 131072, \"IEEE 802.11 Management (131072)\",\n                                            DeviceEventCategory == 262144, \"Connection Opened (262144)\",\n                                            DeviceEventCategory == 524288, \"System Environment (524288)\",\n                                            DeviceEventCategory == 1048576, \"Expanded - VoIP Activity (1048576)\",\n                                            DeviceEventCategory == 2097152, \"Expanded - WLAN IDS Activity (2097152)\",\n                                            DeviceEventCategory == 4194304, \"Expanded - SonicPoint Activity (4194304)\",\n                                            DeviceEventCategory == 8388608, \"Expanded - Unified Policy Engine (8388608)\",\n                                            \"Legacy Category Not Mapped\"\n                                            )\n| extend sosIPSPriority = case(ipspri == 1, \"High (1)\",\n                                            ipspri == 2, \"Medium (2)\",\n                                            ipspri == 3, \"Low (3)\",\n                                            \"\"\n                                            )\n| extend sosAntiSpywarePriority = case(spypri == 1, \"High (1)\",\n                                            spypri == 2, \"Medium (2)\",\n                                            spypri == 3, \"Low (3)\",\n                                            \"\"\n                                            )\n| extend\n    EventVendor = \"SonicWall\"\n  , EventProduct = \"Firewall\"\n  , DvcOs = \"SonicOS\"\n  , DvcOsVersion = EventProductVersion\n  , DvcIdType = \"Other\"\n  , Dvc = sosSerialNumber\n  , DvcDescription = DeviceProduct\n  , ASimMatchingHostname = \"-\"\n  , ASimMatchingIpAddr = \"-\"\n  , NetworkIcmpType = tostring(NetworkIcmpType)\n  , NetworkIcmpCode = toint(NetworkIcmpCode)\n  , Rule = NetworkRuleName\n  , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))\n  , sosIPSFullString = ipscat\n  , ipscat = extract(@'^\"?([a-zA-Z-\\/]+)', 1, ipscat) // IPS Category/Signature\n  , sosIPSSignatureName = extract(@'[ ](.*)\\S', 1, ipscat) // IPS Signature name\n  , FileSize = tolong(coalesce(FileSize, long(null)))\n  , sosAppControlFileName = extract(@'.*Filename: (.*)\\\"', 1, sosEventMessageDetail) // App Control Filename Logging\n  , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\\. ', 1, sosEventMessageDetail)\n  , sosGAVSignatureName = extract(@'Gateway Anti-Virus Alert: (.*) blocked\\.', 1, sosEventMessageDetail)\n  , sosASWSignatureName = extract(@'Anti-Spyware Detection Alert: (.*)\\. ', 1, sosEventMessageDetail)\n  , sosCountry = extract(@'Country Name:(.*)\\\"$', 1, sosEventMessageDetail)\n  , SrcZone = sosSourceZone\n  , DstZone = sosDestinationZone\n  , EventOriginalSeverity = LogSeverity\n  , Dst = DstIpAddr\n  , Src = SrcIpAddr\n  , IpAddr = SrcIpAddr\n  , sosCFSCategoryID = extract(@'(\\d+)\\s', 1, coalesce(sosCFSFullString, \"\")) // Application Name from App Control\n  , sosCFSCategoryName = extract(@'.*-(\"(.*))', 1, coalesce(sosCFSFullString, \"\")) // Application Name from App Control\n  , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, coalesce(sosLogMsgNote, \"\"))\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = \"NetworkSession\"\n  , EventSchemaVersion = \"0.2.6\"\n  , EventSchema = \"NetworkSession\"\n  , EventCount = toint(1)\n  , EventUid = _ItemId\n  , EventResultDetails = \"NA\"\n  , ThreatConfidence = coalesce(toint(ThreatOriginalConfidence), int(null))\n| extend\n    SrcUsername = coalesce(susr, SrcUsername)\n    , FileName = coalesce(FileName, sosAppControlFileName)\n    , NetworkDirection = case(SrcZone == \"\" and DstZone == \"\", \"NA\"\n                              , SrcZone == \"WAN\" and (DstZone == \"WAN\" and DstIpAddr !has \".255\"), \"Inbound\"\n                              , SrcZone == \"WAN\" and DstZone == \"WAN\", \"External\"\n                              , SrcZone == \"WAN\" and DstZone != \"WAN\", \"Inbound\"\n                              , SrcZone == \"VPN\" and DstZone == \"WAN\", \"Outbound\"\n                              , SrcZone == \"VPN\" and DstZone != \"WAN\", \"Inbound\"\n                              , DstZone == \"MULTICAST\", \"NA\"\n                              , DstZone == \"WAN\", \"Outbound\"\n                              , \"Local\"\n                              )\n| extend\n    SrcUsernameType = case(SrcUsername has \"=\", \"DN\",\n                                  SrcUsername has \"\\\\\", \"Windows\",\n                                  SrcUsername has \"@\", \"UPN\",\n                                  SrcUsername == \"Unknown (external IP)\", \"\",\n                                  SrcUsername == \"Unknown (SSO bypassed)\", \"\",\n                                  isnotempty(SrcUsername), \"Simple\",\n                                  \"\"\n                                  )\n    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Outbound\", \"SrcIpAddr\"\n                        , isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Inbound\", \"DstIpAddr\"\n                        , \"\"\n                        )\n| extend\n    ThreatIpAddr = case(ThreatField == \"SrcIpAddr\", SrcIpAddr\n                        , ThreatField == \"DstIpAddr\", DstIpAddr\n                        , \"\"\n                        )\n| extend\n  SrcGeoCountry = iff(NetworkDirection == \"Inbound\", sosCountry, \"\")\n  , DstGeoCountry = iff(NetworkDirection == \"Outbound\", sosCountry, \"\")\n  , SrcAppName = iff(NetworkDirection in (\"Inbound\", \"Local\", \"NA\"), coalesce(appcat, appName), \"\")\n  , DstAppName = iff(NetworkDirection in (\"Outbound\", \"Local\", \"NA\"), coalesce(appcat, appName), \"\")\n  , SrcAppId = iff(NetworkDirection in (\"Inbound\", \"Local\", \"NA\"), sid, \"\")\n  , DstAppId = iff(NetworkDirection in (\"Outbound\", \"Local\", \"NA\"), sid, \"\")\n| extend\n  SrcAppType = case(isempty(SrcAppName), \"\"\n                    , SrcAppName contains \"\\'General \" or SrcAppName contains \"\\'Service \", \"Service\", \"Other\")\n  , DstAppType = case(isempty(DstAppName), \"\"\n                    , DstAppName contains \"\\'General \" or DstAppName contains \"\\'Service \", \"Service\", \"Other\")\n| project-rename\n    sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)\n  , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)\n| extend\n    DstPackets = case(NetworkDirection == \"Outbound\", tolong(sosReceivedPackets)\n                  , NetworkDirection == \"Inbound\", tolong(sosSentPackets)\n                  , tolong(long(null))\n                  )\n  , SrcPackets = case(NetworkDirection == \"Outbound\", tolong(sosSentPackets)\n                  , NetworkDirection == \"Inbound\", tolong(sosReceivedPackets)\n                  , tolong(long(null))\n                  )\n| project-rename\n    sosConnectionDuration = DeviceCustomNumber3Label // Applies to \"Connection Closed\"\n  , sosUser = susr // Logged-in username associated with the log event.\n  , sosAppRulePolicyId = af_polid // App Rule Policy ID.\n  , sosAppRulePolicyName = af_policy // App Rule Policy Name.\n  , sosAppRuleService = af_service // App Rule Service Name.\n  , sosAppRuleType = af_type // App Rule Policy Type.\n  , sosAppRuleObject = af_object // App Rule Object Name.\n  , sosAppRuleObjectContent = contentObject // App Rule Object Content.\n  , sosAppRuleAction = af_action\n  , sosSourceIPv6Address = srcV6\n  , sosDestinationIPv6Address = dstV6\n  , sosAppFullString = appcat // The full \"<CATEGORY> <APPNAME> -- <SIGNAME>\" string.\n  , sosAppIDNumber = app // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n  , sosAppID = appid // Application ID from App Control\n  , sosAppCategoryID = catid // Application Category ID\n  , sosAppSignatureID = sid // Application Signature ID\n  , sosIPSCategoryName = ipscat // IPS Category Name\n  , sosAntiSpywareCategory = spycat // Anti-Spyware Category\n  , sosURLPathName = arg // URL. Represents the URL path name.\n  , sosFileIdentifier = fileid // File hash or URL\n  , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n  , DstNatPortNumber = dnpt\n  , SrcNatPortNumber = snpt\n  , sosBladeID = bid // Blade ID\n  , sosUUID = uuid\n  , sosFileName = FileName\n  , DvcOriginalAction = fw_action\n| extend\n  ThreatName = coalesce(sosASWSignatureName, sosGAVSignatureName, sosIPSSignatureName, \"\")\n  , ThreatId = coalesce(sosAppSignatureID, \"\")\n  , ThreatCategory = coalesce(sosIPSCategoryName, sosAntiSpywareCategory, \"\")\n  , DstNatPortNumber = toint(DstNatPortNumber)\n  , SrcNatPortNumber = toint(SrcNatPortNumber)\n| extend AdditionalFields = bag_pack(\n  \"AppRulePolicyId\", sosAppRulePolicyId\n  , \"AppRulePolicyName\", sosAppRulePolicyName\n  , \"AppRuleService\", sosAppRuleService\n  , \"AppRuleType\", sosAppRuleType\n  , \"AppRuleObject\", sosAppRuleObject\n  , \"AppRuleObjectContent\", sosAppRuleObjectContent\n  , \"AppRuleAction\", sosAppRuleAction\n  , \"AppID\", sosAppID\n  , \"AppCategoryID\", sosAppCategoryID\n  , \"IPSCategoryName\", sosIPSCategoryName\n  , \"AntiSpywareCategory\", sosAntiSpywareCategory\n  , \"FileIdentifier\", sosFileIdentifier\n  , \"DPIInspectedFlow\", sosDPIInspectedFlow\n  , \"BladeID\", sosBladeID\n  , \"UUID\", sosUUID\n  , \"FileName\", sosFileName\n  , \"FileSize\", FileSize\n  , \"CaptureATPVerdict\", sosCaptureATPVerdict\n  , \"CFSCategoryID\", sosCFSCategoryID\n  , \"CFSCategoryName\", sosCFSCategoryName\n  , \"CFSPolicyName\", sosCFSPolicyName\n  , \"AppControlFileName\", sosAppControlFileName\n  , \"IPSFullString\", sosIPSFullString\n  , \"IPSSignatureName\", sosIPSSignatureName\n  , \"LegacyMessageCategory\", sosLegacyMessageCategory\n  , \"LogMsgCategory\", sosLogMsgCategory\n  , \"LogMsgNote\", sosLogMsgNote\n  , \"LogMsgSeverity\", sosLogMsgSeverity\n  , \"SourceVPNPolicyName\", sosSourceVPNPolicyName\n  , \"DestinationVPNPolicyName\", sosDestinationVPNPolicyName\n  , \"EventMessageDetail\", sosEventMessageDetail\n  , \"UserSessionType\", sosUserSessionType\n  )\n| project-away\n    DeviceEventCategory\n  , gcat\n  , RequestMethod\n  , ipspri\n  , spypri\n  , sos*\n  , RequestURL\n  , Protocol\n  , appName\n  , AdditionalExtensions\n  , Flex*\n  , Indicator*\n  , Malicious*\n  , Field*\n  , DeviceCustom*\n  , Old*\n  , File*\n  , Source*\n  , Destination*\n  , Device*\n  , SimplifiedDeviceAction\n  , ExternalID\n  , ExtID\n  , TenantId\n  , ProcessName\n  , ProcessID\n  , ExtID\n  , OriginalLogSeverity\n  , LogSeverity\n  , EventOutcome\n  , StartTime\n  , EndTime\n  , ReceiptTime\n  , Remote*\n  , ThreatDescription\n  , ThreatSeverity\n  , RequestContext\n  , RequestCookies\n  , CommunicationDirection\n  , ReportReferenceLink\n  , ReceivedBytes\n  , SentBytes\n  , _ResourceId\n  , _ItemId\n| project-reorder\n    TimeGenerated\n  , EventVendor\n  , EventProduct\n  , DvcDescription\n  , Dvc\n  , DvcOs\n  , DvcOsVersion\n};\nParser (disabled=disabled)\n",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
