{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionSentinelOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for SentinelOne",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionSentinelOne",
        "query": "let NetworkDirectionLookup = datatable (\n    alertInfo_netEventDirection_s: string, \n    NetworkDirection: string\n)[\n    \"OUTGOING\", \"Outbound\",\n    \"INCOMING\", \"Inbound\",\n];\nlet DeviceTypeLookup = datatable (\n    agentDetectionInfo_machineType_s: string,\n    SrcDeviceType: string\n)\n    [\n    \"desktop\", \"Computer\",\n    \"server\", \"Computer\",\n    \"laptop\", \"Computer\",\n    \"kubernetes node\", \"Other\",\n    \"unknown\", \"Other\"\n];\nlet ThreatConfidenceLookup_undefined = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_undefined: int\n)\n    [\n    \"FALSE_POSITIVE\", 5,\n    \"Undefined\", 15,\n    \"SUSPICIOUS\", 25,\n    \"TRUE_POSITIVE\", 33 \n];\nlet ThreatConfidenceLookup_suspicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_suspicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 40,\n    \"Undefined\", 50,\n    \"SUSPICIOUS\", 60,\n    \"TRUE_POSITIVE\", 67 \n];\nlet ThreatConfidenceLookup_malicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_malicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 75,\n    \"Undefined\", 80,\n    \"SUSPICIOUS\", 90,\n    \"TRUE_POSITIVE\", 100 \n];\nlet parser=(\n    disabled: bool=false, \n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    eventresult: string='*', \n    srcipaddr_has_any_prefix: dynamic=dynamic([]),\n    dstipaddr_has_any_prefix: dynamic=dynamic([]),\n    ipaddr_has_any_prefix: dynamic=dynamic([]), \n    hostname_has_any: dynamic=dynamic([]),\n    dstportnumber: int=int(null),\n    dvcaction: dynamic=dynamic([])\n    ) {\n    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let alldata = SentinelOne_CL\n    | where not(disabled) \n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and event_name_s == \"Alerts.\"\n        and alertInfo_eventType_s == \"TCPV4\"\n        and (eventresult == \"*\" or eventresult == \"Success\")\n        and (isnull(dstportnumber) or toint(alertInfo_dstPort_s) == dstportnumber)\n        and (array_length(hostname_has_any) == 0 or agentDetectionInfo_name_s has_any (hostname_has_any))\n        and (array_length(dvcaction) == 0 or dvcaction has_any (\"Allow\"))\n    | extend\n        temp_SrcMatch = has_any_ipv4_prefix(alertInfo_srcIp_s, src_or_any),\n        temp_DstMatch = has_any_ipv4_prefix(alertInfo_dstIp_s, dst_or_any)\n    | extend \n        ASimMatchingIpAddr=case(\n                      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                      \"-\",\n                      temp_SrcMatch and temp_DstMatch,\n                      \"Both\",\n                      temp_SrcMatch,\n                      \"SrcIpAddr\",\n                      temp_DstMatch,\n                      \"DstIpAddr\",\n                      \"No match\"\n                  ),\n        ASimMatchingHostname = \"SrcHostname\"\n    | where ASimMatchingIpAddr != \"No match\";\n    let undefineddata = alldata\n        | where ruleInfo_treatAsThreat_s == \"UNDEFINED\"\n        | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;\n    let suspiciousdata = alldata\n        | where ruleInfo_treatAsThreat_s == \"Suspicious\"\n        | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;\n    let maliciousdata = alldata\n        | where ruleInfo_treatAsThreat_s == \"Malicious\"\n        | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;\n    union undefineddata, suspiciousdata, maliciousdata\n    | lookup NetworkDirectionLookup on alertInfo_netEventDirection_s\n    | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s\n    | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')\n    | extend \n        DstPortNumber = toint(alertInfo_dstPort_s),\n        SrcPortNumber = toint(alertInfo_srcPort_s),\n        ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)\n    | project-rename\n        EventStartTime = sourceProcessInfo_pidStarttime_t,\n        DstIpAddr = alertInfo_dstIp_s,\n        EventUid = _ItemId,\n        SrcIpAddr = alertInfo_srcIp_s,\n        DvcId = agentDetectionInfo_uuid_g,\n        DvcOs = agentDetectionInfo_osName_s,\n        DvcOsVersion = agentDetectionInfo_osRevision_s,\n        EventOriginalSeverity = ruleInfo_severity_s,\n        EventOriginalUid = alertInfo_dvEventId_s,\n        SrcProcessName = sourceProcessInfo_name_s,\n        SrcProcessId = sourceProcessInfo_pid_s,\n        SrcUsername = sourceProcessInfo_user_s,\n        ThreatOriginalConfidence = ruleInfo_treatAsThreat_s\n    | extend\n        EventEndTime = EventStartTime,\n        Dst = DstIpAddr,\n        DvcIpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        SrcHostname = DvcHostname,\n        SrcDvcId = DvcId,\n        IpAddr = SrcIpAddr,\n        EventSeverity = iff(EventOriginalSeverity == \"Critical\", \"High\", EventOriginalSeverity),\n        SrcDvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        SrcUserType = _ASIM_GetUserType(SrcUsername, \"\")\n    | extend\n        Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),\n        Hostname = SrcHostname\n    | extend\n        EventCount = int(1),\n        EventProduct = \"SentinelOne\",\n        EventResult = \"Success\",\n        DvcAction = \"Allow\",\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventResultDetails = \"NA\",\n        EventType = \"EndpointNetworkSession\",\n        EventVendor = \"SentinelOne\",\n        NetworkProtocol = \"TCP\",\n        NetworkProtocolVersion = \"IPv4\"\n    | project-away\n        *_d,\n        *_s,\n        *_g,\n        *_t,\n        *_b,\n        _ResourceId,\n        temp*,\n        TenantId,\n        RawData,\n        Computer,\n        MG,\n        ManagementGroupName,\n        SourceSystem,\n        ThreatConfidence_*\n};\nparser(\n    disabled=disabled,\n    starttime=starttime, \n    endtime=endtime,\n    eventresult=eventresult,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix,\n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    hostname_has_any=hostname_has_any,\n    dstportnumber=dstportnumber,\n    dvcaction=dvcaction\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),dvcaction:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
