{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimNetworkSessionCiscoMerakiSyslog')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM parser for Cisco Meraki",
        "category": "ASIM",
        "FunctionAlias": "ASimNetworkSessionCiscoMerakiSyslog",
        "query": "let EventResultDetailsLookup = datatable(reason: string, EventResultDetails: string)\n[\n    \"0\", \"Unknown\",\n    \"1\", \"Unknown\",\n    \"2\", \"Timeout\",\n    \"3\", \"Terminated\",\n    \"4\", \"Timeout\",\n    \"5\", \"Transient error\",\n    \"6\", \"Invalid Tunnel\",\n    \"7\", \"Invalid Tunnel\",\n    \"8\", \"Terminated\",\n    \"9\", \"Invalid Tunnel\",\n    \"10\", \"Unknown\",\n    \"11\", \"Invalid TCP\",\n    \"12\", \"Unknown\",\n    \"13\", \"Invalid TCP\",\n    \"14\", \"Invalid Tunnel\",\n    \"15\", \"Invalid TCP\",\n    \"16\", \"Timeout\",\n    \"17\", \"Invalid Tunnel\",\n    \"18\", \"Invalid TCP\",\n    \"19\", \"Invalid TCP\",\n    \"20\", \"Invalid TCP\",\n    \"21\", \"Unknown\",\n    \"22\", \"Invalid TCP\",\n    \"23\", \"Invalid Tunnel\",\n    \"24\", \"Invalid Tunnel\",\n    \"32\", \"Unknown\",\n    \"33\", \"Invalid TCP\",\n    \"34\", \"Invalid TCP\",\n    \"35\", \"Invalid TCP\",\n    \"36\", \"Unknown\",\n    \"37\", \"Unknown\",\n    \"38\", \"Unknown\",\n    \"39\", \"Timeout\",\n    \"40\", \"Invalid TCP\",\n    \"98\", \"Unknown\",\n    \"99\", \"Unknown\"\n];\nlet NetworkIcmpTypeLookup=datatable(\n    NetworkIcmpCode_lookup: int,\n    NetworkIcmpType_lookup: string\n)\n    [\n    0, \"Reserved\",\n    1, \"Destination Unreachable\",\n    2, \"Packet Too Big\",\n    3, \"Time Exceeded\",\n    4, \"Parameter Problem\",\n    100, \"Private experimentation\",\n    101, \"Private experimentation\",\n    127, \"Reserved for expansion of ICMPv6 error messages\",\n    128, \"Echo Request\",\n    129, \"Echo Reply\",\n    130, \"Multicast Listener Query\",\n    131, \"Multicast Listener Report\",\n    132, \"Multicast Listener Done\",\n    133, \"Router Solicitation\",\n    134, \"Router Advertisement\",\n    135, \"Neighbor Solicitation\",\n    136, \"Neighbor Advertisement\",\n    137, \"Redirect Message\",\n    138, \"Router Renumbering\",\n    139, \"ICMP Node Information Query\",\n    140, \"ICMP Node Information Response\",\n    141, \"Inverse Neighbor Discovery Solicitation Message\",\n    142, \"Inverse Neighbor Discovery Advertisement Message\",\n    143, \"Version 2 Multicast Listener Report\",\n    144, \"Home Agent Address Discovery Request Message\",\n    145, \"Home Agent Address Discovery Reply Message\",\n    146, \"Mobile Prefix Solicitation\",\n    147, \"Mobile Prefix Advertisement\",\n    148, \"Certification Path Solicitation Message\",\n    149, \"Certification Path Advertisement Message\",\n    150, \"ICMP messages utilized by experimental mobility protocols such as Seamoby\",\n    151, \"Multicast Router Advertisement\",\n    152, \"Multicast Router Solicitation\",\n    153, \"Multicast Router Termination\",\n    154, \"FMIPv6 Messages\",\n    155, \"RPL Control Message\",\n    156, \"ILNPv6 Locator Update Message\",\n    157, \"Duplicate Address Request\",\n    158, \"Duplicate Address Confirmation\",\n    159, \"MPL Control Message\",\n    160, \"Extended Echo Request\",\n    161, \"Extended Echo Reply\",\n    200, \"Private experimentation\",\n    201, \"Private experimentation\",\n    255, \"Reserved for expansion of ICMPv6 informational messages\"\n];\nlet NetworkProtocolLookup=datatable(\n    protocol: string,\n    NetworkProtocol_lookup: string,\n    NetworkProtocolVersion: string\n)[\n    \"tcp\", \"TCP\", \"\",\n    \"tcp/ip\", \"TCP\", \"\",\n    \"udp\", \"UDP\", \"\",\n    \"udp/ip\", \"UDP\", \"\",\n    \"icmp\", \"ICMP\", \"IPV4\",\n    \"icmp6\", \"ICMP\", \"IPV6\",\n];\nlet EventSeverityPriorityLookup=datatable(priority: string, EventSeverity: string)[\n    \"1\", \"High\",\n    \"2\", \"Medium\",\n    \"3\", \"Low\",\n    \"4\", \"Informational\"\n];\nlet EventSeverityDvcActionLookup=datatable(DvcAction: string, EventSeverity: string)[\n    \"Allow\", \"Informational\",\n    \"Deny\", \"Low\"\n];\nlet NetworkDirectionLookup=datatable(direction: string, NetworkDirection: string)[\n    \"ingress\", \"Inbound\",\n    \"egress\", \"Outbound\",\n    \"Unknown\", \"NA\"\n];\nlet DvcActionLookup = datatable(pattern: string, DvcAction: string, EventResult: string)[\n    \"allow\", \"Allow\", \"Success\",\n    \"deny\", \"Deny\", \"Failure\",\n    \"Blocked\", \"Deny\", \"Failure\"\n];\nlet EventResultLookup = datatable(LogSubType: string, EventResult_type: string)[\n    \"association\", \"Success\",\n    \"disassociation\", \"Failure\",\n    \"Virtual router collision\", \"Failure\",\n];\nlet parser=(disabled: bool=false) {\n    let allData = (\n            Syslog\n            | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))\n            | project-rename LogMessage =  SyslogMessage\n            );\n    let PreFilteredData = allData\n        | where not(disabled) and (LogMessage has_any(\"flows\", \"firewall\", \"ids-alerts\") or LogMessage has_all(\"security_event\", \"ids-alerted\") or (LogMessage has \"events\" and (LogMessage has_any (\"Blocked DHCP server response\", \"association\") or (LogMessage has \"VRRP packet\" and not(LogMessage has_any (\"VRRP passive\", \"VRRP active\"))) or (LogMessage has \"disassociation\" and not(LogMessage has_any (\"auth_neg_failed\", \"dhcp\"))))) or (LogMessage has \"airmarshal_events\" and LogMessage has_any(\"ssid_spoofing_detected\", \"rogue_ssid_detected\")))\n        | extend Parser = extract_all(@\"(\\d+.\\d+)\\s([\\w\\-\\_]+)\\s([\\w\\-\\_]+)\\s([\\S\\s]+)$\", dynamic([1, 2, 3, 4]), LogMessage)[0]\n        | extend\n            LogType = tostring(Parser[2]),\n            Substring = tostring(Parser[3]);\n    let FlowsFirewallData = PreFilteredData\n        | where LogType in (\"flows\", \"firewall\", \"cellular_firewall\", \"vpn_firewall\")\n        | parse-kv Substring as(src: string, dst: string, mac: string, sport: string, dport: string, protocol: string, type: int) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n        | parse Substring with pattern1: string \" src=\" temp_restmessage: string\n        | parse Substring with * \"pattern: \" pattern2: string \" \" temp_restmessage: string\n        | extend NetworkIcmpCode_lookup = iff(protocol == 'icmp6', type, int(null))\n        | extend type_icmp4 = iff(protocol == 'icmp', type, int(null))\n        | lookup NetworkIcmpTypeLookup on NetworkIcmpCode_lookup\n        | invoke _ASIM_ResolveICMPType('type_icmp4')\n        | extend NetworkIcmpCode = coalesce(NetworkIcmpCode_lookup, NetworkIcmpCode)\n        | extend NetworkIcmpType = iff(isnotempty(NetworkIcmpCode), coalesce(NetworkIcmpType_lookup, NetworkIcmpType), \"\")\n        | extend pattern = coalesce(pattern1, pattern2)\n        | lookup DvcActionLookup on pattern\n        | lookup EventSeverityDvcActionLookup on DvcAction\n        | extend\n            SrcMacAddr = trim('\"', mac),\n            EventType = \"Flow\";\n    let IDSAlertData = PreFilteredData\n        | where LogType in (\"ids-alerts\", \"security_event\")\n        | parse LogMessage with * \"security_event \" LogSubType: string \" \" * \"message: \" message: string \n        | where LogType == \"security_event\" and LogSubType == \"ids-alerted\" or LogType == \"ids-alerts\"\n        | parse-kv Substring as(priority: string, timestamp: string, direction: string, protocol: string, src: string, dst: string, signature: string, dhost: string, shost: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n        | extend EventResult = \"Success\"\n        | extend\n            priority = trim('\"', priority),\n            direction = trim('\"', direction)\n        | lookup EventSeverityPriorityLookup on priority\n        | lookup NetworkDirectionLookup on direction\n        | extend AdditionalFields = bag_pack(\n                                \"signature\", trim('\"', signature)\n                            )\n        | extend\n            SrcMacAddr = trim('\"', shost),\n            DstMacAddr = trim('\"', dhost),\n            EventMessage = trim('\"', message);\n    let AirmarshalEvents = PreFilteredData\n        | where LogType in (\"airmarshal_events\")\n        | parse Substring with * \"type=\" LogSubType: string \" \" temp_message: string\n        | parse-kv temp_message as(src: string, dst: string, wired_mac: string, vlan_id: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n        | extend\n            SrcMacAddr = trim('\"', src),\n            DstMacAddr = trim('\"', dst),\n            DvcMacAddr = trim('\"', wired_mac)\n        | extend\n            EventResult = \"Success\",\n            EventSeverity = \"High\";\n    let EventsData = PreFilteredData\n        | where LogType == \"events\";\n    let EventsData_associ = EventsData\n        | parse Substring with * \"type=\" LogSubType: string \" \" temp_message: string\n        | where LogSubType == \"association\" or (LogSubType == \"disassociation\" and not(Substring has_any (\"auth_neg_failed\", \"dhcp\")))\n        | parse-kv Substring as (last_known_client_ip: string, client_mac: string, identity: string, aid: string, duration: string, ip_src: string, dns_server: string, reason: string, rssi: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n        | extend AdditionalFields = bag_pack(\n                                \"aid\", aid,\n                                \"rssi\", rssi\n                            )\n        | extend SrcMacAddr = trim('\"', client_mac)\n        | lookup EventResultLookup on LogSubType\n        | extend EventResult = EventResult_type\n        | lookup EventResultDetailsLookup on reason\n        | extend EventResultDetails = iff((toint(reason) >= 25 and toint(reason) <= 31) or (toint(reason) >= 25 and toint(reason) <= 31), \"Unknown\", EventResultDetails);\n    let EventsData_space = EventsData\n        | where Substring has \"Blocked DHCP server response\" or (Substring has \"VRRP packet\" and not(Substring in~ (\"VRRP passive\", \"VRRP active\"))) \n        | parse Substring with LogSubType1: string \" from\" temp_addr1: string \" on VLAN \" vlan_id1: string \" \" restmessage\n        | parse Substring with LogSubType2: string \" from\" temp_addr2: string \" on VLAN \" vlan_id2: string\n        | extend LogSubType = coalesce(LogSubType1, LogSubType2)\n        | extend LogSubType = iff(LogSubType has \"VRRP Packet\", \"Virtual router collision\", LogSubType)\n        | extend pattern = iff(Substring has \"Blocked\", \"Blocked\", \"\")\n        | lookup DvcActionLookup on pattern\n        | lookup EventSeverityDvcActionLookup on DvcAction\n        | lookup EventResultLookup on LogSubType\n        | extend EventResult = coalesce(EventResult, EventResult_type)\n        | extend temp_addr = coalesce(trim('\"', temp_addr1), trim('\"', temp_addr2))\n        | extend vlan_id = coalesce(trim('\"', vlan_id1), trim('\"', vlan_id2))\n        | extend SrcMacAddr = iff(temp_addr matches regex \"(([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2}))\", temp_addr, \"\")\n        | parse temp_addr with *  \"[\" temp_ip \"]:\" temp_port \n        | extend SrcIpAddr = case(\n                        temp_addr has \".\",\n                        split(temp_addr, \":\")[0],\n                        isnotempty(temp_ip),\n                        temp_ip,\n                        temp_addr\n                    )\n        | extend SrcPortNumber = toint(case(\n                            isnotempty(temp_port),\n                            temp_port,\n                            temp_addr has \".\",\n                            split(temp_addr, \":\")[1],\n                            \"\"\n                        )\n                    )\n        | extend SrcIpAddr = iff(SrcIpAddr == SrcMacAddr, \"\", SrcIpAddr)\n        | extend EventMessage = Substring;\n    union\n        FlowsFirewallData,\n        IDSAlertData,\n        EventsData_associ,\n        EventsData_space,\n        AirmarshalEvents\n    | lookup NetworkProtocolLookup on protocol\n    | invoke _ASIM_ResolveNetworkProtocol('protocol')\n    | extend NetworkProtocol = iff(isempty(NetworkProtocolNumber), NetworkProtocol_lookup, NetworkProtocol)\n    | extend \n        Epoch = tostring(Parser[0]),\n        Device = tostring(Parser[1])\n    | extend\n        Epoch = iff(isnotempty(column_ifexists(\"timestamp\", \"\")), timestamp, Epoch)\n    | extend\n        EpochTimestamp = split(Epoch, \".\")\n    | extend\n        EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))\n    | extend temp_srcipport= coalesce(src, ip_src, last_known_client_ip) \n    | extend temp_srcipport =  trim('\"', temp_srcipport)\n    | parse temp_srcipport with *  \"[\" temp_srcip \"]:\" temp_srcport\n    | extend SrcIpAddr = case(\n                        temp_srcipport has \".\",\n                        split(temp_srcipport, \":\")[0], \n                        isnotempty(SrcIpAddr),\n                        SrcIpAddr,\n                        coalesce(temp_srcip, temp_srcipport)\n                    )\n    | extend SrcPortNumber = iff(isempty(SrcPortNumber), toint(coalesce(sport, temp_srcport)), SrcPortNumber)\n    | extend SrcPortNumber = toint(iff(isempty(SrcPortNumber) and SrcIpAddr has \".\", split(temp_srcipport, \":\")[1], SrcPortNumber))\n    | extend temp_dstipport = coalesce(dst, dns_server)\n    | extend temp_dstipport =  trim('\"', temp_dstipport)\n    | parse temp_dstipport with * \"[\" temp_dstip \"]:\" temp_dstport\n    | extend DstIpAddr = iff(temp_dstipport has \".\", split(temp_dstipport, \":\")[0], coalesce(temp_dstip, temp_dstipport))\n    | extend DstPortNumber = toint(coalesce(dport, temp_dstport))\n    | extend DstPortNumber = toint(iff(isempty(DstPortNumber) and DstIpAddr has \".\", split(temp_dstipport, \":\")[1], DstPortNumber))\n    | extend SrcIpAddr = iff(SrcIpAddr == SrcMacAddr, \"\", SrcIpAddr)\n    | extend DstIpAddr = iff(DstIpAddr == DstMacAddr, \"\", DstIpAddr)\n    | extend \n        EventMessage = iff(\n                LogSubType has_any(\"Blocked DHCP server\", \"Virtual router collision\"),\n                Substring,\n                coalesce(message, \"\")\n            ),\n        SrcUsername = trim('\"', identity),\n        SrcVlanId = trim('\"', vlan_id)\n    | extend\n        EventSeverity = case(\n                    isnotempty(EventSeverity),\n                    EventSeverity,\n                    EventResult == \"Failure\",\n                    \"Low\",\n                    \"Informational\"\n                ),\n        EventType = iff(isnotempty(EventType), EventType, \"NetworkSession\"),\n        SrcUsernameType = iff(isnotempty(SrcUsername), \"Simple\", \"\")\n    | invoke _ASIM_ResolveDvcFQDN('Device')\n    | extend\n        Dvc = DvcHostname,\n        Src = coalesce(SrcIpAddr, SrcMacAddr),\n        Dst = coalesce(DstIpAddr, DstMacAddr),\n        NetworkDuration = toint(todouble(duration) * 1000)\n    | project-rename\n        EventOriginalType = LogType,\n        EventOriginalSubType = LogSubType\n    | extend\n        EventEndTime = EventStartTime,\n        EventCount = int(1),\n        EventProduct = \"Meraki\",\n        EventVendor = \"Cisco\",\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        Duration = NetworkDuration,\n        IpAddr = SrcIpAddr,\n        InnerVlanId = SrcVlanId,\n        EventUid = _ResourceId\n    | project-away\n        LogMessage,\n        Parser,\n        Epoch,\n        EpochTimestamp,\n        Device,\n        Substring,\n        protocol,\n        priority,\n        reason,\n        direction,\n        duration,\n        src,\n        dst,\n        dns_server,\n        sport,\n        dport,\n        *_lookup,\n        type*,\n        pattern*,\n        last_known_client_ip,\n        ip_src,\n        client_mac,\n        mac,\n        shost,\n        dhost,\n        wired_mac,\n        identity,\n        temp*,\n        vlan_id*,\n        LogSubType1,\n        LogSubType2,\n        restmessage*,\n        message,\n        rssi,\n        aid,\n        signature,\n        timestamp,\n        EventResult_type,\n        TenantId,\n        SourceSystem,\n        Computer,\n        _ResourceId,\n        MG,\n        EventTime,\n        Facility,\n        HostName,\n        SeverityLevel,\n        ProcessID,\n        HostIP,\n        ProcessName,CollectorHostName,NetworkProtocolNumber\n};\nparser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
