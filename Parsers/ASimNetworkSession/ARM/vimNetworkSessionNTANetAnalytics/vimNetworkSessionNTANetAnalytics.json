{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionNTANetAnalytics')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Network Session ASIM filtering parser for NTANetAnalytics",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionNTANetAnalytics",
        "query": "let parser = (\n  disabled: bool = false,\n  starttime: datetime = datetime(null),\n  endtime: datetime = datetime(null),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  dstipaddr_has_any_prefix: dynamic = dynamic([]),\n  ipaddr_has_any_prefix: dynamic = dynamic([]),\n  dstportnumber: int = int(null),\n  hostname_has_any: dynamic = dynamic([]),\n  dvcaction: dynamic = dynamic([]),\n  eventresult: string = \"*\"\n) {\n// Pre-filter: Check if parser is disabled\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\nlet DvcActionLookup=datatable(FlowStatus:string, DvcAction:string, EventResult: string, EventSeverity: string)\n[\n    \"Allowed\", \"Allow\", \"Success\", \"Informational\",\n    \"Denied\", \"Deny\", \"Failure\", \"Low\",\n];\nlet ProtocolLookup=datatable(L4Protocol:string, NetworkProtocol:string)\n[\n    \"T\", \"TCP\",\n    \"U\", \"UDP\",\n    \"TCP\", \"TCP\",\n    \"UDP\", \"UDP\",\n    \"ICMP\", \"ICMP\",\n];\nNTANetAnalytics\n| where not(disabled)\n// Pre-filter Time\n| where isnull(starttime) or FlowStartTime >= starttime\n| where isnull(endtime) or FlowStartTime <= endtime\n// Pre-filter FlowLogs in source schema\n| where SubType == \"FlowLog\"\n// Pre-filter DST Port Number\n| where isnull(dstportnumber) or DestPort == dstportnumber\n// Pre-filter DvcAction\n| lookup DvcActionLookup on FlowStatus\n| where array_length(dvcaction) == 0 or DvcAction has_any (dvcaction)\n// Pre-filter Event result\n| where eventresult == \"*\" or (eventresult == \"Success\" and EventResult == \"Success\") or (eventresult == \"Failure\" and EventResult == \"Failure\")\n// Pre-filter IPs\n| extend temp_SrcMatch = has_any_ipv4_prefix(SrcIp, src_or_any), temp_DstMatch = has_any_ipv4_prefix(DestIp, dst_or_any)\n| extend ASimMatchingIpAddr = case(\n  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n  temp_SrcMatch and temp_DstMatch, \"Both\",\n  temp_SrcMatch, \"SrcIpAddr\",\n  temp_DstMatch, \"DstIpAddr\",\n  \"No match\"\n)\n| where ASimMatchingIpAddr != \"No match\"\n// Pre-filter by hostname\n| extend\n    temp_SrcHostMatch = SrcVm has_any(hostname_has_any) or SrcIp has_any(hostname_has_any),\n    temp_DstHostMatch = DestVm has_any(hostname_has_any) or DestIp has_any(hostname_has_any)\n| extend ASimMatchingHostname = case(\n    array_length(hostname_has_any) == 0, \"-\",\n    temp_SrcHostMatch and temp_DstHostMatch, \"Both\",\n    temp_SrcHostMatch, \"SrcDomain\",\n    temp_DstHostMatch, \"DstDomain\",\n    \"No match\"\n  )\n| where ASimMatchingHostname != \"No match\" \n| extend\n    SrcHostname = case(isnotempty(SrcVm), extract(@\"([^/]+)$\", 1, SrcVm),\"\"),\n    DstHostname = case(isnotempty(DestVm), extract(@\"([^/]+)$\", 1, SrcVm),\"\"),\n    SrcPortNumber = toint(split(SrcPorts, \"|\")[0])\n| lookup ProtocolLookup on L4Protocol\n| extend\n    EventCount = toint(iif(CompletedFlows != 0, CompletedFlows, 1)),\n    EventType = \"Flow\",\n    EventSchema = \"NetworkSession\",\n    EventSchemaVersion = \"0.2.6\",\n    EventProduct = \"Azure NSG flows\",\n    EventVendor = \"Microsoft\",\n    Dvc = \"Azure NSG flows\"\n| project-rename\n    EventStartTime = FlowStartTime,\n    EventEndTime = FlowEndTime,\n    SrcIpAddr = SrcIp,\n    DstIpAddr = DestIp,\n    DstPortNumber = DestPort,\n    SrcBytes = BytesSrcToDest,\n    DstBytes = BytesDestToSrc,\n    SrcPackets = PacketsSrcToDest,\n    DstPackets = PacketsDestToSrc,\n    SrcGeoCountry = Country,\n    NetworkDirection = FlowDirection,\n    SrcSubscriptionId = SrcSubscription,\n    DstSubscriptionId = DestSubscription,\n    EventUid = _ItemId,\n    NetworkRuleName = AclRule,\n    SrcInterfaceName = SrcNic,\n    DstInterfaceName = DestNic\n// Map other values\n| extend \n    NetworkPackets = SrcPackets + DstPackets,\n    NetworkBytes = SrcBytes + DstBytes,\n    EventOriginalResultDetails = case(\n        FlowType == \"Malicious\", \"Malicious\",\n        FlowType == \"Unknown\", \"Unknown\",\n        FlowType == \"Unknown Private\", \"Unknown\",\n        \"\"),\n    DstHostname = coalesce(DstHostname, DstIpAddr),\n    SrcHostname = coalesce(SrcHostname, SrcIpAddr),\n    NetworkApplicationProtocol = toupper(L7Protocol),\n    Src = coalesce(SrcHostname, SrcIpAddr),\n    Dst = coalesce(DstHostname, DstIpAddr),\n    DstDvcScopeId = DstSubscriptionId,\n    SrcDvcScopeId = SrcSubscriptionId,\n    SrcZone = case(\n        FlowType == \"IntraVNet\", \"Internal\",\n        FlowType == \"ExternalPublic\", \"Internet\",\n        FlowType == \"AzurePublic\", \"Azure\",\n        FlowType == \"InterVNet\", \"Internal\",\n        FlowType == \"S2S\", \"S2S\",\n        FlowType == \"P2S\", \"P2S\",\n        \"Unknown\"\n    ),\n    DstDvcId = case(NetworkDirection == \"Inbound\", TargetResourceId, \"\"),\n    DstDvcIdType = case(NetworkDirection == \"Inbound\", \"AzureResourceId\", \"\"),\n    SrcDvcId = case(NetworkDirection == \"Outbound\", TargetResourceId, \"\"),\n    SrcDvcIdType = case(NetworkDirection == \"Outbound\", \"AzureResourceId\", \"\"),\n    DstMacAddr = case(NetworkDirection == \"Inbound\", MacAddress, \"\"),\n    SrcMacAddr = case(NetworkDirection == \"Outbound\", MacAddress, \"\"),\n    Hostname = DstHostname,\n    IpAddr = SrcIpAddr\n| project \n    EventStartTime,\n    EventEndTime,\n    EventSchema,\n    TimeGenerated,\n    SrcIpAddr,\n    DstIpAddr,\n    SrcHostname,\n    DstHostname,\n    DstPortNumber,\n    NetworkDirection,\n    SrcSubscriptionId,\n    DstSubscriptionId,\n    DstDvcScopeId = DstSubscriptionId,\n    DstDvcScope = DstSubscriptionId,\n    SrcDvcScopeId = SrcSubscriptionId,\n    SrcDvcScope = SrcSubscriptionId,\n    SrcInterfaceName,\n    DstInterfaceName,\n    SrcGeoCountry,\n    DstPackets,\n    SrcPackets,\n    NetworkPackets,\n    DstBytes,\n    SrcBytes,\n    NetworkBytes,\n    NetworkRuleName,\n    Type,\n    EventUid,\n    ASimMatchingIpAddr,\n    ASimMatchingHostname,\n    DvcAction,\n    EventResult,\n    EventSeverity,\n    SrcPortNumber,\n    NetworkProtocol,\n    EventCount,\n    EventType,\n    EventSchemaVersion,\n    EventProduct,\n    EventVendor,\n    Dvc,\n    NetworkApplicationProtocol,\n    Src,\n    Dst,\n    DstMacAddr,\n    SrcMacAddr,\n    Hostname,\n    IpAddr,\n    DstDvcId,\n    DstDvcIdType,\n    SrcDvcId,\n    SrcDvcIdType,\n    SrcZone\n};\nparser (\n    starttime=starttime, \n    endtime=endtime, \n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n    dstportnumber=dstportnumber, \n    hostname_has_any=hostname_has_any, \n    dvcaction=dvcaction,\n    eventresult=eventresult,\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}