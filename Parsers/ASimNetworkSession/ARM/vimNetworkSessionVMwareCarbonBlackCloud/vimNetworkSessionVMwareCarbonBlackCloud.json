{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimNetworkSessionVMwareCarbonBlackCloud')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "NetworkSession ASIM Parser for VMware Carbon Black Cloud",
        "category": "ASIM",
        "FunctionAlias": "vimNetworkSessionVMwareCarbonBlackCloud",
        "query": "let NetworkProtocolLookup = datatable (netconn_protocol_s: string, NetworkProtocol: string)\n  [\n  \"PROTO_TCP\", \"TCP\",\n  \"PROTO_UDP\", \"UDP\"\n];\nlet DvcActionLookup = datatable (sensor_action_s: string, DvcAction: string)\n    [\n    \"ACTION_ALLOW\", \"Allow\",\n    \"ACTION_SUSPEND\", \"Drop\",\n    \"ACTION_TERMINATE\", \"Drop\",\n    \"ACTION_BREAK\", \"Drop\",\n    \"ACTION_BLOCK\", \"Deny\"\n];\nlet EventSeverityLookup = datatable (DvcAction: string, EventSeverity: string)\n    [\n    \"Allow\", \"Informational\",\n    \"Drop\", \"Low\",\n    \"Deny\", \"Low\"\n];\nlet ThreatConfidenceLookup = datatable (ThreatOriginalConfidence: string, ThreatConfidence: int)\n    [\n    \"1\", 10,\n    \"2\", 20,\n    \"3\", 30,\n    \"4\", 40,\n    \"5\", 50,\n    \"6\", 60,\n    \"7\", 70,\n    \"8\", 80,\n    \"9\", 90,\n    \"10\", 100\n];\nlet parser=(\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]), \n    dstipaddr_has_any_prefix: dynamic=dynamic([]), \n    ipaddr_has_any_prefix: dynamic=dynamic([]),\n    dstportnumber: int=int(null), \n    hostname_has_any: dynamic=dynamic([]), \n    dvcaction: dynamic=dynamic([]), \n    eventresult: string='*', \n    disabled: bool=false\n    ) {\n    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let CarbonBlackEventsSchema = datatable ( \n    eventType_s: string,\n    netconn_protocol_s: string,\n    sensor_action_s: string,\n    alert_id_g: string,\n    device_name_s: string,\n    action_s: string,\n    createTime_s: string,\n    netconn_domain_s: string,\n    remote_ip_s: string,\n    netconn_inbound_b: bool,\n    process_guid_s: string,\n    remote_port_d: real,\n    local_port_d: real,\n    process_pid_d: real,\n    device_external_ip_s: string,\n    local_ip_s: string,\n    device_id_s: string,\n    device_os_s: string,\n    event_description_s: string,\n    event_id_g: string,\n    event_origin_s: string,\n    process_path_s: string,\n    process_username_s: string,\n    org_key_s: string\n)[];\n    let CarbonBlackNotificationsSchema = datatable (\n    type_s: string,\n    threatInfo_incidentId_g: string,\n    threatInfo_score_d: real,\n    threatInfo_summary_s: string,\n    threatInfo_time_d: real,\n    threatInfo_threatCause_threatCategory_s: string,\n    threatInfo_threatCause_causeEventId_g: string,\n    ruleName_s: string,\n    deviceInfo_deviceVersion_s: string,\n    threatInfo_threatCause_originSourceType_s: string,\n    threatInfo_threatCause_reputation_s: string,\n    threatInfo_threatCause_reason_s: string,\n    id_g: string,\n    primary_event_id_g: string,\n    threat_id_g: string\n)[];\n    let alldata = union (CarbonBlackEventsSchema), (CarbonBlackEvents_CL)\n        | where not(disabled)\n        | where (isnull(starttime) or TimeGenerated >= starttime)\n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and array_length(hostname_has_any) == 0\n            and eventType_s == \"endpoint.event.netconn\"\n            and (isnull(dstportnumber) or toint(remote_port_d) == dstportnumber)\n        | lookup NetworkProtocolLookup on netconn_protocol_s\n        | lookup DvcActionLookup on sensor_action_s\n        | lookup EventSeverityLookup on DvcAction\n        | invoke _ASIM_ResolveDvcFQDN('device_name_s')\n        | extend temp_action = tostring(split(action_s, \"|\")[0])\n        | extend \n            EventResult = case(\n                  temp_action == \"ACTION_CONNECTION_CREATE_FAILED\",\n                  \"Failure\",\n                  sensor_action_s == \"ACTION_ALLOW\" or isempty(sensor_action_s),\n                  \"Success\",\n                  \"Failure\"\n              ),\n            temp_SrcMatch = has_any_ipv4_prefix(local_ip_s, src_or_any),\n            temp_DstMatch = has_any_ipv4_prefix(remote_ip_s, dst_or_any)\n        | extend \n            ASimMatchingIpAddr=case(\n                      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,\n                      \"-\",\n                      temp_SrcMatch and temp_DstMatch,\n                      \"Both\",\n                      temp_SrcMatch,\n                      \"SrcIpAddr\",\n                      temp_DstMatch,\n                      \"DstIpAddr\",\n                      \"No match\"\n                  ),\n            ASimMatchingHostname = case(\n                          array_length(hostname_has_any) == 0,\n                          \"-\",\n                          DvcHostname has_any (hostname_has_any),\n                          \"SrcHostname\",\n                          \"No match\"\n                      )\n        | where (eventresult == \"*\" or eventresult =~ EventResult)\n            and (array_length(dvcaction) == 0 or DvcAction has_any (dvcaction))\n            and ASimMatchingIpAddr != \"No match\"\n            and ASimMatchingHostname != \"No match\";\n    let alldatawiththreat = alldata \n        | where isnotempty(alert_id_g)\n        | join kind=leftouter(union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)\n            | where type_s == \"THREAT\"\n            | project\n                threatInfo_incidentId_g,\n                threatInfo_score_d,\n                threatInfo_summary_s,\n                threatInfo_time_d,\n                threatInfo_threatCause_threatCategory_s,\n                threatInfo_threatCause_causeEventId_g,\n                ruleName_s,\n                deviceInfo_deviceVersion_s,\n                threatInfo_threatCause_originSourceType_s,\n                threatInfo_threatCause_reputation_s,\n                threatInfo_threatCause_reason_s)\n            on $left.alert_id_g == $right.threatInfo_incidentId_g\n        | join kind=leftouter(union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)\n            | where type_s == \"CB_ANALYTICS\"\n            | project\n                id_g,\n                deviceInfo_deviceVersion_s,\n                threat_id_g,\n                threatInfo_score_d,\n                threatInfo_summary_s,\n                threatInfo_threatCause_reason_s)\n            on $left.alert_id_g == $right.id_g\n        | extend \n            ThreatCategory = threatInfo_threatCause_threatCategory_s,\n            ThreatFirstReportedTime = unixtime_milliseconds_todatetime(threatInfo_time_d),\n            RuleName = ruleName_s,\n            AdditionalFields_threat = bag_pack(\n                              \"threatInfo_threatCause_reason\",\n                              coalesce(threatInfo_threatCause_reason_s, threatInfo_threatCause_reason_s1),\n                              \"threatInfo_threatCause_reputation\",\n                              threatInfo_threatCause_reputation_s,\n                              \"threatInfo_threatCause_originSourceType\",\n                              threatInfo_threatCause_originSourceType_s,\n                              \"threatInfo_summary\",\n                              coalesce(threatInfo_summary_s, threatInfo_summary_s1)\n                          ),\n            ThreatId = threat_id_g,\n            ThreatOriginalConfidence = tostring(toint(coalesce(threatInfo_score_d, threatInfo_score_d1))),\n            DvcOsVersion = coalesce(deviceInfo_deviceVersion_s, deviceInfo_deviceVersion_s1)\n        | lookup ThreatConfidenceLookup on ThreatOriginalConfidence;\n    let alldatawithoutthreat = alldata\n        | where isempty(alert_id_g);\n    union alldatawiththreat, alldatawithoutthreat\n    | extend\n        EventStartTime = todatetime(split(createTime_s, '+')[0]),\n        SrcDomain = case(\n                netconn_domain_s == remote_ip_s or netconn_domain_s has \":\" or netconn_domain_s !has \".\",\n                \"\",\n                netconn_inbound_b,\n                netconn_domain_s,\n                \"\"\n            ),\n        AdditionalFields_Common = bag_pack(\n                              \"Process Guid\",\n                              process_guid_s\n                          ),\n        DstPortNumber = toint(remote_port_d),\n        NetworkDirection = case(\n                      temp_action == \"ACTION_CONNECTION_LISTEN\",\n                      \"Listen\",\n                      netconn_inbound_b == true,\n                      \"Inbound\",\n                      \"Unknown\"\n                  ),\n        SrcPortNumber = toint(local_port_d),\n        SrcProcessId = tostring(toint(process_pid_d))\n    | project-rename\n        DstIpAddr = remote_ip_s,\n        DvcIpAddr = device_external_ip_s,\n        EventUid = _ItemId,\n        SrcIpAddr = local_ip_s,\n        DvcId = device_id_s,\n        DvcOriginalAction = sensor_action_s,\n        DvcOs = device_os_s,\n        EventMessage = event_description_s,\n        EventOriginalType = action_s,\n        EventOriginalUid = event_id_g,\n        EventOwner = event_origin_s,\n        SrcUsername = process_username_s,\n        SrcProcessName = process_path_s,\n        DvcScopeId = org_key_s\n    | extend\n        EventCount = int(1),\n        EventProduct = \"Carbon Black Cloud\",\n        EventSchema = \"NetworkSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventType = \"EndpointNetworkSession\",\n        EventVendor = \"VMware\",\n        SrcHostname = SrcIpAddr,\n        DstHostname = iff(NetworkDirection == \"Inbound\", coalesce(DvcHostname, DstIpAddr), DstIpAddr),\n        NetworkProtocolVersion = case(\n                            DstIpAddr contains \".\",\n                            \"IPv4\",       \n                            DstIpAddr contains \":\",\n                            \"IPv6\", \n                            \"\"\n                        )\n    | extend\n        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),\n        EventEndTime = EventStartTime,\n        Dst = coalesce(DstHostname, DstIpAddr),\n        Src = coalesce(SrcHostname, SrcIpAddr),\n        IpAddr = SrcIpAddr,\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        SrcUserType = _ASIM_GetUserType(SrcUsername, \"\"),\n        SrcDomainType = iff(isnotempty(SrcDomain), \"FQDN\", \"\"),\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        AdditionalFields = bag_merge(AdditionalFields_threat, AdditionalFields_Common),\n        SrcAppName = SrcProcessName,\n        SrcAppId = SrcProcessId,\n        SrcAppType = \"Process\",\n        Hostname = DstHostname\n    | project-away\n        *_d,\n        *_s,\n        *_g,\n        *_b,\n        temp*,\n        _ResourceId,\n        Computer,\n        MG,\n        ManagementGroupName,\n        RawData,\n        SourceSystem,\n        TenantId,\n        AdditionalFields_*\n};\nparser(\n    starttime=starttime, \n    endtime=endtime,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n    dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix,\n    dstportnumber=dstportnumber, \n    hostname_has_any=hostname_has_any, \n    dvcaction=dvcaction, \n    eventresult=eventresult, \n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),dvcaction:dynamic=dynamic([]),hostname_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
