Parser:
  Title:  Network Session ASIM filtering parser for Sysmon for Linux
  Version: '0.4'
  LastUpdated: Feb 8 2023
Product:
  Name: Sysmon for Linux
Normalization:
  Schema: NetworkSession
  Version: '0.2.3'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Sysmon for Linux event 3 to the ASIM Network Session schema.
ParserName: vimNetworkSessionLinuxSysmon
EquivalentBuiltInParser: _Im_NetworkSession_LinuxSysmon
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    
    let DirectionNetworkEvents =
        Syslog 
        | where (isnull(starttime) or TimeGenerated>=starttime) 
            and (isnull(endtime) or TimeGenerated<=endtime) 
        | where not(disabled)
        | project SyslogMessage, TimeGenerated, HostIP
        | where SyslogMessage has_all ('<Provider Name="Linux-Sysmon"', '<EventID>3</EventID>')
        // ***************  Prefilterring *****************************************************************
        | where  
                 (eventresult=='*' or eventresult=='Success')
            and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing
            and (array_length(ip_any)==0 
                  or has_any_ipv4_prefix(SyslogMessage,ip_any)
                ) 
           and (array_length(hostname_has_any)==0 
                  or SyslogMessage has_any(hostname_has_any)) 
            and (isnull(dstportnumber) or SyslogMessage has (tostring(dstportnumber))) 
        // *************** / Prefilterring ***************************************************************
        | parse SyslogMessage with * '<Data Name="SourceIp">' SrcIpAddr:string '</Data>' *
        | where (array_length(srcipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix)
                ) 
        | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))
    ;
    let parser = (T: (SyslogMessage: string)) {
      T 
      | parse SyslogMessage with 
          *
          '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'
          *
          '<Computer>' SysmonComputer:string '</Computer>'
          *
          '<Data Name="RuleName">' RuleName:string '</Data>'
          '<Data Name="UtcTime">' EventEndTime:datetime '</Data>'
          '<Data Name="ProcessGuid">{' ProcessGuid:string '}</Data>'
          '<Data Name="ProcessId">' ProcessId:string '</Data>'
          '<Data Name="Image">' Process:string '</Data>'
          '<Data Name="User">' User:string '</Data>'
          '<Data Name="Protocol">' Protocol:string '</Data>' // -- source is lowercase
          '<Data Name="Initiated">' Initiated:bool '</Data>' 
          '<Data Name="SourceIsIpv6">' SourceIsIpv6:bool '</Data>'		
          '<Data Name="SourceIp">' * '</Data>'
          '<Data Name="SourceHostname">' SrcHostname:string '</Data>'
          '<Data Name="SourcePort">' SrcPortNumber:int '</Data>'
          '<Data Name="SourcePortName">' SrcPortName:string '</Data>'
          '<Data Name="DestinationIsIpv6">' DestinationIsIpv6:bool '</Data>'
          '<Data Name="DestinationIp">' DstIpAddr:string '</Data>'
          '<Data Name="DestinationHostname">' DstHostname:string '</Data>'
          '<Data Name="DestinationPort">' DstPortNumber:int '</Data>'
          '<Data Name="DestinationPortName">' DstPortName:string '</Data>'
          *
        | project-away DstPortName, DestinationIsIpv6, Initiated, SourceIsIpv6, SrcPortName, RuleName
    };
    let OutboundNetworkEvents = 
      DirectionNetworkEvents
      | where outbound
      | invoke parser ()
      | extend 
             temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) 
           , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)
    | extend ASimMatchingIpAddr = case(
            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
            , temp_isSrcMatch, "SrcIpAddr"
            , temp_isDstMatch, "DstIpAddr"
            , "No match"
    )
     | where ASimMatchingIpAddr != "No match"
     | extend temp_isSrcHostMatch= (SrcHostname has_any (hostname_has_any))
            , temp_isDstHostMatch = (DstHostname has_any (hostname_has_any))
      | extend ASimMatchingHostname = case(
            array_length(hostname_has_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcHostMatch and temp_isDstHostMatch), "Both" // has to be checked before the individual 
            , temp_isSrcHostMatch, "SrcHostname"
            , temp_isDstHostMatch, "DstHostname"
            , "No match"
    )
     | where ASimMatchingHostname != "No match"
     | project-away temp_*
     | extend
        SrcUsernameType = 'Simple',
        SrcUsername = User,
        SrcAppType = 'Process'
      | project-rename
        SrcProcessId = ProcessId, 
        SrcProcessGuid = ProcessGuid,
        SrcProcessName = Process
      | extend
        SrcAppName = SrcProcessName
      | project-away SyslogMessage
    ;
    let InboundNetworkEvents = 
        DirectionNetworkEvents
        | where not(outbound)
        | invoke parser ()
        // *************** Postfilterring ***************************************************************
        | where (array_length(hostname_has_any)==0 or DstHostname has_any (hostname_has_any)or SrcHostname has_any (hostname_has_any) )
        and  (isnull(dstportnumber) or DstPortNumber ==dstportnumber)
        // *************** Postfilterring ***************************************************************
        | extend 
            temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) 
          , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)
        | extend ASimMatchingIpAddr = case(
          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
          , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
          , temp_isSrcMatch, "SrcIpAddr"
          , temp_isDstMatch, "DstIpAddr"
          , "No match"
      )
      | project-away temp_*
      | where ASimMatchingIpAddr != "No match"
      | extend
        DstUsernameType = 'Simple',
        DstAppType = 'Process' 
      | project-rename
        DstUsername = User,
        DstProcessId = ProcessId, 
        DstProcessGuid = ProcessGuid,
        DstProcessName = Process
      | extend
        DstAppName = DstProcessName
      | project-away SyslogMessage
    ;
    let SysmonForLinuxNetwork=
        union OutboundNetworkEvents, InboundNetworkEvents
        | extend 
            EventType = 'NetworkSession',
            EventStartTime = EventEndTime,
            EventCount = int(1),
            EventVendor = 'Microsoft',
            EventSchemaVersion = '0.2.3',
            EventSchema = 'NetworkSession', 
            EventProduct = 'Sysmon for Linux',
            EventResult = 'Success',
            EventSeverity = 'Informational',
            DvcOs = 'Linux',
            NetworkProtocol = toupper(Protocol),
            NetworkDirection = iff(outbound, "Outbound", "Inbound"),
            EventOriginalType = '3' // Set with a constant value to avoid parsing
        | project-away outbound, Protocol
        | project-rename 
            DvcIpAddr = HostIP,
            DvcHostname = SysmonComputer
        | extend // aliases
            Dvc = DvcHostname,
            Hostname = DstHostname,
            IpAddr = SrcIpAddr,
            Src = SrcIpAddr,
            Dst = DstIpAddr
    ;
    SysmonForLinuxNetwork 