Parser:
  Title: Network Session ASIM parser for Azure VNet flows
  Version: '0.1.0'
  LastUpdated: Jun 13, 2025
Product:
  Name: Azure VNet flows
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Virtual network Flow logs (VNet flows) to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionAzureVNet
EquivalentBuiltInParser: _ASim_NetworkSession_AzureVNet
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DvcActionLookup = datatable(FlowStatus:string, DvcAction:string, EventResult:string) [
      'Allowed', 'Allow', 'Success',
      'Denied', 'Deny', 'Failure',
  ];
  let NetworkDirectionLookup = datatable(FlowDirection:string, NetworkDirection:string, isOutBound:bool) [
     'Inbound', 'Inbound', false,
     'Outbound', 'Outbound', true
  ];
  let parser = (disabled:bool=false) 
  {
    let AzureNetworkAnalytics = (FlowDirection: string) {
      NTANetAnalytics
      | where not(disabled) and isnotempty(FlowType)
      //| where FlowDirection == FlowDirection_s
      | lookup NetworkDirectionLookup on FlowDirection
    };
  let NTANetAnalyticsInbound =
      AzureNetworkAnalytics ('Inbound')
      | where not(isOutBound)
      | project-rename
          DstMacAddr = MacAddress
      | extend
          DstBytes = tolong(BytesSrcToDest), // -- size fields seem not to be populated for inbound
          DstPackets = tolong(PacketsSrcToDest),
          SrcBytes = tolong(BytesDestToSrc),
          SrcPackets = tolong(PacketsDestToSrc),
          //SrcInterfaceName = tostring(split(NIC_s, '/')[1]), //--need to update
          SrcGeoCountry = toupper(Country)
      | extend hostelements=split(DestVm,'/') 
      | extend 
          DstFQDN = strcat(hostelements[0], @"\", hostelements[1]), 
          DstHostname = tostring(hostelements[1]), 
          DstDomain = tostring(hostelements[0]), 
          DstDomainType = "ResourceGroup"
      | extend Hostname = DstHostname
      | project-away hostelements, isOutBound
    ;
  let NTANetAnalyticsOutbound =
      AzureNetworkAnalytics ('Outbound')
      | where isOutBound
      | project-rename
          SrcMacAddr = MacAddress
      | extend
          SrcBytes = tolong(BytesSrcToDest), 
          SrcPackets = tolong(PacketsSrcToDest),
          DstBytes = tolong(BytesDestToSrc),
          DstPackets = tolong(PacketsDestToSrc),
          //DstInterfaceName = tostring(split(NIC_s, '/')[1]), //--need to update
          DstGeoCountry = toupper(Country)
      | extend hostelements=split(SrcVm,'/')
      | extend 
          SrcFQDN = strcat(hostelements[0], @"\", hostelements[1]),
          SrcHostname = tostring(hostelements[1]),
          SrcDomain = tostring(hostelements[0]),
          SrcDomainType = "ResourceGroup"
      | extend Hostname = SrcHostname
      | project-away hostelements, isOutBound
    ;
    union NTANetAnalyticsInbound, NTANetAnalyticsOutbound
      | project-rename
        Dvc = NsgList,
        DvcSubscriptionId = SrcSubscription, //--need to check
        EventEndTime = FlowEndTime,
        EventStartTime = FlowStartTime,
        NetworkApplicationProtocol = L7Protocol,
        NetworkRuleName = NsgRule,
        NetworkSessionId = ConnectionName,
        EventOriginalSubType = FlowType
      | extend
        DstPortNumber = toint(DestPort),
        EventProduct = 'NSGFlow',
        EventSchema = 'NetworkSession',
        EventSchemaVersion='0.2.6',
        EventSeverity = 'Informational', //??
        EventType = 'Flow',
        EventVendor = 'Microsoft',
        EventCount = toint(AllowedInFlows+DeniedInFlows+AllowedOutFlows+DeniedOutFlows),
        NetworkDuration = toint((((EventEndTime - datetime(1970-01-01)) / 1s) - ((EventStartTime - datetime(1970-01-01)) / 1s )) * 1000),
        Rule = NetworkRuleName,
        SessionId = NetworkSessionId
      //| lookup DvcActionLookup on FlowStatus  //--need to check
      | extend 
        DstIpAddr = iff(isnotempty(DestIp),
                        DestIp,
                        split(DestPublicIps, '|')[0]),
        Duration = NetworkDuration,
        NetworkBytes = tolong(DstBytes + SrcBytes),
        NetworkPackets = tolong(DstPackets + SrcPackets),
        SrcIpAddr = iff(isnotempty(SrcIp),
                        SrcIp,
                        split(SrcPublicIps, '|')[0])
      | extend
        Dst = DstIpAddr,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr
      | extend NetworkProtocol = L4Protocol
      | project-keep
        Src*,
        Dst*,
        Event*,
        Dvc*,
        Network*,
        IpAddr,
        Hostname,
        Type,
        Duration,
        SessionId,
        TimeGenerated
    };
  parser (disabled)