Parser:
  Title: Network Session ASIM filtering parser for Barracuda WAF
  Version: '0.2.1'
  LastUpdated: Jul 17, 2024
Product:
  Name: Barracuda WAF
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Logs type Description in Barracuda WAF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports normalizing Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Web Session normalized schema.
ParserName: vimNetworkSessionBarracudaCEF
EquivalentBuiltInParser: _Im_NetworkSession_BarracudaCEF
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ProtocolLookup = datatable(
      Protocol_s: string,
      NetworkProtocol: string,
      NetworkProtocolVersion: string
  )[
      "TCP", "TCP", "",
      "TCP/ip", "TCP", "",
      "UDP", "UDP", "",
      "UDP/ip", "UDP", "",
      "ICMP", "ICMP", "IPV4",
      "ICMPv6", "ICMP", "IPV6",
  ];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventResultLookup = datatable (
      ActionID_s: string,
      EventResult: string,
      DvcAction: string
  )
      [
      "ALLOW", "Success", "Allow",
      "DENY", "Failure", "Deny"
  ];
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]), 
      dstipaddr_has_any_prefix: dynamic=dynamic([]),
      ipaddr_has_any_prefix: dynamic=dynamic([]),
      dstportnumber: int=int(null), 
      hostname_has_any: dynamic=dynamic([]),
      dvcaction: dynamic=dynamic([]), 
      eventresult: string='*', 
      disabled: bool=false){
  let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
  let BarracudaCEF = 
      CommonSecurityLog
      | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
      | where DeviceEventCategory == "NF"
      | where (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
      | extend
          temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any),
          temp_DstMatch = has_any_ipv4_prefix(DestinationIP, dst_or_any)
      | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
      | where ASimMatchingIpAddr != "No match"
          and (array_length(hostname_has_any) == 0 or DeviceName has_any (hostname_has_any))
      | where (isnull(dstportnumber) or (DestinationPort == dstportnumber))
      | lookup EventResultLookup on $left.DeviceAction == $right.ActionID_s
      | where (array_length(dvcaction) == 0 or DvcAction has_any(dvcaction))
      | where (eventresult == '*' or EventResult =~ eventresult)
      | extend 
          severity = toint(LogSeverity)
      | lookup SeverityLookup on severity
      | lookup ProtocolLookup on $left.Protocol == $right.Protocol_s
      | extend
          EventCount = toint(1),
          EventProduct = "WAF",
          EventSchema = "NetworkSession",
          EventSchemaVersion = "0.2.6",
          EventType = "NetworkSession",
          EventVendor = "Barracuda"
      | extend
          Dvc = DeviceName,
          DstIpAddr = DestinationIP,
          SrcIpAddr = SourceIP,
          DvcHostname = DeviceName,
          DvcIpAddr = DestinationIP,                            
          DstPortNumber = toint(DestinationPort),
          SrcPortNumber = toint(SourcePort),
          EventProductVersion = DeviceVersion,
          EventUid = _ItemId,
          EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
      | extend
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          Dst=DstIpAddr,
          EventEndTime = EventStartTime
      | project-away
          ThreatConfidence,
          CommunicationDirection,
          AdditionalExtensions,
          Device*,
          Source*,
          Destination*,
          Activity,
          LogSeverity,
          ApplicationProtocol,
          ProcessID,
          ExtID,
          Protocol,
          Reason,
          ReceiptTime,
          SimplifiedDeviceAction,
          OriginalLogSeverity,
          ProcessName,
          EndTime,
          ExternalID,
          File*,
          ReceivedBytes,
          Message,
          Old*,
          EventOutcome,
          Request*,
          StartTime,
          Field*,
          Flex*,
          Remote*,
          Malicious*,
          severity,
          ThreatSeverity,
          IndicatorThreatType,
          ThreatDescription,
          _ResourceId,
          SentBytes,
          ReportReferenceLink,
          Computer,
          temp_*,
          TenantId,CollectorHostName;
  BarracudaCEF
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, 
      ipaddr_has_any_prefix=ipaddr_has_any_prefix,
      dstportnumber=dstportnumber,
      hostname_has_any=hostname_has_any, 
      dvcaction=dvcaction,
      eventresult=eventresult, 
      disabled=disabled
  )