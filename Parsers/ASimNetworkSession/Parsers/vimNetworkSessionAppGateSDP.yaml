Parser:
  Title: Network Session ASIM filtering parser for AppGate SDP
  Version: '0.2.0'
  LastUpdated: Feb 19 2023
Product:
  Name: AppGate SDP
Normalization:
  Schema: NetworkSession
  Version: '0.2.2'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing AppGate SDP with event type 'ip-access' logs to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionAppGateSDP
EquivalentBuiltInParser: _Im_NetworkSession_AppGateSDP
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime:datetime=datetime(null), 
    endtime:datetime=datetime(null), 
    srcipaddr_has_any_prefix:dynamic=dynamic([]), 
    dstipaddr_has_any_prefix:dynamic=dynamic([]), 
    ipaddr_has_any_prefix:dynamic=dynamic([]),
    dstportnumber:int=int(null), 
    hostname_has_any:dynamic=dynamic([]), 
    dvcaction:dynamic=dynamic([]), 
    eventresult:string='*', 
    disabled:bool=false
  ) 
  {
    let DirectionLookup = datatable (direction:string, NetworkDirection:string) 
    [
      'up', 'Inbound',
      'down', 'Outbound'
    ];
    let ActionLookup = datatable (DvcOriginalAction:string, DvcAction:string, EventSeverity:string, EventResult:string)
    [
      'allow', 'Allow', 'Informational', 'Success',
      'drop', 'Drop', 'Low', 'Failure',
      'reject', 'Deny', 'Low', 'Failure',
      'block', 'Deny', 'Low', 'Failure',
      'block_report', 'Deny', 'Low', 'Failure',
      'allow_report', 'Allow', 'Informational', 'Success'
    ];
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    
    let ip_access_events = 
      Syslog
      | where (isnull(starttime) or TimeGenerated>=starttime) 
        and (isnull(endtime) or TimeGenerated<=endtime) 
        and not(disabled)
        and (array_length(hostname_has_any) == 0)
        and ProcessName in ("cz-sessiond", "cz-vpnd")
        and SyslogMessage has_all ("[AUDIT]",'"event_type":"ip_access"')
      | project TimeGenerated, SyslogMessage, Computer
    ;
    let tcpupd_success = 
      ip_access_events
      | where 
        SyslogMessage has '"rule_name"'
        and SyslogMessage has_any ('"protocol":"UDP"','"protocol":"TCP"') 
        and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) 
        and (isnull(dstportnumber) or SyslogMessage has (strcat('"destination_port":', tostring(dstportnumber)))) 
        and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))
      | parse SyslogMessage with * '"action":"' DvcOriginalAction:string '",' * 
      | lookup ActionLookup on DvcOriginalAction
      | where 
        (array_length(dvcaction) == 0 or DvcAction in (dvcaction))
        and (eventresult=='*' or EventResult == eventresult)
      | parse-where SyslogMessage with 
          *
          '"client_ip":"' SrcIpAddr:string '",' *
          '"client_port":' SrcPortNumber:int ',' *
          '"destination_ip":"' DstIpAddr:string '",' *
          '"destination_port":' DstPortNumber:int ',' *
          '"direction":"' direction:string '",' * 
          '"distinguished_name_device_id":"' SrcDvcId:string '",' *
          '"distinguished_name_user":"' SrcUsername:string '",' *
          '"entitlement_token_id":"' NetworkSessionId:string '",' *
          '"packet_size":' SrcBytes:long ',' *
          '"protocol":"' NetworkProtocol:string '",' *          
          '"rule_name":"' NetworkRuleName:string '",' *  
          '"source_ip":"' SrcNatIpAddr:string '",' *
          '"source_port":' SrcNatPortNumber:int ',' * 
          '"version":' EventProductVersion:string '}' *
      ;
    let tcpupd_fail = 
      ip_access_events
      | where 
        SyslogMessage has'"drop-reason"'
        and SyslogMessage has_any ('"protocol":"UDP"','"protocol":"TCP"') 
        and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) 
        and (isnull(dstportnumber) or SyslogMessage has (strcat('"destination_port":', tostring(dstportnumber)))) 
        and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))
      | parse SyslogMessage with * '"action":"' DvcOriginalAction:string '",' * 
      | lookup ActionLookup on DvcOriginalAction
      | where 
        (array_length(dvcaction) == 0 or DvcAction in (dvcaction))
        and (eventresult=='*' or EventResult == eventresult)
      | parse-where SyslogMessage with 
          *
          '"client_ip":"' SrcIpAddr:string '",' *
          '"client_port":' SrcPortNumber:int ',' *
          '"destination_ip":"' DstIpAddr:string '",' *
          '"destination_port":' DstPortNumber:int ',' *
          '"direction":"' direction:string '",' * 
          '"distinguished_name_device_id":"' SrcDvcId:string '",' *
          '"distinguished_name_user":"' SrcUsername:string '",' *
          '"drop-reason":"' EventOriginalResultDetails:string '",' *
          '"entitlement_token_id":"' NetworkSessionId:string '",' *
          '"packet_size":' SrcBytes:long ',' *
          '"protocol":"' NetworkProtocol:string '",' *
          '"source_ip":"' SrcNatIpAddr:string '",' *
          '"source_port":' SrcNatPortNumber:int ',' * 
          '"version":' EventProductVersion:string '}' *
        ;
    let icmp_success = 
      ip_access_events
      | where 
        SyslogMessage has '"ICMP"'
        and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) 
        and (isnull(dstportnumber)) 
        and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))
      | parse SyslogMessage with * '"action":"' DvcOriginalAction:string '",' * 
      | lookup ActionLookup on DvcOriginalAction
      | where 
        (array_length(dvcaction) == 0 or DvcAction in (dvcaction))
        and (eventresult=='*' or EventResult == eventresult)
      | parse-where SyslogMessage with 
          *
          '"action":"' DvcOriginalAction:string '",' * 
          '"client_ip":"' SrcIpAddr:string '",' *
          '"client_port":' SrcPortNumber:int ',' *
          '"destination_ip":"' DstIpAddr:string '",' *
          '"direction":"' direction:string '",' * 
          '"distinguished_name_device_id":"' SrcDvcId:string '",' *
          '"distinguished_name_user":"' SrcUsername:string '",' *
          '"entitlement_token_id":"' NetworkSessionId:string '",' *
          '"icmp_code":' NetworkIcmpSubCode:int ',' *
          '"icmp_type":' NetworkIcmpCode:int ',' *  
          '"packet_size":' SrcBytes:long ',' *
          '"protocol":"' NetworkProtocol:string '",' *          
          '"rule_name":"' NetworkRuleName:string '",' *  
          '"source_ip":"' SrcNatIpAddr:string '",' *
          '"version":' EventProductVersion:string '}' *
      ;
    union  tcpupd_success, tcpupd_fail, icmp_success 
    | extend 
      temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), 
      temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)
    | extend ASimMatchingIpAddr = case(
            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
            , temp_isSrcMatch, "SrcIpAddr"
            , temp_isDstMatch, "DstIpAddr"
            , "No match"
    )
    | project-away temp*
    | where ASimMatchingIpAddr != "No match"
    | parse SyslogMessage with 
        *
        '"country_name":"' SrcGeoCountry:string '",' *
        '"lat":' SrcGeoLatitude:real ',' *        
        '"lon":' SrcGeoLongitude:real '}' *
    | parse SyslogMessage with 
         *
        '"city_name":"' SrcGeoCity:string '",' *
        '"region_name":"' SrcGeoRegion:string '",' *
    | extend 
        SrcDvcIdType = 'AppGateId',
        SrcUsernameType = 'UPN'
    // -- Event fields
    | project-rename 
        DvcHostname = Computer
    | extend 
        EventCount = int(1),
        EventEndTime = TimeGenerated,
        EventStartTime = TimeGenerated,
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.3',
        EventVendor = 'AppGate',
        EventProduct = 'SDP',
        EventType = 'NetworkSession'
    | lookup DirectionLookup on direction
    // -- Aliases
    | extend 
        Src = SrcIpAddr,
        Dst = DstIpAddr,
        Dvc = DvcHostname,
        SessionId = NetworkSessionId,
        IpAddr = SrcIpAddr,
        Rule = NetworkRuleName,
    // -- Entity identifier explicit aliases
        SrcUserUpn = SrcUsername
    | project-away 
        SyslogMessage, direction
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)
