Parser:
  Title: Network Session ASIM filtering parser for AWS VPC logs
  Version: '0.3.1'
  LastUpdated: March 05, 2024
Product:
  Name: AWS VPC
Normalization:
  Schema: NetworkSession
  Version: '0.2.3'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Logging IP traffic with VPC Flow Logs
    Link: https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html
Description: |
  This ASIM parser supports normalizing and filtering AWS VPC logs produced by the Microsoft Sentinel AWS S3 connector to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionAWSVPC
EquivalentBuiltInParser: _Im_NetworkSession_AWSVPC
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ProtocolLookup = datatable(Protocol:int, NetworkProtocol:string) [
      0,"HOPOPT",
      1,"ICMP",
      2,"IGMP",
      3,"GGP",
      4,"IPv4",
      5,"ST",
      6,"TCP",
      7,"CBT",
      8,"EGP",
      9,"IGP",
      10,"BBN-RCC-MON",
      11,"NVP-II",
      12,"PUP",
      13,"ARGUS (deprecated)",
      14,"EMCON",
      15,"XNET",
      16,"CHAOS",
      17,"UDP",
      18,"MUX",
      19,"DCN-MEAS",
      20,"HMP",
      21,"PRM",
      22,"XNS-IDP",
      23,"TRUNK-1",
      24,"TRUNK-2",
      25,"LEAF-1",
      26,"LEAF-2",
      27,"RDP",
      28,"IRTP",
      29,"ISO-TP4",
      30,"NETBLT",
      31,"MFE-NSP",
      32,"MERIT-INP",
      33,"DCCP",
      34,"3PC",
      35,"IDPR",
      36,"XTP",
      37,"DDP",
      38,"IDPR-CMTP",
      39,"TP++",
      40,"IL",
      41,"IPv6",
      42,"SDRP",
      43,"IPv6-Route",
      44,"IPv6-Frag",
      45,"IDRP",
      46,"RSVP",
      47,"GRE",
      48,"DSR",
      49,"BNA",
      50,"ESP",
      51,"AH",
      52,"I-NLSP",
      53,"SWIPE (deprecated)",
      54,"NARP",
      55,"MOBILE",
      56,"TLSP",
      57,"SKIP",
      58,"IPv6-ICMP",
      59,"IPv6-NoNxt",
      60,"IPv6-Opts",
      61,"",
      62,"CFTP",
      63,"",
      64,"SAT-EXPAK",
      65,"KRYPTOLAN",
      66,"RVD",
      67,"IPPC",
      68,"",
      69,"SAT-MON",
      70,"VISA",
      71,"IPCV",
      72,"CPNX",
      73,"CPHB",
      74,"WSN",
      75,"PVP",
      76,"BR-SAT-MON",
      77,"SUN-ND",
      78,"WB-MON",
      79,"WB-EXPAK",
      80,"ISO-IP",
      81,"VMTP",
      82,"SECURE-VMTP",
      83,"VINES",
      84,"TTP",
      84,"IPTM",
      85,"NSFNET-IGP",
      86,"DGP",
      87,"TCF",
      88,"EIGRP",
      89,"OSPFIGP",
      90,"Sprite-RPC",
      91,"LARP",
      92,"MTP",
      93,"AX.25",
      94,"IPIP",
      95,"MICP (deprecated)",
      96,"SCC-SP",
      97,"ETHERIP",
      98,"ENCAP",
      99,"",
      100,"GMTP",
      101,"IFMP",
      102,"PNNI",
      103,"PIM",
      104,"ARIS",
      105,"SCPS",
      106,"QNX",
      107,"A/N",
      108,"IPComp",
      109,"SNP",
      110,"Compaq-Peer",
      111,"IPX-in-IP",
      112,"VRRP",
      113,"PGM",
      114,"",
      115,"L2TP",
      116,"DDX",
      117,"IATP",
      118,"STP",
      119,"SRP",
      120,"UTI",
      121,"SMP",
      122,"SM (deprecated)",
      123,"PTP",
      124,"ISIS over IPv4",
      125,"FIRE",
      126,"CRTP",
      127,"CRUDP",
      128,"SSCOPMCE",
      129,"IPLT",
      130,"SPS",
      131,"PIPE",
      132,"SCTP",
      133,"FC",
      134,"RSVP-E2E-IGNORE",
      135,"Mobility Header",
      136,"UDPLite",
      137,"MPLS-in-IP",
      138,"manet",
      139,"HIP",
      140,"Shim6",
      141,"WESP",
      142,"ROHC",
      143,"Ethernet",
      253,"",
      254,"",
      255,"Reserved"
    ];
    let DirectionLookup = datatable (FlowDirection:string, NetworkDirection:string)  [
      'ingress', 'Inbound',
      'egress', 'Outbound'
    ];
    let ActionLookup = datatable (Action:string, DvcAction:string)  [
      'ACCEPT', 'Allow',
      'REJECT', 'Deny'
    ];
    let parser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null), 
        srcipaddr_has_any_prefix:dynamic=dynamic([]), 
        dstipaddr_has_any_prefix:dynamic=dynamic([]), 
        ipaddr_has_any_prefix:dynamic=dynamic([]),
        dstportnumber:int=int(null), 
        hostname_has_any:dynamic=dynamic([]), 
        dvcaction:dynamic=dynamic([]), 
        eventresult:string='*', 
        disabled:bool=false
        )
    {
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  
    AWSVPCFlow 
    | where(isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime)   or TimeGenerated <= endtime)
    | where not(disabled)
    | where LogStatus == "OK"
    // -- Pre-filtering:
    | where
           (isnull(dstportnumber) or (DstPort == dstportnumber))
      and (array_length(hostname_has_any) == 0)
    | extend EventResult = iff (Action=="ACCEPT","Success","Failure")
    | where (eventresult == "*" or eventresult == EventResult) 
    | lookup ActionLookup on Action
    | where  (array_length(dvcaction) == 0 or DvcAction in (dvcaction))
    | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcAddr,src_or_any)
           , temp_isDstMatch=has_any_ipv4_prefix(DstAddr,dst_or_any)
    | extend ASimMatchingIpAddr = case(
            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
            , temp_isSrcMatch, "SrcIpAddr"
            , temp_isDstMatch, "DstIpAddr"
            , "No match"
    )
    | project-away temp_*
    | where ASimMatchingIpAddr != "No match"
    // -- End pre-filtering
    | extend
        EventVendor="AWS", 
        EventProduct="VPC",
        NetworkBytes = tolong(Bytes),
        NetworkPackets = tolong(Packets),
        EventProductVersion = tostring(Version),
        EventType="NetworkSession",
        EventCount=toint(1),
        EventSeverity = iff (Action=="ACCEPT","Informational","Low"),
        EventSchemaVersion="0.2.3",
        EventSchema="NetworkSession",
        SrcAppType = iff (PktSrcAwsService != "", "CloudService", ""),
        DstAppType = iff (PktDstAwsService != "", "CloudService", ""),
        DvcIdType = "AwsVpcId"
    | lookup ProtocolLookup on Protocol
    | lookup DirectionLookup on FlowDirection
    | project-rename
        DstIpAddr = DstAddr,  
        DstPortNumber = DstPort, 
        SrcNatIpAddr=PktSrcAddr, 
        DstNatIpAddr=PktDstAddr, 
        SrcPortNumber = SrcPort,  
        SrcIpAddr = SrcAddr, 
        EventEndTime = End, 
        DvcInboundInterface = InterfaceId,
        DvcSubscriptionId = AccountId,
        DvcId = VpcId,
        NetworkProtocolVersion = TrafficType,
        EventOriginalResultDetails = LogStatus,
        SrcAppName = PktSrcAwsService,
        DstAppName = PktDstAwsService
    // -- Aliases
    | extend
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        Dst = DstIpAddr,
        Dvc = DvcId,
        EventStartTime = TimeGenerated,
        DvcInterface = DvcInboundInterface
    | project-away Action, AzId, Bytes, FlowDirection, InstanceId, Packets, Protocol, Region, SourceSystem, SublocationId, SublocationType, SubnetId, TcpFlags, TenantId, TrafficPath, Version
    };
    parser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix,dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)