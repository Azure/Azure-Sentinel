Parser:
  Title: Network Session ASIM filtering parser for Microsoft Windows Firewall
  Version: '0.5.0'
  LastUpdated: Jul 17, 2024
Product:
  Name: Windows Firewall
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Microsoft Windows Firewall Events logs ingested in 'WindowsEvent' table to the ASIM Network Session schema. Event IDs which are parsed as part of this parser: 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5167, 5158, 5159
ParserName: vimNetworkSessionMicrosoftWindowsEventFirewall
EquivalentBuiltInParser: _Im_NetworkSession_MicrosoftWindowsEventFirewall
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: | 
  // Data tables for mapping raw values into string
  let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[
    '%%14596', 'IP Packet',
    '%%14597', 'Transport',
    '%%14598', 'Forward',
    '%%14599', 'Stream',
    '%%14600', 'Datagram Data',
    '%%14601', 'ICMP Error',
    '%%14602', 'MAC 802.3',
    '%%14603', 'MAC Native',
    '%%14604', 'vSwitch',
    '%%14608', 'Resource Assignment',
    '%%14609', 'Listen',
    '%%14610', 'Receive/Accept',
    '%%14611', 'Connect',
    '%%14612', 'Flow Established',
    '%%14614', 'Resource Release',
    '%%14615', 'Endpoint Closure',
    '%%14616', 'Connect Redirect',
    '%%14617', 'Bind Redirect',
    '%%14624', 'Stream Packet'];
  let ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[
    1, 'ICMP',
    3, 'GGP',
    6, 'TCP',
    8, 'EGP',
    12, 'PUP',
    17, 'UDP',
    20, 'HMP',
    27, 'RDP',
    46, 'RSVP',
    47, 'PPTP data over GRE',
    50, 'ESP',
    51, 'AH',
    66, 'RVD',
    88, 'IGMP',
    89, 'OSPF'];
  let Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[
    '%%14592', 'Inbound', false,
    '%%14593', 'Outbound', true,
    '%%14594', 'Forward',false,
    '%%14595', 'Bidirectional', false,
    '%%14609', 'Listen', false];
  //////////////////////////////////////////////////////
  // this query extract the data from WindowsEvent table
  //////////////////////////////////////////////////////
  let parser = (starttime:datetime=datetime(null), endtime:datetime=datetime(null)
  , srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null)
  , hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]),eventresult:string='*', disabled:bool=false)
  {
      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
      WindowsEvent 
      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type
      | where (isnull(starttime) or TimeGenerated>=starttime) 
              and (isnull(endtime) or TimeGenerated<=endtime) 
      |where not(disabled)
      | where EventID between (5150 .. 5159)
      | extend EventResult = iff(EventID in (5154, 5156, 5158), "Success", "Failure")
      // ***************  Prefilterring *******************
      | where  (isnull(dstportnumber) or EventData has tostring(dstportnumber)) 
              and (array_length(ip_any)==0 
                      or has_any_ipv4_prefix(EventData,ip_any)) 
              and (array_length(hostname_has_any)==0 ) 
              and (array_length(dvcaction)==0  ) 
              and (eventresult=='*' or EventResult==eventresult)
      // *************** Prefilterring *****************************************************************
      | extend SrcIpAddr = tostring(EventData.SourceAddress)
                , DstIpAddr = tostring(EventData.DestAddress)
      | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)
          , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)
      | extend ASimMatchingIpAddr = case(
            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
            , temp_isSrcMatch, "SrcIpAddr"
            , temp_isDstMatch, "DstIpAddr"
            , "No match"
    )
    | where ASimMatchingIpAddr != "No match"
    | project-away temp_*
    | extend 
                EventSeverity=tostring(EventData.Severity),
                LayerCode = tostring(EventData.LayerName),
                NetworkRuleNumber = toint(EventData.FilterRTID),
                Protocol = toint(EventData.Protocol),
                DirectionCode = iff(EventID in (5154, 5155, 5158, 5159), "%%14609",tostring(EventData.Direction))
            | lookup Directions on DirectionCode 
            | project-rename DvcHostname = Computer
            | extend  SrcAppName = iff(isOutBound, tostring(EventData.Application), ""),
                      DstAppName = iff(not(isOutBound), tostring(EventData.Application), ""),
                      SrcDvcId = iff(isOutBound, tostring(EventData.RemoteMachineID), ""),
                      DstDvcId = iff(not(isOutBound), tostring(EventData.RemoteMachineID), ""),
                      SrcPortNumber = toint(EventData.SourcePort),
                      DstPortNumber = toint(EventData.DestPort),
                      SrcProcessId =  iff(isOutBound, tostring(EventData.ProcessId), ""),
                      DstProcessId =  iff(not(isOutBound), tostring(EventData.ProcessId), ""),
                      DstUserId = iff(isOutBound, tostring(EventData.RemoteUserID), ""),
                      SrcUserId = iff(not(isOutBound), tostring(EventData.RemoteUserID), ""),
                      DstHostname = iff(isOutBound, "", DvcHostname),
                      SrcHostname = iff(isOutBound, DvcHostname, "")
            | project-away EventData
            | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber )
            | extend 
              DvcAction = iff(EventID in (5154, 5156, 5158), "Allow", "Deny"),
              DvcOs = 'Windows',
              DstAppType = "Process",
              SrcUserIdType = iff (SrcUserId <> "S-1-0-0", "SID", ""),
              SrcUserId = iff (SrcUserId <> "S-1-0-0", SrcUserId, ""),
              DstUserIdType = iff (DstUserId <> "S-1-0-0", "SID", ""),
              DstUserId = iff (DstUserId <> "S-1-0-0", DstUserId, ""),
              SrcAppType = "Process",
              EventType = "NetworkSession",
              EventSchema = "NetworkSession",
              EventSchemaVersion="0.2.3",
              EventCount=toint(1),
              EventVendor = "Microsoft",
              EventProduct = "Windows Firewall",
              EventStartTime = TimeGenerated,
              EventEndTime = TimeGenerated,
              EventSeverity = iff(EventID  in (5154, 5156, 5158), "Informational", "Low")
      // -- Aliases
      | extend 
          Dvc = DvcHostname,
          Hostname = DvcHostname,
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          Dst = DstIpAddr,
          Rule = tostring(NetworkRuleNumber),
          DstDvcIdType = iff (DstDvcId != "", "SID", ""),
          SrcDvcIdType = iff (SrcDvcId != "", "SID", "")
      | lookup LayerCodeTable on LayerCode
      | lookup ProtocolTable on Protocol
      | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID,_ResourceId,_SubscriptionId
        };
      parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, 
      ipaddr_has_any_prefix=ipaddr_has_any_prefix,
      dstportnumber=dstportnumber,
      hostname_has_any=hostname_has_any, 
      dvcaction=dvcaction,
      eventresult=eventresult, 
      disabled=disabled)