Parser:
  Title: Network Session ASIM filtering parser for Azure VNet flows
  Version: '0.1.0'
  LastUpdated: Jun 15, 2025
Product:
  Name: Azure VNet flows
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing and filtering Virtual network Flow logs (VNet flows) to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionAzureVNet
EquivalentBuiltInParser: _Im_NetworkSession_AzureVNet
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DvcActionLookup = datatable(FlowStatus:string, DvcAction:string, EventResult:string) [
      'Allowed', 'Allow', 'Success',
      'Denied', 'Deny', 'Failure',
  ];
  let NetworkDirectionLookup = datatable(FlowDirection:string, NetworkDirection:string, isOutBound:bool) [
     'Inbound', 'Inbound', false,
     'Outbound', 'Outbound', true
  ];
  let parser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null),
        srcipaddr_has_any_prefix:dynamic=dynamic([]), 
        dstipaddr_has_any_prefix:dynamic=dynamic([]), 
        ipaddr_has_any_prefix:dynamic=dynamic([]),
        dstportnumber:int=int(null), 
        hostname_has_any:dynamic=dynamic([]), 
        dvcaction:dynamic=dynamic([]), 
        eventresult:string='*', 
        disabled:bool=false)
  {
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let prefilter = (T:(TimeGenerated:datetime, SrcIp:string, SrcPublicIps:string, DestIp:string, DestPublicIps:string, DestPort:int, FlowStatus:string, SrcVm:string, DestVm:string)) { 
      T
      | where
        (isnull(dstportnumber) or dstportnumber == toint(DestPort)) 
      | extend dataSrcIPs = strcat(SrcIp," ",SrcPublicIps),
               dataDstIPs = strcat(DestIp," ",DestPublicIps)
      | extend temp_isSrcMatch=has_any_ipv4_prefix(dataSrcIPs,src_or_any)
             , temp_isDstMatch=has_any_ipv4_prefix(dataDstIPs,dst_or_any)
      | extend ASimMatchingIpAddr = case(
            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-" // match not requested: probably most common case
            , (temp_isSrcMatch and temp_isDstMatch), "Both" // has to be checked before the individual 
            , temp_isSrcMatch, "SrcIpAddr"
            , temp_isDstMatch, "DstIpAddr"
            , "No match"
          )
      | where ASimMatchingIpAddr != "No match"
      | extend temp_is_MatchSrcHostname = SrcVm has_any (hostname_has_any)
              , temp_is_MatchDstHostname = DestVm has_any (hostname_has_any)
      | extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,"-",
                                  temp_is_MatchSrcHostname and temp_is_MatchDstHostname, "Both",
                                  temp_is_MatchSrcHostname, "SrcHostname",
                                  temp_is_MatchDstHostname, "DstHostname",
                                  "No match"
                                )
      | where ASimMatchingHostname != "No match"
      | project-away temp_*
      | lookup DvcActionLookup on FlowStatus
      | where array_length(dvcaction) == 0 or DvcAction in (dvcaction)
      | where (eventresult=='*' or EventResult == eventresult)
    }; // prefilter ends
    let AzureNetworkAnalytics = 
      NTANetAnalytics
      | where
       (isnull(starttime) or TimeGenerated >= starttime)
        and  (isnull(endtime) or TimeGenerated <= endtime)
      | where not(disabled) and isnotempty(FlowType)
      | lookup NetworkDirectionLookup on FlowDirection
    ;
    let NTANetAnalyticsInbound =
      AzureNetworkAnalytics
      | where not(isOutBound)
      | invoke prefilter()
      | project-rename
          DstMacAddr = MacAddress
      | extend
          DstBytes = tolong(BytesSrcToDest), // -- size fields seem not to be populated for inbound
          DstPackets = tolong(PacketsSrcToDest),
          SrcBytes = tolong(BytesDestToSrc),
          SrcPackets = tolong(PacketsDestToSrc),
          SrcInterfaceName = tostring(split(SrcNic, '/')[1]), //--need to check
          SrcGeoCountry = toupper(Country)
      | extend hostelements=split(DestVm,'/') 
      | extend 
          DstFQDN = strcat(hostelements[0], @"\", hostelements[1]), 
          DstHostname = tostring(hostelements[1]), 
          DstDomain = tostring(hostelements[0]), 
          DstDomainType = "ResourceGroup"
      | extend Hostname = DstHostname
      | project-away hostelements, isOutBound
    ;
    let NTANetAnalyticsOutbound =
      AzureNetworkAnalytics
      | where isOutBound
      | invoke prefilter()
      | project-rename
          SrcMacAddr = MacAddress
      | extend
          SrcBytes = tolong(BytesSrcToDest), 
          SrcPackets = tolong(PacketsSrcToDest),
          DstBytes = tolong(BytesDestToSrc),
          DstPackets = tolong(PacketsDestToSrc),
          DstInterfaceName = tostring(split(DestNic, '/')[1]), //--need to check
          DstGeoCountry = toupper(Country)
      | extend hostelements=split(SrcVm,'/')
      | extend 
          SrcFQDN = strcat(hostelements[0], @"\", hostelements[1]),
          SrcHostname = tostring(hostelements[1]),
          SrcDomain = tostring(hostelements[0]),
          SrcDomainType = "ResourceGroup"
      | extend Hostname = SrcHostname
      | project-away hostelements, isOutBound
    ;
    union NTANetAnalyticsInbound, NTANetAnalyticsOutbound
    | project-rename
        Dvc = NsgList,
        SrcSubscriptionId = SrcSubscription, //--need to check
        DstSubscriptionId = DestSubscription, //--need to check
        SrcGeoRegion = SrcRegion, //--need to check
        DstGeoRegion = DestRegion, //--need to check
        EventEndTime = FlowEndTime,
        EventStartTime = FlowStartTime,
        NetworkApplicationProtocol = L7Protocol,
        NetworkRuleName = NsgRule,
        NetworkSessionId = ConnectionName,
        EventOriginalSubType = FlowType
      | extend
        DstPortNumber = toint(DestPort),
        EventProduct = 'NSGFlow',
        EventSchema = 'NetworkSession',
        EventSchemaVersion='0.2.6',
        EventSeverity = 'Informational', //??
        EventType = 'Flow',
        EventVendor = 'Microsoft',
        EventCount = toint(AllowedInFlows+DeniedInFlows+AllowedOutFlows+DeniedOutFlows),
        NetworkDuration = toint((((EventEndTime - datetime(1970-01-01)) / 1s) - ((EventStartTime - datetime(1970-01-01)) / 1s )) * 1000),
        Rule = NetworkRuleName,
        SessionId = NetworkSessionId
      | lookup DvcActionLookup on FlowStatus  //--need to check
      | extend 
        DstIpAddr = iff(isnotempty(DestIp),
                        DestIp,
                        split(DestPublicIps, '|')[0]),
        Duration = NetworkDuration,
        NetworkBytes = tolong(DstBytes + SrcBytes),
        NetworkPackets = tolong(DstPackets + SrcPackets),
        SrcIpAddr = iff(isnotempty(SrcIp),
                        SrcIp,
                        split(SrcPublicIps, '|')[0])
      | extend
        Dst = DstIpAddr,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr
      | extend NetworkProtocol = L4Protocol
      | project-keep
        Src*,
        Dst*,
        Event*,
        Dvc*,
        Network*,
        IpAddr,
        Hostname,
        Type,
        Duration,
        SessionId,
        TimeGenerated
    };
  parser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)