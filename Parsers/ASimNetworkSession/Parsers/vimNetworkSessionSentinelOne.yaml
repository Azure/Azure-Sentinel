Parser:
  Title: Network Session ASIM filtering parser for SentinelOne
  Version: '0.1.0'
  LastUpdated: Sep 18 2023
Product:
  Name: SentinelOne
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: SentinelOne Documentation
- Link: https://<SOneInstanceDomain>.sentinelone.net/api-doc/overview
Description: |
  This ASIM parser supports normalizing SentinelOne logs to the ASIM Network Session normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.
ParserName: vimNetworkSessionSentinelOne
EquivalentBuiltInParser: _Im_NetworkSession_SentinelOne
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let NetworkDirectionLookup = datatable (
      alertInfo_netEventDirection_s: string, 
      NetworkDirection: string
  )[
      "OUTGOING", "Outbound",
      "INCOMING", "Inbound",
  ];
  let DeviceTypeLookup = datatable (
      agentDetectionInfo_machineType_s: string,
      SrcDeviceType: string
  )
      [
      "desktop", "Computer",
      "server", "Computer",
      "laptop", "Computer",
      "kubernetes node", "Other",
      "unknown", "Other"
  ];
  let ThreatConfidenceLookup_undefined = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_undefined: int
  )
      [
      "FALSE_POSITIVE", 5,
      "Undefined", 15,
      "SUSPICIOUS", 25,
      "TRUE_POSITIVE", 33 
  ];
  let ThreatConfidenceLookup_suspicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_suspicious: int
  )
      [
      "FALSE_POSITIVE", 40,
      "Undefined", 50,
      "SUSPICIOUS", 60,
      "TRUE_POSITIVE", 67 
  ];
  let ThreatConfidenceLookup_malicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_malicious: int
  )
      [
      "FALSE_POSITIVE", 75,
      "Undefined", 80,
      "SUSPICIOUS", 90,
      "TRUE_POSITIVE", 100 
  ];
  let parser=(
      disabled: bool=false, 
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      eventresult: string='*', 
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      dstipaddr_has_any_prefix: dynamic=dynamic([]),
      ipaddr_has_any_prefix: dynamic=dynamic([]), 
      hostname_has_any: dynamic=dynamic([]),
      dstportnumber: int=int(null),
      dvcaction: dynamic=dynamic([])
      ) {
      let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
      let alldata = SentinelOne_CL
      | where not(disabled) 
          and (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and event_name_s == "Alerts."
          and alertInfo_eventType_s == "TCPV4"
          and (eventresult == "*" or eventresult == "Success")
          and (isnull(dstportnumber) or toint(alertInfo_dstPort_s) == dstportnumber)
          and (array_length(hostname_has_any) == 0 or agentDetectionInfo_name_s has_any (hostname_has_any))
          and (array_length(dvcaction) == 0 or dvcaction has_any ("Allow"))
      | extend
          temp_SrcMatch = has_any_ipv4_prefix(alertInfo_srcIp_s, src_or_any),
          temp_DstMatch = has_any_ipv4_prefix(alertInfo_dstIp_s, dst_or_any)
      | extend 
          ASimMatchingIpAddr=case(
                        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,
                        "-",
                        temp_SrcMatch and temp_DstMatch,
                        "Both",
                        temp_SrcMatch,
                        "SrcIpAddr",
                        temp_DstMatch,
                        "DstIpAddr",
                        "No match"
                    ),
          ASimMatchingHostname = "SrcHostname"
      | where ASimMatchingIpAddr != "No match";
      let undefineddata = alldata
          | where ruleInfo_treatAsThreat_s == "UNDEFINED"
          | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;
      let suspiciousdata = alldata
          | where ruleInfo_treatAsThreat_s == "Suspicious"
          | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;
      let maliciousdata = alldata
          | where ruleInfo_treatAsThreat_s == "Malicious"
          | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;
      union undefineddata, suspiciousdata, maliciousdata
      | lookup NetworkDirectionLookup on alertInfo_netEventDirection_s
      | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s
      | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')
      | extend 
          DstPortNumber = toint(alertInfo_dstPort_s),
          SrcPortNumber = toint(alertInfo_srcPort_s),
          ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)
      | project-rename
          EventStartTime = sourceProcessInfo_pidStarttime_t,
          DstIpAddr = alertInfo_dstIp_s,
          EventUid = _ItemId,
          SrcIpAddr = alertInfo_srcIp_s,
          DvcId = agentDetectionInfo_uuid_g,
          DvcOs = agentDetectionInfo_osName_s,
          DvcOsVersion = agentDetectionInfo_osRevision_s,
          EventOriginalSeverity = ruleInfo_severity_s,
          EventOriginalUid = alertInfo_dvEventId_s,
          SrcProcessName = sourceProcessInfo_name_s,
          SrcProcessId = sourceProcessInfo_pid_s,
          SrcUsername = sourceProcessInfo_user_s,
          ThreatOriginalConfidence = ruleInfo_treatAsThreat_s
      | extend
          EventEndTime = EventStartTime,
          Dst = DstIpAddr,
          DvcIpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          SrcHostname = DvcHostname,
          SrcDvcId = DvcId,
          IpAddr = SrcIpAddr,
          EventSeverity = iff(EventOriginalSeverity == "Critical", "High", EventOriginalSeverity),
          SrcDvcIdType = iff(isnotempty(DvcId), "Other", ""),
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
          SrcUserType = _ASIM_GetUserType(SrcUsername, "")
      | extend
          Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),
          Hostname = SrcHostname
      | extend
          EventCount = int(1),
          EventProduct = "SentinelOne",
          EventResult = "Success",
          DvcAction = "Allow",
          EventSchema = "NetworkSession",
          EventSchemaVersion = "0.2.6",
          EventResultDetails = "NA",
          EventType = "EndpointNetworkSession",
          EventVendor = "SentinelOne",
          NetworkProtocol = "TCP",
          NetworkProtocolVersion = "IPv4"
      | project-away
          *_d,
          *_s,
          *_g,
          *_t,
          *_b,
          _ResourceId,
          temp*,
          TenantId,
          RawData,
          Computer,
          MG,
          ManagementGroupName,
          SourceSystem,
          ThreatConfidence_*
  };
  parser(
      disabled=disabled,
      starttime=starttime, 
      endtime=endtime,
      eventresult=eventresult,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix,
      ipaddr_has_any_prefix=ipaddr_has_any_prefix,
      hostname_has_any=hostname_has_any,
      dstportnumber=dstportnumber,
      dvcaction=dvcaction
  )