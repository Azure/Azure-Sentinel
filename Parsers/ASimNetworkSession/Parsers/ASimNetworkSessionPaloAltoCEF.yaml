Parser:
  Title: Network Session ASIM parser for Palo Alto PanOS
  Version: '0.7.1'
  LastUpdated: Feb 19, 2024
Product:
  Name: Palo Alto PanOS
Normalization:
  Schema: NetworkSession
  Version: '0.2.2'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: traffic log fields
    Link: https://docs.paloaltonetworks.com/pan-os/10-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html
  - Title: Palo Alto Common Event Format Integration Guide [pdf]
    Link: https://docs.paloaltonetworks.com/content/dam/techdocs/en_US/pdf/cef/pan-os-90-cef-configuration-guide.pdf
Description: |
  This ASIM parser supports normalizing Palo Alto PanOS logs produced by the Microsoft Sentinel Palo Alto Networks connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionPaloAltoCEF
EquivalentBuiltInParser: _ASim_NetworkSession_PaloAltoCEF
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let Actions=datatable(DeviceAction:string,DvcAction:string)
    [ "reset client","Reset Source"
    , "reset server","Reset Destination"
    , "reset both", "Reset"
    , "allow","Allow"
    , "deny","Deny"
    , "drop", "Drop"
    , "drop ICMP", "Drop ICMP"
    , "reset-client","Reset Source"
    , "reset-server","Reset Destination"
    , "reset-both", "Reset"
    , "drop-icmp", "Drop ICMP"];
    let NWParser=(disabled:bool=false){
    CommonSecurityLog | where not(disabled)
    | where DeviceVendor == "Palo Alto Networks" and DeviceProduct == "PAN-OS" and Activity == "TRAFFIC"
    | parse AdditionalExtensions with "PanOSPacketsReceived=" DstPackets:long * "PanOSPacketsSent=" SrcPackets:long *
      // -- Adjustment to support both old and new CSL fields.
    | extend 
      EventStartTime =  coalesce(
        todatetime(StartTime), 
        extract(@'start=(.*?)(?:;|$)',1, AdditionalExtensions,typeof(datetime)),
        datetime(null)
      ),
      EventOriginalResultDetails = coalesce(
        column_ifexists("Reason", ""),
        extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string)),
        ""
      )
    | project-rename 
        EventProductVersion=DeviceVersion // Not Documented
      , Dvc=DeviceName   
      , NetworkApplicationProtocol=ApplicationProtocol
      , SrcZone=DeviceCustomString4 
      , DstZone=DeviceCustomString5
      , NetworkRuleName=DeviceCustomString1
      , SrcUsername=SourceUserName 
      , DstUsername=DestinationUserName 
      , EventOriginalSeverity=LogSeverity // not documented
      , SrcNatIpAddr=SourceTranslatedAddress
      , DstNatIpAddr=DestinationTranslatedAddress
      , PaloAltoFlags=FlexString1 // Flags
    | extend
    EventVendor="Palo Alto"
      ,EventProduct="PanOS" // Not Documented
      , SrcBytes=tolong(SentBytes)
      , DstBytes=tolong(ReceivedBytes) 
      , NetworkProtocol=toupper(Protocol)
      , NetworkBytes=tolong(FlexNumber1)
      , SrcUsernameType=case(isempty(SrcUsername), "", SrcUsername contains "@", "UPN", "Simple")
      , DstUsernameType=case(isempty(DstUsername), "", DstUsername contains "@", "UPN", "Simple")
      , EventType="NetworkSession"
      , EventCount=toint(1)
      , EventResult=case(DeviceAction=="allow","Success","Failure")
      // -- Adjustment to support both old and new CSL fields.
      , NetworkPackets = coalesce(
          tolong(column_ifexists("FieldDeviceCustomNumber2", long(null))),
          tolong(column_ifexists("DeviceCustomNumber2",long(null)))
        )
      , NetworkSessionId = coalesce(
          tostring(column_ifexists("FieldDeviceCustomNumber1", long(null))),
          tostring(column_ifexists("DeviceCustomNumber1",long(null)))
        )
      , NetworkDuration= coalesce(
          toint(1000*column_ifexists("FieldDeviceCustomNumber3", 0)),
          toint(1000*column_ifexists("DeviceCustomNumber3",0)),
          int(null)
        )
      , EventSchemaVersion="0.2.1"
      , EventSchema="NetworkSession"
      , EventSeverity = "Informational"
    | extend hostelements=split(Dvc,'.')
    | extend DvcHostname=tostring(hostelements[0])
           , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
    | extend DvcFQDN = iff(Dvc contains ".",Dvc,"" )
          , DvcDomainType=iff(Dvc contains ".","FQDN","" )
    | project-away hostelements
    | lookup Actions on DeviceAction
    | project-rename
      DstMacAddr=DestinationMACAddress
      , SrcMacAddr=SourceMACAddress
      , DstIpAddr=DestinationIP
      , DstPortNumber=DestinationPort
      , DstNatPortNumber=DestinationTranslatedPort
      , SrcPortNumber=SourcePort
      , SrcIpAddr=SourceIP
      , SrcNatPortNumber=SourceTranslatedPort
      , DvcOutboundInterface=DeviceOutboundInterface
      , DvcInboundInterface=DeviceInboundInterface
      , EventMessage=Message
      , DvcOriginalAction=DeviceAction
    // -- Aliases
    | extend
    IpAddr = SrcIpAddr,
    Rule=NetworkRuleName,
    Dst=DstIpAddr,
    // Host=DstHostname, 
    User=DstUsername,
    Duration=NetworkDuration,
    SessionId=NetworkSessionId,
    EventEndTime =EventStartTime,
    Src=SrcIpAddr
    | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, EventOutcome, FieldDevice*, ExtID, Reason, ReportReferenceLink, Activity, Computer, OriginalLogSeverity, PaloAltoFlags, Protocol
    };
    NWParser (disabled)