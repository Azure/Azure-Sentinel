Parser:
  Title: Network Session Event ASIM parser for Sysmon (Event 3)
  Version: '0.1.1'
  LastUpdated: Jun 18, 2024
Product:
  Name: Windows Sysmon
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Sysmon network session events (event 3) collected using the Event or WEF (WindowsEvent table) connectors logs ingested in 'Event' table to the ASIM Process Event normalized schema. 
ParserName: vimNetworkSessionMicrosoftSysmon
EquivalentBuiltInParser: _Im_NetworkSession_MicrosoftSysmon
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    dstipaddr_has_any_prefix: dynamic=dynamic([]), 
    ipaddr_has_any_prefix: dynamic=dynamic([]),
    dstportnumber: int=int(null), 
    hostname_has_any: dynamic=dynamic([]), 
    dvcaction: dynamic=dynamic([]), 
    eventresult: string='*', 
    disabled: bool=false
    ) {
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    let ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
    let Sysmon3_Event=Event
        | where (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
        | where not(disabled)
        // -- Pre-filtering:
        | where (eventresult == '*' or eventresult == 'Success')
            and array_length(dvcaction) == 0
        // dstportnumber filter used later in the parser
        // hostname_has_any used later in the parser 
        // -- End pre-filtering
        | where Source == "Microsoft-Windows-Sysmon" and EventID == 3
        | parse-kv EventData as (
            SourceIp: string,
            DestinationIp: string,
            SourceHostname: string,
            DestinationHostname: string,
            Initiated: bool,  // Initiated indicates the process initiated a connection (meaning outbound)
            RuleName: string,
            UtcTime: datetime,
            ProcessGuid: string,
            ProcessId: string,
            Image: string,
            User: string,
            Protocol: string,
            SourceIsIpv6: bool,
            SourcePort: int,
            SourcePortName: string,
            DestinationIsIpv6: bool,
            DestinationPort: int,
            DestinationPortName: string
            )
            with (regex=@'<Data Name="(\w+)">{?([^>]*?)}?</Data>')
        | where (array_length(ip_any) == 0 
            or has_any_ipv4_prefix(EventData, ip_any)
            ) 
            and (isnull(dstportnumber)) or dstportnumber == DestinationPort
            and (array_length(hostname_has_any) == 0) or SourceHostname has_any (hostname_has_any) or DestinationHostname has_any (hostname_has_any)
        | extend
            temp_isSrcMatch=has_any_ipv4_prefix(SourceIp, src_or_any)
            ,
            temp_isDstMatch=has_any_ipv4_prefix(DestinationIp, dst_or_any)
        | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,
                                  "-" // match not requested: probably most common case
            ,
                                  (temp_isSrcMatch and temp_isDstMatch),
                                  "Both" // has to be checked before the individual 
            ,
                                  temp_isSrcMatch,
                                  "SrcIpAddr"
            ,
                                  temp_isDstMatch,
                                  "DstIpAddr"
            ,
                                  "No match"
                              )
        | where ASimMatchingIpAddr != "No match"
        | project-away EventData
        | project-rename
            SrcHostname = SourceHostname,
            DstHostname = DestinationHostname
        | project-away
            Source,
            EventLog,
            EventCategory,
            UserName,
            Message,
            ParameterXml,
            RenderedDescription,
            MG,
            AzureDeploymentID,
            Role; 
    Sysmon3_Event
    | extend
        AppName = tostring(split(Image, "\\")[-1])
    | extend
        SrcUsernameType = iff(not(Initiated), "Windows", ""),
        SrcUsername = iff(not(Initiated), tostring(User), ""),
        SrcProcessId = iff(not(Initiated), tostring(ProcessId), ""),
        SrcProcessGuid = iff(not(Initiated), ProcessGuid, ""),
        SrcProcessName = iff(not(Initiated), tostring(Image), ""),
        SrcAppName = iff(not(Initiated), AppName, ""),
        SrcAppType = iff(not(Initiated), 'Process', ""),
        DstUsernameType = iff(Initiated, "Windows", ""),
        DstUsername = iff(Initiated, tostring(User), ""),
        DstProcessId = iff(Initiated, tostring(ProcessId), ""),
        DstProcessGuid = iff(Initiated, ProcessGuid, ""),
        DstProcessName = iff(Initiated, tostring(Image), ""),
        DstAppName = iff(Initiated, AppName, ""),
        DstAppType = iff(Initiated, 'Process', "")
    | project-away ProcessId, ProcessGuid, Image, AppName
    | project-rename 
        EventStartTime = UtcTime,
        Dvc = Computer,
        SrcIpAddr = SourceIp,
        DstIpAddr  = DestinationIp,
        DstPortNumber = DestinationPort,
        SrcPortNumber = SourcePort,
        NetworkRuleName = RuleName
    | extend 
        EventEndTime = EventStartTime,
        Hostname = case(
               Initiated,
               DstHostname,
               not(Initiated),
               SrcHostname,
               Dvc
           ),
        Src = SrcIpAddr,
        Dst = DstIpAddr,
        DvcIpAddr = iff(Initiated, SrcIpAddr, DstIpAddr),
        IpAddr = SrcIpAddr,
        EventType = 'EndpointNetworkSession',
        EventCount = int(1),
        EventVendor = 'Microsoft',
        EventSchemaVersion = '0.2.5',
        EventSchema = 'NetworkSession', 
        EventProduct = 'Sysmon',
        EventResult = 'Success',
        EventSeverity = 'Informational',
        DvcOs = 'Windows',
        Protocol = toupper(Protocol),
        EventOriginalType = '3' // Set with a constant value to avoid parsing   
    | extend
        DvcHostname = Hostname
    | extend
        SrcHostname = iff(SrcHostname == "-", "", SrcHostname),
        DvcHostname = iff(DvcHostname == "-", "", DvcHostname),
        DstHostname = iff(DstHostname == "-", "", DstHostname) // let's make empty values actually empty
    | project-rename
        TmpSrcHostname = SrcHostname,
        TmpDvcHostname = DvcHostname,
        TmpDstHostname = DstHostname
    | invoke 
        _ASIM_ResolveSrcFQDN('TmpSrcHostname')
    | invoke 
        _ASIM_ResolveDvcFQDN('TmpDvcHostname')
    | invoke 
        _ASIM_ResolveDstFQDN('TmpDstHostname')
    | project-away
        TmpSrcHostname,
        TmpDvcHostname,
        TmpDstHostname
    | extend                         
        NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), "IPV6", "IPV4"),
        NetworkProtocol = toupper(Protocol)
    | project-away 
        Destination*,
        Initiated,
        ManagementGroupName,
        TenantId,
        Protocol,
        Source*,
        EventID,
        EventLevelName,
        EventLevel,
        _ResourceId
    };
      parser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix,dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)
