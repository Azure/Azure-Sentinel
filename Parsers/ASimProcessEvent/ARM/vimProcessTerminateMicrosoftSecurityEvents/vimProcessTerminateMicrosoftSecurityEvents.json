{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimProcessTerminateMicrosoftSecurityEvents')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Process Terminate Event ASIM parser for Windows Security Events",
        "category": "ASIM",
        "FunctionAlias": "vimProcessTerminateMicrosoftSecurityEvents",
        "query": "let ProcessEvents=(){\nSecurityEvent\n// -- Filter\n| where EventID == 4689\n// --------------------------------------------------------------------------------------\n| where\n(isnull(starttime)   or TimeGenerated >= starttime )\nand (isnull(endtime) or TimeGenerated <= endtime )\nand not(disabled)\nand (array_length(actingprocess_has_any)==0 ) \nand (array_length(parentprocess_has_any)==0) \nand (array_length(dvcipaddr_has_any_prefix)==0)\nand (eventtype=='*' or eventtype=='ProcessTerminated')\nand (array_length(commandline_has_any)==0 or CommandLine has_any (commandline_has_any)) \nand (array_length(commandline_has_all)==0 or CommandLine has_all (commandline_has_all)) \nand (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(CommandLine, commandline_has_any_ip_prefix) ) \nand (array_length(targetprocess_has_any)==0 or ProcessName has_any (targetprocess_has_any)) \nand (actorusername=='*' or SubjectAccount has actorusername)  \nand (array_length(dvcname_has_any)==0 or Computer has_any (dvcname_has_any))   \n// --------------------------------------------------------------------------------------\n// -- Map\n| extend\n  // Event\n    EventCount = int(1),\n    EventVendor = \"Microsoft\",\n    EventProduct = \"Security Events\",\n    EventSchemaVersion = \"0.1.0\",\n    EventSchema = 'ProcessEvent',\n    EventStartTime = todatetime(TimeGenerated),\n    EventEndTime = todatetime(TimeGenerated),\n    EventType = \"ProcessTerminated\",\n    EventResult = 'Success',\n    EventOriginalType = tostring(EventID),\n    EventOriginalUid = EventOriginId,\n    EventResultDetails = Status,\n    EventOriginalResultDetails = Status, \n  // Device\n    DvcId = SourceComputerId,\n    DvcHostname = Computer,\n    DvcOs = \"Windows\",\n  // Users\n    ActorUserIdType = iff (SubjectUserSid <> \"S-1-0-0\", \"SID\", \"\"),\n    ActorUserId = iff (SubjectUserSid <> \"S-1-0-0\", SubjectUserSid, \"\"),  \n    ActorUsername = iff (SubjectDomainName == '-', SubjectUserName, SubjectAccount),\n    ActorUsernameType = iff(SubjectDomainName == '-','Simple', 'Windows'),\n    ActorSessionId = SubjectLogonId,\n    ActorDomainName = SubjectDomainName,\n  // Processes \n    TargetProcessId = tostring(toint(ProcessId)),\n    TargetProcessName = ProcessName,\n    TargetProcessCommandLine = CommandLine,\n    TargetProcessTokenElevation = TokenElevationType,\n    Process = ProcessName\n  // Aliases\n  | extend \n    User = ActorUsername,\n    Dvc = DvcHostname,\n    Process = TargetProcessName\n}; ProcessEvents\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),commandline_has_any:dynamic=dynamic([]),commandline_has_all:dynamic=dynamic([]),commandline_has_any_ip_prefix:dynamic=dynamic([]),actingprocess_has_any:dynamic=dynamic([]),targetprocess_has_any:dynamic=dynamic([]),parentprocess_has_any:dynamic=dynamic([]),actorusername:string='*',dvcipaddr_has_any_prefix:dynamic=dynamic([]),dvcname_has_any:dynamic=dynamic([]),eventtype:string='*',disabled:bool=False"
      }
    }
  ]
}
