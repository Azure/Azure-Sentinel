{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimProcessTerminateMicrosoftWindowsEvents')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Process Terminate Event ASIM parser for WEF Security Events",
        "category": "ASIM",
        "FunctionAlias": "vimProcessTerminateMicrosoftWindowsEvents",
        "query": "let ASIM_GetFilenamePart = (path:string) { tostring(split(path,@'\\')[-1]) };\nlet ASIM_ResolveWindowsUsername = (T:(username:string, domain:string, sid:string)) { \n    T \n    | extend \n         type = case (\n            username == \"-\", \"\",\n            domain == \"-\", \"Simple\",\n            \"Windows\"\n        ),\n        username = case (\n          username == \"-\", \"\",\n          domain == '-', username,\n          strcat(domain, @\"\\\" , username)\n        )\n};\nlet parser = (\n  starttime:datetime=datetime(null),\n  endtime:datetime=datetime(null),\n  commandline_has_any:dynamic=dynamic([]),\n  commandline_has_all:dynamic=dynamic([]),\n  commandline_has_any_ip_prefix:dynamic=dynamic([]),\n  actingprocess_has_any:dynamic=dynamic([]),\n  targetprocess_has_any:dynamic=dynamic([]),\n  parentprocess_has_any:dynamic=dynamic([]),\n  actorusername_has:string='*',\n  dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n  dvchostname_has_any:dynamic=dynamic([]),\n  eventtype:string='*',\n  hashes_has_any:dynamic=dynamic([]),\n  disabled:bool=false\n) {\nWindowsEvent\n| where\n    (isnull(starttime)   or TimeGenerated >= starttime )\n    and (isnull(endtime) or TimeGenerated <= endtime )\n    and not(disabled)\n    and EventID == 4689\n    and (array_length(actingprocess_has_any)==0) \n    and (array_length(parentprocess_has_any)==0) \n    and (array_length(dvcipaddr_has_any_prefix)==0)\n    and (eventtype=='*' or eventtype=='ProcessTerminated')\n    and (array_length(commandline_has_all)==0) \n    and (array_length(commandline_has_any)==0) \n    and (array_length(commandline_has_any_ip_prefix)==0) \n    and (array_length(hashes_has_any)==0) \n    and (array_length(targetprocess_has_any)==0 or EventData.ProcessName has_any (targetprocess_has_any)) \n    and (actorusername_has=='*' or EventData has actorusername_has)  \n    and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))   \n| project-rename\n    DvcHostname = Computer\n| extend\n    EventCount = int(1),\n    EventVendor = 'Microsoft',\n    EventProduct = 'Security Events',\n    EventSchemaVersion = '0.1.0',\n    EventSchema = 'ProcessEvent',\n    EventResult = 'Success',\n    EventStartTime = todatetime(TimeGenerated),\n    EventEndTime = todatetime(TimeGenerated),\n    EventType = 'ProcessTerminated',\n    EventOriginalType = tostring(EventID),\n    DvcOs = 'Windows'\n| extend \n    ActorUsername = strcat(EventData.SubjectDomainName, @'\\', EventData.SubjectUserName), \n    ActorUserId = tostring(EventData.SubjectUserSid)\n| extend\n    ActorUserIdType = iff (ActorUserId <> \"S-1-0-0\", \"SID\", \"\"),\n    ActorUserId = iff (ActorUserId <> \"S-1-0-0\", ActorUserId, \"\"),  \n    ActorUsernameType = \"Windows\"\n| where // -- post filtering\n    (actorusername_has=='*' or ActorUsername has actorusername_has)  \n| extend \n    ActorUserSid = ActorUserId,\n    ActorUserType = _ASIM_GetWindowsUserType(ActorUsername, ActorUserId)\n| extend\n    ActorSessionId = tostring(toint(EventData.SubjectLogonId)),\n    // Processes \n    TargetProcessId = tostring(toint(tolong(EventData.ProcessId))),\n    TargetProcessName = tostring(EventData.ProcessName),\n    TargetProcessStatusCode = tostring(EventData.Status)\n| extend \n    TargetProcessFilename = ASIM_GetFilenamePart(TargetProcessName)\n// -- Aliases\n| extend\n    User = ActorUsername,\n    Dvc = DvcHostname,\n    Process = TargetProcessName\n| project-away Channel, EventData, Data, EventID, EventLevelName, EventLevel, Provider, RawEventData, Task, TenantId, ManagementGroupName, SourceSystem, EventOriginId\n}; \nparser (\n  starttime=starttime, \n  endtime=endtime, \n  commandline_has_any=commandline_has_any,\n  commandline_has_all=commandline_has_all,\n  commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,\n  actingprocess_has_any=actingprocess_has_any,\n  targetprocess_has_any=targetprocess_has_any,\n  parentprocess_has_any=parentprocess_has_any,\n  actorusername_has=actorusername_has,\n  dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,\n  dvchostname_has_any=dvchostname_has_any,\n  eventtype=eventtype,\n  hashes_has_any=hashes_has_any,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),commandline_has_any:dynamic=dynamic([]),commandline_has_all:dynamic=dynamic([]),commandline_has_any_ip_prefix:dynamic=dynamic([]),actingprocess_has_any:dynamic=dynamic([]),targetprocess_has_any:dynamic=dynamic([]),parentprocess_has_any:dynamic=dynamic([]),actorusername_has:string='*',dvcipaddr_has_any_prefix:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),eventtype:string='*',hashes_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
