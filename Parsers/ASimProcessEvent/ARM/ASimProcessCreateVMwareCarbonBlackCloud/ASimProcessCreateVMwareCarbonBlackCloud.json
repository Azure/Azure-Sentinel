{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimProcessCreateVMwareCarbonBlackCloud')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Process Create ASIM parser for VMware Carbon Black Cloud",
        "category": "ASIM",
        "FunctionAlias": "ASimProcessCreateVMwareCarbonBlackCloud",
        "query": "let EventFieldsLookup = datatable(\n  sensor_action_s: string,\n  DvcAction: string,\n  EventResult: string\n)[\n    \"ACTION_ALLOW\", \"Allow\", \"Success\",\n    \"ACTION_BLOCK\", \"Block\", \"Failure\",\n    \"ACTION_TERMINATE\", \"Terminate\", \"Failure\",\n    \"ACTION_BREAK\", \"Break\", \"Failure\",\n    \"ACTION_SUSPEND\", \"Suspend\", \"Failure\",\n    \"\", \"\", \"Success\"\n];\nlet ThreatConfidenceLookup = datatable (ThreatOriginalConfidence: string, ThreatConfidence: int)\n    [\n    \"1\", 10,\n    \"2\", 20,\n    \"3\", 30,\n    \"4\", 40,\n    \"5\", 50,\n    \"6\", 60,\n    \"7\", 70,\n    \"8\", 80,\n    \"9\", 90,\n    \"10\", 100\n];\nlet parser = (disabled: bool=false) {\n    let CarbonBlackEventsSchema = datatable (\n    eventType_s: string,\n    childproc_pid_d: real,\n    process_hash_s: string,\n    parent_hash_s: string,\n    childproc_hash_s: string,\n    sensor_action_s: string,\n    alert_id_g: string,\n    event_id_g: string,\n    createTime_s: string,\n    process_pid_d: real,\n    parent_pid_d: real,\n    org_key_s: string,\n    parent_cmdline_s: string,\n    process_reputation_s: string,\n    childproc_reputation_s: string,\n    parent_reputation_s: string,\n    process_guid_s: string,\n    childproc_guid_s: string,\n    parent_guid_s: string,\n    process_username_s: string,\n    target_cmdline_s: string,\n    childproc_name_s: string,\n    childproc_username_s: string,\n    device_external_ip_s: string,\n    device_group_s: string,\n    process_cmdline_s: string,\n    process_path_s: string,\n    device_id_s: string,\n    device_os_s: string,\n    event_description_s: string,\n    action_s: string,\n    event_origin_s: string,\n    parent_path_s: string,\n    device_name_s: string\n)[];\n    let CarbonBlackNotificationsSchema = datatable (\n    type_s: string,\n    threatInfo_incidentId_g: string,\n    threatInfo_score_d: real,\n    threatInfo_summary_s: string,\n    threatInfo_time_d: real,\n    threatInfo_threatCause_threatCategory_s: string,\n    threatInfo_threatCause_causeEventId_g: string,\n    ruleName_s: string,\n    deviceInfo_deviceVersion_s: string,\n    threatInfo_threatCause_originSourceType_s: string,\n    threatInfo_threatCause_reputation_s: string,\n    threatInfo_threatCause_reason_s: string,\n    id_g: string,\n    primary_event_id_g: string,\n    threat_id_g: string\n)[];\n    let processdata = union (CarbonBlackEvents_CL), (CarbonBlackEventsSchema)\n        | where not(disabled)\n        | where eventType_s == \"endpoint.event.procstart\" and isnotempty(childproc_pid_d)\n        | parse process_hash_s with * '[\"' ActingProcessMD5: string '\",\"' ActingProcessSHA256: string '\"]'\n        | parse parent_hash_s with * '[\"' ParentProcessMD5: string  '\",\"' ParentProcessSHA256: string '\"]'\n        | parse childproc_hash_s with * '[\"' TargetProcessMD5: string '\",\"' TargetProcessSHA256: string '\"]'\n        | lookup EventFieldsLookup on sensor_action_s;\n    let processdatawiththreat = processdata\n        | where isnotempty(alert_id_g) and isnotempty(event_id_g)\n        | join kind=leftouter(union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)\n            | where type_s == \"THREAT\"\n            | project\n                threatInfo_incidentId_g,\n                threatInfo_score_d,\n                threatInfo_summary_s,\n                threatInfo_time_d,\n                threatInfo_threatCause_threatCategory_s,\n                threatInfo_threatCause_causeEventId_g,\n                ruleName_s,\n                deviceInfo_deviceVersion_s,\n                threatInfo_threatCause_originSourceType_s,\n                threatInfo_threatCause_reputation_s,\n                threatInfo_threatCause_reason_s)\n            on\n            $left.alert_id_g == $right.threatInfo_incidentId_g,\n            $left.event_id_g == $right.threatInfo_threatCause_causeEventId_g\n        | join kind=leftouter (union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)\n            | where type_s == \"CB_ANALYTICS\"\n            | project\n                id_g,\n                primary_event_id_g,\n                deviceInfo_deviceVersion_s,\n                threat_id_g,\n                threatInfo_score_d,\n                threatInfo_summary_s,\n                threatInfo_threatCause_reason_s)\n            on $left.alert_id_g == $right.id_g, $left.event_id_g == $right.primary_event_id_g\n        | extend \n            ThreatDescription = coalesce(threatInfo_summary_s, threatInfo_summary_s1),\n            ThreatCategory = threatInfo_threatCause_threatCategory_s,\n            ThreatFirstReportedTime = unixtime_milliseconds_todatetime(threatInfo_time_d),\n            RuleName = ruleName_s,\n            AdditionalFields_threat = bag_pack(\n                              \"threatInfo_threatCause_reason\",\n                              coalesce(threatInfo_threatCause_reason_s, threatInfo_threatCause_reason_s1),\n                              \"threatInfo_threatCause_reputation\",\n                              threatInfo_threatCause_reputation_s,\n                              \"threatInfo_threatCause_originSourceType\",\n                              threatInfo_threatCause_originSourceType_s\n                          ),\n            ThreatId = threat_id_g,\n            ThreatOriginalConfidence = tostring(toint(coalesce(threatInfo_score_d, threatInfo_score_d1))),\n            DvcOsVersion = coalesce(deviceInfo_deviceVersion_s, deviceInfo_deviceVersion_s1)\n        | lookup ThreatConfidenceLookup on ThreatOriginalConfidence\n        | extend Rule = RuleName;\n    let processdatawithoutthreat = processdata\n        | where isempty(alert_id_g) or isempty(event_id_g);\n    union processdatawithoutthreat, processdatawiththreat\n    | extend\n        EventStartTime = todatetime(split(createTime_s, '+')[0]),\n        TargetProcessId = tostring(toint(childproc_pid_d)),\n        ActingProcessId = tostring(toint(process_pid_d)),\n        ParentProcessId = tostring(toint(parent_pid_d)),\n        AdditionalFields_Common = bag_pack(\n                              \"org_key\",\n                              org_key_s,\n                              \"alert_id\",\n                              alert_id_g,\n                              \"parent_cmdline\",\n                              parent_cmdline_s,\n                              \"process_reputation\",\n                              process_reputation_s,\n                              \"childproc_reputation\",\n                              childproc_reputation_s,\n                              \"parent_reputation\",\n                              parent_reputation_s,\n                              \"process_guid\",\n                              process_guid_s,\n                              \"childproc_guid\",\n                              childproc_guid_s,\n                              \"parent_guid\",\n                              parent_guid_s\n                          )\n    | invoke _ASIM_ResolveDvcFQDN('device_name_s')\n    | project-rename \n        ActorUsername = process_username_s,\n        TargetProcessCommandLine = target_cmdline_s,\n        TargetProcessName = childproc_name_s,\n        TargetUsername = childproc_username_s,\n        DvcIpAddr = device_external_ip_s,\n        DvcScope = device_group_s,\n        ActingProcessCommandLine = process_cmdline_s,\n        ActingProcessName = process_path_s,\n        DvcId = device_id_s,\n        DvcOriginalAction = sensor_action_s,\n        DvcOs = device_os_s,\n        EventMessage = event_description_s,\n        EventOriginalType = action_s,\n        EventOriginalUid = event_id_g,\n        EventOwner = event_origin_s,\n        ParentProcessName = parent_path_s,\n        EventUid = _ItemId\n    | extend\n        EventCount = int(1),\n        EventProduct = \"Carbon Black Cloud\",\n        EventSchemaVersion = \"0.1.4\",\n        EventType = \"ProcessCreated\",\n        EventVendor = \"VMware\",\n        EventSchema = \"ProcessEvent\",\n        AdditionalFields = bag_merge(AdditionalFields_threat, AdditionalFields_Common)\n    | extend \n        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),\n        EventEndTime = EventStartTime,\n        Hash = coalesce(TargetProcessSHA256, TargetProcessMD5),\n        CommandLine = TargetProcessCommandLine,\n        Process = TargetProcessName,\n        User = TargetUsername,\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),\n        ActorUserType = _ASIM_GetUserType(ActorUsername, \"\"),\n        HashType = case(\n              isnotempty(TargetProcessSHA256),\n              \"TargetProcessSHA256\",\n              isnotempty(TargetProcessMD5),\n              \"TargetProcessMD5\",\n              \"\"\n          ),\n        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),\n        TargetUserType = _ASIM_GetUserType(TargetUsername, \"\")\n    | project-away\n        *_s,\n        *_d,\n        *_g,\n        *_b,\n        _ResourceId,\n        Computer,\n        MG,\n        ManagementGroupName,\n        RawData,\n        SourceSystem,\n        TenantId,\n        AdditionalFields_*\n};\nparser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
