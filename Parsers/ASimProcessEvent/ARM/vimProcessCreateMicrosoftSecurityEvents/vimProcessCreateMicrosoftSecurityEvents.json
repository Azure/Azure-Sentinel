{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimProcessCreateMicrosoftSecurityEvents')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Process Create Event ASIM parser for Windows Security Events",
        "category": "ASIM",
        "FunctionAlias": "vimProcessCreateMicrosoftSecurityEvents",
        "query": "let MandatoryLabelLookup = datatable (MandatoryLabel:string,MandatoryLabelRid:string, MandatoryLabelText:string, MandatoryLabelMeaning:string)\n   [\n     'S-1-16-0', '0x00000000', 'SECURITY_MANDATORY_UNTRUSTED_RID', 'Untrusted',\n     'S-1-16-4096', '0x00001000', 'SECURITY_MANDATORY_LOW_RID', 'Low integrity',\n     'S-1-16-8192', '0x00002000', 'SECURITY_MANDATORY_MEDIUM_RID', 'Medium integrity',\n     'S-1-16-8448', '0x00002100', 'SECURITY_MANDATORY_MEDIUM_PLUS_RID', 'Medium high integrity',\n     'S-1-16-12288', '0X00003000', 'SECURITY_MANDATORY_HIGH_RID', 'High integrity',\n     'S-1-16-16384', '0x00004000', 'SECURITY_MANDATORY_SYSTEM_RID', 'System integrity',\n     'S-1-16-20480', '0x00005000', 'SECURITY_MANDATORY_PROTECTED_PROCESS_RID', 'Protected process'\n   ];\n // Source: https://support.microsoft.com/topic/0fdcaf87-ee5e-8929-e54c-65e04235a634\n let KnownSIDs = datatable (sid:string, username:string, type:string)\n   [\n     'S-1-5-18', 'Local System', 'Simple',\n     'S-1-0-0', 'Nobody', 'Simple'\n   ];\n let UserTypeLookup = datatable (AccountType:string, ActorUserType:string)\n   [\n     'User', 'Regular',\n     'Machine', 'Machine'\n   ];\n let parser=(\n   starttime:datetime=datetime(null),\n   endtime:datetime=datetime(null),\n   commandline_has_any:dynamic=dynamic([]),\n   commandline_has_all:dynamic=dynamic([]),\n   commandline_has_any_ip_prefix:dynamic=dynamic([]),\n   actingprocess_has_any:dynamic=dynamic([]),\n   targetprocess_has_any:dynamic=dynamic([]),\n   parentprocess_has_any:dynamic=dynamic([]),\n   targetusername_has:string='*',\n   dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n   dvchostname_has_any:dynamic=dynamic([]),\n   eventtype:string='*',\n   disabled:bool=false\n )\n {    SecurityEvent\n   // --------------------------------------------------------------------------------------\n   | where\n     (isnull(starttime) or TimeGenerated >= starttime )\n     and (isnull(endtime) or TimeGenerated <= endtime )\n     and not(disabled)\n   | where EventID == 4688\n   | where\n     (eventtype=='*' or eventtype=='ProcessCreated')\n     and (array_length(commandline_has_all)==0 or CommandLine has_all (commandline_has_all))\n     and (array_length(commandline_has_any)==0 or CommandLine has_any (commandline_has_any))\n     and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(CommandLine, commandline_has_any_ip_prefix) )\n     and (array_length(actingprocess_has_any)==0 or ParentProcessName has_any (actingprocess_has_any))\n     and (array_length(targetprocess_has_any)==0 or NewProcessName has_any (targetprocess_has_any))\n     and (array_length(parentprocess_has_any)==0)\n     and (targetusername_has=='*' or TargetAccount has targetusername_has) // take into account mapping?\n     and (array_length(dvcipaddr_has_any_prefix)==0)\n     and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))\n   // --------------------------------------------------------------------------------------\n | extend\n   // Event\n     EventCount = int(1),\n     EventVendor = 'Microsoft',\n     EventProduct = 'Security Events',\n     EventSchemaVersion = '0.1.3',\n     EventSchema = 'ProcessEvent',\n     EventResult = 'Success',\n     EventStartTime = todatetime(TimeGenerated),\n     EventEndTime = todatetime(TimeGenerated),\n     EventType = 'ProcessCreated',\n     EventOriginalType = tostring(EventID),\n     DvcOs = 'Windows'\n | lookup KnownSIDs on $left.SubjectUserSid == $right.sid\n | extend\n     ActorUsername = iff (SubjectUserName == \"-\", username, SubjectAccount),\n     ActorUsernameType = iff(SubjectUserName == '-',type, 'Windows')\n | lookup KnownSIDs on $left.TargetUserSid == $right.sid\n | extend\n     TargetUsername = iff (TargetUserName == \"-\", username, TargetAccount),\n     TargetUsernameType = iff(TargetDomainName == '-',type, 'Windows')\n | lookup UserTypeLookup on AccountType\n | extend\n     ActorUserIdType = 'SID',\n     TargetUserIdType = 'SID',\n   // Processes\n     ActingProcessId = tostring(toint(ProcessId)),\n     TargetProcessId = tostring(toint(NewProcessId)),\n     TargetProcessCommandLine = CommandLine\n   | project-rename\n     DvcId = SourceComputerId,\n     DvcHostname = Computer,\n     ActingProcessName = ParentProcessName,\n     TargetProcessName = NewProcessName,\n     ActorDomainName = SubjectDomainName,\n     ActorUserId = SubjectUserSid,\n     ActorSessionId = SubjectLogonId,\n     TargetUserId =TargetUserSid,\n     TargetUserSessionId = TargetLogonId,\n     EventOriginalUid = EventOriginId,\n     TargetProcessTokenElevation = TokenElevationType\n  | lookup MandatoryLabelLookup on MandatoryLabel\n   // -- Aliases\n   | extend\n     User = TargetUsername,\n     Dvc = DvcHostname,\n     Process = TargetProcessName\n   // -- Remove potentially confusing\n   | project-keep Event*, Dvc*, Actor*, Target*, Acting*, User, Dvc, Process, CommandLine, TimeGenerated, Type, _ResourceId\n   | project-away\n       TargetDomainName,\n       TargetUserName,\n       TargetAccount,\n       EventID\n };\n  parser (\n   starttime=starttime,\n   endtime=endtime,\n   commandline_has_any=commandline_has_any,\n   commandline_has_all=commandline_has_all,\n   commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,\n   actingprocess_has_any=actingprocess_has_any,\n   targetprocess_has_any=targetprocess_has_any,\n   parentprocess_has_any=parentprocess_has_any,\n   targetusername_has=targetusername_has,\n   dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,\n   dvchostname_has_any=dvchostname_has_any,\n   eventtype=eventtype,\n   disabled=disabled\n )",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),commandline_has_any:dynamic=dynamic([]),commandline_has_all:dynamic=dynamic([]),commandline_has_any_ip_prefix:dynamic=dynamic([]),actingprocess_has_any:dynamic=dynamic([]),targetprocess_has_any:dynamic=dynamic([]),parentprocess_has_any:dynamic=dynamic([]),targetusername_has:string='*',dvcipaddr_has_any_prefix:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),eventtype:string='*',disabled:bool=False"
      }
    }
  ]
}
