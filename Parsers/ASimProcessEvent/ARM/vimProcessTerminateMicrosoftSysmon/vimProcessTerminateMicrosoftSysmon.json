{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimProcessEventTerminateMicrosoftSysmon')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Process Terminate Event ASIM parser for Microsoft Windows Security Events",
        "category": "ASIM",
        "FunctionAlias": "vimProcessEventTerminateMicrosoftSysmon",
        "query": "let parser = (\n    starttime:datetime=datetime(null),\n    endtime:datetime=datetime(null),\n    commandline_has_any:dynamic=dynamic([]),\n    commandline_has_all:dynamic=dynamic([]),\n    commandline_has_any_ip_prefix:dynamic=dynamic([]),\n    actingprocess_has_any:dynamic=dynamic([]),\n    targetprocess_has_any:dynamic=dynamic([]),\n    parentprocess_has_any:dynamic=dynamic([]),\n    actorusername_has:string='*',\n    dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n    dvchostname_has_any:dynamic=dynamic([]),\n    eventtype:string='*',\n    disabled:bool=false\n  ) {\n      // this is the parser for sysmon from Event table\n      let parser_Event =\n          Event\n          | where // pre-filtering\n              (isnull(starttime) or TimeGenerated >= starttime )\n              and (isnull(endtime) or TimeGenerated <= endtime )\n              and not(disabled)\n              and Source == \"Microsoft-Windows-Sysmon\" and EventID == 5\n              and (eventtype=='*' or eventtype=='ProcessTerminated')\n              and (array_length(commandline_has_all)==0) \n              and (array_length(commandline_has_any)==0) \n              and (array_length(commandline_has_any_ip_prefix)==0) \n              and (array_length(actingprocess_has_any)==0) \n              and (array_length(parentprocess_has_any)==0) \n              and (array_length(targetprocess_has_any)==0 or EventData has_any (targetprocess_has_any)) \n              and (actorusername_has=='*' or EventData has actorusername_has)  \n              and (array_length(dvcipaddr_has_any_prefix)==0)\n              and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))\n          | parse-kv EventData as (\n              ProcessId:string,\n              ProcessGuid:string,\n              Image:string,\n              User:string\n            ) \n            with (regex=@'<Data Name=\"(\\w+)\">{?([^<]*?)}?</Data>')\n          | project-rename\n              ActorUsername = User,\n              DvcHostname = Computer,\n              TargetProcessName = Image,\n              TargetProcessGuid = ProcessGuid,\n              TargetProcessId = ProcessId\n          | where // post-filtering\n              (actorusername_has=='*' or ActorUsername has actorusername_has) \n              and (array_length(targetprocess_has_any)==0  or TargetProcessName has_any (targetprocess_has_any)) \n          | extend \n              EventProduct = \"Sysmon\"\n          | project-away EventData, ParameterXml, RenderedDescription, MG, ManagementGroupName, Message, AzureDeploymentID, SourceSystem, EventCategory, EventLevelName, EventLevel, EventLog, Role, TenantId, UserName, Source\n      | extend  \n          EventType = \"ProcessTerminated\",\n          EventStartTime = todatetime(TimeGenerated),\n          EventEndTime = todatetime(TimeGenerated),\n          EventCount = int(1),\n          EventVendor = \"Microsoft\",\n          EventSchemaVersion = \"0.1.0\",\n          EventSchema = 'ProcessEvent',\n          EventOriginalType=tostring(EventID),\n          EventResult = 'Success',\n          DvcOs = \"Windows\",\n          ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),\n          // -- Aliases \n          User = ActorUsername,\n          Process = TargetProcessName,\n          Dvc = DvcHostname\n      | project-away EventID,_ResourceId\n  ;\n  parser_Event\n  };\nparser (\n    starttime=starttime, \n    endtime=endtime, \n    commandline_has_any=commandline_has_any,\n    commandline_has_all=commandline_has_all,\n    commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,\n    actingprocess_has_any=actingprocess_has_any,\n    targetprocess_has_any=targetprocess_has_any,\n    parentprocess_has_any=parentprocess_has_any,\n    actorusername_has=actorusername_has,\n    dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,\n    dvchostname_has_any=dvchostname_has_any,\n    eventtype=eventtype,\n    disabled=disabled\n) ",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),commandline_has_any:dynamic=dynamic([]),commandline_has_all:dynamic=dynamic([]),commandline_has_any_ip_prefix:dynamic=dynamic([]),actingprocess_has_any:dynamic=dynamic([]),targetprocess_has_any:dynamic=dynamic([]),parentprocess_has_any:dynamic=dynamic([]),actorusername_has:string='*',dvcipaddr_has_any_prefix:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),eventtype:string='*',disabled:bool=False"
      }
    }
  ]
}
