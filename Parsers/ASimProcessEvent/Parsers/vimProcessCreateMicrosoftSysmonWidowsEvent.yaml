Parser:
  Title: Process Create Event ASIM parser for Sysmon
  Version: '0.5.1'
  LastUpdated: June 3, 2024
Product:
  Name: Sysmon
Normalization:
  Schema: ProcessEvent
  Version: '0.1.0'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Sysmon process create events (event 1) collected using the Event or WEF (WindowsEvent table) connectors logs ingested in 'WindowsEvent' table to the ASIM Process Event normalized schema. 
ParserName: vimProcessEventCreateMicrosoftSysmonWindowsEvent
EquivalentBuiltInParser: _Im_ProcessEvent_CreateMicrosoftSysmonWindowsEvent
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false

ParserQuery: | 
  let parser = (
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    commandline_has_any: dynamic=dynamic([]),
    commandline_has_all: dynamic=dynamic([]),
    commandline_has_any_ip_prefix: dynamic=dynamic([]),
    actingprocess_has_any: dynamic=dynamic([]),
    targetprocess_has_any: dynamic=dynamic([]),
    parentprocess_has_any: dynamic=dynamic([]),
    targetusername_has: string='*',
    dvcipaddr_has_any_prefix: dynamic=dynamic([]),
    dvchostname_has_any: dynamic=dynamic([]),
    eventtype: string='*',
    disabled: bool=false
    ) {
      // this is the parser for sysmon from WindowsEvent table
      let parser_WindowsEvent=
        WindowsEvent
        | where
            // -- pre-filtering
            (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and not(disabled)
            and (eventtype == '*' or eventtype == 'ProcessCreated')
            and Provider == "Microsoft-Windows-Sysmon" and EventID == 1
            and (array_length(commandline_has_all) == 0 or EventData.CommandLine has_all (commandline_has_all)) 
            and (array_length(commandline_has_any) == 0 or EventData.CommandLine has_any (commandline_has_any)) 
            and (array_length(commandline_has_any_ip_prefix) == 0 or has_any_ipv4_prefix(EventData.CommandLine, commandline_has_any_ip_prefix)) 
            and (array_length(actingprocess_has_any) == 0 or EventData.ParentImage has_any (actingprocess_has_any)) 
            and (array_length(targetprocess_has_any) == 0 or EventData.Image has_any (targetprocess_has_any)) 
            and (array_length(parentprocess_has_any) == 0)
            and (targetusername_has == '*' or EventData.User has targetusername_has)  
            and (array_length(dvcipaddr_has_any_prefix) == 0)
            and (array_length(dvchostname_has_any) == 0 or Computer has_any (dvchostname_has_any))   
        // --
        | parse-kv tostring(EventData.Hashes) as (MD5: string, SHA1: string, SHA256: string, IMPHASH: string) with (quote='"')
        | extend
            Hash = coalesce (SHA256, SHA1, IMPHASH, MD5, "")
        | extend
            HashType = tostring(dynamic(["SHA256", "SHA1", "IMPHASH", "MD5"])[array_index_of(pack_array(SHA256, SHA1, IMPHASH, MD5), Hash)])
        | project-rename
            TargetProcessMD5 = MD5,
            TargetProcessSHA1 = SHA1,
            TargetProcessSHA256 = SHA256,
            TargetProcessIMPHASH = IMPHASH
        | extend 
            EventOriginalType = tostring(EventID),
            TargetUserSessionId = tostring(EventData.LogonId),           
            TargetUsername = tostring(EventData.User),
            TargetProcessCommandLine = tostring(EventData.CommandLine),
            TargetProcessCurrentDirectory = tostring(EventData.CurrentDirectory),
            TargetUserSessionGuid = tostring(EventData.LogonGuid), 
            TargetProcessId = tostring(EventData.ProcessId),
            TargetProcessGuid = tostring(EventData.ProcessGuid),
            TargetProcessName = tostring(EventData.Image),
            TargetProcessFilename = tostring(EventData.OriginalFileName),
            TargetProcessIntegrityLevel = tostring(EventData.IntegrityLevel),
            TargetProcessFileCompany = tostring(EventData.Company),
            TargetProcessFileDescription = tostring(EventData.Description),
            TargetProcessFileVersion = tostring(EventData.FileVersion),
            TargetProcessFileProduct = tostring(EventData.Product),
            ActingProcessId = tostring(EventData.ParentProcessId),
            ActingProcessGuid = tostring(EventData.ParentProcessGuid),                          
            ActingProcessCommandLine = tostring(EventData.ParentCommandLine),
            ActingProcessName = tostring(EventData.ParentImage),
            ActorUsername = tostring(EventData.ParentUser)
        // -- post-filtering
        | where (array_length(commandline_has_any) == 0 or TargetProcessCommandLine has_any (commandline_has_any)) 
            and (array_length(commandline_has_all) == 0 or TargetProcessCommandLine has_all (commandline_has_all)) 
            and (array_length(commandline_has_any_ip_prefix) == 0 or has_any_ipv4_prefix(TargetProcessCommandLine, commandline_has_any_ip_prefix)) 
            and (array_length(actingprocess_has_any) == 0 or ActingProcessName has_any (actingprocess_has_any)) 
            and (targetusername_has == '*' or TargetUsername has targetusername_has) 
            and (array_length(targetprocess_has_any) == 0 or TargetProcessName has_any (targetprocess_has_any)) 
        // --
        | extend 
            TargetUsernameType = iff(isnotempty(TargetUsername), 'Windows', ''),
            ActorUsernameType = iff(isnotempty(ActorUsername), 'Windows', ''),
            EventProduct = "Security Events"
        | project-rename
            DvcHostname = Computer,
            EventOriginalUid = EventOriginId
        | extend // aliases 
            Dvc = DvcHostname,
            User = TargetUsername,
            CommandLine = TargetProcessCommandLine,
            Process = TargetProcessName,
            EventUid = _ItemId
        | project-away
            EventData,
            Provider,
            ManagementGroupName,
            RawEventData,
            SourceSystem,
            Task,
            TenantId,
            EventID,
            Data,
            Channel,
            EventLevel,
            EventLevelName,
            Correlation,
            EventRecordId,
            Keywords,
            Opcode,
            SystemProcessId,
            SystemThreadId,
            SystemUserId,
            TimeCreated,
            Version,
            _ResourceId,
            _ItemId
        | extend 
            EventType = "ProcessCreated",
            EventOriginalType = "1",
            EventStartTime = todatetime(TimeGenerated),
            EventEndTime = todatetime(TimeGenerated),
            EventCount = int(1),
            EventVendor = "Microsoft",
            EventSchemaVersion = "0.1.0",
            EventSchema = 'ProcessEvent',
            EventResult = 'Success',
            DvcOs = "Windows",
            TargetUsernameType = "Windows",
            ActorUsernameType = "Windows";
      parser_WindowsEvent
  };
  parser (
      starttime=starttime,
      endtime=endtime,
      commandline_has_any=commandline_has_any,
      commandline_has_all=commandline_has_all,
      commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,
      actingprocess_has_any=actingprocess_has_any,
      targetprocess_has_any=targetprocess_has_any,
      parentprocess_has_any=parentprocess_has_any,
      targetusername_has=targetusername_has,
      dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,
      dvchostname_has_any=dvchostname_has_any,
      eventtype=eventtype,
      disabled=disabled
    ) 