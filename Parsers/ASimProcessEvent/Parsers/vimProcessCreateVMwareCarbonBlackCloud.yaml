Parser:
  Title: Process Create ASIM parser for VMware Carbon Black Cloud
  Version: '0.1.1'
  LastUpdated: Dec 11, 2023
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: ProcessEvent
  Version: '0.1.4'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation
  Link: 
    https://developer.carbonblack.com/reference/carbon-black-cloud/data-forwarder/schema/latest/endpoint.event-1.0.0/
    https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Process Create normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimProcessCreateVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_ProcessCreate_VMwareCarbonBlackCloud
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventFieldsLookup = datatable(
    sensor_action_s: string,
    DvcAction: string,
    EventResult: string
  )[
      "ACTION_ALLOW", "Allow", "Success",
      "ACTION_BLOCK", "Block", "Failure",
      "ACTION_TERMINATE", "Terminate", "Failure",
      "ACTION_BREAK", "Break", "Failure",
      "ACTION_SUSPEND", "Suspend", "Failure",
      "", "", "Success"
  ];
  let ThreatConfidenceLookup = datatable (ThreatOriginalConfidence: string, ThreatConfidence: int)
      [
      "1", 10,
      "2", 20,
      "3", 30,
      "4", 40,
      "5", 50,
      "6", 60,
      "7", 70,
      "8", 80,
      "9", 90,
      "10", 100
  ];
  let parser = (
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      commandline_has_any: dynamic=dynamic([]),
      commandline_has_all: dynamic=dynamic([]),
      commandline_has_any_ip_prefix: dynamic=dynamic([]),
      actingprocess_has_any: dynamic=dynamic([]),
      targetprocess_has_any: dynamic=dynamic([]),
      parentprocess_has_any: dynamic=dynamic([]),
      targetusername_has: string='*',
      dvcipaddr_has_any_prefix: dynamic=dynamic([]),
      dvchostname_has_any: dynamic=dynamic([]),
      eventtype: string='*',
      hashes_has_any: dynamic=dynamic([]),
      disabled: bool=false) {
      let CarbonBlackEventsSchema = datatable (
      eventType_s: string,
      childproc_pid_d: real,
      process_hash_s: string,
      parent_hash_s: string,
      childproc_hash_s: string,
      sensor_action_s: string,
      alert_id_g: string,
      event_id_g: string,
      createTime_s: string,
      process_pid_d: real,
      parent_pid_d: real,
      org_key_s: string,
      parent_cmdline_s: string,
      process_reputation_s: string,
      childproc_reputation_s: string,
      parent_reputation_s: string,
      process_guid_s: string,
      childproc_guid_s: string,
      parent_guid_s: string,
      process_username_s: string,
      target_cmdline_s: string,
      childproc_name_s: string,
      childproc_username_s: string,
      device_external_ip_s: string,
      device_group_s: string,
      process_cmdline_s: string,
      process_path_s: string,
      device_id_s: string,
      device_os_s: string,
      event_description_s: string,
      action_s: string,
      event_origin_s: string,
      parent_path_s: string,
      device_name_s: string
  )[];
      let CarbonBlackNotificationsSchema = datatable (
      type_s: string,
      threatInfo_incidentId_g: string,
      threatInfo_score_d: real,
      threatInfo_summary_s: string,
      threatInfo_time_d: real,
      threatInfo_threatCause_threatCategory_s: string,
      threatInfo_threatCause_causeEventId_g: string,
      ruleName_s: string,
      deviceInfo_deviceVersion_s: string,
      threatInfo_threatCause_originSourceType_s: string,
      threatInfo_threatCause_reputation_s: string,
      threatInfo_threatCause_reason_s: string,
      id_g: string,
      primary_event_id_g: string,
      threat_id_g: string
  )[];
      let processdata = union (CarbonBlackEvents_CL), (CarbonBlackEventsSchema)
          | where not(disabled)
          | where (isnull(starttime) or TimeGenerated >= starttime)
              and (isnull(endtime) or TimeGenerated <= endtime)
              and eventType_s == "endpoint.event.procstart" and isnotempty(childproc_pid_d)
              and (eventtype == '*' or eventtype == 'ProcessCreated')
              and (array_length(dvcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(device_external_ip_s, dvcipaddr_has_any_prefix))
              and (targetusername_has == '*' or childproc_username_s has targetusername_has)  
              and (array_length(commandline_has_all) == 0 or target_cmdline_s has_all (commandline_has_all)) 
              and (array_length(commandline_has_any) == 0 or target_cmdline_s has_any (commandline_has_any)) 
              and (array_length(commandline_has_any_ip_prefix) == 0 or has_any_ipv4_prefix(target_cmdline_s, commandline_has_any_ip_prefix)) 
              and (array_length(actingprocess_has_any) == 0 or process_path_s has_any (actingprocess_has_any)) 
              and (array_length(targetprocess_has_any) == 0 or childproc_name_s has_any (targetprocess_has_any)) 
              and (array_length(parentprocess_has_any) == 0 or parent_path_s has_any (parentprocess_has_any))
              and (array_length(dvchostname_has_any) == 0 or device_name_s has_any (dvchostname_has_any))
              and array_length(hashes_has_any) == 0 or childproc_hash_s has_any (hashes_has_any)
          | parse process_hash_s with * '["' ActingProcessMD5: string '","' ActingProcessSHA256: string '"]'
          | parse parent_hash_s with * '["' ParentProcessMD5: string  '","' ParentProcessSHA256: string '"]'
          | parse childproc_hash_s with * '["' TargetProcessMD5: string '","' TargetProcessSHA256: string '"]'
          | lookup EventFieldsLookup on sensor_action_s;  
      let processdatawiththreat = processdata
          | where isnotempty(alert_id_g) and isnotempty(event_id_g)
          | join kind=leftouter(union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)
              | where type_s == "THREAT"
              | project
                  threatInfo_incidentId_g,
                  threatInfo_score_d,
                  threatInfo_summary_s,
                  threatInfo_time_d,
                  threatInfo_threatCause_threatCategory_s,
                  threatInfo_threatCause_causeEventId_g,
                  ruleName_s,
                  deviceInfo_deviceVersion_s,
                  threatInfo_threatCause_originSourceType_s,
                  threatInfo_threatCause_reputation_s,
                  threatInfo_threatCause_reason_s)
              on
              $left.alert_id_g == $right.threatInfo_incidentId_g,
              $left.event_id_g == $right.threatInfo_threatCause_causeEventId_g
          | join kind=leftouter (union (CarbonBlackNotifications_CL), (CarbonBlackNotificationsSchema)
              | where type_s == "CB_ANALYTICS"
              | project
                  id_g,
                  primary_event_id_g,
                  deviceInfo_deviceVersion_s,
                  threat_id_g,
                  threatInfo_score_d,
                  threatInfo_summary_s,
                  threatInfo_threatCause_reason_s)
              on $left.alert_id_g == $right.id_g, $left.event_id_g == $right.primary_event_id_g
          | extend 
              ThreatDescription = coalesce(threatInfo_summary_s, threatInfo_summary_s1),
              ThreatCategory = threatInfo_threatCause_threatCategory_s,
              ThreatFirstReportedTime = unixtime_milliseconds_todatetime(threatInfo_time_d),
              RuleName = ruleName_s,
              AdditionalFields_threat = bag_pack(
                                "threatInfo_threatCause_reason",
                                coalesce(threatInfo_threatCause_reason_s, threatInfo_threatCause_reason_s1),
                                "threatInfo_threatCause_reputation",
                                threatInfo_threatCause_reputation_s,
                                "threatInfo_threatCause_originSourceType",
                                threatInfo_threatCause_originSourceType_s
                            ),
              ThreatId = threat_id_g,
              ThreatOriginalConfidence = tostring(toint(coalesce(threatInfo_score_d, threatInfo_score_d1))),
              DvcOsVersion = coalesce(deviceInfo_deviceVersion_s, deviceInfo_deviceVersion_s1)
          | lookup ThreatConfidenceLookup on ThreatOriginalConfidence
          | extend Rule = RuleName;
      let processdatawithoutthreat = processdata
          | where isempty(alert_id_g) or isempty(event_id_g);
      union processdatawithoutthreat, processdatawiththreat
      | extend
          EventStartTime = todatetime(split(createTime_s, '+')[0]),
          TargetProcessId = tostring(toint(childproc_pid_d)),
          ActingProcessId = tostring(toint(process_pid_d)),
          ParentProcessId = tostring(toint(parent_pid_d)),
          AdditionalFields_Common = bag_pack(
                                "org_key",
                                org_key_s,
                                "alert_id",
                                alert_id_g,
                                "parent_cmdline",
                                parent_cmdline_s,
                                "process_reputation",
                                process_reputation_s,
                                "childproc_reputation",
                                childproc_reputation_s,
                                "parent_reputation",
                                parent_reputation_s,
                                "process_guid",
                                process_guid_s,
                                "childproc_guid",
                                childproc_guid_s,
                                "parent_guid",
                                parent_guid_s
                            )
      | invoke _ASIM_ResolveDvcFQDN('device_name_s')
      | project-rename 
          ActorUsername = process_username_s,
          TargetProcessCommandLine = target_cmdline_s,
          TargetProcessName = childproc_name_s,
          TargetUsername = childproc_username_s,
          DvcIpAddr = device_external_ip_s,
          DvcScope = device_group_s,
          ActingProcessCommandLine = process_cmdline_s,
          ActingProcessName = process_path_s,
          DvcId = device_id_s,
          DvcOriginalAction = sensor_action_s,
          DvcOs = device_os_s,
          EventMessage = event_description_s,
          EventOriginalType = action_s,
          EventOriginalUid = event_id_g,
          EventOwner = event_origin_s,
          ParentProcessName = parent_path_s,
          EventUid = _ItemId
      | extend
          EventCount = int(1),
          EventProduct = "Carbon Black Cloud",
          EventSchemaVersion = "0.1.4",
          EventType = "ProcessCreated",
          EventVendor = "VMware",
          EventSchema = "ProcessEvent",
          AdditionalFields = bag_merge(AdditionalFields_threat, AdditionalFields_Common)
      | extend 
          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          Hash = coalesce(TargetProcessSHA256, TargetProcessMD5),
          CommandLine = TargetProcessCommandLine,
          Process = TargetProcessName,
          User = TargetUsername,
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
          HashType = case(
                isnotempty(TargetProcessSHA256),
                "TargetProcessSHA256",
                isnotempty(TargetProcessMD5),
                "TargetProcessMD5",
                ""
            ),
          TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
          TargetUserType = _ASIM_GetUserType(TargetUsername, "")
      | project-away
          *_s,
          *_d,
          *_g,
          *_b,
          _ResourceId,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          AdditionalFields_*
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      commandline_has_any=commandline_has_any,
      commandline_has_all=commandline_has_all,
      commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,
      actingprocess_has_any=actingprocess_has_any,
      targetprocess_has_any=targetprocess_has_any,
      parentprocess_has_any=parentprocess_has_any,
      targetusername_has=targetusername_has,
      dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,
      dvchostname_has_any=dvchostname_has_any,
      eventtype=eventtype,
      hashes_has_any=hashes_has_any,
      disabled=disabled
  )