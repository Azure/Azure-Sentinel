Parser:
  Title: Process Terminate ASIM parser for VMware Carbon Black Cloud
  Version: '0.1.0'
  LastUpdated: Oct 03, 2023
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: ProcessEvent
  Version: '0.1.4'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation
  Link: 
    https://developer.carbonblack.com/reference/carbon-black-cloud/data-forwarder/schema/latest/endpoint.event-1.0.0/
    https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Process Terminate normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimProcessTerminateVMwareCarbonBlackCloud
EquivalentBuiltInParser: Im_ProcessTerminate_VMwareCarbonBlackCloud
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventFieldsLookup = datatable(
    sensor_action_s: string,
    DvcAction: string,
    EventResult: string
  )[
      "ACTION_ALLOW", "Allow", "Success",
      "ACTION_BLOCK", "Block", "Failure",
      "ACTION_TERMINATE", "Terminate", "Failure",
      "ACTION_BREAK", "Break", "Failure",
      "ACTION_SUSPEND", "Suspend", "Failure",
      "", "", "Success"
  ];
  let parser = (
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      commandline_has_any: dynamic=dynamic([]),
      commandline_has_all: dynamic=dynamic([]),
      commandline_has_any_ip_prefix: dynamic=dynamic([]),
      actingprocess_has_any: dynamic=dynamic([]),
      targetprocess_has_any: dynamic=dynamic([]),
      parentprocess_has_any: dynamic=dynamic([]),
      actorusername_has: string='*',
      dvcipaddr_has_any_prefix: dynamic=dynamic([]),
      dvchostname_has_any: dynamic=dynamic([]),
      eventtype: string='*',
      disabled: bool=false) {
      CarbonBlackEvents_CL
      | where not(disabled)
      | where (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and (eventType_s == "endpoint.event.procend" and isnotempty(process_pid_d))
          and (eventtype == '*' or eventtype == 'ProcessTerminated')
          and array_length(parentprocess_has_any) == 0
          and (array_length(dvcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(device_external_ip_s, dvcipaddr_has_any_prefix)) 
          and (actorusername_has == '*' or process_username_s has actorusername_has)  
          and (array_length(commandline_has_all) == 0 or target_cmdline_s has_all (commandline_has_all) or process_cmdline_s has_all (commandline_has_all))
          and (array_length(commandline_has_any) == 0 or target_cmdline_s has_any (commandline_has_any) or process_cmdline_s has_any (commandline_has_any)) 
          and (array_length(commandline_has_any_ip_prefix) == 0 or has_any_ipv4_prefix(target_cmdline_s, commandline_has_any_ip_prefix) or has_any_ipv4_prefix(process_cmdline_s, commandline_has_any_ip_prefix)) 
          and (array_length(actingprocess_has_any) == 0 or parent_path_s has_any (actingprocess_has_any)) 
          and (array_length(targetprocess_has_any) == 0 or process_path_s has_any (targetprocess_has_any)) 
          and (array_length(dvchostname_has_any) == 0 or device_name_s has_any (dvchostname_has_any))
      | parse process_hash_s with * '["' TargetProcessMD5: string '","' TargetProcessSHA256: string '"]'
      | parse parent_hash_s with * '["' ActingProcessMD5: string  '","' ActingProcessSHA256: string '"]'
      | lookup EventFieldsLookup on sensor_action_s
      | extend
          EventStartTime = todatetime(split(createTime_s, '+')[0]),
          TargetProcessId = tostring(toint(process_pid_d)),
          ActingProcessId = tostring(toint(parent_pid_d)),
          ActorUsername = process_username_s,
          TargetProcessCommandLine = coalesce(target_cmdline_s, process_cmdline_s),
          AdditionalFields = bag_pack(
                      "org_key", org_key_s,
                      "alert_id", alert_id_g,
                      "process_reputation", process_reputation_s,
                      "parent_reputation", parent_reputation_s,
                      "parent_guid", parent_guid_s,
                      "process_guid", process_guid_s
                  )
      | invoke _ASIM_ResolveDvcFQDN('device_name_s')
      | project-rename 
          TargetProcessName = process_path_s,
          DvcIpAddr = device_external_ip_s,
          DvcScope = device_group_s,
          ActingProcessCommandLine = parent_cmdline_s,
          DvcId = device_id_s,
          DvcOriginalAction = sensor_action_s,
          DvcOs = device_os_s,
          EventOriginalType = action_s,
          EventOriginalUid = event_id_g,
          EventOwner = event_origin_s,
          ActingProcessName = parent_path_s,
          EventUid = _ItemId
      | extend
          EventCount = int(1),
          EventProduct = "Carbon Black Cloud",
          EventSchemaVersion = "0.1.4",
          EventType = "ProcessTerminated",
          EventVendor = "VMware",
          EventSchema = "ProcessEvent"
      | extend 
          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          Hash = coalesce(TargetProcessSHA256, TargetProcessMD5),
          CommandLine = TargetProcessCommandLine,
          Process = TargetProcessName,
          User = ActorUsername,
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
          HashType = case(
                isnotempty(TargetProcessSHA256),
                "TargetProcessSHA256",
                isnotempty(TargetProcessMD5),
                "TargetProcessMD5",
                ""
            )
      | project-away
          *_s,
          *_d,
          *_g,
          *_b,
          _ResourceId,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      commandline_has_any=commandline_has_any,
      commandline_has_all=commandline_has_all,
      commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,
      actingprocess_has_any=actingprocess_has_any,
      targetprocess_has_any=targetprocess_has_any,
      parentprocess_has_any=parentprocess_has_any,
      actorusername_has=actorusername_has,
      dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,
      dvchostname_has_any=dvchostname_has_any,
      eventtype=eventtype,
      disabled=disabled
  )