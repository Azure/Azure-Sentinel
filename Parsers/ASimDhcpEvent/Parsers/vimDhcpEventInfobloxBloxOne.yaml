Parser:
  Title: DhcpEvent ASIM parser for Infoblox BloxOne
  Version: '0.1.0'
  LastUpdated: Sep 11, 2024
Product:
  Name: Infoblox BloxOne
Normalization:
  Schema: DhcpEvent
  Version: '0.1'
References:
- Title: ASIM DhcpEvent Schema
  Link: https://aka.ms/ASimDhcpEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Infoblox BloxOne Documentation
  Link: https://docs.infoblox.com/space/BloxOneThreatDefense
Description: |
  This ASIM parser supports normalizing DhcpEvent logs from Infoblox BloxOne to the ASIM DhcpEvent normalized schema. These events are captured through the Azure Monitor Agent (AMA) which are sent by the Data Connector Service of Infoblox BloxOne.
ParserName: vimDhcpEventInfobloxBloxOne
EquivalentBuiltInParser: _Im_DhcpEvent_InfobloxBloxOne
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: srcusername_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventSeverityLookup = datatable(LogSeverity:string, EventSeverity:string)
      [
      "0", "Low",
      "1", "Low",
      "2", "Low",
      "3", "Low",
      "4", "Medium",
      "5", "Medium",
      "6", "Medium",
      "7", "High",
      "8", "High",
      "9", "High",
      "10", "High"
  ];
  let parser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null),
        srcipaddr_has_any_prefix:dynamic=dynamic([]),
        srchostname_has_any:dynamic=dynamic([]),
        srcusername_has_any:dynamic=dynamic([]),
        eventresult:string='*',
        disabled:bool=false
    ) {
      CommonSecurityLog
      | where not(disabled)
          and (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
          and DeviceVendor == "Infoblox"
          and DeviceEventClassID has "DHCP"
          and ApplicationProtocol == "DHCP"
          and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
          and (array_length(srchostname_has_any) == 0 or (SourceHostName  has_any (srchostname_has_any)))
          and array_length(srcusername_has_any) == 0
          and ((eventresult == "*") or (eventresult == "Success"))
      | parse-kv AdditionalExtensions as (InfoBloxLifeTime:int, InfoBloxClientId:string, InfobloxHost:string, InfobloxIPSpace:string, InfobloxSubnet:string, InfobloxRangeStart:string, InfobloxRangeEnd:string, InfobloxLeaseOp:string, InfobloxClientID:string, InfobloxDUID:string, InfobloxLeaseUUID:string, InfobloxFingerprintPr:string, InfobloxFingerprint:string, InfobloxDHCPOptions:string) with (pair_delimiter=";", kv_delimiter="=")
      | lookup EventSeverityLookup on LogSeverity
      | invoke _ASIM_ResolveSrcFQDN('SourceHostName')
      | invoke _ASIM_ResolveDvcFQDN('InfobloxHost')
      | project-rename
          SrcIpAddr = SourceIP,
          SrcMacAddr = SourceMACAddress,
          DhcpLeaseDuration = InfoBloxLifeTime,
          DhcpSrcDHCId = InfoBloxClientId,
          EventOriginalSeverity = LogSeverity,
          EventOriginalType = DeviceEventClassID,
          EventUid = _ItemId
      | extend
          EventEndTime = TimeGenerated,
          EventStartTime = TimeGenerated,
          EventType = iff(Activity has_any ("Abandon", "Delete"), "Release", "Assign"),
          AdditionalFields = bag_pack(
                        "InfobloxIPSpace",
                        InfobloxIPSpace,
                        "InfobloxSubnet",
                        InfobloxSubnet,
                        "InfobloxRangeStart",
                        InfobloxRangeStart,
                        "InfobloxRangeEnd",
                        InfobloxRangeEnd,
                        "InfobloxLeaseOp",
                        InfobloxLeaseOp,
                        "InfobloxClientID",
                        InfobloxClientID,
                        "InfobloxDUID",
                        InfobloxDUID,
                        "InfobloxLeaseUUID",
                        InfobloxLeaseUUID,
                        "InfobloxFingerprintPr",
                        InfobloxFingerprintPr,
                        "InfobloxFingerprint",
                        InfobloxFingerprint,
                        "InfobloxDHCPOptions",
                        InfobloxDHCPOptions
                    ),
          Duration = DhcpLeaseDuration,
          IpAddr = SrcIpAddr
      | extend
          EventCount = toint(1),
          EventProduct = "BloxOne",
          EventVendor = "Infoblox",
          EventResult = "Success",
          EventSchema = "DhcpEvent",
          EventSchemaVersion = "0.1"
      | project-away
          Source*,
          Destination*,
          Device*,
          AdditionalExtensions,
          CommunicationDirection,
          EventOutcome,
          Protocol,
          SimplifiedDeviceAction,
          ExternalID,
          EndTime,
          FieldDevice*,
          Flex*,
          File*,
          Old*,
          MaliciousIP*,
          OriginalLogSeverity,
          Process*,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          StartTime,
          TenantId,
          ReportReferenceLink,
          ReceiptTime,
          Indicator*,
          _ResourceId,
          ThreatConfidence,
          ThreatDescription,
          ThreatSeverity,
          Computer,
          ApplicationProtocol,
          CollectorHostName,
          ExtID,
          Reason,
          Message,
          Activity,
          Infoblox*
  };
  parser (
    starttime                = starttime,
    endtime                  = endtime,
    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
    srchostname_has_any      = srchostname_has_any,
    srcusername_has_any      = srcusername_has_any,
    eventresult              = eventresult,
    disabled                 = disabled
  )