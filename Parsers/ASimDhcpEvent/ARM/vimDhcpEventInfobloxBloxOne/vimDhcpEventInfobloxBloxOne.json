{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDhcpEventInfobloxBloxOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DhcpEvent ASIM parser for Infoblox BloxOne",
        "category": "ASIM",
        "FunctionAlias": "vimDhcpEventInfobloxBloxOne",
        "query": "let EventSeverityLookup = datatable(LogSeverity:string, EventSeverity:string)\n    [\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Medium\",\n    \"5\", \"Medium\",\n    \"6\", \"Medium\",\n    \"7\", \"High\",\n    \"8\", \"High\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet parser = (\n      starttime:datetime=datetime(null), \n      endtime:datetime=datetime(null),\n      srcipaddr_has_any_prefix:dynamic=dynamic([]),\n      srchostname_has_any:dynamic=dynamic([]),\n      srcusername_has_any:dynamic=dynamic([]),\n      eventresult:string='*',\n      disabled:bool=false\n  ) {\n    CommonSecurityLog\n    | where not(disabled)\n        and (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and DeviceVendor == \"Infoblox\"\n        and DeviceEventClassID has \"DHCP\"\n        and ApplicationProtocol == \"DHCP\"\n        and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))\n        and (array_length(srchostname_has_any) == 0 or (SourceHostName  has_any (srchostname_has_any)))\n        and array_length(srcusername_has_any) == 0\n        and ((eventresult == \"*\") or (eventresult == \"Success\"))\n    | parse-kv AdditionalExtensions as (InfoBloxLifeTime:int, InfoBloxClientId:string, InfobloxHost:string, InfobloxIPSpace:string, InfobloxSubnet:string, InfobloxRangeStart:string, InfobloxRangeEnd:string, InfobloxLeaseOp:string, InfobloxClientID:string, InfobloxDUID:string, InfobloxLeaseUUID:string, InfobloxFingerprintPr:string, InfobloxFingerprint:string, InfobloxDHCPOptions:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n    | lookup EventSeverityLookup on LogSeverity\n    | invoke _ASIM_ResolveSrcFQDN('SourceHostName')\n    | invoke _ASIM_ResolveDvcFQDN('InfobloxHost')\n    | project-rename\n        SrcIpAddr = SourceIP,\n        SrcMacAddr = SourceMACAddress,\n        DhcpLeaseDuration = InfoBloxLifeTime,\n        DhcpSrcDHCId = InfoBloxClientId,\n        EventOriginalSeverity = LogSeverity,\n        EventOriginalType = DeviceEventClassID,\n        EventUid = _ItemId\n    | extend\n        EventEndTime = TimeGenerated,\n        EventStartTime = TimeGenerated,\n        EventType = iff(Activity has_any (\"Abandon\", \"Delete\"), \"Release\", \"Assign\"),\n        AdditionalFields = bag_pack(\n                      \"InfobloxIPSpace\",\n                      InfobloxIPSpace,\n                      \"InfobloxSubnet\",\n                      InfobloxSubnet,\n                      \"InfobloxRangeStart\",\n                      InfobloxRangeStart,\n                      \"InfobloxRangeEnd\",\n                      InfobloxRangeEnd,\n                      \"InfobloxLeaseOp\",\n                      InfobloxLeaseOp,\n                      \"InfobloxClientID\",\n                      InfobloxClientID,\n                      \"InfobloxDUID\",\n                      InfobloxDUID,\n                      \"InfobloxLeaseUUID\",\n                      InfobloxLeaseUUID,\n                      \"InfobloxFingerprintPr\",\n                      InfobloxFingerprintPr,\n                      \"InfobloxFingerprint\",\n                      InfobloxFingerprint,\n                      \"InfobloxDHCPOptions\",\n                      InfobloxDHCPOptions\n                  ),\n        Duration = DhcpLeaseDuration,\n        IpAddr = SrcIpAddr\n    | extend\n        EventCount = toint(1),\n        EventProduct = \"BloxOne\",\n        EventVendor = \"Infoblox\",\n        EventResult = \"Success\",\n        EventSchema = \"DhcpEvent\",\n        EventSchemaVersion = \"0.1\"\n    | project-away\n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        EventOutcome,\n        Protocol,\n        SimplifiedDeviceAction,\n        ExternalID,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        StartTime,\n        TenantId,\n        ReportReferenceLink,\n        ReceiptTime,\n        Indicator*,\n        _ResourceId,\n        ThreatConfidence,\n        ThreatDescription,\n        ThreatSeverity,\n        Computer,\n        ApplicationProtocol,\n        CollectorHostName,\n        ExtID,\n        Reason,\n        Message,\n        Activity,\n        Infoblox*\n};\nparser (\n  starttime                = starttime,\n  endtime                  = endtime,\n  srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,\n  srchostname_has_any      = srchostname_has_any,\n  srcusername_has_any      = srcusername_has_any,\n  eventresult              = eventresult,\n  disabled                 = disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),srcusername_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}