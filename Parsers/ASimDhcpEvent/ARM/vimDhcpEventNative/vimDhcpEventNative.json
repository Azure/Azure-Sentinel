{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDhcpEventNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Dhcp Event ASIM filtering parser for Microsoft Sentinel native Dhcp Event table",
        "category": "ASIM",
        "FunctionAlias": "vimDhcpEventNative",
        "query": "let parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\n  srchostname_has_any:dynamic=dynamic([]),\n  srcusername_has_any:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n)\n{\n  ASimDhcpEventLogs\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated >= starttime) \n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n      and (array_length(srchostname_has_any) == 0 or (SrcHostname has_any (srchostname_has_any)))\n      and (array_length(srcusername_has_any) == 0 or (SrcUsername has_any (srcusername_has_any)))\n      and ((eventresult == \"*\") or (EventResult == eventresult))\n  | project-rename\n      EventUid = _ItemId\n  | extend          \n      EventSchema = \"DhcpEvent\",\n      DvcScopeId = iff(isempty(DvcScopeId), _SubscriptionId, DvcScopeId)\n  //  -- Aliases\n  | extend\n      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),\n      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),\n      Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId),\n      Rule = coalesce(RuleName, tostring(RuleNumber)),\n      SessionId = DhcpSessionId,\n      Duration = DhcpSessionDuration,\n      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),\n      User = SrcUsername,\n      IpAddr = SrcIpAddr,\n      Hostname = SrcHostname\n};\nparser (\n    starttime                = starttime,\n    endtime                  = endtime,\n    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,\n    srchostname_has_any      = srchostname_has_any,\n    srcusername_has_any      = srcusername_has_any,\n    eventresult              = eventresult,\n    disabled                 = disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),srcusername_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
