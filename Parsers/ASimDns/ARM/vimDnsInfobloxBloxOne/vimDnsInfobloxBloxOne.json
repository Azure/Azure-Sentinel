{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsInfobloxBloxOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Dns ASIM parser for Infoblox BloxOne",
        "category": "ASIM",
        "FunctionAlias": "vimDnsInfobloxBloxOne",
        "query": "let EventSeverityLookup = datatable(LogSeverity:string, EventSeverity:string)\n  [\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Medium\",\n    \"5\", \"Medium\",\n    \"6\", \"Medium\",\n    \"7\", \"High\",\n    \"8\", \"High\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet DnsQueryTypeLookup = datatable(DnsQueryTypeName:string, DnsQueryType:int)\n    [\n    \"A\", 1,\n    \"NS\", 2,\n    \"MD\", 3,\n    \"MF\", 4,\n    \"CNAME\", 5,\n    \"SOA\", 6,\n    \"MB\", 7,\n    \"MG\", 8,\n    \"MR\", 9,\n    \"NULL\", 10,\n    \"WKS\", 11,\n    \"PTR\", 12,\n    \"HINFO\", 13,\n    \"MINFO\", 14,\n    \"MX\", 15,\n    \"TXT\", 16,\n    \"RP\", 17,\n    \"AFSDB\", 18,\n    \"X25\", 19,\n    \"ISDN\", 20,          \n    \"RT\", 21, \n    \"NSAP\", 22,          \n    \"NSAPPTR\", 23,       \n    \"SIG\", 24,           \n    \"KEY\", 25,          \n    \"PX\", 26,            \n    \"GPOS\", 27,          \n    \"AAAA\", 28,          \n    \"LOC\", 29,           \n    \"NXT\", 30,           \n    \"EID\", 31,           \n    \"NIMLOC\", 32,        \n    \"SRV\", 33,           \n    \"ATMA\", 34,          \n    \"NAPTR\", 35,         \n    \"KX\", 36,            \n    \"CERT\", 37,          \n    \"A6\", 38,            \n    \"DNAME\", 39,         \n    \"SINK\", 40,          \n    \"OPT\", 41,           \n    \"APL\", 42,           \n    \"DS\", 43,            \n    \"SSHFP\", 44,         \n    \"IPSECKEY\", 45,      \n    \"RRSIG\", 46,         \n    \"NSEC\", 47,          \n    \"DNSKEY\", 48,        \n    \"DHCID\", 49,         \n    \"NSEC3\", 50,         \n    \"NSEC3PARAM\", 51,    \n    \"TLSA\", 52,          \n    \"SMIMEA\", 53,        \n    \"HIP\", 55,           \n    \"NINFO\", 56,         \n    \"RKEY\", 57,          \n    \"TALINK\", 58,        \n    \"CDS\", 59,           \n    \"CDNSKEY\", 60,       \n    \"OPENPGPKEY\", 61,    \n    \"CSYNC\", 62,         \n    \"ZONEMD\", 63,        \n    \"SVCB\", 64,          \n    \"HTTPS\", 65,         \n    \"SPF\", 99,           \n    \"UINFO\", 100,        \n    \"UID\", 101,          \n    \"GID\", 102,          \n    \"UNSPEC\", 103,       \n    \"TKEY\", 249,         \n    \"TSIG\", 250,         \n    \"IXFR\", 251,        \n    \"MAILB\", 253,        \n    \"MAILA\", 254,        \n    \"ANY\", 255,            \n    \"URI\", 256,          \n    \"CAA\", 257,          \n    \"TA\", 32768,         \n    \"DLV\", 32769         \n];\nlet DnsResponseCodeLookup = datatable(EventResultDetails:string, DnsResponseCode:int)\n    [\n    \"NOERROR\", 0,        \n    \"FORMERR\", 1,        \n    \"SERVFAIL\", 2,       \n    \"NXDOMAIN\", 3,       \n    \"NOTIMPL\", 4,        \n    \"REFUSED\", 5,        \n    \"YXDOMAIN\", 6,       \n    \"YXRRSET\", 7,        \n    \"NXRRSET\", 8,        \n    \"NOTAUTH\", 9,        \n    \"NOTZONE\", 10,       \n    \"DSOTYPENI\", 11,     \n    \"RESERVED12\", 12,\n    \"RESERVED13\", 13,\n    \"RESERVED14\", 14,\n    \"RESERVED15\", 15,\n    \"BADVERS\", 16,       \n    \"BADKEY\", 17,        \n    \"BADTIME\", 18,       \n    \"BADMODE\", 19,       \n    \"BADNAME\", 20,       \n    \"BADALG\", 21,        \n    \"BADTRUNC\", 22,      \n    \"BADCOOKIE\", 23,     \n    ];\nlet parser = (\n    starttime: datetime=datetime(null),\n    endtime: datetime=datetime(null),\n    srcipaddr: string='*', \n    domain_has_any: dynamic=dynamic([]),\n    responsecodename: string='*',\n    response_has_ipv4: string='*',\n    response_has_any_prefix: dynamic=dynamic([]),\n    eventtype: string='Query',\n    disabled: bool=false\n    ) {\n    CommonSecurityLog\n    | where not(disabled)\n          and (eventtype == '*' or eventtype == \"Query\")\n          and (isnull(starttime) or TimeGenerated >= starttime)\n          and (isnull(endtime) or TimeGenerated <= endtime)\n          and DeviceVendor == \"Infoblox\" \n          and DeviceEventClassID has \"DNS\"\n          and (srcipaddr==\"*\" or has_ipv4(SourceIP, srcipaddr))\n          and response_has_ipv4 == '*'\n          and array_length(response_has_any_prefix) == 0\n    | project-rename \n      DnsQuery = DestinationDnsDomain\n    | extend\n      DnsQuery = iff(substring(DnsQuery, strlen(DnsQuery) - 1, 1) == \".\", substring(DnsQuery, 0, strlen(DnsQuery) - 1), DnsQuery)\n    | where array_length(domain_has_any) == 0 or DnsQuery has_any (domain_has_any)\n    | parse-kv AdditionalExtensions as (InfobloxDNSRCode:string, InfobloxDNSQType:string, InfobloxDNSQFlags:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n    | where responsecodename == '*' or (InfobloxDNSRCode =~ responsecodename)\n    | project-rename \n        EventResultDetails = InfobloxDNSRCode,\n        DnsQueryTypeName = InfobloxDNSQType,\n        DnsFlags = InfobloxDNSQFlags\n    | extend DnsQueryTypeName = tostring(split(DnsQueryTypeName, ' ')[0])\n    | lookup EventSeverityLookup on LogSeverity\n    | lookup DnsQueryTypeLookup on DnsQueryTypeName\n    | lookup DnsResponseCodeLookup on EventResultDetails\n    | invoke _ASIM_ResolveDvcFQDN('DeviceName')\n    | project-rename \n        DvcIpAddr = DeviceAddress,\n        SrcIpAddr = SourceIP,\n        EventMessage = Message,\n        EventOriginalSeverity = LogSeverity,\n        EventOriginalType = DeviceEventClassID,\n        SrcUsername = SourceUserName,\n        SrcPortNumber = SourcePort,\n        EventUid = _ItemId\n    | extend\n        Dvc = coalesce(DvcHostname, DvcIpAddr),\n        EventEndTime = TimeGenerated,\n        EventResult = iff(EventResultDetails == \"NOERROR\", \"Success\", \"Failure\"),\n        EventStartTime = TimeGenerated,\n        Src = SrcIpAddr,\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        DnsResponseCodeName = EventResultDetails,\n        IpAddr = SrcIpAddr,\n        User = SrcUsername\n    | extend Domain = DnsQuery\n    | extend\n        EventCount = toint(1),\n        EventSchema = \"Dns\",\n        EventSchemaVersion = \"0.1.7\",\n        EventProduct = \"BloxOne\",\n        EventVendor = \"Infoblox\",\n        EventType = \"Query\",\n        DnsQueryClass = toint(1),\n        DnsQueryClassName = \"IN\"\n    | project-away\n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        EventOutcome,\n        Protocol,\n        SimplifiedDeviceAction,\n        ExternalID,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        StartTime,\n        TenantId,\n        ReportReferenceLink,\n        ReceiptTime,\n        Indicator*,\n        _ResourceId,\n        ThreatConfidence,\n        ThreatDescription,\n        ThreatSeverity,\n        Computer,\n        ApplicationProtocol,\n        ExtID,\n        Reason\n};\nparser(\n    starttime=starttime,\n    endtime=endtime,\n    srcipaddr=srcipaddr,\n    domain_has_any=domain_has_any,\n    responsecodename=responsecodename, \n    response_has_ipv4=response_has_ipv4, \n    response_has_any_prefix=response_has_any_prefix, \n    eventtype=eventtype, \n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}