{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsCiscoUmbrella')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Cisco Umbrella",
        "category": "ASIM",
        "FunctionAlias": "vimDnsCiscoUmbrella",
        "query": "let DNSQuery_CiscoUmbrella=(\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n  , srcipaddr:string='*'\n  , domain_has_any:dynamic=dynamic([]) \n  , responsecodename:string='*'\n  , response_has_ipv4:string='*' , response_has_any_prefix:dynamic=dynamic([])\n  , eventtype:string='Query'\n  , disabled:bool=false\n  ){\n    Cisco_Umbrella_dns_CL | where not(disabled)\n    // ******************************************************************\n    //  Pre-parsing filterring:\n      | where\n      // Return empty list if response IPs are passed\n        (eventtype in~ ('lookup','Query'))\n        and (response_has_ipv4=='*')\n        and (array_length(response_has_any_prefix) ==0) \n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime) \n        and (srcipaddr=='*' or InternalIp_s==srcipaddr)\n        and (array_length(domain_has_any) ==0 or Domain_s has_any (domain_has_any))\n        and (responsecodename=='*' or ResponseCode_s=~responsecodename)\n    // *****************************************************************\n    | parse QueryType_s with DnsQueryType:int \" (\"DnsQueryTypeName:string \")\"\n    //\n    | project \n    //\n    // ******************* Mandatory\n      EventCount=int(1),\n      EventStartTime=todatetime(column_ifexists('Timestamp_t',column_ifexists('Timestamp_s',''))),\n      EventProduct=\"Umbrella\",\n      EventVendor=\"Cisco\",\n      EventSchema=\"Dns\",\n      EventSchemaVersion=\"0.1.3\",\n      Dvc=\"CiscoUmbrella\" ,\n      EventType=\"Query\",\n      EventResult=iff(ResponseCode_s=~'NOERROR','Success','Failure'),\n      EventResultDetails=ResponseCode_s,  // => ResponseCodeNames\n      //\n      TimeGenerated, // not handled by schema, but we need to preserve it\n      SrcIpAddr=column_ifexists('InternalIp_s', ''),\n      EventSubType='response',\n  // ********** Renamed columns\n      UrlCategory=column_ifexists('Categories_s', ''),\n      DnsQuery=trim_end(@'\\.',column_ifexists('Domain_s', '')) , \n      ThreatCategory=column_ifexists('Blocked_Categories_s', ''),\n      SrcNatIpAddr=column_ifexists('ExternalIp_s', ''),\n      DvcAction=column_ifexists('Action_s', ''),\n      EventEndTime=todatetime(column_ifexists('Timestamp_t',  column_ifexists('Timestamp_s',\"\")  )),\n  //\n  // *************** keep Parsed data\n      DnsQueryType, DnsQueryTypeName\n  // **************Aliases\n  | extend \n      DnsResponseCodeName=EventResultDetails, \n      DomainCategory=UrlCategory,\n      Domain=DnsQuery,\n      IpAddr=SrcIpAddr,\n      Src=SrcIpAddr\n  };\nDNSQuery_CiscoUmbrella( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
