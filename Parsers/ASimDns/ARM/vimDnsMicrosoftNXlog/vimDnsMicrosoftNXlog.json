{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsMicrosoftNXlog')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Microsoft DNS logs collected using NXlog",
        "category": "ASIM",
        "FunctionAlias": "vimDnsMicrosoftNXlog",
        "query": "let ASimDnsMicrosoftNXLog = (\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n  , srcipaddr:string='*'\n  , domain_has_any:dynamic=dynamic([]) \n  , responsecodename:string='*', response_has_ipv4:string='*'\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\n  , disabled:bool=false\n  ){\nlet EventTypeTable=datatable(EventOriginalType:real,EventType:string)[\n    256, 'Query'\n  , 257, 'Query'\n  , 258, 'Query'\n  , 259, 'Query'\n  , 260, 'Query'\n  , 261, 'Query'\n  , 262, 'Query'\n  , 263, 'Dynamic update'\n  , 264, 'Dynamic update'\n  , 265, 'Zone XFR'\n  , 266, 'Zone XFR'\n  , 267, 'Zone XFR'\n  , 268, 'Zone XFR'\n  , 269, 'Zone XFR'\n  , 270, 'Zone XFR'\n  , 271, 'Zone XFR'\n  , 272, 'Zone XFR'\n  , 273, 'Zone XFR'\n  , 274, 'Zone XFR'\n  , 275, 'Zone XFR'\n  , 276, 'Zone XFR'\n  , 277, 'Dynamic update'\n  , 278, 'Dynamic update'\n  , 279, 'Query'\n  , 280, 'Query'\n];\nlet EventSubTypeTable=datatable(EventOriginalType:real,EventSubType:string)[\n  256, 'request'\n, 257, 'response'\n, 258, 'response'\n, 259, 'response'\n, 260, 'request'\n, 261, 'response'\n, 262, 'response'\n, 263, 'request'\n, 264, 'response'\n, 265, 'request'\n, 266, 'request'\n, 267, 'response'\n, 268, 'response'\n, 269, 'request'\n, 270, 'request'\n, 271, 'response'\n, 272, 'response'\n, 273, 'request'\n, 274, 'request'\n, 275, 'response'\n, 276, 'response'\n, 277, 'request'\n, 278, 'response'\n, 279, 'response'\n, 280, 'response'\n];\nlet EventResultTable=datatable(EventOriginalType:real,EventResult:string)[\n    256, 'NA'\n  , 257, 'Success'\n  , 258, 'Failure'\n  , 259, 'Failure'\n  , 260, 'NA'\n  , 261, 'NA'\n  , 262, 'Failure'\n  , 263, 'NA'\n  , 264, 'Based on RCODE'\n  , 265, 'NA'\n  , 266, 'NA'\n  , 267, 'Based on RCODE'\n  , 268, 'Based on RCODE'\n  , 269, 'NA'\n  , 270, 'NA'\n  , 271, 'Based on RCODE'\n  , 272, 'Based on RCODE'\n  , 273, 'NA'\n  , 274, 'NA'\n  , 275, 'Success'\n  , 276, 'Success'\n  , 277, 'NA'\n  , 278, 'Based on RCODE'\n  , 279, 'NA'\n  , 280, 'NA'\n];\nlet RCodeTable=datatable(DnsResponseCode:int,ResponseCodeName:string)[\n    0,'NOERROR'\n  , 1,'FORMERR'\n  , 2,'SERVFAIL'\n  , 3,'NXDOMAIN'\n  , 4,'NOTIMP'\n  , 5,'REFUSED'\n  , 6,'YXDOMAIN'\n  , 7,'YXRRSET'\n  , 8,'NXRRSET'\n  , 9,'NOTAUTH'\n  , 10,'NOTZONE'\n  , 11,'DSOTYPENI'\n  , 16,'BADVERS'\n  , 16,'BADSIG'\n  , 17,'BADKEY'\n  , 18,'BADTIME'\n  , 19,'BADMODE'\n  , 20,'BADNAME'\n  , 21,'BADALG'\n  , 22,'BADTRUNC'\n  , 23,'BADCOOKIE'\n];\nlet QTypeTable=datatable(DnsQueryType:int,QTypeName:string)[\n    0, 'Reserved'\n  , 1, 'A'\n  , 2, 'NS'\n  , 3, 'MD'\n  , 4, 'MF'\n  , 5, 'CNAME'\n  , 6, 'SOA'\n  , 7, 'MB'\n  , 8 ,'MG'\n  , 9 ,'MR'\n  , 10,'NULL'\n  , 11,'WKS'\n  , 12,'PTR'\n  , 13,'HINFO'\n  , 14,'MINFO'\n  , 15,'MX'\n  , 16,'TXT'\n  , 17,'RP'\n  , 18,'AFSDB'\n  , 19,'X25'\n  , 20,'ISDN'\n  , 21,'RT'\n  , 22,'NSAP'\n  , 23,'NSAP-PTR'\n  , 24,'SIG'\n  , 25,'KEY'\n  , 26,'PX'\n  , 27,'GPOS'\n  , 28,'AAAA'\n  , 29,'LOC'\n  , 30,'NXT'\n  , 31,'EID'\n  , 32,'NIMLOC'\n  , 33,'SRV'\n  , 34,'ATMA'\n  , 35,'NAPTR'\n  , 36,'KX'\n  , 37,'CERT'\n  , 38,'A6'\n  , 39,'DNAME'\n  , 40,'SINK'\n  , 41,'OPT'\n  , 42,'APL'\n  , 43,'DS'\n  , 44,'SSHFP'\n  , 45,'IPSECKEY'\n  , 46,'RRSIG'\n  , 47,'NSEC'\n  , 48,'DNSKEY'\n  , 49,'DHCID'\n  , 50,'NSEC3'\n  , 51,'NSEC3PARAM'\n  , 52,'TLSA'\n  , 53,'SMIMEA'\n  , 55,'HIP'\n  , 56,'NINFO'\n  , 57,'RKEY'\n  , 58,'TALINK'\n  , 59,'CDS'\n  , 60,'CDNSKEY'\n  , 61,'OPENPGPKEY'\n  , 62,'CSYNC'\n  , 63,'ZONEMD'\n  , 64,'SVCB'\n  , 65,'HTTPS'\n  , 99,'SPF'\n  , 100,'UINFO'\n  , 101,'UID'\n  , 102,'GID'\n  , 103,'UNSPEC'\n  , 104,'NID'\n  , 105,'L32'\n  , 106,'L64'\n  , 107,'LP'\n  , 108,'EUI48'\n  , 109,'EUI64'\n  , 249,'TKEY'\n  , 250,'TSIG'\n  , 251,'IXFR'\n  , 252,'AXFR'\n  , 253,'MAILB'\n  , 254,'MAILA'\n  , 255,'*'\n  , 256,'URI'\n  , 257,'CAA'\n  , 258,'AVC'\n  , 259,'DOA'\n  , 32768,'TA'\n  , 32769,'DLV'\n];\nNXLog_DNS_Server_CL | where not(disabled)\n| where EventID_d < 281\n| project-rename \n   EventOriginalType=EventID_d\n| lookup EventTypeTable on EventOriginalType\n| extend\n  eventtype = iff (eventtype == \"lookup\", \"Query\", eventtype)\n//  Pre-parsing filtering:\n  | where\n    // Return empty list if response IPs are passed\n    (response_has_ipv4=='*')\n    and (array_length(response_has_any_prefix) ==0) \n    and (eventtype=='*' or EventType == eventtype)   \n    and (isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime) or TimeGenerated <= endtime) \n    and (srcipaddr=='*' or Source_s==srcipaddr)\n    and (array_length(domain_has_any) ==0 or QNAME_s has_any (domain_has_any))\n    and (responsecodename=='*' or RCODE_s=~responsecodename)\n// --\n| project-rename\n    DnsFlags=Flags_s,\n    DnsQuery=QNAME_s,\n    DnsQueryType=QTYPE_s,\n    DnsResponseCode=RCODE_s,\n    DnsResponseName=PacketData_s,\n    Dvc=Hostname_s,\n    EventOriginalUid=GUID_g,\n    EventStartTime=EventTime_t,\n    SrcIpAddr=Source_s,\n    EventUid=_ItemId\n| extend\n    DnsQuery=trim_end(\".\",DnsQuery),\n    DnsQueryType=toint(DnsQueryType),\n    DnsResponseCode=toint(DnsResponseCode),\n    SrcPortNumber=toint(Port_s),\n    DvcHostname=Dvc,\n    DvcIpAddr=HostIP_s,\n    EventEndTime=EventStartTime,\n    EventProduct = \"DNS Server\",\n    EventSchemaVersion = \"0.1.7\",\n    EventVendor = \"Microsoft\",\n    EventSchema = \"Dns\",\n    EventCount = int(1),\n    NetworkProtocol=iff(TCP_s == \"0\",\"UDP\",\"TCP\"),\n    TransactionIdHex=tohex(toint(XID_s)),\n    DnsFlagsAuthenticated = tobool(AD_s),\n    DnsFlagsAuthoritative = tobool(AA_s),\n    DnsFlagsRecursionDesired = tobool(RD_s)\n| lookup EventSubTypeTable on EventOriginalType\n| lookup EventResultTable on EventOriginalType\n| lookup RCodeTable on DnsResponseCode\n| lookup QTypeTable on DnsQueryType\n| extend\n    EventResultDetails = case (isnotempty(ResponseCodeName), ResponseCodeName\n      , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'\n      , 'Unassigned'),\n    EventOriginalType = tostring(EventOriginalType)\n| extend\n    Domain=DnsQuery,\n    DnsResponseCodeName=EventResultDetails,\n    DnsQueryTypeName = case (isnotempty(QTypeName), QTypeName\n      , DnsQueryType between (66 .. 98), 'Unassigned'\n      , DnsQueryType between (110 .. 248), 'Unassigned'\n      , DnsQueryType between (261 .. 32767), 'Unassigned'\n      , 'Unassigned'),\n    EventResult=iff (EventResult == \"Based on RCODE\", iff(DnsResponseCode == 0, \"Success\", \"Failure\"),EventResult)\n| extend\n  // Aliases\n    IpAddr = SrcIpAddr,\n    Src = SrcIpAddr\n| project-away\n    *_s, *_d, QTypeName, TenantId, SourceSystem, MG, ManagementGroupName, Computer, RawData, ResponseCodeName, EventReceivedTime_t, ProviderGuid_g, _ResourceId, eventtype\n};\nASimDnsMicrosoftNXLog (\n  starttime=starttime,\n  endtime=endtime,\n  srcipaddr=srcipaddr,\n  domain_has_any=domain_has_any,\n  responsecodename=responsecodename,\n  response_has_ipv4=response_has_ipv4,\n  response_has_any_prefix=response_has_any_prefix,\n  eventtype=eventtype,\n  disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
