{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Microsoft Sentinel native DNS table",
        "category": "ASIM",
        "FunctionAlias": "vimDnsNative",
        "query": "let parser=\n(\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr:string='*',\n  domain_has_any:dynamic=dynamic([]),\n  responsecodename:string='*', \n  response_has_ipv4:string='*',\n  response_has_any_prefix:dynamic=dynamic([]),\n  eventtype:string='Query',\n  disabled:bool=false\n)\n{\n  ASimDnsActivityLogs  | where not(disabled)\n  //  -- Pre-parsing filtering:\n  | where\n      (response_has_ipv4=='*') and (array_length(response_has_any_prefix) == 0) // -- Check that unsupported filters are set to default\n      and (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (srcipaddr=='*' or SrcIpAddr==srcipaddr)\n      and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\n      and (responsecodename=='*' or EventResultDetails == responsecodename)\n      and (eventtype == \"*\" or eventtype == EventType or (eventtype == \"lookup\" and EventType == \"Query\")) // -- Support \"lookup\" as value for backward compatibility\n  // --\n  | project-rename\n      EventUid = _ItemId\n  | extend\n      EventStartTime = TimeGenerated,\n      EventEndTime = TimeGenerated,\n      Dvc = coalesce (Dvc, DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),\n      Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),\n      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),\n      EventSchema = \"Dns\"\n  // -- Type fixes\n  | extend\n      ThreatConfidence = toint(ThreatConfidence),\n      ThreatFirstReportedTime = todatetime(ThreatFirstReportedTime),\n      ThreatIsActive = tobool(ThreatIsActive),\n      ThreatLastReportedTime = todatetime(ThreatLastReportedTime),\n      ThreatOriginalRiskLevel = tostring(ThreatOriginalRiskLevel),\n      ThreatRiskLevel = toint(ThreatRiskLevel)\n  //  -- Aliases here\n  | extend\n      DnsResponseCodeName=EventResultDetails,\n      Domain=DnsQuery,\n      IpAddr=SrcIpAddr,\n      SessionId=DnsSessionId,\n      Duration = DnsNetworkDuration,\n      Process = SrcProcessName,\n      User = SrcUsername,\n      Hostname = SrcHostname,\n      DvcScopeId = coalesce(DvcScopeId,_SubscriptionId)\n    | project-away\n        TenantId, SourceSystem, _ResourceId, _SubscriptionId\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr=srcipaddr, domain_has_any=domain_has_any, responsecodename=responsecodename, response_has_ipv4=response_has_ipv4, response_has_any_prefix=response_has_any_prefix, eventtype=eventtype, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
