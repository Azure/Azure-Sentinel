{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsMicrosoftOMS')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Windows DNS log collected using the Log Analytics agent",
        "category": "ASIM",
        "FunctionAlias": "vimDnsMicrosoftOMS",
        "query": "let EventTypeTable=datatable(EventId:int,EventType:string,EventSubType:string, EventResult:string)[\n   256, 'Query', 'request', 'NA'\n , 257, 'Query', 'response', 'Success'\n , 258, 'Query', 'response', 'Based on RCODE'\n , 259, 'Query', 'response', 'Based on RCODE'\n , 260, 'Query', 'request', 'NA'\n , 261, 'Query', 'response', 'NA'\n , 262, 'Query', 'response', 'Based on RCODE'\n , 263, 'Update', 'request', 'NA'\n , 264, 'Update', 'response', 'Based on RCODE'\n , 265, 'XFR', 'request', 'NA' \n , 266, 'XFR', 'request', 'NA'\n , 267, 'XFR', 'response', 'Based on RCODE'\n , 268, 'XFR', 'response', 'Based on RCODE'\n , 269, 'XFR', 'request', 'NA'\n , 270, 'XFR', 'request', 'NA'\n , 271, 'XFR', 'response', 'Based on RCODE'\n , 272, 'XFR', 'response', 'Based on RCODE'\n , 273, 'XFR', 'request', 'NA'\n , 274, 'XFR', 'request', 'NA'\n , 275, 'XFR', 'response', 'Success'\n , 276, 'XFR', 'response', 'Success'\n , 277, 'Update', 'request', 'NA'\n , 278, 'Update', 'response', 'Based on RCODE'\n , 279, 'Query', 'NA', 'NA'\n , 280, 'Query', 'NA', 'NA'\n ];\n let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[\n    0, 'NOERROR'\n  , 1, \"FORMERR\"\n  , 2,\"SERVFAIL\"\n  , 3,'NXDOMAIN'\n  , 4,'NOTIMP'\n  , 5,'REFUSED'\n  , 6,'YXDOMAIN'\n  , 7,'YXRRSET'\n  , 8,'NXRRSET'\n  , 9,'NOTAUTH'\n  , 10,'NOTZONE'\n  , 11,'DSOTYPENI'\n  , 16,'BADVERS'\n  , 16,'BADSIG'\n  , 17,'BADKEY'\n  , 18,'BADTIME'\n  , 19,'BADMODE'\n  , 20,'BADNAME'\n  , 21,'BADALG'\n  , 22,'BADTRUNC'\n  , 23,'BADCOOKIE'];\n let QueryTypeSymbols=datatable(QTypeSeq:string,QTypeName:string)[\n   \"0\", \"Reserved\",\n   \"1\", \"A\",\n   \"2\", \"NS\",\n   \"3\", \"MD\",\n   \"4\", \"MF\",\n   \"5\", \"CNAME\",\n   \"6\", \"SOA\",\n   \"7\", \"MB\",\n   \"8\", \"MG\",\n   \"9\", \"MR\",\n   \"10\", \"NULL\",\n   \"11\", \"WKS\",\n   \"12\", \"PTR\",\n   \"13\", \"HINFO\",\n   \"14\", \"MINFO\",\n   \"15\", \"MX\",\n   \"16\", \"TXT\",\n   \"17\", \"RP\",\n   \"18\", \"AFSDB\",\n   \"19\", \"X25\",\n   \"20\", \"ISDN\",\n   \"21\", \"RT\",\n   \"22\", \"NSAP\",\n   \"23\", \"NSAP-PTR\",\n   \"24\", \"SIG\",\n   \"25\", \"KEY\",\n   \"26\", \"PX\",\n   \"27\", \"GPOS\",\n   \"28\", \"AAAA\",\n   \"29\", \"LOC\",\n   \"30\", \"NXT\",\n   \"31\", \"EID\",\n   \"32\", \"NIMLOC\",\n   \"33\", \"SRV\",\n   \"34\", \"ATMA\",\n   \"35\", \"NAPTR\",\n   \"36\", \"KX\",\n   \"37\", \"CERT\",\n   \"38\", \"A6\",\n   \"39\", \"DNAME\",\n   \"40\", \"SINK\",\n   \"41\", \"OPT\",\n   \"42\", \"APL\",\n   \"43\", \"DS\",\n   \"44\", \"SSHFP\",\n   \"45\", \"IPSECKEY\",\n   \"46\", \"RRSIG\",\n   \"47\", \"NSEC\",\n   \"48\", \"DNSKEY\",\n   \"49\", \"DHCID\",\n   \"50\", \"NSEC3\",\n   \"51\", \"NSEC3PARAM\",\n   \"52\", \"TLSA\",\n   \"53\", \"SMIMEA\",\n   \"54\", \"Unassigned\",\n   \"55\", \"HIP\",\n   \"56\", \"NINFO\",\n   \"57\", \"RKEY\",\n   \"58\", \"TALINK\",\n   \"59\", \"CDS\",\n   \"60\", \"CDNSKEY\",\n   \"61\", \"OPENPGPKEY\",\n   \"62\", \"CSYNC\",\n   \"99\", \"SPF\",\n   \"100\", \"UINFO\",\n   \"101\", \"UID\",\n   \"102\", \"GID\",\n   \"103\", \"UNSPEC\",\n   \"104\", \"NID\",\n   \"105\", \"L32\",\n   \"106\", \"L64\",\n   \"107\", \"LP\",\n   \"108\", \"EUI48\",\n   \"109\", \"EUI64\",\n   \"249\", \"TKEY\",\n   \"250\", \"TSIG\",\n   \"251\", \"IXFR\",\n   \"252\", \"AXFR\",\n   \"253\", \"MAILB\",\n   \"254\", \"MAILA\",\n   \"255\", \"All\",\n   \"256\", \"URI\",\n   \"257\", \"CAA\",\n   \"258\", \"AVC\",\n   \"259\", \"DOA\",\n   \"32768\", \"TA\",\n   \"32769\", \"DLV\"];\n let DNSQuery_MS=(\n   starttime:datetime=datetime(null), \n   endtime:datetime=datetime(null),\n   srcipaddr:string='*',\n   domain_has_any:dynamic=dynamic([]),\n   responsecodename:string='*', \n   response_has_ipv4:string='*',\n   response_has_any_prefix:dynamic=dynamic([]),\n   eventtype:string='Query',\n   disabled:bool=false\n   ){\n   let rcodenames=toscalar(RCodeTable | where DnsResponseCodeName == responsecodename | project DnsResponseCode);\n   DnsEvents | where not(disabled)\n   // ******************************************************************\n     //  Pre-parsing filtering:\n   | where\n         (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and (srcipaddr=='*' or ClientIP==srcipaddr)\n         and (array_length(domain_has_any) ==0 or Name has_any (domain_has_any))\n         and (responsecodename=='*' or ResultCode == rcodenames)\n         and (response_has_ipv4=='*' or has_ipv4(IPAddresses,response_has_ipv4) )\n         and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(IPAddresses, response_has_any_prefix)  )\n   // *****************************************************************\n   | where EventId < 500\n   | lookup QueryTypeSymbols on $left.QueryType == $right.QTypeSeq\n   | extend DnsQueryTypeName=coalesce(QTypeName, QueryType)\n   | lookup EventTypeTable on EventId\n   // late filtering:\n   | extend\n     eventtype = iff (eventtype == \"lookup\", \"Query\", eventtype)\n   | where (eventtype == \"*\" or eventtype == EventType)\n   | project-rename\n        Dvc=Computer ,\n        SrcIpAddr = ClientIP,\n        // DnsQueryTypeName=QueryType,\n        EventMessage = Message,\n        EventReportUrl = ReportReferenceLink,\n        DnsResponseName = IPAddresses,\n        DnsQuery = Name,\n        DnsResponseCode = ResultCode\n   | extend hostelements=split(Dvc,'.')\n | extend DvcHostname=tostring(hostelements[0])\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\n        , DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\n | extend  DvcDomainType=iff(DvcFQDN !=\"\",\"FQDN\",\"\" )\n   | project-away hostelements\n   | extend\n        EventCount=int(1),\n        EventStartTime=TimeGenerated,\n        EventVendor = \"Microsoft\",\n        EventProduct = \"DNS Server\",\n        EventSchema = \"Dns\",\n        EventSchemaVersion=\"0.1.3\",\n        EventEndTime=TimeGenerated,\n        EventSeverity = tostring(Severity),\n        EventOriginalType = tostring(EventId)\n   | lookup RCodeTable on DnsResponseCode\n   | extend EventResultDetails = case (isnotempty(DnsResponseCodeName), DnsResponseCodeName\n                                   , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'\n                                   , 'Unassigned'),\n     EventResult = iff (EventResult == \"Based on RCODE\", iff(DnsResponseCode == 0, \"Success\", \"Failure\"),EventResult)\n   // **************Aliases\n   | extend\n       DnsResponseCodeName=EventResultDetails,\n       Domain=DnsQuery,\n       IpAddr=SrcIpAddr,\n       Src=srcipaddr\n   | project-away \n       SubType, QTypeName, QueryType, SourceSystem, TaskCategory, Remote*, Severity, Result, Confidence, Description, IndicatorThreatType, MaliciousIP, eventtype, EventId\n   };\n DNSQuery_MS (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
