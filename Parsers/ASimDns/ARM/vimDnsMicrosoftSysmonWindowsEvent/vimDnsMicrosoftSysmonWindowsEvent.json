{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsMicrosoftSysmonWindowsEvent')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Sysmon for Windows",
        "category": "ASIM",
        "FunctionAlias": "vimDnsMicrosoftSysmonWindowsEvent",
        "query": "let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[\n  // See https://docs.microsoft.com/windows/win32/debug/system-error-codes--9000-11999-\n  0, 'NOERROR'\n, 9001, \"FORMERR\"\n, 9002,\"SERVFAIL\"\n, 9003,'NXDOMAIN'\n, 9004,'NOTIMP'\n, 9005,'REFUSED'\n, 9006,'YXDOMAIN'\n, 9007,'YXRRSET'\n, 9008,'NXRRSET'\n, 9009,'NOTAUTH'\n, 9010,'NOTZONE'\n, 9011,'DSOTYPENI'\n, 9016,'BADVERS'\n, 9016,'BADSIG'\n, 9017,'BADKEY'\n, 9018,'BADTIME'\n, 9019,'BADMODE'\n, 9020,'BADNAME'\n, 9021,'BADALG'\n, 9022,'BADTRUNC'\n, 9023,'BADCOOKIE'\n, 1460, 'TIMEOUT'\n];\nlet ParsedDnsEvent_WindowsEvent =(\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n  , srcipaddr:string='*'\n  , domain_has_any:dynamic=dynamic([]) \n  , responsecodename:string='*', response_has_ipv4:string='*'\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'\n  , disabled:bool=false\n) \n{\n  WindowsEvent | where not(disabled)\n  | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Provider, Type , _ItemId \n  | where Provider == \"Microsoft-Windows-Sysmon\" and EventID == 22\n  | project-away Provider, EventID\n    // -- Pre-parsing filtering (srcipaddr not available)\n  | where\n    (eventtype=='lookup')\n    and (srcipaddr=='*')\n    and (isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime) or TimeGenerated <= endtime)\n    and (array_length(domain_has_any) ==0 or EventData has_any (domain_has_any))\n    and (response_has_ipv4=='*' or has_ipv4(EventData,response_has_ipv4) )\n    and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(EventData, response_has_any_prefix))\n  | extend DnsResponseCode = toint(EventData.QueryStatus)\n  | lookup RCodeTable on DnsResponseCode\n  | where  (responsecodename==\"*\" or DnsResponseCodeName has responsecodename) // -- filter is not optimized\n  // --\n  | extend \n      RuleName = tostring(EventData.RuleName),\n      EventEndTime = todatetime(EventData.UtcTime),\n      SrcProcessGuid = tostring(EventData.ProcessGuid),\n      SrcProcessId = tostring(EventData.ProcessId),  \n      DnsQuery = tostring(EventData.QueryName),\n      DnsResponseName = tostring(EventData.QueryResults),\n      SrcProcessName = tostring(EventData.Image),\n      SrcUsername = tostring(EventData.User),\n      EventUid = _ItemId\n  | project-away EventData\n  | parse SrcProcessGuid with '{' SrcProcessGuid '}'\n};\nlet ParsedDnsEvent=(\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n  , srcipaddr:string='*'\n  , domain_has_any:dynamic=dynamic([]) \n  , responsecodename:string='*', response_has_ipv4:string='*'\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'\n  , disabled:bool=false\n) \n{\n  ParsedDnsEvent_WindowsEvent (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\n// -- Post-filtering accurately now that message is parsed\n| where\n  (array_length(domain_has_any) == 0 or DnsQuery has_any (domain_has_any))\n  and (response_has_ipv4=='*' or has_ipv4(DnsResponseName,response_has_ipv4) )\n  and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix))\n// --\n| project-rename \n    DvcHostname = Computer,\n    //EventUid = _ItemId,\n    DvcScopeId = _SubscriptionId,\n    DvcId = _ResourceId\n| extend\n    EventOriginalType = '22',\n    EventCount=int(1),\n    EventProduct = 'Sysmon',\n    EventVendor = 'Microsoft',\n    EventSchema = 'Dns',\n    EventSchemaVersion=\"0.1.6\",\n    EventType = 'Query',\n    EventResult = iff (DnsResponseCode == 0,'Success','Failure'),\n    EventStartTime = EventEndTime,\n    EventSubType= 'response',\n    EventSeverity= iif (DnsResponseCode == 0, 'Informational', 'Low'),\n    SrcUsernameType = 'Windows',\n    RuleName = iff (RuleName == \"-\", \"\", RuleName),\n    DnsResponseName = iff (DnsResponseName == \"-\", \"\", DnsResponseName),\n    DnsResponseCodeName = iff (DnsResponseCodeName == \"\", \"NA\", DnsResponseCodeName),\n    DvcIdType = iff (DvcId != \"\", \"AzureResourceId\", \"\")\n// -- Aliases\n| extend \n    EventResultDetails = DnsResponseCodeName,\n    Domain = DnsQuery,\n    Dvc = DvcHostname,\n    SrcHostname = DvcHostname,\n    Src = DvcHostname,\n    Hostname=DvcHostname,\n    DnsResponseCode = toint(iff (DnsResponseCode > 9000 and DnsResponseCode < 9100, DnsResponseCode-9000, DnsResponseCode)),\n    User = SrcUsername,\n    Process = SrcProcessName,\n    Rule = RuleName,\n    DvcAzureResourceId = DvcId\n    | project-away DvcAzureResourceId\n};\nParsedDnsEvent (starttime=starttime, endtime=endtime, srcipaddr=srcipaddr, domain_has_any=domain_has_any, responsecodename=responsecodename, response_has_ipv4=response_has_ipv4, response_has_any_prefix=response_has_any_prefix, eventtype=eventtype, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
