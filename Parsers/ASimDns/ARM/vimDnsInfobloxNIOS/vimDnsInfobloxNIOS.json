{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimDnsInfobloxNIOS')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "DNS activity ASIM filtering parser for Infoblox NIOS",
        "category": "ASIM",
        "FunctionAlias": "vimDnsInfobloxNIOS",
        "query": "let SyslogProjected = Syslog | project SyslogMessage, ProcessName, TimeGenerated, Computer, HostIP;\nlet response = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr:string=\"*\", \n  domain_has_any:dynamic=dynamic([]), \n  responsecodename:string=\"*\", \n  response_has_ipv4:string=\"*\",\n  response_has_any_prefix:dynamic=dynamic([]),\n  eventtype:string=\"Query\",\n  disabled:bool=false\n) \n{\n  SyslogProjected\n  | where not(disabled)\n    and (eventtype in~ ('lookup', 'Query'))\n  // -- Pre filtering\n  | where\n    (isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime) or TimeGenerated <= endtime) \n  | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\", \"response:\")\n  | where \n    (srcipaddr==\"*\" or has_ipv4(SyslogMessage, srcipaddr))\n    and (array_length(domain_has_any) == 0 or SyslogMessage has_any (domain_has_any))\n    and (responsecodename==\"*\" or SyslogMessage has responsecodename)\n    and (array_length(response_has_any_prefix)==0 or has_any_ipv4_prefix(SyslogMessage, response_has_any_prefix))\n    and (response_has_ipv4=='*' or has_ipv4(SyslogMessage,response_has_ipv4))\n  | parse SyslogMessage with *\n      \"client \" SrcIpAddr: string\n      \"#\" SrcPortNumber: string\n      \" \" NetworkProtocol: string\n      \": query: \" DnsQuery: string\n      \" \" DnsQueryClassName: string\n      \" \" DnsQueryTypeName: string\n      \" response: \" DnsResponseCodeName: string\n      \" \" DnsFlags: string\n  | extend DnsResponseNameIndex= indexof(DnsFlags, \" \")\n  | extend DnsResponseName =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, DnsResponseNameIndex+1), \"\")\n  | extend DnsFlags =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, 0, DnsResponseNameIndex), DnsFlags)\n  | extend SrcPortNumber = iif(SrcPortNumber has ':',replace_string(SrcPortNumber,':',''),SrcPortNumber)\n  | extend SrcPortNumber = toint(SrcPortNumber)\n  | extend EventSubType = \"response\"\n  | project-away SyslogMessage, ProcessName, DnsResponseNameIndex\n};\nlet request =(\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr:string=\"*\", \n  domain_has_any:dynamic=dynamic([]), \n  responsecodename:string=\"*\", \n  response_has_ipv4:string=\"*\",\n  response_has_any_prefix:dynamic=dynamic([]),\n  eventtype:string=\"Query\",\n  disabled:bool=false\n) \n{\n  SyslogProjected \n  | where not(disabled)\n  // -- Pre filtering\n    and (eventtype in~ ('lookup', 'Query'))\n    and (responsecodename==\"*\")\n    and (array_length(response_has_any_prefix)==0)\n    and (response_has_ipv4=='*')\n  | where\n    (isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime) or TimeGenerated <= endtime) \n  | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\") and SyslogMessage !has \"response:\"\n  | where \n    (srcipaddr==\"*\" or has_ipv4(SyslogMessage, srcipaddr))\n    and (array_length(domain_has_any) == 0 or SyslogMessage has_any (domain_has_any))\n  | extend SyslogMessage = (split(SyslogMessage,\"client \"))[1]\n  | extend SyslogMessage = iif(SyslogMessage startswith \"@\", (substring(SyslogMessage, indexof(SyslogMessage, \" \")+1)), SyslogMessage)\n  | extend SyslogMessage = replace_string(SyslogMessage,\"\\\\ \",\"@@@\")\n  | parse SyslogMessage with \n      SrcIpAddr: string\n      \"#\" SrcPortNumber: int *\n      \"query: \" DnsQuery: string\n      \" \" DnsQueryClassName: string\n      \" \" DnsQueryTypeName: string\n      \" \" DnsFlags: string\n  | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')\n  | extend DnsFlags= tostring((split(DnsFlags,\" \"))[0])\n  | extend \n      EventSubType = \"request\",\n      DnsResponseCodeName = \"NA\"\n  | project-away SyslogMessage, ProcessName\n};\nlet parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null), \n  srcipaddr:string=\"*\", \n  domain_has_any:dynamic=dynamic([]), \n  responsecodename:string=\"*\", \n  response_has_ipv4:string=\"*\",\n  response_has_any_prefix:dynamic=dynamic([]),\n  eventtype:string=\"Query\",\n  disabled:bool=false\n) \n{\n  union \n    response (\n      starttime=starttime, \n      endtime=endtime, \n      srcipaddr=srcipaddr,\n      domain_has_any=domain_has_any,\n      responsecodename=responsecodename, \n      response_has_ipv4=response_has_ipv4, \n      response_has_any_prefix=response_has_any_prefix, \n      eventtype=eventtype, \n      disabled=disabled\n    ),\n    request (\n      starttime=starttime, \n      endtime=endtime, \n      srcipaddr=srcipaddr,\n      domain_has_any=domain_has_any,\n      responsecodename=responsecodename, \n      response_has_ipv4=response_has_ipv4, \n      response_has_any_prefix=response_has_any_prefix, \n      eventtype=eventtype, \n      disabled=disabled\n    )    \n  // -- Post-filtering\n  | where\n      (srcipaddr==\"*\" or  SrcIpAddr==srcipaddr)\n      and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\n      and (responsecodename==\"*\" or DnsResponseCodeName has responsecodename)\n      and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix))\n      and (response_has_ipv4 == '*' or has_ipv4(DnsResponseName,response_has_ipv4))\n  | extend\n      EventCount=int(1),\n      EventStartTime=todatetime(TimeGenerated),\n      EventEndTime=todatetime(TimeGenerated),\n      EventProduct=\"NIOS\",\n      EventVendor=\"Infoblox\",\n      EventSchema=\"Dns\",\n      EventSchemaVersion=\"0.1.3\",\n      EventType=\"Query\", \n      EventResult=iff(EventSubType==\"request\" or DnsResponseCodeName==\"NOERROR\",\"Success\",\"Failure\"),\n      DvcIpAddr=iff (HostIP == \"Unknown IP\", \"\", HostIP)\n  // -- Aliases\n  | invoke _ASIM_ResolveDvcFQDN (\"Computer\")\n  | project-away Computer\n  | extend\n      Dvc=DvcHostname,\n      Domain=DnsQuery,\n      IpAddr=SrcIpAddr,\n      Src=SrcIpAddr,\n      EventResultDetails = DnsResponseCodeName\n  | project-away HostIP\n};\nparser  (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr=srcipaddr,\n  domain_has_any=domain_has_any,\n  responsecodename=responsecodename, \n  response_has_ipv4=response_has_ipv4, \n  response_has_any_prefix=response_has_any_prefix, \n  eventtype=eventtype, \n  disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr:string='*',domain_has_any:dynamic=dynamic([]),responsecodename:string='*',response_has_ipv4:string='*',response_has_any_prefix:dynamic=dynamic([]),eventtype:string='Query',disabled:bool=False"
      }
    }
  ]
}
