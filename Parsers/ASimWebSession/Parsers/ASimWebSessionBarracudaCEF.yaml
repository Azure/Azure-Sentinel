Parser:
  Title: Web Session ASIM parser for Barracuda CEF
  Version: '0.2.1'
  LastUpdated: Jun 18, 2024
Product:
  Name: Barracuda WAF
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Logs type Description in Barracuda WAF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports normalizing the Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionBarracudaCEF
EquivalentBuiltInParser: _ASim_WebSession_BarracudaCEF
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventResultWFLookup = datatable (
      Action_s: string,
      EventResult_WF: string,
      DvcAction: string
  )
      [
      "LOG", "Success", "Allow",
      "DENY", "Failure", "Deny",
      "WARNING", "Success", "Allow"
  ];
  let EventTypeLookup = datatable (
      LogType_s: string,
      EventType_lookup: string,
      EventOriginalType: string
  )
      [
      "WF", "HTTPsession", "Web Firewall",
      "TR", "WebServerSession", "Access"
  ];
  let parser = (disabled: bool=false)
  {
  let BarracudaCEF = 
      CommonSecurityLog
      | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
      | where DeviceEventCategory in ("WF", "TR")
      | lookup EventResultWFLookup on $left.DeviceAction == $right.Action_s
      | lookup EventTypeLookup on $left.DeviceEventCategory == $right.LogType_s
      | extend
          EventType = EventType_lookup,
          severity = toint(LogSeverity)
      | lookup SeverityLookup on severity
      | extend
          Dst = DestinationIP,
          EventCount = toint(1),
          EventProduct = "WAF",
          EventSchema = "WebSession",
          EventSchemaVersion = "0.2.6",
          EventVendor = "Barracuda",
          status_code = toint(EventOutcome)
      | extend
          EventResult_TR = case(
                      status_code between (200 .. 299),
                      "Success", 
                      status_code between (400 .. 599),
                      "Failure",
                      status_code between (300 .. 399),
                      "Partial",
                      "NA"
                  ),
          RuleName = iff(DeviceEventCategory == "WF", DeviceCustomString3, "")
      | extend
          Dvc = DeviceName,
          EventResult = iff(DeviceEventCategory == "TR", EventResult_TR, EventResult_WF),
          EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
          DstIpAddr = DestinationIP,
          SrcIpAddr = SourceIP,
          DstBytes = tolong(ReceivedBytes),
          DstPortNumber = toint(coalesce(DestinationPort,FieldDeviceCustomNumber1)),
          HttpCookie = RequestCookies,
          HttpReferrer = RequestContext,
          HttpRequestBodyBytes = tolong(ReceivedBytes),
          HttpRequestMethod = RequestMethod,
          HttpResponseBodyBytes = tolong(SentBytes),
          NetworkDuration = toint(FlexNumber2),
          HttpUserAgent = RequestClientApplication,
          NetworkSessionId = SourceUserID,
          Rule = RuleName,
          SrcPortNumber = toint(SourcePort),
          SrcUsername = SourceUserName,
          DstUsername = DestinationUserName,
          Url = RequestURL,
          HttpResponseCacheControl = iff(
                                FieldDeviceCustomNumber2 == 0,
                                "Response from the server",
                                "Response from the cache"
                            ),
          AdditionalFields = bag_pack(
                        "ProxyIP",
                        iff(DeviceEventCategory == "WF", DeviceCustomString5, DeviceCustomString3),
                        "ProxyPort",
                        FieldDeviceCustomNumber3
                    ),
          DvcHostname = DeviceName,
          DvcIpAddr = DeviceAddress,
          EventResultDetails = EventOutcome,
          HttpVersion = FlexString1
      | extend 
          SrcUsernameType = iff(isnotempty(SrcUsername), "Simple", ""),
          DstUsernameType = iff(isnotempty(DstUsername), "Simple", "")
      | extend
          Duration = NetworkDuration,
          SessionId = NetworkSessionId,
          EventEndTime = EventStartTime,
          UserAgent = HttpUserAgent,
          User = SrcUsername,
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          HttpStatusCode = EventResultDetails
      | project-away
          ThreatConfidence,
          CommunicationDirection,
          AdditionalExtensions,
          Device*,
          Source*,
          Destination*,
          Activity,
          LogSeverity,
          ApplicationProtocol,
          ProcessID,
          ExtID,
          Protocol,
          Reason,
          ReceiptTime,
          SimplifiedDeviceAction,
          OriginalLogSeverity,
          ProcessName,
          EndTime,
          ExternalID,
          File*,
          ReceivedBytes,
          Message,
          Old*,
          EventOutcome,
          Request*,
          StartTime,
          Field*,
          Flex*,
          Remote*,
          Malicious*,
          severity,
          ThreatSeverity,
          IndicatorThreatType,
          ThreatDescription,
          _ResourceId,
          SentBytes,
          ReportReferenceLink,
          Computer,
          EventResult_*,
          status_code,
          EventType_lookup,
          TenantId,
          CollectorHostName;
      BarracudaCEF
  };
  parser(disabled=disabled)
