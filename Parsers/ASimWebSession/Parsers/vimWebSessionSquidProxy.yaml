Parser:
  Title: Web Session ASIM filtering parser for Squid Proxy
  Version: '0.7.0'
  LastUpdated: Jun 05, 2025
Product:
  Name: Squid Proxy
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Squid Proxy Connector
  Link: https://docs.microsoft.com/azure/sentinel/data-connectors-reference#squid-proxy-preview
- Title: Squid native access log format
  Link: https://wiki.squid-cache.org/Features/LogFormat 
Description: |
  This ASIM parser supports filtering and normalizing Squid Proxy logs produced by the Microsoft Sentinel Squid Connector to the ASIM Web Session normalized schema. The parser supports squid native log format.
ParserName: vimWebSessionSquidProxy
EquivalentBuiltInParser: _Im_WebSession_SquidProxy
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime:datetime=datetime(null), 
    endtime:datetime=datetime(null),
    srcipaddr_has_any_prefix:dynamic=dynamic([]), 
    ipaddr_has_any_prefix:dynamic=dynamic([]), 
    url_has_any:dynamic=dynamic([]),
    httpuseragent_has_any:dynamic=dynamic([]),
    eventresultdetails_in:dynamic=dynamic([]),
    eventresult:string='*',
    disabled:bool=false
   ){
  SquidProxy_CL | where not(disabled)
    // -- Pre filtering
    | where  
      (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime) 
      and (array_length(httpuseragent_has_any) == 0)
      and ((array_length(url_has_any) == 0) or (RawData has_any (url_has_any)))
      and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
      and ((array_length(ipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, ipaddr_has_any_prefix))
      and ((array_length(eventresultdetails_in) == 0) or (RawData has_any (eventresultdetails_in)))
    // -- Parse
    | extend AccessRawLog = extract_all(@"^(\d+\.\d+)\s+(\d+)\s(\S+)\s([A-Z_]+)\/(\d+)\s(\d+)\s([A-Z]+)\s(\S+)\s(\S+)\s([A-Z_]+)\/(\S+)\s(\S+)",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]
    // -- Post filtering
    | extend EventResultDetails = tostring(AccessRawLog[4])
    | where array_length(eventresultdetails_in) == 0 or EventResultDetails in (eventresultdetails_in)
    | extend EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), ";", PeerStatus = tostring(AccessRawLog[9]))
    | extend EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, "Failure", "Success")
    | where eventresult == "*" or eventresult == EventResult
    // -- Map
    | extend Computer = columnifexists("Computer", "")
    | project-rename
      Dvc = Computer
    | extend
      EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), 
      NetworkDuration = toint(AccessRawLog[1]), 
      SrcIpAddr = tostring(AccessRawLog[2]), 
      DstBytes = tolong(AccessRawLog[5]), 
      HttpRequestMethod = tostring(AccessRawLog[6]), 
      // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.
      Url = tostring(AccessRawLog[7]), 
      SrcUsername = tostring(AccessRawLog[8]), 
      DstIpAddr = tostring(AccessRawLog[10]), 
      HttpContentType = tostring(AccessRawLog[11]) 
    //
    | extend 
      ASimMatchingIpAddr = case( 
        array_length(ipaddr_has_any_prefix) == 0             , "-",
        has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix), "DstIpAddr",
        has_any_ipv4_prefix(SrcIpAddr, ipaddr_has_any_prefix), "SrcIpAddr"
                                                             , "No match"
            )
    // Post Filter
    | where 
        (
          (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
          and (ASimMatchingIpAddr != "No match")
        )
    // -- Constant fields
    | extend 
      EventCount = int(1), 
      EventProduct = 'Squid Proxy', 
      EventVendor = 'Squid', 
      EventSchema = 'WebSession', 
      EventSchemaVersion = '0.2.3', 
      EventType = 'HTTPsession' 
    // -- Value normalization
    | extend
      SrcUsernameType = "Simple",
      SrcUsername = iff (SrcUsername == "-", "", SrcUsername), 
      HttpContentType = iff (HttpContentType in (":", "-"), "", HttpContentType), 
      DstIpAddrIsHost = DstIpAddr matches regex @"^[^\:]*[a-zA-Z]$"
    | extend 
      FQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)["Host"])),
      DstIpAddr = iif (DstIpAddr == "-" or DstIpAddrIsHost, "", DstIpAddr)
    | extend 
      EventSeverity = iff(EventResult == "Success", "Informational", "Low")
    | invoke _ASIM_ResolveDstFQDN ('FQDN')
    // -- aliases
    | extend 
      EventStartTime = EventEndTime,
      Duration = NetworkDuration,
      HttpStatusCode = EventResultDetails,
      User = SrcUsername,
      IpAddr = SrcIpAddr,
      Src = SrcIpAddr,
      Dst = DstHostname,
      Hostname = DstHostname
    | project-away AccessRawLog, RawData, *_s, DstIpAddrIsHost
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
