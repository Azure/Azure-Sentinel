Parser:
  Title: Web Session ASIM filtering parser for Fortinet FortiGate
  Version: '0.1'
  LastUpdated: Nov 11th, 2023
Product:
  Name: Fortinet FortiGate
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
  - Title: ASIM Web Session Schema
    Link: https://aka.ms/ASimWebSessionDoc
  - Title: ASIM
    Link: https:/aka.ms/AboutASIM
  - Title: web log fields
    Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/400992
  - Title: Fortinet FortiGate CEF setup
    Link: https://community.fortinet.com/t5/FortiGate/Technical-Tip-Integrate-FortiGate-with-Microsoft-Sentinel/ta-p/199709
  - Title: Fortinet FortiGate syslogd documentation
    Link: https://docs.fortinet.com/document/fortigate/7.2.0/cli-reference/450620/config-log-syslogd-setting
  - Title: Fortinet FortiGate extended logging for user agent, http method and x-forwarded-for
    Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/496081/enabling-extended-logging
Description: |
  This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Web Session normalized schema.
ParserName: vimWebSessionFortinetFortiGate                                  
EquivalentBuiltInParser: _Im_WebSession_FortinetFortiGate                                  
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser=(
    starttime:datetime               = datetime(null), 
    endtime:datetime                 = datetime(null),
    srcipaddr_has_any_prefix:dynamic = dynamic([]),
    ipaddr_has_any_prefix:dynamic    = dynamic([]), 
    url_has_any:dynamic              = dynamic([]),
    httpuseragent_has_any:dynamic    = dynamic([]),
    eventresultdetails_in:dynamic    = dynamic([]),
    eventresult:string               = '*',
    disabled:bool                    = false
  ){
    let src_or_any                = set_union(
      srcipaddr_has_any_prefix,
      ipaddr_has_any_prefix
    ); 
    let remove_protocol_from_list = (list:dynamic)
    {
        print list
        | mv-apply l = print_0 to typeof(string) on
          ( extend l = substring(l,indexof(l,@'//')+2))
        | project l
    };
    let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)
    [
        "passthrough","Allow","Success"
        , "blocked","Deny","Failure"
    ];
    // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
    let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
    [
      "1", "Informational", // Debug
      "2", "Informational", // Information
      "3", "Informational", // Notification
      "4", "Low", // Warning
      "5", "Low", // Error
      "6", "High", // Critical
      "7", "Medium", // Alert
      "8", "High" // Emergency
    ];     
    CommonSecurityLog
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)
    | where DeviceVendor == "Fortinet" 
      and DeviceProduct  startswith "Fortigate"
      and Activity has_all ('webfilter', 'utm')
    | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))
    | where (array_length(httpuseragent_has_any) == 0 or AdditionalExtensions has_any(httpuseragent_has_any))
    | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)
    | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(
        array_length(src_or_any) == 0, "-",
        temp_DstMatch and temp_SrcMatch, "Both",
        temp_SrcMatch , "SrcIpAddr",
        temp_DstMatch, "DstIpAddr",
        "No match") 
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
    | extend 
        EventResultDetails = "NA"
    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in)) 
    | lookup EventLookup on DeviceAction 
    | where (eventresult == '*' or EventResult =~ eventresult)
    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName, ASimMatchingIpAddr
    | project-rename 
      Url                     = RequestURL
      , UrlCategory           = RequestContext
      , DstBytes              = ReceivedBytes
      , DstInterfaceName      = DeviceOutboundInterface
      , DstIpAddr             = DestinationIP
      , DstPortNumber         = DestinationPort
      , DvcHostname           = Computer
      , EventMessage          = Activity
      , EventOriginalSeverity = LogSeverity
      , EventProduct          = DeviceProduct
      , EventProductVersion   = DeviceVersion
      , SrcBytes              = SentBytes
      , SrcInterfaceName      = DeviceInboundInterface
      , SrcIpAddr             = SourceIP
      , SrcPortNumber         = SourcePort
      , DvcId                 = DeviceExternalID
      , EventUid              = _ItemId
      , DstHostname           = DestinationHostName
      , SrcHostname           = SourceHostName
      , SrcUsername           = SourceUserName
      , DstUsername           = DestinationUserName
    | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
    | extend 
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
    | project-rename DvcOriginalAction = DeviceAction
    | parse-kv AdditionalExtensions as (
            FortinetFortiGatestart:datetime,
            FortinetFortiGatesrcintfrole:string,
            FortinetFortiGatedstintfrole:string,
            FortinetFortiGateexternalID:string,
            FortinetFortiGatepolicyid:int,
            FortinetFortiGatedstcountry:string,
            FortinetFortiGatesrccountry:string,
            FortinetFortiGatecrscore:string,
            FortinetFortiGateduration:int,
            FortinetFortiGatesentpkt:long,
            FortinetFortiGatercvdpkt:long,
            ['ad.referralurl']:string,
            ['ad.httpmethod']:string,
            ['ad.agent']:string
        ) with (pair_delimiter=';', kv_delimiter='=')
    | parse AdditionalExtensions with * "x-forwarded-for=" HttpRequestXff:string ";" *
    | project-rename
        HttpReferrer            = ['ad.referralurl'],
        HttpRequestMethod       = ['ad.httpmethod'],
        HttpUserAgent           = ['ad.agent'],
        EventStartTime          = FortinetFortiGatestart,
        SrcZone                 = FortinetFortiGatesrcintfrole,
        DstZone                 = FortinetFortiGatedstintfrole,
        NetworkSessionId        = FortinetFortiGateexternalID,
        RuleNumber              = FortinetFortiGatepolicyid,
        NetworkDuration         = FortinetFortiGateduration,
        DstGeoCountry           = FortinetFortiGatedstcountry,
        SrcGeoCountry           = FortinetFortiGatesrccountry,
        ThreatOriginalRiskLevel = FortinetFortiGatecrscore,
        SrcPackets              = FortinetFortiGatesentpkt,
        DstPackets              = FortinetFortiGatercvdpkt
    | parse AdditionalExtensions with * "Method=" temp_HttpRequestMethod "|User-Agent=" temp_HttpUserAgent ";" *
    | extend 
        HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),
        HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)
    | project-away temp_*
    | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))
    | extend 
        EventCount               = int(1)
        , EventSchema            = "WebSession"
        , EventSchemaVersion     = "0.2.6"
        , EventType              = "HTTPsession"
        , EventVendor            = "Fortinet"
        , DvcIdType              = "Other"
        , NetworkBytes           = DstBytes + SrcBytes
        , EventEndTime           = TimeGenerated
        , EventStartTime         = coalesce(EventStartTime, TimeGenerated)
        , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
            , DstIpAddr contains ":", "IPv6"
            , "")
        , NetworkPackets         = DstPackets + SrcPackets
        , UserAgent              = HttpUserAgent
        , Dvc                    = DvcHostname
        , User                   = SrcUsername
        , Hostname               = DstHostname
    | lookup SeverityLookup on EventOriginalSeverity
    | extend 
        Src       = SrcIpAddr,
        Dst       = DstIpAddr,
        SessionId = NetworkSessionId,
        IpAddr    = SrcIpAddr,
        Duration  = NetworkDuration,
        Rule      = tostring(RuleNumber)
    | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
