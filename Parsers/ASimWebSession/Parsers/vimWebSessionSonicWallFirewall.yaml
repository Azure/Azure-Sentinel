Parser:
  Title: Web Session ASIM filtering parser for SonicWall firewalls
  Version: '0.1.0'
  LastUpdated: Mar 29, 2024
Product:
  Name: SonicWall
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
  - Title: ASIM Web Session Schema
    Link: https://aka.ms/ASimWebSessionDoc
  - Title: ASIM
    Link: https:/aka.ms/AboutASIM
  - Title: SonicWall SonicOS/X 7.0.1 Log Events Reference Guide [PDF]
    Link: https://www.sonicwall.com/techdocs/pdf/SonicOS-X_7.0.1_LogEvents_ReferenceGuide.pdf
Description: |
  This ASIM parser supports normalizing SonicWall SonicOS ArcSight-formatted syslog received via the SonicWall Firewall/Common Event Format data connectors and ingested to the CommonSecurityLog table by Microsoft Sentinel to the ASIM WebSession normalized schema.
ParserName: vimWebSessionSonicWallFirewall
EquivalentBuiltInParser: _Im_WebSession_SonicWallFirewall
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser=(
    starttime:datetime=datetime(null),
    endtime:datetime=datetime(null),
    srcipaddr_has_any_prefix:dynamic=dynamic([]),
    ipaddr_has_any_prefix:dynamic=dynamic([]), 
    url_has_any:dynamic=dynamic([]),
    httpuseragent_has_any:dynamic=dynamic([]),
    eventresultdetails_in:dynamic=dynamic([]),
    eventresult:string='*',
    disabled:bool=false
    )
    {
      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
      let Actions=datatable(fw_action:string, DvcAction:string, EventSeverity:string)
        [ "\"forward\"", "Allow", "Informational"
        , "\"mgmt\"", "Other", "Informational"
        , "\"NA\"", "Other", "Informational"
        , "\"drop\"", "Drop", "Low"
      ];
      CommonSecurityLog
      | where not(disabled)
          and DeviceVendor == "SonicWall"
          and DeviceEventClassID in (14, 97)
          and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
          and (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))
          and Protocol has_any(dynamic(["udp/http", "tcp/http", "udp/https", "tcp/https"]))
          and (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any) or AdditionalExtensions has_any (url_has_any))
          and (array_length(eventresultdetails_in) == 0)
      | parse-kv AdditionalExtensions as (['gcat']:string, ['app']:string, ['arg']:string, ['dstV6']:string, ['srcV6']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=";", kv_delimiter="=")
      | extend
          SrcIpAddr = coalesce(SourceIP, srcV6)
        , DstIpAddr = coalesce(DestinationIP, dstV6)
      | where (isnotempty(SrcIpAddr) or isnotempty(DstIpAddr))
          and isnotempty(fw_action)
      | extend temp_SrcMatch = has_any_ipv4_prefix(SrcIpAddr, src_or_any)
        , temp_DstMatch = has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix)
      | extend ASimMatchingIpAddr = case(array_length(src_or_any) == 0, "-",
                                        temp_SrcMatch and temp_DstMatch, "Both",
                                        temp_SrcMatch, "SrcIpAddr",
                                        temp_DstMatch, "DstIpAddr",
                                        "No match")
      | where ASimMatchingIpAddr != "No match"
      | project-away temp_*
      | extend RequestURL_ = extract(@"(?:[.*;]+?)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)(?:;fw_action)", 1, AdditionalExtensions)
      | extend RequestURL_ = iif(RequestURL_ startswith "snpt" or RequestURL_ startswith "dnpt" or RequestURL_ startswith "appid" or RequestURL_ startswith "appName", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), RequestURL_)
      | extend RequestURL_ = iif(RequestURL_ matches regex @"^(.{2,6}=.{1,6})", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), iif(RequestURL_ matches regex @"^\w=\d$", "", RequestURL_))
      | extend RequestURL_ = iif(RequestURL_ has_any(dynamic(["af_polid=", "ipscat=", "snpt=", "dnpt="])), "", RequestURL_)
      | extend RequestURL = iif(isnotempty(RequestURL), RequestURL, iif(RequestURL_ contains "/" and RequestURL_ contains ".", RequestURL_, ""))
      | where isnotempty(RequestURL)
      | lookup Actions on fw_action
      | extend EventResult = case(DvcAction == "Allow", "Success",
            DvcAction == "Management", "NA",
            DvcAction == "NA", "NA",
            DvcAction == "Other", "NA",
            "Failure"
            )
      | where (eventresult == "*" or EventResult =~ eventresult)
      | extend sosLogMsgSeverity = case(LogSeverity == 10, "Emergency (0)",
            LogSeverity == 9, "Alert (1)",
            LogSeverity == 8, "Critical (2)",
            LogSeverity == 7, "Error (3)",
            LogSeverity == 6, "Warning (4)",
            LogSeverity == 5, "Notice (5)",
            LogSeverity == 4, "Info (6)/Debug (7)",
            LogSeverity == 3, "Not Mapped (3)",
            LogSeverity == 2, "Not Mapped (2)",
            LogSeverity == 1, "Not Mapped (1)",
            "Not Mapped"
            )
      | extend EventSeverity = case(tolong(LogSeverity) <= 4, "Informational"
                                    , tolong(LogSeverity) <= 6, "Low"
                                    , tolong(LogSeverity) <= 8, "Medium"
                                    , tolong(LogSeverity) > 8, "High"
                                    , ""
                                    )
      | extend HttpRequestMethod = case(tolong(RequestMethod) == 0, ""
                                        , tolong(RequestMethod) == 1, "GET"
                                        , tolong(RequestMethod) == 2, "POST"
                                        , tolong(RequestMethod) == 3, "HEAD"
                                        , tolong(RequestMethod) == 4, "PUT"
                                        , tolong(RequestMethod) == 5, "CONNECT"
                                        , tolong(RequestMethod) == 6, ""
                                        , ""
                                        )
      | extend NetworkProtocolVersion = case(DestinationIP has ".", "IPv4"
                                            , DestinationIP has ":", "IPv6"
                                            , ""
                                            )
        , NetworkProtocol = toupper(iff(Protocol contains "-" and Protocol !contains "/", toupper(trim_start(@".*-", Protocol)), toupper(trim_end(@"/.*", Protocol))))
        , NetworkApplicationProtocol = tostring(toupper(trim_start(@".*/", Protocol)))
        , EventOriginalType = DeviceEventClassID
      | project-rename
          DstMacAddr = DestinationMACAddress
          , SrcMacAddr = SourceMACAddress
          , DstPortNumber = DestinationPort
          , SrcPortNumber = SourcePort
          , EventMessage = Activity
          , sosEventMessageDetail = Message
          , EventProductVersion = DeviceVersion
          , Dvc = Computer
          , DvcOutboundInterface = DeviceOutboundInterface
          , DvcInboundInterface = DeviceInboundInterface
          , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).
          , sosCFSFullString = Reason // CFS Block Category ID and Name
          , RuleName = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.
          , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.
          , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.
          , sosLogMsgNote = DeviceCustomString6 // "Note" field. Additional information that is application-dependent.
          , SrcNatIpAddr = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.
          , DstNatIpAddr = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.
          , SrcZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.
          , DstZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.
          , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.
          , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.
          , SrcUsername = SourceUserName
          , ThreatOriginalConfidence = ThreatConfidence
          , HttpUserAgent = RequestClientApplication
          , Url = RequestURL
  | where (array_length(url_has_any) == 0 or Url has_any (url_has_any))
  | extend sosLogMsgCategory = case(gcat == 1, "System (1)",
                                                gcat == 2, "Log (2)",
                                                gcat == 3, "Security Services (3)",
                                                gcat == 4, "Users (4)",
                                                gcat == 5, "Firewall Settings (5)",
                                                gcat == 6, "Network (6)",
                                                gcat == 7, "VPN (7)",
                                                gcat == 8, "High Availability (8)",
                                                gcat == 9, "3G/4G, Modem, and Module (9)",
                                                gcat == 10, "Firewall (10)",
                                                gcat == 11, "Wireless (11)",
                                                gcat == 12, "VoIP (12)",
                                                gcat == 13, "SSL VPN (13)",
                                                gcat == 14, "Anti-Spam (14)",
                                                gcat == 15, "WAN Acceleration (15)",
                                                gcat == 16, "Object (16)",
                                                gcat == 17, "SD-WAN (17)",
                                                gcat == 18, "Multi-Instance (18)",
                                                gcat == 19, "Unified Policy Engine (19)",
                                                "Log Category Not Mapped"
                                                )
  | extend EventOriginalSubType = case(DeviceEventCategory == 0, "None (0)",
                                              DeviceEventCategory == 1, "System Maintenance (1)",
                                              DeviceEventCategory == 2, "System Errors (2)",
                                              DeviceEventCategory == 4, "Blocked Web Sites (4)",
                                              DeviceEventCategory == 8, "Blocked Java Etc. (8)",
                                              DeviceEventCategory == 16, "User Activity (16)",
                                              DeviceEventCategory == 32, "Attacks (32)",
                                              DeviceEventCategory == 64, "Dropped TCP (64)",
                                              DeviceEventCategory == 128, "Dropped UDP (128)",
                                              DeviceEventCategory == 256, "Dropped ICMP (256)",
                                              DeviceEventCategory == 512, "Network Debug (512)",
                                              DeviceEventCategory == 1024, "Connection Closed (1024)",
                                              DeviceEventCategory == 2048, "Dropped LAN TCP (2048)",
                                              DeviceEventCategory == 4096, "Dropped LAN UDP (4096)",
                                              DeviceEventCategory == 8192, "Dropped LAN ICMP (8192)",
                                              DeviceEventCategory == 32768, "Modem Debug (32768)",
                                              DeviceEventCategory == 65536, "VPN Tunnel Status (65536)",
                                              DeviceEventCategory == 131072, "IEEE 802.11 Management (131072)",
                                              DeviceEventCategory == 262144, "Connection Opened (262144)",
                                              DeviceEventCategory == 524288, "System Environment (524288)",
                                              DeviceEventCategory == 1048576, "Expanded - VoIP Activity (1048576)",
                                              DeviceEventCategory == 2097152, "Expanded - WLAN IDS Activity (2097152)",
                                              DeviceEventCategory == 4194304, "Expanded - SonicPoint Activity (4194304)",
                                              DeviceEventCategory == 8388608, "Expanded - Unified Policy Engine (8388608)",
                                              "Legacy Category Not Mapped"
                                              )
  | extend sosIPSPriority = case(ipspri == 1, "High (1)",
                                              ipspri == 2, "Medium (2)",
                                              ipspri == 3, "Low (3)",
                                              ""
                                              )
  | extend sosAntiSpywarePriority = case(spypri == 1, "High (1)",
                                        spypri == 2, "Medium (2)",
                                        spypri == 3, "Low (3)",
                                        ""
                                        )
  | extend
      EventVendor = "SonicWall"
      , EventProduct = "Firewall"
      , DvcOs = "SonicOS"
      , DvcOsVersion = EventProductVersion
      , DvcIdType = "Other"
      , DvcDescription = DeviceProduct
      , Rule = RuleName
      , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))
      , sosIPSFullString = ipscat
      , ipscat = extract(@'^"?([a-zA-Z-\/]+)', 1, ipscat) // IPS Category/Signature
      , sosIPSSignatureName = extract(@'[ ](.*)\S', 1, ipscat) // IPS Signature name
      , FileSize = tolong(coalesce(FileSize, long(null)))
      , sosAppControlFileName = extract(@'.*Filename: (.*)\"', 1, sosEventMessageDetail) // App Control Filename Logging
      , HttpReferrer = extract(@'Referer: (.*)\"$', 1, coalesce(sosLogMsgNote, ""))
      , sosHttpRequestMethod_ = extract(@'Command: (.\w+)', 1, coalesce(sosLogMsgNote, ""))
      , sosCFSCategoryID = extract(@'(\d+)\s', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
      , sosCFSCategoryName = extract(@'.*-("(.*))', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
      , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, coalesce(sosLogMsgNote, ""))
      , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\. ', 1, sosEventMessageDetail)
      , sosGAVSignatureName = extract(@'Gateway Anti-Virus Alert: (.*) blocked\.', 1, sosEventMessageDetail)
      , sosASWSignatureName = extract(@'Anti-Spyware Detection Alert: (.*)\. ', 1, sosEventMessageDetail)
      , sosCountry = extract(@'Country Name:(.*)\"$', 1, sosEventMessageDetail)
      , EventOriginalSeverity = LogSeverity
      , Dst = DstIpAddr
      , Src = SrcIpAddr
      , IpAddr = SrcIpAddr
      , EventStartTime = TimeGenerated
      , EventEndTime = TimeGenerated
      , EventType = "HTTPsession"
      , EventSchemaVersion = "0.2.5"
      , EventSchema = "WebSession"
      , EventCount = toint(1)
      , EventUid = _ItemId
      , UserAgent = HttpUserAgent
      , ThreatConfidence = coalesce(toint(ThreatOriginalConfidence), int(null))
  | extend
      UrlCategory = sosCFSCategoryName
      , HttpRequestMethod = coalesce(HttpRequestMethod, sosHttpRequestMethod_)
      , EventResultDetails = ""
      , HttpStatusCode = ""
      , SrcUsername = coalesce(susr, SrcUsername)
      , FileName = coalesce(FileName, sosAppControlFileName)
      , NetworkDirection = case(SrcZone == "" and DstZone == "", "NA"
                                , SrcZone == "WAN" and (DstZone == "WAN" and DstIpAddr !has ".255"), "Inbound"
                                , SrcZone == "WAN" and DstZone == "WAN", "External"
                                , SrcZone == "WAN" and DstZone != "WAN", "Inbound"
                                , SrcZone == "VPN" and DstZone == "WAN", "Outbound"
                                , SrcZone == "VPN" and DstZone != "WAN", "Inbound"
                                , DstZone == "MULTICAST", "NA"
                                , DstZone == "WAN", "Outbound"
                                , "Local"
                                )
      , User = SrcUsername
  | extend
      SrcUsernameType = case(SrcUsername has "=", "DN",
                                    SrcUsername has "\\", "Windows",
                                    SrcUsername has "@", "UPN",
                                    SrcUsername == "Unknown (external IP)", "",
                                    SrcUsername == "Unknown (SSO bypassed)", "",
                                    isnotempty(SrcUsername), "Simple",
                                    ""
                                    )
      , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr"
                          , isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr"
                          , ""
                          )
  | extend
      ThreatIpAddr = case(ThreatField == "SrcIpAddr", SrcIpAddr
                          , ThreatField == "DstIpAddr", DstIpAddr
                          , ""
                          )
  | extend
    SrcGeoCountry = iff(NetworkDirection == "Inbound", sosCountry, "")
    , DstGeoCountry = iff(NetworkDirection == "Outbound", sosCountry, "")
    , SrcAppName = iff(NetworkDirection in ("Inbound", "Local", "NA"), coalesce(appcat, appName), "")
    , DstAppName = iff(NetworkDirection in ("Outbound", "Local", "NA"), coalesce(appcat, appName), "")
    , SrcAppId = iff(NetworkDirection in ("Inbound", "Local", "NA"), sid, "")
    , DstAppId = iff(NetworkDirection in ("Outbound", "Local", "NA"), sid, "")
    , SrcBytes = case(NetworkDirection == "Outbound", tolong(SentBytes)
                    , NetworkDirection == "Inbound", tolong(ReceivedBytes)
                    , NetworkDirection == "Local" and SrcZone == "WAN", tolong(ReceivedBytes)
                    , NetworkDirection == "Local" and SrcZone != "WAN", tolong(SentBytes)
                    , tolong(long(null))
                    )
    , DstBytes = case(NetworkDirection == "Outbound", tolong(ReceivedBytes)
                    , NetworkDirection == "Inbound", tolong(SentBytes)
                    , NetworkDirection == "Local" and DstZone == "WAN", tolong(SentBytes)
                    , NetworkDirection == "Local" and DstZone != "WAN", tolong(ReceivedBytes)
                    , tolong(long(null))
                    )
  | extend
    SrcAppType = case(isempty(SrcAppName), ""
                      , SrcAppName contains "\'General " or SrcAppName contains "\'Service ", "Service", "Other")
    , DstAppType = case(isempty(DstAppName), ""
                      , DstAppName contains "\'General " or DstAppName contains "\'Service ", "Service", "Other")
  | project-rename
      sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)
    , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)
  | extend
      DstPackets = case(NetworkDirection == "Outbound", tolong(sosReceivedPackets)
                    , NetworkDirection == "Inbound", tolong(sosSentPackets)
                    , tolong(long(null))
                    )
    , SrcPackets = case(NetworkDirection == "Outbound", tolong(sosSentPackets)
                    , NetworkDirection == "Inbound", tolong(sosReceivedPackets)
                    , tolong(long(null))
                    )
  | project-rename
      sosConnectionDuration = DeviceCustomNumber3Label // Applies to "Connection Closed"
    , sosUser = susr // Logged-in username associated with the log event.
    , sosAppRulePolicyId = af_polid // App Rule Policy ID.
    , sosAppRulePolicyName = af_policy // App Rule Policy Name.
    , sosAppRuleService = af_service // App Rule Service Name.
    , sosAppRuleType = af_type // App Rule Policy Type.
    , sosAppRuleObject = af_object // App Rule Object Name.
    , sosAppRuleObjectContent = contentObject // App Rule Object Content.
    , sosAppRuleAction = af_action // App Rule Action.
    , sosSourceIPv6Address = srcV6 // Source IPv6 IP
    , sosDestinationIPv6Address = dstV6 // Destination IPv6 IP
    , sosAppFullString = appcat // The full "<CATEGORY> <APPNAME> -- <SIGNAME>" string.
    , sosAppIDNumber = app // Numeric Application ID. Not the same as "ApplicationProtocol".
    , sosAppID = appid // Application ID from App Control
    , sosAppCategoryID = catid // Application Category ID
    , sosAppSignatureID = sid // Application Signature ID
    , sosIPSCategoryName = ipscat // IPS Category Name
    , sosAntiSpywareCategory = spycat // Anti-Spyware Category
    , sosURLPathName = arg // URL. Represents the URL path name.
    , sosFileIdentifier = fileid // File hash or URL
    , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
    , DstNatPortNumber = dnpt
    , SrcNatPortNumber = snpt
    , sosBladeID = bid // Blade ID
    , sosUUID = uuid
    , sosFileName = FileName
    , DvcOriginalAction = fw_action
  | extend
    ThreatName = coalesce(sosASWSignatureName, sosGAVSignatureName, sosIPSSignatureName, "")
    , ThreatId = coalesce(sosAppSignatureID, "")
    , ThreatCategory = coalesce(sosIPSCategoryName, sosAntiSpywareCategory, "")
    , DstNatPortNumber = toint(DstNatPortNumber)
    , SrcNatPortNumber = toint(SrcNatPortNumber)
  | extend AdditionalFields = bag_pack(
    "AppRulePolicyId", sosAppRulePolicyId
    , "AppRulePolicyName", sosAppRulePolicyName
    , "AppRuleService", sosAppRuleService
    , "AppRuleType", sosAppRuleType
    , "AppRuleObject", sosAppRuleObject
    , "AppRuleObjectContent", sosAppRuleObjectContent
    , "AppRuleAction", sosAppRuleAction
    , "AppID", sosAppID
    , "AppCategoryID", sosAppCategoryID
    , "IPSCategoryName", sosIPSCategoryName
    , "AntiSpywareCategory", sosAntiSpywareCategory
    , "URLPathName", sosURLPathName
    , "FileIdentifier", sosFileIdentifier
    , "DPIInspectedFlow", sosDPIInspectedFlow
    , "BladeID", sosBladeID
    , "UUID", sosUUID
    , "FileName", sosFileName
    , "FileSize", FileSize
    , "CaptureATPVerdict", sosCaptureATPVerdict
    , "CFSCategoryID", sosCFSCategoryID
    , "CFSCategoryName", sosCFSCategoryName
    , "CFSPolicyName", sosCFSPolicyName
    , "AppControlFileName", sosAppControlFileName
    , "IPSFullString", sosIPSFullString
    , "IPSSignatureName", sosIPSSignatureName
    , "LogMsgCategory", sosLogMsgCategory
    , "LogMsgNote", sosLogMsgNote
    , "LogMsgSeverity", sosLogMsgSeverity
    , "SourceVPNPolicyName", sosSourceVPNPolicyName
    , "DestinationVPNPolicyName", sosDestinationVPNPolicyName
    , "EventMessageDetail", sosEventMessageDetail
    , "UserSessionType", sosUserSessionType
    , "UserSessionDuration", sosUserSessionDuration
    )
  | project-away
      DeviceEventCategory
    , gcat
    , RequestMethod
    , RequestURL_
    , ipspri
    , spypri
    , sos*
    , Protocol
    , appName
    , AdditionalExtensions
    , Flex*
    , Indicator*
    , Malicious*
    , Field*
    , DeviceCustom*
    , Old*
    , File*
    , Source*
    , Destination*
    , Device*
    , SimplifiedDeviceAction
    , ExternalID
    , ExtID
    , TenantId
    , ProcessName
    , ProcessID
    , ExtID
    , OriginalLogSeverity
    , LogSeverity
    , EventOutcome
    , StartTime
    , EndTime
    , ReceiptTime
    , Remote*
    , ThreatDescription
    , ThreatSeverity
    , RequestContext
    , RequestCookies
    , CommunicationDirection
    , ReportReferenceLink
    , ReceivedBytes
    , SentBytes
    , _ResourceId
    , _ItemId
  | project-reorder
      TimeGenerated
    , EventVendor
    , EventProduct
    , DvcDescription
    , Dvc
    , DvcOs
    , DvcOsVersion
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)