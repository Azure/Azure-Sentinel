Parser:
  Title: Web Session ASIM parser for Fortinet FortiGate
  Version: '0.2.2'
  LastUpdated: Sep 12, 2025
Product:
  Name: Fortinet FortiGate
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: web log fields
  Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/400992  
- Title: Fortinet FortiGate CEF setup
  Link: https://community.fortinet.com/t5/FortiGate/Technical-Tip-Integrate-FortiGate-with-Microsoft-Sentinel/ta-p/199709
- Title: Fortinet FortiGate syslogd documentation
  Link: https://docs.fortinet.com/document/fortigate/7.2.0/cli-reference/450620/config-log-syslogd-setting
- Title: Fortinet FortiGate extended logging for user agent, http method and x-forwarded-for
  Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/496081/enabling-extended-logging
Description: |
  This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionFortinetFortiGate
EquivalentBuiltInParser: _ASim_WebSession_FortinetFortiGate
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)
  [
    "passthrough","Allow","Success"
    , "blocked","Deny","Failure"
  ];
  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
  [
    "1", "Informational", // Debug
    "2", "Informational", // Information
    "3", "Informational", // Notification
    "4", "Low", // Warning
    "5", "Low", // Error
    "6", "High", // Critical
    "7", "Medium", // Alert
    "8", "High" // Emergency
  ];
  let parser=(disabled:bool=false){
    CommonSecurityLog
    | where not(disabled)
    | where DeviceVendor  == "Fortinet" 
        and DeviceProduct startswith "Fortigate"
        and Activity has_all ('webfilter', 'utm')
    | lookup EventLookup on DeviceAction 
    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName, ApplicationProtocol
    | project-rename 
      Url                     = RequestURL
      , UrlCategory           = RequestContext
      , DstBytes              = ReceivedBytes
      , DstInterfaceName      = DeviceOutboundInterface
      , DstIpAddr             = DestinationIP
      , DstPortNumber         = DestinationPort
      , DvcHostname           = Computer
      , EventMessage          = Activity
      , EventOriginalSeverity = LogSeverity
      , EventProduct          = DeviceProduct
      , EventProductVersion   = DeviceVersion
      , SrcBytes              = SentBytes
      , SrcInterfaceName      = DeviceInboundInterface
      , SrcIpAddr             = SourceIP
      , SrcPortNumber         = SourcePort
      , NetworkApplicationProtocol = ApplicationProtocol
      , DvcId                 = DeviceExternalID
      , EventUid              = _ItemId
      , SrcHostname           = SourceHostName
      , SrcUsername           = SourceUserName
      , DstUsername           = DestinationUserName
    | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
    | extend 
        DstUsernameType = _ASIM_GetUsernameType(DstUsername)
        , SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
    | project-rename DvcOriginalAction = DeviceAction
    | parse-kv AdditionalExtensions as (
            // FTNTFGT format for FortiGate
            FTNTFGTstart:datetime,
            FTNTFGTsrcintfrole:string,
            FTNTFGTdstintfrole:string,
            FTNTFGTexternalID:string,
            FTNTFGTpolicyid:int,
            FTNTFGTdstcountry:string,
            FTNTFGTsrccountry:string,
            FTNTFGTcrscore:string,
            FTNTFGTduration:int,
            FTNTFGTsentpkt:long,
            FTNTFGTrcvdpkt:long,
            // Simple format for FortiAnalyzer
            start:datetime,
            srcintfrole:string,
            dstintfrole:string,
            externalID:string,
            policyid:int,
            dstcountry:string,
            srccountry:string,
            crscore:string,
            duration:int,
            sentpkt:long,
            rcvdpkt:long,
            // Additional fields
            ['ad.referralurl']:string,
            ['ad.httpmethod']:string,
            ['ad.agent']:string
        ) with (pair_delimiter=';', kv_delimiter='=')
    | parse AdditionalExtensions with * "x-forwarded-for=" HttpRequestXff:string ";" *
    | invoke _ASIM_ResolveDstFQDN('DestinationHostName')
    | extend
        HttpReferrer            = ['ad.referralurl'],
        HttpRequestMethod       = ['ad.httpmethod'],
        HttpUserAgent           = ['ad.agent'],
        EventStartTime          = coalesce(FTNTFGTstart, start),
        SrcZone                 = coalesce(FTNTFGTsrcintfrole, srcintfrole),
        DstZone                 = coalesce(FTNTFGTdstintfrole, dstintfrole),
        NetworkSessionId        = coalesce(FTNTFGTexternalID, externalID),
        RuleNumber              = coalesce(FTNTFGTpolicyid, policyid),
        NetworkDuration         = coalesce(FTNTFGTduration, duration),
        DstGeoCountry           = coalesce(FTNTFGTdstcountry, dstcountry),
        SrcGeoCountry           = coalesce(FTNTFGTsrccountry, srccountry),
        ThreatOriginalRiskLevel = coalesce(FTNTFGTcrscore, crscore),
        SrcPackets              = coalesce(FTNTFGTsentpkt, sentpkt),
        DstPackets              = coalesce(FTNTFGTrcvdpkt, rcvdpkt)
    | extend
        temp_HttpRequestMethod = extract(@"rawdata=.*?Method=(.*?)(?:\||\;|$)", 1, AdditionalExtensions),
        temp_HttpUserAgent = extract(@"rawdata=.*?User-Agent=(.*?)(?:\||\;|$)", 1, AdditionalExtensions)
    | extend 
        HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),
        HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)
    | project-away temp_*
    | extend 
      EventCount               = int(1)
      , EventSchema            = "WebSession"
      , EventSchemaVersion     = "0.2.6"
      , EventType              = "HTTPsession"
      , EventVendor            = "Fortinet"
      , EventProduct           = "Fortigate"
      , DvcIdType              = "Other"
      , NetworkBytes           = DstBytes + SrcBytes
      , EventEndTime           = TimeGenerated
      , EventStartTime         = coalesce(EventStartTime, TimeGenerated)
      , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
          , DstIpAddr contains ":", "IPv6"
          , "")
      , NetworkPackets         = DstPackets + SrcPackets
      , UserAgent              = HttpUserAgent
      , Dvc                    = DvcHostname
      , User                   = SrcUsername
      , Hostname               = DstHostname
    | lookup SeverityLookup on EventOriginalSeverity
    | extend 
        Src       = SrcIpAddr,
        Dst       = DstIpAddr,
        SessionId = NetworkSessionId,
        IpAddr    = SrcIpAddr,
        Duration  = NetworkDuration,
        Rule      = tostring(RuleNumber)
    | project-away FTNTFGT*, start, srcintfrole, dstintfrole, externalID, policyid, 
      dstcountry, srccountry, crscore, duration, sentpkt, rcvdpkt,
      Protocol, AdditionalExtensions, NetworkProtocolNumber
  };
  parser (disabled=disabled)