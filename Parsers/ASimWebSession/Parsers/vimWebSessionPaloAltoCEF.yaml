Parser:
  Title: Web Session ASIM Filtering parser for Palo Alto Networks URL Filtering
  Version: '0.2.2'
  LastUpdated: Jul 15 2023
Product:
  Name: Palo Alto Networks
Normalization:
  Schema: WebSession
  Version: '0.2.5'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: URL Filter fields
  Link: https://docs.paloaltonetworks.com/pan-os/11-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/url-filtering-log-fields.html
- Title: Palo Alto Common Event Format Integration Guide [pdf]
  Link: https://docs.paloaltonetworks.com/content/dam/techdocs/en_US/pdf/cef/pan-os-10-0-cef-configuration-guide.pdf
Description: |
  This ASIM parser supports filtering and normalizing Palo Alto PanOS threat event logs delivered using CEF to the ASIM WebSession normalized schema. The Palo Alto threat events are generated by the Palo Alto URL filtering module and collected using the Palo Alto Networks connectors, Common Event Format (CEF) via AMA connector, or the Common Event Format (CEF) via Legacy Agent connector to the CommonSecurityLog table.
ParserName: vimWebSessionPaloAltoCEF
EquivalentBuiltInParser: _Im_WebSession_PaloAltoCEF
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser=(
    starttime:datetime=datetime(null), 
    endtime:datetime=datetime(null),
    srcipaddr_has_any_prefix:dynamic=dynamic([]),
    ipaddr_has_any_prefix:dynamic=dynamic([]), 
    url_has_any:dynamic=dynamic([]),
    httpuseragent_has_any:dynamic=dynamic([]),
    eventresultdetails_in:dynamic=dynamic([]),
    eventresult:string='*',
    disabled:bool=false
  )
  {
      let src_or_any                = set_union(
        srcipaddr_has_any_prefix,
        ipaddr_has_any_prefix
      ); 
      let EventLookup=datatable(DeviceAction:string, DvcAction:string,EventResult:string,HttpStatusCode:string)
      [
        "alert", "Allow", "Success","200",
        "allow", "Allow", "Success", "200",
        "continue", "Allow", "Success", "200",
        "override", "Allow", "Success", "200",
        "block-continue", "Allow", "Partial", "200",
        "block-url", "Deny", "Failure", "503",
        "block-override", "Deny", "Failure", "302",
        "override-lockout", "Deny", "Failure","503",
        "reset client", "Reset Source", "Failure", "503",
        "reset server", "Reset Destination", "Failure", "503",
        "reset both", "Reset", "Failure", "503",
        "deny", "Deny", "Failure", "503",
        "drop", "Drop", "Failure", "503",
        "drop ICMP", "Drop ICMP", "Failure", "503"
      ];
      let SeverityLookup=datatable(LogSeverity:string,EventSeverity:string)
      [   
        1, "Informational", 
        2, "Low",
        3, "Medium",
        4, "Medium", 
        5, "High"
      ];
      let remove_protocol_from_list = (list:dynamic)
      {
        print list
        | mv-apply l = print_0 to typeof(string) on
        ( extend l = replace_regex (tostring(l), "^(?i:.*?)://", "") )
        | project l
      };
      CommonSecurityLog
      | where not(disabled)
      | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
      | where DeviceVendor == "Palo Alto Networks"
        and DeviceProduct == "PAN-OS"
        and Activity == "THREAT"
        and DeviceEventClassID == "url"
      | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))
      | where (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))
      | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)
      | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)
      | extend ASimMatchingIpAddr = case(
          array_length(src_or_any) == 0, "-",
          temp_DstMatch and temp_SrcMatch, "Both",
          temp_SrcMatch , "SrcIpAddr",
          temp_DstMatch, "DstIpAddr",
          "No match") 
      | where ASimMatchingIpAddr != "No match" 
      | project-away temp_*
      | extend EventResultDetails     = "NA"
      | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))
      | lookup EventLookup on DeviceAction
      | where (eventresult == '*' or EventResult =~ eventresult)
      | lookup SeverityLookup on LogSeverity
      | parse-kv AdditionalExtensions as (
          PanOSXForwarderfor:string,
          PanXFFIP:string,
          PanOSReferer:string,
          PanOSRuleUUID:string,
          PanSrcHostname:string,
          PanSrcMac:string,
          PanSrcDeviceCat:string,
          PanSrcDAG:string,
          PanOSSrcUUID:string,
          PanSrcDeviceProf:string,
          PanSrcDeviceModel:string,
          PanSrcDeviceVendor:string,
          PanSrcDeviceOS:string,
          PanSrcDeviceOSv:string,
          PanDstHostname:string,
          PanDstMac:string,
          PanDstDeviceCat:string,
          PanDstDAG:string,
          PanOSDstUUID:string,
          PanDstDeviceProf:string,
          PanDstDeviceModel:string,
          PanDstDeviceVendor:string,
          PanDstDeviceOS:string,
          PanDstDeviceOSv:string
        ) with (pair_delimiter=';', kv_delimiter='=')
      | extend 
        HttpRequestXff            = coalesce(PanOSXForwarderfor, PanXFFIP)
      | project-rename 
        DvcHostname               = Computer,
        HttpReferrer              = PanOSReferer,
        DstMacAddr                = PanDstMac,
        SrcMacAddr                = PanSrcMac,
        DstHostname               = PanDstHostname,
        SrcHostname               = PanSrcHostname,
        DvcId                     = DeviceExternalID,
        SrcZone                   = DeviceCustomString4,
        DstZone                   = DeviceCustomString5,
        UrlCategory               = DeviceCustomString2,
        DvcOriginalAction         = DeviceAction,
        EventUid                  = _ItemId,
        EventOriginalSeverity     = LogSeverity,
        EventProductVersion       = DeviceVersion,
        DvcInboundInterface       = DeviceInboundInterface,
        DvcOutboundInterface      = DeviceOutboundInterface,
        DstIpAddr                 = DestinationIP,
        DstPortNumber             = DestinationPort,
        SrcIpAddr                 = SourceIP,
        SrcPortNumber             = SourcePort,
        SrcUsername               = SourceUserName,
        DstUsername               = DestinationUserName,
        NetworkRuleName           = DeviceCustomString1,
        ThreatOriginalConfidence  = ThreatConfidence,
        DstNatIpAddr              = DestinationTranslatedAddress,
        DstNatPortNumber          = DestinationTranslatedPort,
        SrcNatIpAddr              = SourceTranslatedAddress,
        SrcNatPortNumber          = SourceTranslatedPort,
        HttpUserAgent             = RequestClientApplication
      | extend
        Dvc                       = DvcHostname,
        DvcIdType                 = "Other",
        EventType                 = "HTTPsession",
        EventSchema               = "WebSession",
        EventSchemaVersion        = "0.2.5",
        EventVendor               = "Palo Alto",
        EventProduct              = "PanOS",
        EventStartTime            = TimeGenerated,
        EventEndTime              = TimeGenerated,
        HttpRequestMethod         = toupper(RequestMethod),
        HttpContentFormat         = RequestContext,
        DstDomainType             = "FQDN",
        Src                       = SrcIpAddr,
        SrcUsernameType           = case(isempty(SrcUsername), "", 
          "Windows"),
        DstUsernameType           = case(isempty(DstUsername), "", 
          "Windows"),
        NetworkProtocolVersion    = case(
          DstIpAddr contains "."  , "IPv4",
          DstIpAddr contains ":"  , "IPv6",
          ""),
        NetworkDirection          = case(
          FlexString2 == "client-to-server", "Outbound",
          FlexString2 == "server-to-client", "Inbound",
          ""),
        IpAddr                    = SrcIpAddr,
        NetworkProtocol           = toupper(Protocol),
        User                      = SrcUsername,
        Rule                      = NetworkRuleName,
        NetworkSessionId          = tostring(DeviceCustomNumber1),
        DvcInterface              = DvcInboundInterface,
        Hostname                  = DstHostname,
        Url                       = trim('"', RequestURL),
        UserAgent                 = HttpUserAgent
      | extend
        DstFQDN                   = iif(Url contains ":", split(Url, ":")[0], split(Url, "/")[0]),
        SessionId                 = NetworkSessionId,
        ThreatField               = case(
          isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr",
          isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr",
          "")
      | extend 
        ThreatIpAddr                = case(
          ThreatField == "SrcIpAddr", SrcIpAddr,
          ThreatField == "DstIpAddr", DstIpAddr,
          ""),
        Dst                       = DstFQDN
      | project ASimMatchingIpAddr, DeviceVendor, Dst, DstDomainType, DstFQDN, DstHostname, DstIpAddr, DstMacAddr, DstNatIpAddr, DstNatPortNumber, DstPortNumber, DstUsername, DstUsernameType, DstZone, Dvc, DvcAction, DvcHostname, DvcId, DvcIdType, DvcInboundInterface, DvcInterface, DvcOriginalAction, DvcOutboundInterface, EventCount, EventEndTime, EventOriginalSeverity, EventProduct, EventProductVersion, EventResult, EventResultDetails, EventSchema, EventSchemaVersion, EventSeverity, EventStartTime, EventType, EventUid, EventVendor, Hostname, HttpContentFormat, HttpRequestMethod, HttpRequestXff, HttpStatusCode, IpAddr, NetworkDirection, NetworkProtocol, NetworkProtocolVersion, NetworkRuleName, NetworkSessionId, Protocol, RequestContext, Rule, SessionId, Src, SrcHostname, SrcIpAddr, SrcMacAddr, SrcNatIpAddr, SrcNatPortNumber, SrcPortNumber, SrcUsername, SrcUsernameType, SrcZone, ThreatField, ThreatIpAddr, ThreatOriginalConfidence, TimeGenerated, Type, Url, UrlCategory, User, HttpUserAgent, UserAgent
  };
  parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
