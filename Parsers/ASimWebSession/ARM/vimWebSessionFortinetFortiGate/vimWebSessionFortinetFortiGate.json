{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionFortinetFortiGate')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM filtering parser for Fortinet FortiGate",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionFortinetFortiGate",
        "query": "let parser=(\n  starttime:datetime               = datetime(null), \n  endtime:datetime                 = datetime(null),\n  srcipaddr_has_any_prefix:dynamic = dynamic([]),\n  ipaddr_has_any_prefix:dynamic    = dynamic([]), \n  url_has_any:dynamic              = dynamic([]),\n  httpuseragent_has_any:dynamic    = dynamic([]),\n  eventresultdetails_in:dynamic    = dynamic([]),\n  eventresult:string               = '*',\n  disabled:bool                    = false\n){\n  let src_or_any                = set_union(\n    srcipaddr_has_any_prefix,\n    ipaddr_has_any_prefix\n  ); \n  let remove_protocol_from_list = (list:dynamic)\n  {\n      print list\n      | mv-apply l = print_0 to typeof(string) on\n        (extend l = iff( l has @\"//\", substring(l, indexof(l, @'//') + 2), l ))\n      | project l\n  };\n  let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)\n  [\n      \"passthrough\",\"Allow\",\"Success\"\n      , \"blocked\",\"Deny\",\"Failure\"\n  ];\n  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels\n  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)\n  [\n    \"1\", \"Informational\", // Debug\n    \"2\", \"Informational\", // Information\n    \"3\", \"Informational\", // Notification\n    \"4\", \"Low\", // Warning\n    \"5\", \"Low\", // Error\n    \"6\", \"High\", // Critical\n    \"7\", \"Medium\", // Alert\n    \"8\", \"High\" // Emergency\n  ];     \n  CommonSecurityLog\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)\n  | where DeviceVendor == \"Fortinet\" \n    and DeviceProduct  startswith \"Fortigate\"\n    and (Activity has_all ('webfilter', 'utm') or Activity has_all ('ips', 'utm'))\n  | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))\n  | where (array_length(httpuseragent_has_any) == 0 or AdditionalExtensions has_any(httpuseragent_has_any))\n  | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)\n  | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)\n  | extend ASimMatchingIpAddr = case(\n      array_length(src_or_any) == 0, \"-\",\n      temp_DstMatch and temp_SrcMatch, \"Both\",\n      temp_SrcMatch , \"SrcIpAddr\",\n      temp_DstMatch, \"DstIpAddr\",\n      \"No match\") \n  | where ASimMatchingIpAddr != \"No match\" \n  | project-away temp_*\n  | where (array_length(eventresultdetails_in) == 0) \n  | lookup EventLookup on DeviceAction \n  | where (eventresult == '*' or EventResult =~ eventresult)\n  | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName, ASimMatchingIpAddr , ApplicationProtocol\n  | project-rename \n    Url                     = RequestURL\n    , UrlCategory           = RequestContext\n    , DstBytes              = ReceivedBytes\n    , DstInterfaceName      = DeviceOutboundInterface\n    , DstIpAddr             = DestinationIP\n    , DstPortNumber         = DestinationPort\n    , DvcHostname           = Computer\n    , EventMessage          = Activity\n    , EventOriginalSeverity = LogSeverity\n    , EventProductVersion   = DeviceVersion\n    , SrcBytes              = SentBytes\n    , SrcInterfaceName      = DeviceInboundInterface\n    , SrcIpAddr             = SourceIP\n    , SrcPortNumber         = SourcePort\n    , DvcId                 = DeviceExternalID\n    , EventUid              = _ItemId\n    , DstHostname           = DestinationHostName\n    , SrcHostname           = SourceHostName\n    , SrcUsername           = SourceUserName\n    , DstUsername           = DestinationUserName\n    , NetworkApplicationProtocol = ApplicationProtocol\n  | invoke _ASIM_ResolveNetworkProtocol ('Protocol')\n  | extend \n      DstUsernameType = _ASIM_GetUsernameType(DstUsername),\n      SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)\n  | project-rename DvcOriginalAction = DeviceAction\n  | parse-kv AdditionalExtensions as (\n        start:datetime,\n        srcintfrole:string,\n        dstintfrole:string,\n        externalID:string,\n        policyid:int,\n        dstcountry:string,\n        srccountry:string,\n        crscore:string,\n        duration:int,\n        sentpkt:long,\n        rcvdpkt:long,\n        ['ad.referralurl']:string,\n        ['ad.httpmethod']:string,\n        ['ad.agent']:string,\n        deviceSeverity:string,\n        ref:string,\n        msg:string,\n        profile:string,\n        incidentserialno:string,\n        policytype:string,\n        attack:string,\n        attackid:string,\n        logid:string,\n        direction:string,\n        subtype:string,\n        severity: string,\n        vd:string,\n        FTNTFGTattack:string,\n        FTNTFGTattackid:string,\n        FTNTFGTlogid:string,\n        FTNTFGTsubtype:string,\n        FTNTFGTvd:string,\n        FTNTFGTstart:datetime,\n        FTNTFGTsrcintfrole:string,\n        FTNTFGTdstintfrole:string,\n        FTNTFGTexternalID:string,\n        FTNTFGTpolicyid:int,\n        FTNTFGTdstcountry:string,\n        FTNTFGTsrccountry:string,\n        FTNTFGTcrscore:string,\n        FTNTFGTduration:int,\n        FTNTFGTsentpkt:long,\n        FTNTFGTrcvdpkt:long\n    ) with (pair_delimiter=';', kv_delimiter='=')\n  | parse AdditionalExtensions with * \"x-forwarded-for=\" HttpRequestXff:string \";\" *\n  | project-rename \n    HttpReferrer              =  ['ad.referralurl'],\n    HttpRequestMethod         = ['ad.httpmethod'],\n    HttpUserAgent             = ['ad.agent']\n  | extend \n    ThreatName              = coalesce(attack,FTNTFGTattack),\n    ThreatId                = coalesce(attackid,FTNTFGTattackid),\n    EventOriginalUid        = coalesce(logid,FTNTFGTlogid),\n    EventOriginalSubType    = coalesce(subtype,FTNTFGTsubtype),\n    EventStartTime          = coalesce(start,FTNTFGTstart),\n    SrcZone                 = coalesce(srcintfrole,FTNTFGTsrcintfrole),\n    DstZone                 = coalesce(dstintfrole,FTNTFGTdstintfrole),\n    NetworkSessionId        = coalesce(externalID,FTNTFGTexternalID),\n    RuleNumber              = coalesce(policyid,FTNTFGTpolicyid),\n    NetworkDuration         = coalesce(duration, FTNTFGTduration),\n    DstGeoCountry           = coalesce(dstcountry,FTNTFGTdstcountry),\n    SrcGeoCountry           = coalesce(srccountry,FTNTFGTsrccountry),\n    ThreatOriginalRiskLevel = coalesce(crscore,FTNTFGTcrscore),\n    SrcPackets              = coalesce(sentpkt,FTNTFGTsentpkt),\n    DstPackets              = coalesce(rcvdpkt,FTNTFGTrcvdpkt)\n  | project-away FTNTFGT*, attack, attackid, logid, subtype, start, srcintfrole, dstintfrole, externalID, policyid, dstcountry, srccountry, crscore, duration, sentpkt, rcvdpkt\n  | parse AdditionalExtensions with * \"Method=\" temp_HttpRequestMethod \"|User-Agent=\" temp_HttpUserAgent \";\" *\n  | extend \n      HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),\n      HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)\n  | project-away temp_*\n  | extend AdditionalFields =  bag_pack(\n                              \"incidentserialno\",incidentserialno, \n                              \"policytype\",policytype,\n                              \"profile\",profile,\n                              \"ref\",ref,\n                              \"vd\",vd,\n                              \"Message\",msg,\n                              \"deviceSeverity\", deviceSeverity,\n                              \"direction\", direction)\n  | extend \n    EventCount               = int(1)\n    , EventSchema            = \"WebSession\"\n    , EventSchemaVersion     = \"0.2.6\"\n    , EventType              = \"HTTPsession\"\n    , EventVendor            = \"Fortinet\"\n    , EventProduct = \"Fortigate\"\n    , DvcIdType              = \"Other\"\n    , NetworkBytes           = DstBytes + SrcBytes\n    , EventEndTime           = TimeGenerated\n    , EventStartTime         = coalesce(EventStartTime, TimeGenerated)\n    , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\n        , DstIpAddr contains \":\", \"IPv6\"\n        , \"\")\n    , NetworkPackets         = DstPackets + SrcPackets\n    , UserAgent              = HttpUserAgent\n    , Dvc                    = DvcHostname\n    , User                   = SrcUsername\n    , Hostname               = DstHostname\n  | lookup SeverityLookup on EventOriginalSeverity\n  | extend ipsseverity = case(\n      severity == \"low\", \"Low\",\n      severity == \"high\", \"High\",\n      severity == \"medium\", \"Medium\",\n      severity == \"info\", \"Informational\",\n      \"\"\n      )\n  | extend EventSeverity = iff(EventMessage has_all ('ips', 'utm'), ipsseverity, EventSeverity)\n  | extend \n      Src       = SrcIpAddr,\n      Dst       = DstIpAddr,\n      SessionId = NetworkSessionId,\n      IpAddr    = SrcIpAddr,\n      Duration  = NetworkDuration,\n      Rule      = tostring(RuleNumber)\n  | extend NetworkDirection = case(\n      direction == \"incoming\", \"Inbound\",\n      direction == \"outgoing\", \"Outbound\",\n      \"\")\n  | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber, severity, incidentserialno, policytype, profile, ref, msg, deviceSeverity, direction, vd, ipsseverity\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}