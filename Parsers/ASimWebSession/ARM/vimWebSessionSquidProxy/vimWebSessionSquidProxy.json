{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionSquidProxy')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM filtering parser for Squid Proxy",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionSquidProxy",
        "query": "let parser = (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  url_has_any:dynamic=dynamic([]),\n  httpuseragent_has_any:dynamic=dynamic([]),\n  eventresultdetails_in:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n ){\nSquidProxy_CL | where not(disabled)\n  // -- Pre filtering\n  | where  \n    (isnull(starttime) or TimeGenerated >= starttime) \n    and (isnull(endtime) or TimeGenerated <= endtime) \n    and (array_length(httpuseragent_has_any) == 0)\n    and ((array_length(url_has_any) == 0) or (RawData has_any (url_has_any)))\n    and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))\n    and ((array_length(ipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, ipaddr_has_any_prefix))\n    and ((array_length(eventresultdetails_in) == 0) or (RawData has_any (eventresultdetails_in)))\n  // -- Parse\n  | extend AccessRawLog = extract_all(@\"^(\\d+\\.\\d+)\\s+(\\d+)\\s(\\S+)\\s([A-Z_]+)\\/(\\d+)\\s(\\d+)\\s([A-Z]+)\\s(\\S+)\\s(\\S+)\\s([A-Z_]+)\\/(\\S+)\\s(\\S+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]\n  // -- Post filtering\n  | extend EventResultDetails = tostring(AccessRawLog[4])\n  | where array_length(eventresultdetails_in) == 0 or EventResultDetails in (eventresultdetails_in)\n  | extend EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), \";\", PeerStatus = tostring(AccessRawLog[9]))\n  | extend EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, \"Failure\", \"Success\")\n  | where eventresult == \"*\" or eventresult == EventResult\n  // -- Map\n  | project-rename\n    Dvc = Computer\n  | extend\n    EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), \n    NetworkDuration = toint(AccessRawLog[1]), \n    SrcIpAddr = tostring(AccessRawLog[2]), \n    DstBytes = tolong(AccessRawLog[5]), \n    HttpRequestMethod = tostring(AccessRawLog[6]), \n    // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.\n    Url = tostring(AccessRawLog[7]), \n    SrcUsername = tostring(AccessRawLog[8]), \n    DstIpAddr = tostring(AccessRawLog[10]), \n    HttpContentType = tostring(AccessRawLog[11]) \n  //\n  | extend \n    ASimMatchingIpAddr = case( \n      array_length(ipaddr_has_any_prefix) == 0             , \"-\",\n      has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix), \"DstIpAddr\",\n      has_any_ipv4_prefix(SrcIpAddr, ipaddr_has_any_prefix), \"SrcIpAddr\"\n                                                           , \"No match\"\n          )\n  // Post Filter\n  | where \n      (\n        (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n        and (ASimMatchingIpAddr != \"No match\")\n      )\n  // -- Constant fields\n  | extend \n    EventCount = int(1), \n    EventProduct = 'Squid Proxy', \n    EventVendor = 'Squid', \n    EventSchema = 'WebSession', \n    EventSchemaVersion = '0.2.3', \n    EventType = 'HTTPsession' \n  // -- Value normalization\n  | extend\n    SrcUsernameType = \"Unknown\",\n    SrcUsername = iff (SrcUsername == \"-\", \"\", SrcUsername), \n    HttpContentType = iff (HttpContentType in (\":\", \"-\"), \"\", HttpContentType), \n    DstIpAddrIsHost = DstIpAddr matches regex @\"^[^\\:]*[a-zA-Z]$\"\n  | extend \n    FQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)[\"Host\"])),\n    DstIpAddr = iif (DstIpAddr == \"-\" or DstIpAddrIsHost, \"\", DstIpAddr)\n  | extend \n    EventSeverity = iff(EventResult == \"Success\", \"Informational\", \"Low\")\n  | invoke _ASIM_ResolveDstFQDN ('FQDN')\n  // -- aliases\n  | extend \n    EventStartTime = EventEndTime,\n    Duration = NetworkDuration,\n    HttpStatusCode = EventResultDetails,\n    User = SrcUsername,\n    IpAddr = SrcIpAddr,\n    Src = SrcIpAddr,\n    Dst = DstHostname,\n    Hostname = DstHostname\n  | project-away AccessRawLog, RawData, *_s, MG, ManagementGroupName, SourceSystem, TenantId, DstIpAddrIsHost\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
