{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionPaloAltoCEF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM Filtering parser for Palo Alto Networks URL Filtering",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionPaloAltoCEF",
        "query": "let parser=(\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  url_has_any:dynamic=dynamic([]),\n  httpuseragent_has_any:dynamic=dynamic([]),\n  eventresultdetails_in:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n)\n{\n    let src_or_any                = set_union(\n      srcipaddr_has_any_prefix,\n      ipaddr_has_any_prefix\n    ); \n    let EventLookup=datatable(DeviceAction:string, DvcAction:string,EventResult:string,HttpStatusCode:string)\n    [\n      \"alert\", \"Allow\", \"Success\",\"200\",\n      \"allow\", \"Allow\", \"Success\", \"200\",\n      \"continue\", \"Allow\", \"Success\", \"200\",\n      \"override\", \"Allow\", \"Success\", \"200\",\n      \"block-continue\", \"Allow\", \"Partial\", \"200\",\n      \"block-url\", \"Deny\", \"Failure\", \"503\",\n      \"block-override\", \"Deny\", \"Failure\", \"302\",\n      \"override-lockout\", \"Deny\", \"Failure\",\"503\",\n      \"reset client\", \"Reset Source\", \"Failure\", \"503\",\n      \"reset server\", \"Reset Destination\", \"Failure\", \"503\",\n      \"reset both\", \"Reset\", \"Failure\", \"503\",\n      \"deny\", \"Deny\", \"Failure\", \"503\",\n      \"drop\", \"Drop\", \"Failure\", \"503\",\n      \"drop ICMP\", \"Drop ICMP\", \"Failure\", \"503\"\n    ];\n    let SeverityLookup=datatable(LogSeverity:string,EventSeverity:string)\n    [   \n      1, \"Informational\", \n      2, \"Low\",\n      3, \"Medium\",\n      4, \"Medium\", \n      5, \"High\"\n    ];\n    let remove_protocol_from_list = (list:dynamic)\n    {\n      print list\n      | mv-apply l = print_0 to typeof(string) on\n      ( extend l = replace_regex (tostring(l), \"^(?i:.*?)://\", \"\") )\n      | project l\n    };\n    CommonSecurityLog\n    | where not(disabled)\n    | where (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n    | where DeviceVendor == \"Palo Alto Networks\"\n      and DeviceProduct == \"PAN-OS\"\n      and Activity == \"THREAT\"\n      and DeviceEventClassID == \"url\"\n    | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))\n    | where (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))\n    | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)\n    | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)\n    | extend ASimMatchingIpAddr = case(\n        array_length(src_or_any) == 0, \"-\",\n        temp_DstMatch and temp_SrcMatch, \"Both\",\n        temp_SrcMatch , \"SrcIpAddr\",\n        temp_DstMatch, \"DstIpAddr\",\n        \"No match\") \n    | where ASimMatchingIpAddr != \"No match\" \n    | project-away temp_*\n    | extend EventResultDetails     = \"NA\"\n    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))\n    | lookup EventLookup on DeviceAction\n    | where (eventresult == '*' or EventResult =~ eventresult)\n    | lookup SeverityLookup on LogSeverity\n    | parse-kv AdditionalExtensions as (\n        PanOSXForwarderfor:string,\n        PanXFFIP:string,\n        PanOSReferer:string,\n        PanOSRuleUUID:string,\n        PanSrcHostname:string,\n        PanSrcMac:string,\n        PanSrcDeviceCat:string,\n        PanSrcDAG:string,\n        PanOSSrcUUID:string,\n        PanSrcDeviceProf:string,\n        PanSrcDeviceModel:string,\n        PanSrcDeviceVendor:string,\n        PanSrcDeviceOS:string,\n        PanSrcDeviceOSv:string,\n        PanDstHostname:string,\n        PanDstMac:string,\n        PanDstDeviceCat:string,\n        PanDstDAG:string,\n        PanOSDstUUID:string,\n        PanDstDeviceProf:string,\n        PanDstDeviceModel:string,\n        PanDstDeviceVendor:string,\n        PanDstDeviceOS:string,\n        PanDstDeviceOSv:string\n      ) with (pair_delimiter=';', kv_delimiter='=')\n    | extend \n      HttpRequestXff            = coalesce(PanOSXForwarderfor, PanXFFIP)\n    | project-rename \n      DvcHostname               = Computer,\n      HttpReferrer              = PanOSReferer,\n      DstMacAddr                = PanDstMac,\n      SrcMacAddr                = PanSrcMac,\n      DstHostname               = PanDstHostname,\n      SrcHostname               = PanSrcHostname,\n      DvcId                     = DeviceExternalID,\n      SrcZone                   = DeviceCustomString4,\n      DstZone                   = DeviceCustomString5,\n      UrlCategory               = DeviceCustomString2,\n      DvcOriginalAction         = DeviceAction,\n      EventUid                  = _ItemId,\n      EventOriginalSeverity     = LogSeverity,\n      EventProductVersion       = DeviceVersion,\n      DvcInboundInterface       = DeviceInboundInterface,\n      DvcOutboundInterface      = DeviceOutboundInterface,\n      DstIpAddr                 = DestinationIP,\n      DstPortNumber             = DestinationPort,\n      SrcIpAddr                 = SourceIP,\n      SrcPortNumber             = SourcePort,\n      SrcUsername               = SourceUserName,\n      DstUsername               = DestinationUserName,\n      NetworkRuleName           = DeviceCustomString1,\n      ThreatOriginalConfidence  = ThreatConfidence,\n      DstNatIpAddr              = DestinationTranslatedAddress,\n      DstNatPortNumber          = DestinationTranslatedPort,\n      SrcNatIpAddr              = SourceTranslatedAddress,\n      SrcNatPortNumber          = SourceTranslatedPort,\n      HttpUserAgent             = RequestClientApplication\n    | extend\n      Dvc                       = DvcHostname,\n      DvcIdType                 = \"Other\",\n      EventType                 = \"HTTPsession\",\n      EventSchema               = \"WebSession\",\n      EventSchemaVersion        = \"0.2.5\",\n      EventVendor               = \"Palo Alto\",\n      EventProduct              = \"PanOS\",\n      EventStartTime            = TimeGenerated,\n      EventEndTime              = TimeGenerated,\n      HttpRequestMethod         = toupper(RequestMethod),\n      HttpContentFormat         = RequestContext,\n      DstDomainType             = \"FQDN\",\n      Src                       = SrcIpAddr,\n      SrcUsernameType           = case(isempty(SrcUsername), \"\", \n        \"Windows\"),\n      DstUsernameType           = case(isempty(DstUsername), \"\", \n        \"Windows\"),\n      NetworkProtocolVersion    = case(\n        DstIpAddr contains \".\"  , \"IPv4\",\n        DstIpAddr contains \":\"  , \"IPv6\",\n        \"\"),\n      NetworkDirection          = case(\n        FlexString2 == \"client-to-server\", \"Outbound\",\n        FlexString2 == \"server-to-client\", \"Inbound\",\n        \"\"),\n      IpAddr                    = SrcIpAddr,\n      NetworkProtocol           = toupper(Protocol),\n      User                      = SrcUsername,\n      Rule                      = NetworkRuleName,\n      NetworkSessionId          = tostring(DeviceCustomNumber1),\n      DvcInterface              = DvcInboundInterface,\n      Hostname                  = DstHostname,\n      Url                       = trim('\"', RequestURL),\n      UserAgent                 = HttpUserAgent\n    | extend\n      DstFQDN                   = iif(Url contains \":\", split(Url, \":\")[0], split(Url, \"/\")[0]),\n      SessionId                 = NetworkSessionId,\n      ThreatField               = case(\n        isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Outbound\", \"SrcIpAddr\",\n        isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Inbound\", \"DstIpAddr\",\n        \"\")\n    | extend \n      ThreatIpAddr                = case(\n        ThreatField == \"SrcIpAddr\", SrcIpAddr,\n        ThreatField == \"DstIpAddr\", DstIpAddr,\n        \"\"),\n      Dst                       = DstFQDN\n    | project ASimMatchingIpAddr, DeviceVendor, Dst, DstDomainType, DstFQDN, DstHostname, DstIpAddr, DstMacAddr, DstNatIpAddr, DstNatPortNumber, DstPortNumber, DstUsername, DstUsernameType, DstZone, Dvc, DvcAction, DvcHostname, DvcId, DvcIdType, DvcInboundInterface, DvcInterface, DvcOriginalAction, DvcOutboundInterface, EventCount, EventEndTime, EventOriginalSeverity, EventProduct, EventProductVersion, EventResult, EventResultDetails, EventSchema, EventSchemaVersion, EventSeverity, EventStartTime, EventType, EventUid, EventVendor, Hostname, HttpContentFormat, HttpRequestMethod, HttpRequestXff, HttpStatusCode, IpAddr, NetworkDirection, NetworkProtocol, NetworkProtocolVersion, NetworkRuleName, NetworkSessionId, Protocol, RequestContext, Rule, SessionId, Src, SrcHostname, SrcIpAddr, SrcMacAddr, SrcNatIpAddr, SrcNatPortNumber, SrcPortNumber, SrcUsername, SrcUsernameType, SrcZone, ThreatField, ThreatIpAddr, ThreatOriginalConfidence, TimeGenerated, Type, Url, UrlCategory, User, HttpUserAgent, UserAgent\n};\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
