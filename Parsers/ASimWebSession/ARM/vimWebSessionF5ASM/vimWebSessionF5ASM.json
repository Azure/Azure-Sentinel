{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionF5ASM')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM parser for F5 BIG-IP Application Security Manager (ASM)",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionF5ASM",
        "query": "let DvcActionLookup = datatable (DeviceAction: string, DvcAction: string)\n[\n    \"Blocked\", \"Deny\",\n    \"blocked\", \"Deny\",\n    \"Passed\", \"Allow\",\n    \"passed\", \"Allow\",\n    \"Alerted\", \"Deny\",\n    \"alerted\", \"Deny\"\n];\nlet EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)\n    [\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Medium\",\n    \"5\", \"Medium\",\n    \"6\", \"Medium\",\n    \"7\", \"High\",\n    \"8\", \"High\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet parser = (\n    starttime: datetime=datetime(null),\n    endtime: datetime=datetime(null),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]),\n    ipaddr_has_any_prefix: dynamic=dynamic([]),\n    url_has_any: dynamic=dynamic([]),\n    httpuseragent_has_any: dynamic=dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string='*',\n    disabled: bool=false\n    ) {\n    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let DeviceEventClassIDList = dynamic([\"Brute Force Attack\", \"IP Enforcer Attack\", \"Web Scraping Attack\", \"DoS Attack\"]);\n    let AllData = CommonSecurityLog\n        | where not(disabled)\n        | where (isnull(starttime) or TimeGenerated >= starttime)\n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and DeviceVendor == \"F5\"\n            and DeviceProduct == \"ASM\"\n        | where ((substring(DeviceEventClassID, 0, 1) == \"2\" and strlen(DeviceEventClassID) == 9) or (DeviceEventClassID == Activity)) or (DeviceEventClassID in (DeviceEventClassIDList))\n        | where (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))\n        | extend\n            temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any)\n        | invoke _ASIM_ResolveDvcFQDN('DeviceName')\n        | project-rename DvcIpAddr = DeviceAddress;\n    let GeneralEnforcementData = AllData\n        | where ((substring(DeviceEventClassID, 0, 1) == \"2\" and strlen(DeviceEventClassID) == 9) or (DeviceEventClassID == Activity)) and (DeviceEventClassID !in (DeviceEventClassIDList))\n        | where (array_length(httpuseragent_has_any) == 0 or DeviceCustomString3 has_any(httpuseragent_has_any))\n        | where (array_length(eventresultdetails_in) == 0 or tostring(FieldDeviceCustomNumber1) has_any(eventresultdetails_in))\n        | extend temp_DstMatch1 = has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix)\n        | extend ASimMatchingIpAddr = case(\n                                  array_length(src_or_any) == 0,\n                                  \"-\",\n                                  temp_SrcMatch and temp_DstMatch1,\n                                  \"Both\",\n                                  temp_SrcMatch,\n                                  \"SrcIpAddr\",\n                                  temp_DstMatch1,\n                                  \"DstIpAddr\",\n                                  \"No match\"\n                              )\n        | where ASimMatchingIpAddr != \"No match\"\n        | parse-kv DeviceCustomString3 as (Host: string, [\"User-Agent\"]: string, Cookie: string, Referer: string) with (pair_delimiter=\"\\\\r\\\\n\", kv_delimiter=\":\")\n        | parse DeviceCustomString3 with * \"HTTP/\" HttpVersion: string \"\\\\r\\\\n\" rest: string\n        | extend\n            EventResultDetails = tostring(FieldDeviceCustomNumber1)\n        | extend\n            EventResult = iff(toint(EventResultDetails) >= 400 or DeviceAction =~ \"blocked\", \"Failure\", \"Success\")\n        | where eventresult == '*' or EventResult =~ eventresult\n        | project-rename \n            DstIpAddr = DestinationIP,\n            DstPortNumber = DestinationPort,\n            EventOriginalUid = ExtID,\n            HttpRequestMethod = RequestMethod,\n            NetworkApplicationProtocol = ApplicationProtocol,\n            HttpCookie = Cookie,\n            HttpHost = Host,\n            HttpReferrer = Referer,\n            HttpUserAgent = ['User-Agent'],\n            HttpRequestXff = DeviceCustomString5\n        | extend\n            HttpStatusCode = EventResultDetails,\n            AdditionalFields = bag_pack(\n                      \"Full Request\", DeviceCustomString3,\n                      \"Attack Type\", DeviceCustomString4,\n                      \"Policy Apply Date\", DeviceCustomDate1,\n                      \"Web Application Name\",\n                      DeviceCustomString2\n                  ),\n            Dst = DstIpAddr;\n    let AnomalyDetectionData = AllData\n        | where DeviceEventClassID in (DeviceEventClassIDList)\n        | where array_length(httpuseragent_has_any) == 0 \n        | where array_length(eventresultdetails_in) == 0\n        | extend temp_DstMatch2 = has_any_ipv4_prefix(DvcIpAddr, ipaddr_has_any_prefix)\n        | extend ASimMatchingIpAddr = case(\n                                  array_length(src_or_any) == 0,\n                                  \"-\",\n                                  temp_SrcMatch and temp_DstMatch2,\n                                  \"Both\",\n                                  temp_SrcMatch,\n                                  \"SrcIpAddr\",\n                                  temp_DstMatch2,\n                                  \"DstIpAddr\",\n                                  \"No match\"\n                              ),\n              EventResult = iff(DeviceAction =~ \"passed\", \"Success\", \"Failure\")\n        | where ASimMatchingIpAddr != \"No match\"\n        | where eventresult == '*' or EventResult =~ eventresult\n        | extend\n            AdditionalFields = bag_pack(\n                      \"Detection Average\",\n                      FieldDeviceCustomNumber1,\n                      \"Dropped Requests\",\n                      FieldDeviceCustomNumber2,\n                      \"Attack Status\",\n                      DeviceCustomString4,\n                      \"Detection Mode\",\n                      DeviceCustomString5,\n                      \"Web Application Name\",\n                      DeviceCustomString2\n                  ),\n            ThreatId = tostring(FieldDeviceCustomNumber3)\n        | project-away ApplicationProtocol, ExtID;\n    union GeneralEnforcementData, AnomalyDetectionData\n    | lookup DvcActionLookup on DeviceAction\n    | lookup EventSeverityLookup on LogSeverity\n    | extend \n        EventStartTime = todatetime(ReceiptTime),\n        EventOriginalType = iff(isempty(toint(DeviceEventClassID)), DeviceEventClassID, Activity)\n    | extend\n        EventCount = int(1),\n        EventSchema = \"WebSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventType = \"HTTPsession\"\n    | project-rename \n        EventProduct = DeviceProduct,\n        EventVendor = DeviceVendor,\n        EventUid = _ItemId,\n        EventOriginalSeverity = LogSeverity,\n        DvcOriginalAction = DeviceAction,\n        Url = RequestURL,\n        SrcIpAddr = SourceIP,\n        SrcGeoCountry = DeviceCustomString6,\n        SrcPortNumber = SourcePort,\n        SrcUserId = SourceUserID,\n        SrcUsername = SourceUserName,\n        EventMessage = Message,\n        EventProductVersion = DeviceVersion,\n        RuleName = DeviceCustomString1\n    | extend \n        SrcUserIdType = iff(isnotempty(SrcUserId), \"Other\", \"\"),\n        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n        SrcUserType = _ASIM_GetUserType(SrcUsername, SrcUserId),\n        Dvc = coalesce(DvcFQDN, DvcHostname, DvcIpAddr),\n        EventEndTime = EventStartTime,\n        Src = SrcIpAddr,\n        IpAddr = SrcIpAddr,\n        UserAgent = HttpUserAgent,\n        User = SrcUsername,\n        Rule = RuleName\n    | project-away\n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        Activity,\n        CommunicationDirection,\n        Computer,\n        EndTime,\n        EventOutcome,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        IndicatorThreatType,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        Protocol,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        SimplifiedDeviceAction,\n        StartTime,\n        TenantId,\n        ThreatDescription,\n        ThreatSeverity,\n        ThreatConfidence,\n        Reason,\n        ExternalID,\n        ReportReferenceLink,\n        ReceiptTime,\n        rest,\n        temp_*,\n        _ResourceId\n};\nparser(\n    starttime=starttime, \n    endtime=endtime,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  \n    ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n    url_has_any=url_has_any,\n    httpuseragent_has_any=httpuseragent_has_any,\n    eventresultdetails_in=eventresultdetails_in,\n    eventresult=eventresult,\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
