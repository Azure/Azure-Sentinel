{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimWebSessionBarracudaWAF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM parser for Barracuda WAF",
        "category": "ASIM",
        "FunctionAlias": "ASimWebSessionBarracudaWAF",
        "query": "let barracudaSchema = datatable(\n    ServerIP_s: string,\n    UnitName_s: string,\n    HTTPStatus_s: string,\n    Action_s: string,\n    Severity_s: string,\n    DeviceReceiptTime_s: string,\n    LogType_s: string,\n    ClientIP_s: string,\n    host_s: string,\n    HostIP_s: string,\n    BytesReceived_d: real,\n    ServerPort_d: real,\n    Cookie_s: string,\n    Referer_s: string,\n    Method_s: string,\n    BytesSent_d: real,\n    SessionID_s: string,\n    ClientPort_d: real,\n    AuthenticatedUser_s: string,\n    CertificateUser_s: string,\n    UserAgent_s: string,\n    URL_s: string,\n    CacheHit_d: real,\n    ProxyIP_s: string,\n    ProxyPort_d: real,\n    RuleType_s: string,\n    ServiceIP_s: string,\n    TimeTaken_d: real,\n    ServicePort_d: real,\n    ProtocolVersion_s: string,\n    _ResourceId: string,\n    RawData: string,\n    SourceIP: string,\n    Message: string,\n    Computer: string,\n    MG: string,\n    ManagementGroupName: string,\n    TenantId: string,\n    SourceSystem: string\n)[];\nlet SeverityLookup = datatable (severity: int, EventSeverity: string)\n  [\n    0, \"High\", \n    1, \"High\", \n    2, \"High\", \n    3, \"Medium\",\n    4, \"Low\",\n    5, \"Low\", \n    6, \"Informational\",\n    7, \"Informational\" \n];\nlet EventResultWFLookup = datatable (\n    Action_s: string,\n    EventResult_WF: string,\n    DvcAction: string\n)\n    [\n    \"LOG\", \"Success\", \"Allow\",\n    \"DENY\", \"Failure\", \"Deny\",\n    \"WARNING\", \"Success\", \"Allow\"\n];\nlet EventTypeLookup = datatable (\n    LogType_s: string,\n    EventType_lookup: string,\n    EventOriginalType: string\n)\n    [\n    \"WF\", \"HTTPsession\", \"Web Firewall\",\n    \"TR\", \"WebServerSession\", \"Access\"\n];\nlet parser = (disabled: bool=false)\n{\nlet BarracudaCustom = \n    union isfuzzy=true\n        barracudaSchema,\n        barracuda_CL\n    | where not(disabled) and (LogType_s in (\"WF\", \"TR\"))\n    | lookup EventResultWFLookup on Action_s\n    | lookup EventTypeLookup on LogType_s\n    | extend\n        EventType = EventType_lookup,\n        severity = toint(Severity_s)\n    | lookup SeverityLookup on severity\n    | extend\n        Dst = iff(LogType_s == \"WF\", ServiceIP_s, ServerIP_s),\n        EventCount = toint(1),\n        EventProduct = \"WAF\",\n        EventSchema = \"WebSession\",\n        EventSchemaVersion = \"0.2.6\",\n        EventVendor = \"Barracuda\",\n        status_code = toint(HTTPStatus_s)\n    | extend\n        EventResult_TR = case(\n                    status_code between (200 .. 299),\n                    \"Success\", \n                    status_code between (400 .. 599),\n                    \"Failure\",\n                    status_code between (300 .. 399),\n                    \"Partial\",\n                    \"NA\"\n                ),\n        RuleName = RuleType_s\n    | extend\n        Dvc = UnitName_s,\n        EventResult = iff(LogType_s == \"TR\", EventResult_TR, EventResult_WF),\n        EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))),\n        DstIpAddr = ServerIP_s,\n        SrcIpAddr = ClientIP_s,\n        DstBytes = tolong(BytesReceived_d),\n        DstPortNumber = toint(coalesce(ServerPort_d,ServicePort_d)),\n        HttpCookie = Cookie_s,\n        HttpReferrer = Referer_s,\n        HttpRequestBodyBytes = tolong(BytesReceived_d),\n        HttpRequestMethod = Method_s,\n        HttpResponseBodyBytes = tolong(BytesSent_d),\n        NetworkDuration = toint(TimeTaken_d),\n        HttpUserAgent = UserAgent_s,\n        NetworkSessionId = SessionID_s,\n        Rule = RuleName,\n        SrcPortNumber = toint(ClientPort_d),\n        SrcUsername = CertificateUser_s,\n        DstUsername = AuthenticatedUser_s,\n        Url = URL_s,\n        HttpResponseCacheControl = iff(\n                              CacheHit_d == 0,\n                              \"Response from the server\",\n                              \"Response from the cache\"\n                          ),\n        AdditionalFields = bag_pack(\n                      \"ProxyIP\",\n                      ProxyIP_s,\n                      \"ProxyPort\",\n                      ProxyPort_d\n                  ),\n        DvcHostname = host_s,\n        DvcIpAddr = HostIP_s,\n        EventResultDetails = HTTPStatus_s,\n        HttpVersion = ProtocolVersion_s\n    | extend \n        SrcUsernameType = iff(isnotempty(SrcUsername), \"Simple\", \"\"),\n        DstUsernameType = iff(isnotempty(DstUsername), \"Simple\", \"\")\n    | extend\n        Duration = NetworkDuration,\n        SessionId = NetworkSessionId,\n        EventEndTime = EventStartTime,\n        UserAgent = HttpUserAgent,\n        User = SrcUsername,\n        IpAddr = SrcIpAddr,\n        Src = SrcIpAddr,\n        HttpStatusCode = EventResultDetails\n    | project-away\n        *_d,\n        *_s,\n        _ResourceId,\n        severity,\n        status_code,\n        RawData,\n        EventResult_*,\n        SourceIP,\n        Message,\n        EventType_lookup,\n        Computer,\n        MG,\n        ManagementGroupName,\n        TenantId,\n        SourceSystem;\n    BarracudaCustom\n};\nparser(disabled=disabled)\n",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
