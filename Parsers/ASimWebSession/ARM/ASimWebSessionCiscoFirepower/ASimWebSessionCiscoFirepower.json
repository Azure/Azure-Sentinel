{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimWebSessionCiscoFirepower')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM parser for Cisco Firepower",
        "category": "ASIM",
        "FunctionAlias": "ASimWebSessionCiscoFirepower",
        "query": "let EventFieldsLookup = datatable(\n      DeviceAction: string, \n      DvcAction: string,\n      EventResult: string\n  )\n      [\n      \"Detect\", \"Allow\", \"Partial\",\n      \"Block\", \"Deny\", \"Failure\",\n      \"Malware Cloud Lookup\", \"Deny\", \"Failure\",\n      \"Malware Block\", \"Deny\", \"Failure\",\n      \"Malware Allow List\", \"Allow\", \"Success\",\n      \"Cloud Lookup Timeout\", \"Deny\", \"Failure\",\n      \"Custom Detection\", \"Allow\", \"Partial\",\n      \"Custom Detection Block\", \"Deny\", \"Failure\",\n      \"Archive Block-Depth Exceeded\", \"Deny\", \"Failure\",\n      \"Archive Block-Encrypted\", \"Encrypt\", \"Failure\",\n      \"Archive Block-Failed to Inspect\", \"Deny\", \"Failure\"\n  ];\n  let DirectionLookup = datatable (CommunicationDirection: string, NetworkDirection: string)[\n      \"1\", \"Inbound\",\n      \"2\", \"Outbound\"\n  ];\n  let parser=(disabled: bool=false) {\n      CommonSecurityLog\n      | where not(disabled) \n      | where DeviceVendor == \"Cisco\" and DeviceProduct == \"Firepower\"\n          and DeviceEventClassID in(\"File:500:1\", \"FileMalware:502:1\", \"FireAMP:125:1\")\n      | parse-kv AdditionalExtensions as (start: long) with (pair_delimiter=';', kv_delimiter='=')\n      | extend\n          EventMessage = iff(DeviceEventClassID == \"FireAMP:125:1\", DeviceCustomString5, \"\"),\n          ThreatName = iff(DeviceEventClassID == \"FireAMP:125:1\", DeviceCustomString2, \"\"),\n          Disposition = case(\n                  DeviceEventClassID == \"FireAMP:125:1\",\n                  DeviceCustomString3,\n                  DeviceEventClassID in (\"File:500:1\", \"FileMalware:502:1\"),\n                  DeviceCustomString2,\n                  \"\"\n              ),\n          AdditionalFields = todynamic(\n                      case(\n                              DeviceEventClassID == \"FireAMP:125:1\",\n                              bag_pack(\n                                      \"policy\", DeviceCustomString1,\n                                      \"process\", SourceProcessName,\n                                      \"connectionInstance\", ProcessID,\n                                      \"disposition\", DeviceCustomString3,\n                                      \"event type id\", EventOutcome\n                                  ),\n                              DeviceEventClassID in (\"File:500:1\", \"FileMalware:502:1\"),\n                              bag_pack(\n                                      \"connectionInstance\", ProcessID,\n                                      \"signaturedata\", DeviceCustomString4,\n                                      \"disposition\", DeviceCustomString2\n                                  ),\n                              \"\"\n                          )\n                  )\n      | invoke _ASIM_ResolveNetworkProtocol('Protocol')\n      | extend NetworkProtocol = iff(NetworkProtocol == \"Unassigned\" and Protocol !in (63, 68, 99, 114, 253, 254), Protocol, NetworkProtocol)\n      | lookup DirectionLookup on CommunicationDirection\n      | lookup EventFieldsLookup on DeviceAction\n      | extend\n          EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),\n          DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),\n          SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),\n          EventSeverity = case(\n                      DvcAction == \"Allow\" and Disposition =~ \"Malware\",\n                      \"High\",\n                      DvcAction == \"Deny\" and Disposition =~ \"Malware\",\n                      \"Medium\",\n                      DvcAction == \"Deny\" and Disposition !~ \"Malware\",\n                      \"Low\",\n                      \"Informational\"\n                  ),\n          EventOriginalType = case(\n                          DeviceEventClassID has \"File:500:1\",\n                          \"File Event\",\n                          DeviceEventClassID has \"FileMalware:502:1\",\n                          \"FileMalware Event\",\n                          Activity\n                      ),\n          FileContentType = FileType,\n          HttpContentType = FileType,\n          FileSize = tolong(FileSize),\n          ThreatCategory = iff(Disposition =~ \"Malware\", Disposition, \"\")\n      | extend Ip_device = iff(DeviceName matches regex \"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\", DeviceName, \"\")\n      | extend\n          DvcIpAddr = Ip_device,\n          DeviceName = iff(isempty(Ip_device), DeviceName, \"\")\n      | extend host = coalesce(DeviceName, Computer)\n      | invoke _ASIM_ResolveDvcFQDN('host')\n      | extend \n          EventCount = int(1),\n          EventSchema = \"WebSession\",\n          EventSchemaVersion = \"0.2.6\",\n          EventType = \"HTTPsession\"\n      | project-rename\n          EventVendor = DeviceVendor,\n          EventProduct = DeviceProduct,\n          EventProductVersion = DeviceVersion,\n          DstPortNumber = DestinationPort,\n          SrcUsername = SourceUserName,\n          DstUsername = DestinationUserName,\n          Url = RequestURL,\n          FileSHA256 = FileHash,\n          SrcPortNumber = SourcePort,\n          EventOriginalSeverity = LogSeverity,\n          EventOriginalUid = ExtID,\n          NetworkApplicationProtocol = ApplicationProtocol,\n          EventUid = _ItemId,\n          DvcId = DeviceExternalID,\n          DvcOriginalAction = DeviceAction,\n          HttpUserAgent = RequestClientApplication\n      | extend\n          SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),\n          SrcUserType = _ASIM_GetUserType(SrcUsername, \"\"),\n          DstUsernameType = _ASIM_GetUsernameType(DstUsername),\n          DstUserType = _ASIM_GetUserType(DstUsername, \"\"),\n          HashType = \"SHA256\",\n          DvcIdType = \"Other\",\n          NetworkProtocolVersion=case(DstIpAddr has \".\", \"IPv4\", DstIpAddr has \":\", \"IPv6\", \"\"),\n          IpAddr = SrcIpAddr,\n          Hash = FileSHA256,\n          User = SrcUsername,\n          UserAgent = HttpUserAgent,\n          EventEndTime = EventStartTime,\n          Dst = DstIpAddr,\n          Src = SrcIpAddr,\n          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr)\n      | project-away\n          Source*,\n          Destination*,\n          Device*,\n          start,\n          AdditionalExtensions,\n          Activity,\n          CommunicationDirection,\n          Computer,\n          EndTime,\n          EventOutcome,\n          FieldDevice*,\n          Flex*,\n          FileID,\n          FileModificationTime,\n          Old*,\n          FileCreateTime,\n          FilePermission,\n          IndicatorThreatType,\n          MaliciousIP*,\n          Message,\n          OriginalLogSeverity,\n          Process*,\n          Protocol,\n          ReceivedBytes,\n          SentBytes,\n          Remote*,\n          Request*,\n          SimplifiedDeviceAction,\n          StartTime,\n          TenantId,\n          ThreatDescription,\n          ThreatSeverity,\n          FilePath,\n          FileType,\n          Reason,\n          ReceiptTime,\n          ExternalID,\n          ReportReferenceLink,\n          Ip_*,\n          host*,\n          _ResourceId,\n          NetworkProtocolNumber,\n          Disposition,\n          ThreatConfidence\n  };\n  parser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
