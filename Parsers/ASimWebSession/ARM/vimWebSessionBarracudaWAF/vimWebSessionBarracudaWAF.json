{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionBarracudaWAF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM filtering parser for Barracuda WAF",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionBarracudaWAF",
        "query": "let barracudaSchema = datatable(\n     ServerIP_s: string,\n     UnitName_s: string,\n     HTTPStatus_s: string,\n     Action_s: string,\n     Severity_s: string,\n     DeviceReceiptTime_s: string,\n     LogType_s: string,\n     ClientIP_s: string,\n     host_s: string,\n     HostIP_s: string,\n     BytesReceived_d: real,\n     ServerPort_d: real,\n     Cookie_s: string,\n     Referer_s: string,\n     Method_s: string,\n     BytesSent_d: real,\n     SessionID_s: string,\n     ClientPort_d: real,\n     AuthenticatedUser_s: string,\n     CertificateUser_s: string,\n     UserAgent_s: string,\n     URL_s: string,\n     CacheHit_d: real,\n     ProxyIP_s: string,\n     ProxyPort_d: real,\n     RuleType_s: string,\n     ServiceIP_s: string,\n     TimeTaken_d: real,\n     ServicePort_d: real,\n     ProtocolVersion_s: string,\n     _ResourceId: string,\n     RawData: string,\n     SourceIP: string,\n     Message: string,\n     Computer: string,\n     MG: string,\n     ManagementGroupName: string,\n     TenantId: string,\n     SourceSystem: string,\n     TimeGenerated: datetime\n )[];\n let SeverityLookup = datatable (severity: int, EventSeverity: string)\n     [\n     0, \"High\", \n     1, \"High\", \n     2, \"High\", \n     3, \"Medium\",\n     4, \"Low\",\n     5, \"Low\", \n     6, \"Informational\",\n     7, \"Informational\" \n ];\n let EventResultWFLookup = datatable (\n     Action_s: string,\n     EventResult_WF: string,\n     DvcAction: string\n )\n     [\n     \"LOG\", \"Success\", \"Allow\",\n     \"DENY\", \"Failure\", \"Deny\",\n     \"WARNING\", \"Success\", \"Allow\"\n ];\n let EventTypeLookup = datatable (\n     LogType_s: string,\n     EventType_lookup: string,\n     EventOriginalType: string\n )\n     [\n     \"WF\", \"HTTPsession\", \"Web Firewall\",\n     \"TR\", \"WebServerSession\", \"Access\"\n ];\n let parser = (\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null),\n     srcipaddr_has_any_prefix: dynamic=dynamic([]), \n     ipaddr_has_any_prefix: dynamic=dynamic([]), \n     url_has_any: dynamic=dynamic([]),\n     httpuseragent_has_any: dynamic=dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string='*',\n     disabled: bool=false\n     ) {\n let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n let BarracudaCustom = \n     union isfuzzy=true\n         barracudaSchema,\n         barracuda_CL\n     | where not(disabled) and (LogType_s in (\"WF\", \"TR\"))\n     | where (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n     | where (array_length(url_has_any) == 0 or URL_s has_any (url_has_any))\n     | where (array_length(httpuseragent_has_any) == 0 or UserAgent_s has_any(httpuseragent_has_any))\n     | where (array_length(eventresultdetails_in) == 0 or tostring(HTTPStatus_s) has_any(eventresultdetails_in))\n     | extend\n         temp_SrcMatch = has_any_ipv4_prefix(ClientIP_s, src_or_any),\n         temp_DstMatch = has_any_ipv4_prefix(ServerIP_s, ipaddr_has_any_prefix)\n     | extend ASimMatchingIpAddr = case(\n                                 array_length(src_or_any) == 0,\n                                 \"-\",\n                                 temp_SrcMatch and temp_DstMatch,\n                                 \"Both\",\n                                 temp_SrcMatch,\n                                 \"SrcIpAddr\",\n                                 temp_DstMatch,\n                                 \"DstIpAddr\",\n                                 \"No match\"\n                             )\n     | where ASimMatchingIpAddr != \"No match\" \n     | lookup EventResultWFLookup on Action_s\n     | extend\n         status_code = toint(HTTPStatus_s)\n     | extend EventResult_TR = case(\n                               status_code between (200 .. 299),\n                               \"Success\", \n                               status_code between (400 .. 599),\n                               \"Failure\",\n                               status_code between (300 .. 399),\n                               \"Partial\",\n                               \"NA\"\n                           )\n     | extend EventResult = iff(LogType_s == \"TR\", EventResult_TR, EventResult_WF)\n     | where (eventresult == '*' or EventResult =~ eventresult)\n     | lookup EventTypeLookup on LogType_s\n     | extend\n         EventType = EventType_lookup,\n         severity = toint(Severity_s)\n     | lookup SeverityLookup on severity\n     | extend\n         Dst = iff(LogType_s == \"WF\", ServiceIP_s, ServerIP_s),\n         EventCount = toint(1),\n         EventProduct = \"WAF\",\n         EventSchema = \"WebSession\",\n         EventSchemaVersion = \"0.2.6\",\n         EventVendor = \"Barracuda\"\n     | extend\n         Dvc = UnitName_s,\n         DstIpAddr = ServerIP_s,\n         SrcIpAddr = ClientIP_s,\n         DstBytes = tolong(BytesReceived_d),\n         DstPortNumber = toint(coalesce(ServerPort_d,ServicePort_d)),\n         HttpCookie = Cookie_s,\n         HttpReferrer = Referer_s,\n         HttpRequestBodyBytes = tolong(BytesReceived_d),\n         HttpRequestMethod = Method_s,\n         HttpResponseBodyBytes = tolong(BytesSent_d),\n         NetworkDuration = toint(TimeTaken_d),\n         HttpUserAgent = UserAgent_s,\n         NetworkSessionId = SessionID_s,\n         RuleName = RuleType_s,\n         SrcPortNumber = toint(ClientPort_d),\n         SrcUsername = CertificateUser_s,\n         Url = URL_s,\n         HttpResponseCacheControl = iff(\n                               CacheHit_d == 0,\n                               \"Response from the server\",\n                               \"Response from the cache\"\n                           ),\n         AdditionalFields = bag_pack(\n                       \"ProxyIP\",\n                       ProxyIP_s,\n                       \"ProxyPort\",\n                       ProxyPort_d\n                   ),\n         DvcHostname = host_s,\n         DvcIpAddr = HostIP_s,\n         EventResultDetails = HTTPStatus_s,\n         DstUsername = AuthenticatedUser_s,\n         HttpVersion = ProtocolVersion_s,\n         EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)))\n     | extend \n         SrcUsernameType = iff(isnotempty(SrcUsername), \"Simple\", \"\"),\n         DstUsernameType = iff(isnotempty(DstUsername), \"Simple\", \"\"),\n         EventEndTime = EventStartTime\n     | extend\n         Duration = NetworkDuration,\n         HttpStatusCode = EventResultDetails,\n         Rule = RuleName,\n         SessionId = NetworkSessionId,\n         UserAgent = HttpUserAgent,\n         User = SrcUsername,\n         IpAddr = SrcIpAddr,\n         Src = SrcIpAddr\n     | project-away\n         *_d,\n         *_s,\n         _ResourceId,\n         severity,\n         EventType_lookup,\n         status_code,\n         RawData,\n         EventResult_*,\n         SourceIP,\n         Message,\n         Computer,\n         MG,\n         ManagementGroupName,\n         TenantId,\n         SourceSystem,\n         temp_*;\n     BarracudaCustom\n };\n parser(\n     starttime=starttime, \n     endtime=endtime,\n     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  \n     ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n     url_has_any=url_has_any,\n     httpuseragent_has_any=httpuseragent_has_any,\n     eventresultdetails_in=eventresultdetails_in,\n     eventresult=eventresult,\n     disabled=disabled\n )",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
