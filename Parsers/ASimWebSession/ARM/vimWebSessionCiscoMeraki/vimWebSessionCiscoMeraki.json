{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimWebSessionCiscoMeraki')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Web Session ASIM filtering parser for Cisco Meraki",
        "category": "ASIM",
        "FunctionAlias": "vimWebSessionCiscoMeraki",
        "query": "let ActionLookup = datatable (action: string, DvcAction: string, EventResult: string, EventSeverity: string)  [\n   'allow', 'Allow', 'Success', 'Informational',\n   'log', 'Allow', 'Success', 'Informational',\n   'accept', 'Allow', 'Success', 'Informational',\n   'block', 'Deny', 'Failure', 'Low',\n   'deny', 'Deny', 'Failure', 'Low',\n   'quarantine', 'Deny', 'Failure', 'Low'\n   ];\n let parser=(\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null),\n     srcipaddr_has_any_prefix: dynamic=dynamic([]),\n     ipaddr_has_any_prefix: dynamic=dynamic([]), \n     url_has_any: dynamic=dynamic([]),\n     httpuseragent_has_any: dynamic=dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string='*',\n     disabled: bool=false\n     ) {\n     let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n     let allData = union isfuzzy=true\n             (\n             meraki_CL\n             | project-rename LogMessage =  Message\n             ),\n             (\n             Syslog\n             | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))\n             | project-rename LogMessage =  SyslogMessage\n             );\n     let PreFilteredData = allData\n         | where not(disabled) and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)\n             and (LogMessage has \"urls\" or LogMessage has_all(\"security_event\", \"security_filtering_file_scanned\")) and (array_length(eventresultdetails_in) == 0)\n         | extend Parser = extract_all(@\"(\\d+.\\d+)\\s([\\w\\-\\_]+)\\s([\\w\\-\\_]+)\\s([\\S\\s]+)$\", dynamic([1, 2, 3, 4]), LogMessage)[0]\n         | extend\n             Epoch = tostring(Parser[0]),\n             LogType = tostring(Parser[2]),\n             Substring = tostring(Parser[3])\n         | extend EventStartTime = unixtime_seconds_todatetime(tolong(split(Epoch, \".\")[0]))\n         | where (array_length(url_has_any) == 0 or LogMessage has_any (url_has_any))\n             and (array_length(httpuseragent_has_any) == 0 or LogMessage has_any(httpuseragent_has_any))\n         | where LogType in (\"security_event\", \"urls\");\n     let SecurityEventData = PreFilteredData\n         | where LogType == \"security_event\"\n         | parse Substring with LogSubType: string \" \" temp_RestMessage: string\n         | where LogSubType == \"security_filtering_file_scanned\"\n         | parse-kv Substring as (disposition: string, action: string, sha256: string, name: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n         | parse Substring with * \" sha256\" fsha256: string \" \"restmessage: string\n         | extend disposition = trim('\"', disposition),\n                 action = trim('\"', action),\n                 sha256 = trim('\"', sha256),\n                 fsha256 = trim('\"', fsha256),\n                 name = trim('\"', name)\n         | lookup ActionLookup on action;\n     let UrlsData = PreFilteredData\n         | where LogType == \"urls\"\n         | parse Substring with * \"request:\" request: string \" \" urls: string;\n     union SecurityEventData, UrlsData\n     | parse-kv Substring as (src: string, dst: string, url: string, mac: string, agent: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n     | where (array_length(httpuseragent_has_any) == 0 or agent has_any(httpuseragent_has_any))\n     | extend\n         src = trim('\"', src),\n         dst = trim('\"', dst),\n         url = trim('\"', url),\n         urls = trim('\"', urls)\n     | extend Url = coalesce(url, urls)\n     | where array_length(url_has_any) == 0 or Url has_any (url_has_any)\n     | extend EventResult=case(\n                           LogType == \"urls\", \"Success\",\n                           isempty(EventResult), \"NA\",\n                           EventResult                        \n                       )\n     | where (eventresult == '*' or EventResult =~ eventresult)\n     | parse src with *  \"[\" temp_srcip: string \"]:\" temp_srcport: string\n     | parse dst with *  \"[\" temp_dstip: string \"]:\" temp_dstport: string\n     | extend\n         agent= trim('\"', agent),\n         mac = trim('\"', mac)\n     | extend SrcIpAddr = iff(\n                         src has \".\",\n                         split(src, \":\")[0], \n                         coalesce(temp_srcip, src)\n                     )\n     | extend DstIpAddr = iff(\n                         dst has \".\",\n                         split(dst, \":\")[0], \n                         coalesce(temp_dstip, dst)\n                     )\n     | extend\n         temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, src_or_any),\n         temp_DstMatch=has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix)\n     | extend ASimMatchingIpAddr=case(\n                                   array_length(src_or_any) == 0,\n                                   \"-\",\n                                   temp_SrcMatch and temp_DstMatch,\n                                   \"Both\",\n                                   temp_SrcMatch,\n                                   \"SrcIpAddr\",\n                                   temp_DstMatch,\n                                   \"DstIpAddr\",\n                                   \"No match\"\n                               )\n     | where ASimMatchingIpAddr != \"No match\"\n     | extend SrcPortNumber = toint(\n                                 iff (\n                                     src has \".\",\n                                     split(src, \":\")[1],\n                                     temp_srcport\n                                 )\n                             )\n     | extend DstPortNumber = toint(\n                                 iff (\n                                     dst has \".\",\n                                     split(dst, \":\")[1],\n                                     temp_dstport\n                                 )\n                             )\n     | extend\n         EventSeverity=case(\n                   DvcAction == \"Deny\" and disposition == \"malicious\",\n                   \"Medium\",\n                   DvcAction == \"Allow\" and disposition == \"malicious\",\n                   \"High\",\n                   isnotempty(EventSeverity), EventSeverity,\n                   \"Informational\"\n               )\n     | extend\n         EventType = \"HTTPsession\",\n         HttpUserAgent = agent,\n         HttpRequestMethod = request,\n         FileSHA256 = coalesce(sha256, fsha256),\n         FileName = name,\n         DvcMacAddr = mac,\n         EventOriginalType = LogType,\n         EventOriginalSubType = LogSubType,\n         EventUid = _ResourceId\n     | extend Device = tostring(Parser[1])\n     | invoke _ASIM_ResolveDvcFQDN('Device')\n     | extend \n         Dst = DstIpAddr,\n         Src = SrcIpAddr,\n         Dvc = DvcHostname,\n         IpAddr = SrcIpAddr,\n         UserAgent = HttpUserAgent,\n         EventEndTime = EventStartTime\n     | extend\n         EventCount=int(1),\n         EventProduct=\"Meraki\",\n         EventVendor=\"Cisco\",\n         EventSchema=\"WebSession\",\n         EventSchemaVersion=\"0.2.6\"\n     | project-away\n         LogMessage,\n         Parser,\n         LogType,\n         LogSubType,\n         Epoch,\n         Device,\n         src,\n         dst,\n         mac,\n         url,\n         urls,\n         disposition,\n         action,\n         request,\n         name,\n         sha256,\n         fsha256,\n         agent,\n         restmessage,\n         temp*,\n         Substring,\n         TenantId,\n         SourceSystem,\n         Computer,\n         _ResourceId,\n         MG,\n         ManagementGroupName,\n         RawData,\n         EventTime,\n         Facility,\n         HostName,\n         SeverityLevel,\n         ProcessID,\n         HostIP,\n         ProcessName\n };\n parser(\n     starttime=starttime, \n     endtime=endtime,\n     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n     ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n     url_has_any=url_has_any,\n     httpuseragent_has_any=httpuseragent_has_any,\n     eventresultdetails_in=eventresultdetails_in,\n     eventresult=eventresult,\n     disabled=disabled\n )",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
