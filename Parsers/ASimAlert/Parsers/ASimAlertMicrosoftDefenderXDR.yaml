Parser:
  Title: Alert Event ASIM parser for Microsoft Defender XDR
  Version: '0.1.0'
  LastUpdated: Oct 09, 2024
Product:
  Name: Microsoft Defender XDR
Normalization:
  Schema: AlertEvent
  Version: '0.1'
References:
- Title: ASIM Alert Schema
  Link: https://aka.ms/ASimAlertEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing the Microsoft Defender XDR logs to the ASIM Alert normalized schema.
ParserName: ASimAlertEventMicrosoftDefenderXDR
EquivalentBuiltInParser: _ASim_AlertEvent_MicrosoftDefenderXDR
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let IndicatorTypeLookup = datatable (EntityType: string, IndicatorType: string)
    [
    "User", "User",
    "Machine", "Host",
    "Process", "Process",
    "File", "File",
    "Ip", "Ip",
    "Url", "Url",
    "RegistryValue", "Registry",
    "CloudLogonSession", "LogonSession",
    "CloudApplication", "Application",
    "Mailbox", "Mailbox",
    "MailMessage", "Email",
    "CloudResource", "Cloud Resource"
    ];
    let IndicatorAssociationLookup = datatable (EvidenceRole: string, IndicatorAssociation: string)
        [
        "Related", "Associated",
        "Impacted", "Targeted"
    ];
    let RegistryValueTypeLookup = datatable (ValueType: string, RegistryValueType: string)
        [
        "ExpandString", "Reg_Expand_Sz"
    ];
    let AlertVerdictLookup = datatable (AlertVerdict_Custom: string, AlertVerdict: string)
        [
        "Malicious", "True Positive",
        "Suspicious", "True Positive",
        "NoThreatsFound", "Benign Positive"
    ];
    let AttackTacticSet = dynamic(["Exfiltration", "PrivilegeEscalation", "Persistence", "LateralMovement", "Execution", "Discovery", "InitialAccess", "CredentialAccess", "DefenseEvasion", "CommandAndControl", "Impact"]);
    let ThreatCategorySet = dynamic(["Malware", "Ransomware", "Trojan", "Virus", "Worm", "Adware", "Spyware", "Rootkit", "Cryptominor", "Phishing", "Spam", "MaliciousUrl", "Spoofing", "Security Policy Violation", "Unknown", "SuspiciousActivity"]);
    let parser = (
        disabled: bool=false) {
        AlertEvidence
        | where not(disabled)
        // Mapping Inspection Fields
        | extend 
            EventUid = AlertId,
            AlertName = Title,
            AlertVerdict_Custom = tostring(AdditionalFields.ThreatAnalysisSummary[0].Verdict),
            AlertVerdictDate_s = todatetime(AdditionalFields.ThreatAnalysisSummary[0].AnalysisDate),
            AttackTactics = iff(Categories has_any (AttackTacticSet), replace(@"[\[\]\""]", "", Categories), ""),
            AlertOriginalStatus = tostring(AdditionalFields.LastRemediationState),
            AlertStatus = iif(isnotempty(AdditionalFields.LastRemediationState), iif(AdditionalFields.LastRemediationState == "Active", "Active", "Closed"), ""),
            DetectionMethod = DetectionSource
        | lookup AlertVerdictLookup on AlertVerdict_Custom
        | lookup IndicatorTypeLookup on EntityType
        | lookup IndicatorAssociationLookup on EvidenceRole
        // Mapping Threat Fields
        | extend
            ThreatCategory = iif(Categories has_any (ThreatCategorySet), replace(@"[\[\]\""]", "", Categories), "")
        // Mapping User Entity
        | extend 
            UserId = coalesce(AccountObjectId, tostring(AdditionalFields.Account.AadUserId)),
            UserSid = coalesce(AccountSid, tostring(AdditionalFields.Account.Sid)),
            Username = coalesce(AccountUpn, tostring(AdditionalFields.Account.UserPrincipalName)),
            UserSessionId = tostring(AdditionalFields.SessionId),
            UserScopeId = tostring(AdditionalFields.AadTenantId),
            HttpUserAgent_s = tostring(AdditionalFields.UserAgent)
        | extend
            UserIdType = iif(isnotempty(UserId), "EntraUserID", iif(isnotempty(UserSid), "SID", "")),
            UserId = coalesce(UserId, UserSid),
            UserType = _ASIM_GetUserType(Username, UserSid),
            UsernameType = _ASIM_GetUsernameType(Username)
        // Mapping Device Entity
        | extend 
            DvcId = coalesce(DeviceId, tostring(AdditionalFields.Host.MachineId)),
            DvcIpAddr = coalesce(LocalIP, tostring(AdditionalFields.Host.IpInterfaces[0].Address), RemoteIP),
            DvcOs = tostring(coalesce(AdditionalFields.OSFamily, AdditionalFields.Host.OSFamily)),
            DvcOsVersion = tostring(coalesce(AdditionalFields.OSVersion, AdditionalFields.Host.OSVersion)),
            DeviceName = coalesce(DeviceName, tostring(AdditionalFields.Host.NetBiosName)),
            DvcScopeId = coalesce(tostring(split(AdditionalFields.AzureID, "/")[2]), (tostring(split(AdditionalFields.ResourceId, "/")[2])))
        | extend DvcIdType = iif(isnotempty(DvcId), "MDEid", "")
        | invoke _ASIM_ResolveDvcFQDN("DeviceName")
        // Mapping Additional Fields
        | extend
            GeoCity_s = AdditionalFields.Location.City,
            GeoCountry_s = AdditionalFields.Location.CountryCode,
            GeoLatitude_s = AdditionalFields.Location.Latitude,
            GeoLongitude_s = AdditionalFields.Location.Longitude,
            GeoRegion_s = AdditionalFields.Location.State
        // Mapping Process Entity
        | extend 
            ProcessId = AdditionalFields.ProcessId,
            ProcessCommandLine,
            ProcessName = iif(IndicatorType == "Process", iif(isnotempty(FolderPath) and isnotempty(FileName), strcat(FolderPath, '\\', FileName), FileName), ""),
            ProcessFileCompany = AdditionalFields.Publisher,
            // Parent Process Fields
            ParentProcessId_s = AdditionalFields.ParentProcess.ProcessId,
            ParentProcessCommandLine_s = AdditionalFields.ParentProcess.CommandLine,
            ParentProcessName_s = iif(IndicatorType == "Process", iif(isnotempty(AdditionalFields.ParentProcess.ImageFile.Directory) and isnotempty(AdditionalFields.ParentProcess.ImageFile.Name), strcat (AdditionalFields.ParentProcess.ImageFile.Directory, "\\", AdditionalFields.ParentProcess.ImageFile.Name), coalesce(AdditionalFields.ParentProcess.ImageFile.Name, AdditionalFields.ParentProcess.FriendlyName)), ""),
            ParentProcessSHA1_s = AdditionalFields.ParentProcess.ImageFile[0].SHA1,
            ParentProcessSHA256_s = AdditionalFields.ParentProcess.ImageFile[2].SHA256,
            ParentProcessMD5_s = AdditionalFields.ParentProcess.ImageFile[1].MD5
        // Mapping File Entity
        | extend 
            FileName,
            FileDirectory = FolderPath,
            FilePath = iff(isnotempty(FolderPath) and isnotempty(FileName), strcat(FolderPath, '\\', FileName), FileName),
            FileSHA1 = SHA1,
            FileSHA256 = SHA256,
            FileMD5 = AdditionalFields.FileHashes[1].Value,
            FileSize = FileSize
        // Mapping Url Entity
        | extend 
            Url = RemoteUrl
        // Mapping Registry Entity
        | extend 
            RegistryKey,
            RegistryValue = RegistryValueName,
            RegistryValueData,
            ValueType = tostring(AdditionalFields.ValueType)
        | lookup RegistryValueTypeLookup on ValueType
        // Mapping Application Entity
        | extend 
            AppId_s = ApplicationId,
            AppName_s = Application
        // Mapping Email Entity
        | extend 
            EmailMessageId = NetworkMessageId,
            EmailSubject
        | extend AdditionalFields = bag_pack(
                                    "AlertVerdictDate",
                                    AlertVerdictDate_s,
                                    "HttpUserAgent",
                                    HttpUserAgent_s,
                                    "GeoCity",
                                    GeoCity_s,
                                    "GeoCountry",
                                    GeoCountry_s,
                                    "GeoLatitude",
                                    GeoLatitude_s,
                                    "GeoLongitude",
                                    GeoLongitude_s,
                                    "GeoRegion",
                                    GeoRegion_s,
                                    "ParentProcessId",
                                    ParentProcessId_s,
                                    "ParentProcessCommandLine",
                                    ParentProcessCommandLine_s,
                                    "ParentProcessName",
                                    ParentProcessName_s,
                                    "ParentProcessSHA256",
                                    ParentProcessSHA256_s,
                                    "ParentProcessMD5",
                                    ParentProcessMD5_s
                                )
        // Mapping common event fields
        | extend
            EventSubType = "Threat", // All events in AlertEvidence contains threat info
            EventEndTime = TimeGenerated,
            EventStartTime = TimeGenerated,
            EventProduct = ServiceSource,
            EventVendor = 'Microsoft',
            EventSchema = 'AlertEvent',
            EventSchemaVersion = '0.1',
            EventType = 'Alert',
            EventCount = int(1)
        // MApping Alias
        | extend 
            IpAddr = DvcIpAddr,
            Hostname = DvcHostname,
            User = Username
        | project-away
            Title,
            Categories,
            EntityType,
            EvidenceRole,
            DetectionSource,
            ServiceSource,
            ThreatFamily,
            RemoteIP,
            RemoteUrl,
            AccountName,
            AccountDomain,
            DeviceName,
            LocalIP,
            AlertVerdict_Custom,
            EvidenceDirection,
            Account*,
            ApplicationId,
            Application,
            *_s
    };
    parser(
        disabled = disabled
    )