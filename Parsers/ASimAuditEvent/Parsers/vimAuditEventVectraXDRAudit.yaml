Parser:
  Title: Audit Event ASIM filtering parser for Vectra XDR Audit Logs Event
  Version: '0.1.1'
  LastUpdated: Sept 18, 2023
Product:
  Name: Vectra
Normalization:
  Schema: AuditEvent
  Version: '0.1.0'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Audit Event schema.
ParserName: vimAuditEventVectraXDRAudit
EquivalentBuiltInParser: _Im_AuditEvent_VectraXDRAudit
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: object_has_any
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let parser = (disabled:bool = false, eventresult:string='*', starttime:datetime=datetime(null), endtime:datetime=datetime(null), actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),object_has_any:dynamic=dynamic([]))
  {
    Audits_Data_CL
    | where not(disabled) and event_action_s !in ("login","logout")
    | where (isnull(starttime) or event_timestamp_t >= starttime) and (isnull(endtime) or event_timestamp_t <= endtime) and (array_length(actorusername_has_any) == 0 or tostring(toint(user_id_d)) has_any (actorusername_has_any)) or (array_length(actorusername_has_any) == 0 or username_s has_any (actorusername_has_any)) and (array_length(operation_has_any) == 0 or event_action_s has_any (operation_has_any)) and (array_length(object_has_any) == 0 or event_object_s has_any (object_has_any))
    | extend
          EventEndTime = event_timestamp_t,
          EventProduct = 'XDR',
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1.0",
          EventStartTime = event_timestamp_t,
          EventType = 'Other',
          EventVendor = 'Vectra',
          Type = "Audit Log",
          EventUid = tostring(toint(id_d)),
          ActorUserId = tostring(toint(user_id_d)),
          ActorUserIdType = "UID",
          ActorUsernameType = "UPN",
          EventResult = case(result_status_s=="success", "Success", result_status_s=="failure", "Failure","NA")
    | project-rename
          Dvc = source_ip_s,
          Operation = event_action_s,
          ActorUsername = username_s,
          Object = event_object_s,
          ActorOriginalUserType = user_type_s,
          EventMessage = Message,
          EventProductVersion = version_s
    | where ('*' in (eventresult) or EventResult in (eventresult))
    | extend User = ActorUsername
    | project-away
          id_d, user_id_d, user_role_s, result_status_s,event_timestamp_t, event_data_s, api_client_id_g, TenantId, _ResourceId, RawData, SourceSystem, Computer, MG, ManagementGroupName
  };
  parser (disabled=disabled, eventresult=eventresult, starttime=starttime, endtime=endtime, actorusername_has_any=actorusername_has_any,operation_has_any=operation_has_any,object_has_any=object_has_any)