Parser:
  Title: Audit Event ASIM parser for SentinelOne
  Version: '0.1.0'
  LastUpdated: Oct 05 2023
Product:
  Name: SentinelOne
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: SentinelOne documentation 
  Link: https://<SOneInstanceDomain>.sentinelone.net/api-doc/overview
Description: |
  This ASIM parser supports normalizing SentinelOne logs to the ASIM Audit Event normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.
ParserName: ASimAuditEventSentinelOne
EquivalentBuiltInParser: _ASim_AuditEvent_SentinelOne
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventFieldsLookup = datatable(
        activityType_d: real,
        Operation: string,
        EventType_activity: string,
        EventSubType: string,
        EventResult: string,
        Object: string,
        ObjectType: string
    )
        [
        39, "Research Settings Modified", "", "", "Success", "Research Settings", "Policy Rule",
        41, "Learning Mode Settings Modified", "Set", "", "Success", "Mitigation policy", "Policy Rule",
        44, "Auto decommission On", "Enable", "", "Success", "Auto decommission", "Service",
        45, "Auto decommission Off", "Disable", "", "Success", "Auto decommission", "Service",
        46, "Auto Decommission Period Modified", "Set", "", "Success", "Auto decommission", "Service",
        56, "Auto Mitigation Actions Modified", "Set", "", "Success", "Mitigation action", "Other",
        57, "Quarantine Network Settings Modified", "", "", "Success", "NetworkSettings", "Configuration Atom",
        68, "Engine Modified In Policy", "Set", "", "Success", "Engine Policy", "Policy Rule",
        69, "Mitigation Policy Modified", "Set", "", "Success", "Threat Mitigation Policy", "Policy Rule",
        70, "Policy Setting - Agent Notification On Suspicious Modified", "", "", "Success", "Agent notification", "Service",
        82, "Monitor On Execute", "", "", "Success", "On execute setting", "Configuration Atom",
        83, "Monitor On Write", "", "", "Success", "On write setting", "Configuration Atom",
        105, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility Setting", "Configuration Atom",
        116, "Policy Settings Modified", "Disable", "", "Success", "Policy Settings", "Policy Rule",
        150, "Live Security Updates Policy Modified", "", "", "Success", "Live Security Updates Policy", "Policy Rule",
        151, "Live Security Updates Policy Inheritance Setting Changed", "Set", "", "Success", "Live Security Updates Policy", "Policy Rule",
        200, "File Upload Settings Modified", "Set", "", "Success", "Binary Vault Settings", "Configuration Atom",
        201, "File Upload Enabled/Disabled", "", "", "Success", "Binary Vault", "Policy Rule",
        4004, "Policy Setting - Show Suspicious Activities Configuration Enabled", "Enable", "", "Success", "Policy Setting", "Policy Rule",
        4005, "Policy Setting - Show Suspicious Activities Configuration Disabled", "Disable", "", "Success", "Policy Setting", "Policy Rule",
        4104, "STAR Manual Response Marked Event As Malicious", "Set", "", "Success", "computerName", "Other",
        4105, "STAR Manual Response Marked Event As Suspicious", "Set", "", "Success", "computerName", "Other",
        5012, "Group Token Regenerated", "Create", "", "Success", "Token", "Policy Rule",
        5020, "Site Created", "Create", "", "Success", "", "Other",
        5021, "Site Modified", "Set", "", "Success", "", "Other",
        5022, "Site Deleted", "Delete", "", "Success", "", "Other",
        5024, "Site Policy Reverted", "", "", "Success", "", "Other",
        5025, "Site Marked As Expired", "Disable", "", "Success", "", "Other",
        5026, "Site Duplicated", "Create", "", "Success", "", "Other",
        5027, "Site Token Regenerated", "Create", "", "Success", "", "Other",
        6000, "Mobile Policy updated", "Set", "", "Success", "Mobile Policy", "Policy Rule",
        6001, "Mobile Policy created", "Create", "", "Success", "Mobile Policy", "Policy Rule",
        6002, "Mobile Policy removed", "Delete", "", "Success", "Mobile Policy", "Policy Rule",
        6010, "UEM Connection created", "Create", "", "Success", "MDM Connection", "Configuration Atom",
        6011, "UEM Connection updated", "Set", "", "Success", "MDM Connection", "Configuration Atom",
        6012, "UEM Connection Removed", "Delete", "", "Success", "MDM Connection", "Configuration Atom",
        73, "Scan New Agents Changed", "", "", "Success", "Scan new agents Setting", "Configuration Atom",
        76, "Anti Tampering Modified", "", "", "Success", "Anti tampering setting", "Configuration Atom",
        77, "Agent UI Settings Modified", "Set  ", "", "Success", "Agent UI setting", "Configuration Atom",
        78, "Snapshots Settings Modified", "", "", "Success", "Snapshots setting", "Configuration Atom",
        79, "Agent Logging Modified", "", "", "Success", "Agent logging setting", "Configuration Atom",
        84, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility setting", "Configuration Atom",
        87, "Remote Shell Settings Modified", "", "", "Success", "Remote Shell Settings", "Configuration Atom",
        2100, "Upgrade Policy - Concurrency Limit Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
        2101, "Upgrade Policy - Concurrency Limit Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
        2111, "Upgrade Policy - Maintenance Window Time Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
    ];
    let EventFieldsLookupMachineActivity = datatable(
        activityType_d: real,
        Operation: string,
        EventType_machineactivity: string,
        EventSubType_machineactivity: string,
        EventResult: string,
        Object: string,
        ObjectType: string
    )
        [
        52, "User Approved Agent Uninstall Request", "Other", "Approve", "Success", "Agent", "Service",
        53, "User Rejected Agent Uninstall Request", "Other", "Reject", "Failure", "Agent", "Service",
        54, "User Decommissioned Agent", "Disable", "", "Success", "Agent", "Service",
        55, "User Recommissioned Agent", "Enable", "", "Success", "Agent", "Service",
        61, "User Disconnected Agent From Network", "Execute", "", "Success", "Agent", "Service",
        62, "User Reconnected Agent to Network", "Execute", "", "Success", "Agent", "Service",
        63, "User Shutdown Agent", "Execute", "", "Success", "Agent", "Service",
        93, "User Reset Agent's Local Config", "Set", "", "Success", "Local config", "Configuration Atom",
        95, "User Moved Agent to Group", "Other", "Move", "Success", "Agent", "Service",
        117, "User Disabled Agent", "Execute", "", "Success", "Agent", "Service",
        118, "User Enabled Agent", "Execute", "", "Success", "Agent", "Service",
        4100, "User Marked Deep Visibility Event As Threat", "Set", "", "Success", "Deep Visibility Event", "Other",
        4101, "User Marked Deep Visibility Event As Suspicious", "Set", "", "Success", "Deep Visibility Event", "Other",
    ];
    let EventFieldsLookupAccountActivity = datatable(
        activityType_d: real,
        Operation: string,
        EventType_accountactivity: string,
        EventSubType_accountactivity: string,
        EventResult: string,
        Object: string,
        ObjectType: string
    )
        [
        130, "Opt-in To EA program", "Create", "", "Success", "", "Other",
        131, "Opt-out From EA Program", "Delete", "", "Success", "", "Other",
        5040, "Account Created", "Create", "", "Success", "", "Other",
        5041, "Account Modified", "Set", "", "Success", "", "Other",
        5042, "Account Deleted", "Delete", "", "Success", "", "Other",
        5044, "Account Policy Reverted", "Set", "", "Success", "", "Other",
        7200, "Add cloud account", "Create", "", "Success", "", "Other",
        7201, "Disable cloud Account", "Disable", "", "Success", "", "Other",
        7202, "Enable cloud Account", "Enable", "", "Success", "", "Other"
    ];
    let EventFieldsLookup_useractivity = datatable(
        activityType_d: real,
        Operation: string,
        EventType_useractivity: string,
        EventSubType_useractivity: string,
        EventResult: string,
        Object: string,
        ObjectType: string
    )
        [
        88, "User Remote Shell Modified", "", "", "Success", "Remote Shell", "Configuration Atom",
        114, "API Token Revoked", "Disable", "", "Success", "API Token", "Service"
    ];
    let EventFieldsLookup_otheractivity = datatable(
        activityType_d: real,
        Operation: string,
        EventType_otheractivity: string,
        EventSubType_otheractivity: string,
        EventResult: string,
        Object: string,
        ObjectType: string
    )
        [
        2, "Hash Defined as Malicious By Cloud", "Set", "", "Success", "", "Other",
        40, "Cloud Intelligence Settings Modified", "", "", "Success", "Cloud Intelligence Settings", "Policy Rule",
        58, "Notification Option Level Modified", "Set", "", "Success", "Notification Level", "Service",
        59, "Event Severity Level Modified", "Set", "", "Success", "EventSeverity Level", "Other",
        60, "Notification - Recipients Configuration Modified", "Set", "", "Success", "Recipients configuration", "Policy Rule",
        101, "User Changed Agent's Customer Identifier", "Set", "", "Success", "Customer Identifier string", "Configuration Atom",
        106, "User Commanded Agents To Move To Another Console", "Execute", "", "Failure", "Agents", "Service",
        107, "User Created RBAC Role", "Create", "", "Success", "", "Other",
        108, "User Edited RBAC Role", "Set", "", "Success", "", "Other",
        109, "User Deleted RBAC Role", "Delete", "", "Success", "", "Other",
        112, "API token Generated", "Create", "", "Success", "API Token", "Service",
        113, "API Token Revoked", "Disable", "", "Success", "API Token", "Service",
        129, "Allowed Domains Settings Changed", "Set", "", "Success", "User Domain Setting", "Other",
        1501, "Location Created", "Create", "", "Success", "", "Service",
        1502, "Location Copied", "Set", "Copy", "Success", "", "Service",
        1503, "Location Modified", "Set", "", "Success", "", "Service",
        1504, "Location Deleted", "Delete", "", "Success", "", "Service",
        2011, "User Issued Kill Command", "Execute", "", "Success", "", "Other",
        2012, "User Issued Remediate Command", "Execute", "", "Success", "", "Other",
        2013, "User Issued Rollback Command", "Execute", "", "Success", "", "Other",
        2014, "User Issued Quarantine Command", "Execute", "", "Success", "", "Other",
        2015, "User Issued Unquarantine Command", "Execute", "", "Success", "", "Other",
        2016, "User Marked Application As Threat", "Set", "", "Success", "", "Other",
        2028, "Threat Incident Status Changed", "Set", "", "Success", "", "Other",
        2029, "Ticket Number Changes", "Set", "", "Success", "", "Other",
        2030, "Analyst Verdict Changes", "Set", "", "Success", "", "Other",
        2036, "Threat Confidence Level Changed By Agent", "Set", "", "Success", "", "Other",
        2037, "Threat Confidence Level Changed By Cloud", "Set", "", "Success", "", "Other",
        3001, "User Added Hash Exclusion", "Set", "", "Success", "Hash", "Other",
        3002, "User Added Blocklist Hash", "Set", "", "Success", "Hash", "Other",
        3008, "New Path Exclusion", "Create", "", "Success", "Path", "Other",
        3009, "New Signer Identity Exclusion", "Create", "", "Success", "Signer Identity", "Other",
        3010, "New File Type Exclusion", "Create", "", "Success", "File Type", "Other",
        3011, "New Browser Type Exclusion", "Create", "", "Success", "Browser Type", "Other",
        3012, "Path Exclusion Modified", "Set", "", "Success", "Path", "Other",
        3013, "Signer Identity Exclusion Modified", "Set", "", "Success", "Signer Identity", "Other",
        3014, "File Type Exclusion Modified", "Set", "", "Success", "File Type", "Other",
        3015, "Browser Type Exclusion Modified", "Set", "", "Success", "Browser Type", "Other",
        3016, "Path Exclusion Deleted", "Delete", "", "Success", "Path", "Other",
        3017, "Signer Identity Exclusion Deleted", "Delete", "", "Success", "Signer Identity", "Other",
        3018, "File Type Exclusion Deleted", "Delete", "", "Success", "File Type", "Other",
        3019, "Browser Type Exclusion Deleted", "Delete", "", "Success", "Browser Type", "Other",
        3020, "User Deleted Hash From Blocklist", "Delete", "", "Success", "Hash", "Other",
        3021, "User Deleted Hash Exclusion", "Delete", "", "Success", "Hash", "Other",
        3100, "User Added Package", "Create", "", "Success", "Package", "Other",
        3101, "User Modified Package", "Set", "", "Success", "Package", "Other",
        3102, "User Deleted Package", "Delete", "", "Success", "Package", "Other",
        3103, "Package Deleted By System - Too Many Packages", "Delete", "", "Success", "Package", "Other",
        3500, "User Toggled Ranger Status", "Set", "", "Success", "Ranger Settings", "Other",
        3501, "Ranger Settings Modified", "Set", "", "Success", "Ranger Settings", "Configuration Atom",
        3502, "Ranger Network Settings Modified", "Set", "", "Success", "Ranger Network Setting", "Other",
        3506, "Ranger - Device Review Modified", "Set", "", "Success", "Device Review", "Other",
        3507, "Ranger - Device Tag Modified On Host", "Set", "", "Success", "Device Tag", "Other",
        3521, "Ranger Deploy Initiated", "Initialize", "", "Success", "Ranger Deploy", "Other",
        3525, "Ranger Deploy - Credential Created", "Create", "", "Success", "Credential", "Configuration Atom",
        3526, "Ranger Deploy - Credential Deleted", "Delete", "", "Success", "Credential", "Configuration Atom",
        3527, "Ranger Deploy - Credential Overridden", "Set", "", "Success", "Credential", "Configuration Atom",
        3530, "Ranger Labels Updated", "Set", "", "Success", "Ranger Labels", "Other",
        3531, "Ranger labels reverted", "Set", "", "Success", "Ranger Labels", "Other",
        3600, "Custom Rules - User Created A Rule", "Create", "", "Success", "", "Policy Rule",
        3601, "Custom Rules - User Changed A Rule", "Set", "", "Success", "", "Policy Rule",
        3602, "Custom Rules - User Deleted A Rule", "Delete", "", "Success", "", "Policy Rule",
        3603, "Custom Rules - Rule Status Changed", "Set", "", "Success", "", "Policy Rule",
        3604, "Custom Rules - Rule Status Change Failed", "Set", "", "Failure", "", "Policy Rule",
        3626, "User 2FA Email Verification Changed", "Set", "", "Success", "", "Service",
        3628, "2FA Code Verification", "Set", "", "Success", "2FA", "Service",
        3641, "Ranger self Provisioning Default Features Modified", "Set", "", "Success", "", "Other",
        3650, "Tag Manager - User Created New Tag", "Create", "", "Success", "Tag", "Other",
        3651, "Tag Manager - User Modified Tag", "Set", "", "Success", "Tag", "Other",
        3652, "Tag Manager - User Deleted Tag", "Delete", "", "Success", "Tag", "Other",
        3653, "Tag Manager - User Attached Tag", "Other", "Attach", "Success", "Tags", "Other",
        3654, "Tag Manager - User Detached Tag", "Detach", "", "Success", "Tags", "Other", 
        3750, "Auto-Upgrade Policy Created", "Create", "", "Success", "", "Policy Rule",
        3751, "Auto-Upgrade Policy Disabled", "Disable", "", "Success", "", "Policy Rule",
        3752, "Auto-Upgrade Policy Activated", "Enable", "", "Success", "", "Policy Rule",
        3753, "Auto-Upgrade Policy Deleted", "Delete", "", "Success", "", "Policy Rule",
        3754, "Auto-Upgrade Policy Reordered", "Other", "Reorder", "Success", "", "Policy Rule",
        3755, "Upgrade Policy Inheritance Setting Changed", "Set", "", "Success", "Upgrade Policy", "Policy Rule",
        3756, "Auto-Upgrade Policy Edited", "Set", "", "Success", "", "Policy Rule",
        3767, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
        3768, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
        3769, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
        3770, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
        3771, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
        3772, "Local Upgrade Unauthorized", "Other", "Unauthorize", "Failure", "Local Upgrade Authorization", "Service",
        3773, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
        3774, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
        4001, "Suspicious Threat Was Marked As Threat", "Set", "", "Success", "", "Other",
        4002, "Suspicious Threat Was Resolved", "Set", "", "Success", "", "Other",
        4006, "Remember Me Length Modified", "Set", "", "Success", "Stay Sign in Duration", "Policy Rule",
        4007, "Suspicious Threat Was Marked As Benign", "Set", "", "Success", "", "Other",
        4008, "Threat Mitigation Status Changed", "Set", "", "Success", "", "Other",
        4009, "Process Was Marked As Threat", "Set", "", "Success", "", "Other",
        4011, "Suspicious Threat Was Unresolved", "Set", "", "Failure", "", "Other",
        4012, "UI Inactivity Timeout Modified", "Set", "", "Success", "Inactivity timeout", "Configuration Atom",
        5242, "Ranger - Device Tag Created", "Create", "", "Success", "", "Other",
        5243, "Ranger - Device Tag Updated", "Set", "", "Success", "", "Other",
        5244, "Ranger - Device Tag Deleted", "Delete", "", "Success", "", "Other",
        5250, "Firewall Control Tag Created", "Create", "", "Success", "", "Other",
        5251, "Firewall Control Tag Updated", "Set", "", "Success", "", "Other",
        5252, "Firewall Control Tag Updated", "Delete", "", "Success", "", "Other",
        5253, "Network Quarantine Control Tag Created", "Create", "", "Success", "", "Other",
        5254, "Network Quarantine Control Tag Updated", "Set", "", "Success", "", "Other",
        5255, "Network Quarantine Control Tag Deleted", "Delete", "", "Success", "", "Other",
        5256, "Firewall Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
        5257, "Firewall Control Tag Inherited", "Set", "", "Success", "Firewall Control tags", "Other",
        5258, "Network Quarantine Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
        5259, "Network Quarantine Control Tag Inherited", "Set", "", "Success", "Network Quarantine Control Tag", "Other",
        7500, "Remote Ops Password Configured", "Set", "", "Success", "Remote Ops password configuration", "Configuration Atom",
        7501, "Remote Ops Password Deleted", "Delete", "", "Success", "Remote Ops password configuration", "Configuration Atom",
        7602, "User Edited Run Script Guardrails", "Set", "", "Success", "Guardrails", "Service",
        7603, "User Enabled Run Script Guardrails", "Enable", "", "Success", "Guardrails", "Service",
        7604, "User Disabled Run Script Guardrails", "Disable", "", "Success", "Guardrails", "Service",
        5120, "Device Rule Created", "Create", "", "Success", "", "Policy Rule",
        5121, "Device Rule Modified", "Set", "", "Success", "", "Policy Rule",
        5122, "Device Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
        5123, "Device Rules Reordered", "Set", "", "Success", "", "Policy Rule",
        5124, "Device Rules Settings Modified", "Set", "", "Success", "Device Control settings", "Policy Rule",
        5129, "Device Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
        5220, "Firewall Rule Created", "Create", "", "Success", "", "Policy Rule",
        5221, "Firewall Rule Modified", "Set/Other", "", "Success", "", "Policy Rule",
        5222, "Firewall Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
        5225, "Firewall Control Settings Modified", "Set", "", "Success", "Firewall Rule", "Policy Rule",
        5226, "Firewall Rules Reordered", "Set", "", "Success", "Firewall Rule", "Policy Rule",
        5231, "Firewall Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
        5234, "Network Quarantine Rule Created", "Create", "", "Success", "", "Policy Rule",
        5235, "Network Quarantine Rule Modified", "Set", "", "Success", "", "Policy Rule",
        5236, "Network Quarantine Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
        5237, "Network Quarantine Control Settings Modified", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
        5238, "Network Quarantine Rules Reordered", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
        5241, "Network Quarantine Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
        6030, "Mobile Device Updated", "Other", "", "Success", "Device", "Other",
        6053, "Mobile Incident Resolved", "Set", "", "Success", "", "Other",
        6054, "Mobile Incident Status Changed", "Set", "", "Success", "", "Other",
        6055, "Mobile Incident Analyst Verdict Changed", "Set", "", "Success", "", "Other"
    ];
    let EventTypeLookup_onoff = datatable(
        field: string,
        EventType_field: string,
        NewValue_field: string
    )
        [
        "true", "Enable", "on",
        "false", "Disable", "off"
    ];
    let EventTypeLookup_enableddisabled = datatable(
        field: string,
        EventType_fieldenableddisabled: string,
        NewValue_fieldenableddisabled: string
    )
        [
        "true", "Enable", "enabled",
        "false", "Disable", "disabled"
    ];
    let EventSeverityLookup = datatable (EventResult: string, EventSeverity_lookup: string)
        [
        "Success", "Informational",
        "Failure", "Low"
    ];
    let EventSeverityLookup_activity = datatable (activityType_d: real, EventSeverity_activity: string)
        [
        4100, "Medium",
        4101, "High",
        2016, "Medium",
        2028, "Low",
        4001, "Medium",
        4002, "Low",
        4007, "Low",
        4008, "Medium",
        4009, "Medium",
        4011, "High",
        2, "Medium",
        2011, "Low",
        2012, "Low",
        2013, "Medium",
        2014, "Low",
        2015, "Low",
        4002, "Low",
        4104, "High",
        4105, "Medium"
    ];
    let ThreatConfidenceLookup_undefined = datatable(
        threatInfo_analystVerdict_s: string,
        ThreatConfidence_undefined: int
    )
        [
        "false_positive", 5,
        "undefined", 15,
        "suspicious", 25,
        "true_positive", 33 
    ];
    let ThreatConfidenceLookup_suspicious = datatable(
        threatInfo_analystVerdict_s: string,
        ThreatConfidence_suspicious: int
    )
        [
        "false_positive", 40,
        "undefined", 50,
        "suspicious", 60,
        "true_positive", 67 
    ];
    let ThreatConfidenceLookup_malicious = datatable(
        threatInfo_analystVerdict_s: string,
        ThreatConfidence_malicious: int
    )
        [
        "false_positive", 75,
        "undefined", 80,
        "suspicious", 90,
        "true_positive", 100 
    ];
    let parser = (disabled: bool=false) {
        let RawGroupSiteActivityIds = dynamic([39, 41, 44, 45, 46, 56, 57, 68, 69, 70, 82, 83, 105, 116, 150, 151, 200, 201, 4004, 4005, 4104, 4105, 5012, 5020, 5021, 5022, 5024, 5025, 5026, 5027, 6000, 6001, 6002, 6010, 6011, 6012, 73, 76, 77, 78, 79, 84, 87, 2100, 2101, 2111]);
        let RawOtherActivityIds = dynamic([2, 40, 58, 59, 60, 101, 106, 107, 108, 109, 112, 113, 129, 1501, 1502, 1503, 1504, 2011, 2012, 2013, 2014, 2015, 2016, 2028, 2029, 2030, 2036, 2037, 3001, 3002, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3100, 3101, 3102, 3103, 3500, 3501, 3502, 3506, 3507, 3521, 3525, 3526, 3527, 3530, 3531, 3600, 3601, 3602, 3603, 3604, 3626, 3628, 3641, 3650, 3651, 3652, 3653, 3654, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 4001, 4002, 4006, 4007, 4008, 4009, 4011, 4012, 5242, 5243, 5244, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 7500, 7501, 7602, 7603, 7604, 5120, 5121, 5122, 5123, 5124, 5129, 5220, 5221, 5222, 5225, 5226, 5231, 5234, 5235, 5236, 5237, 5238, 5241, 6030, 6053, 6054, 6055]);
        let activitydata = SentinelOne_CL
            | where not(disabled) and event_name_s == "Activities."
            | project-away
                threatInfo_confidenceLevel_s,
                threatInfo_analystVerdict_s,
                threatInfo_threatName_s,
                threatInfo_incidentStatus_s,
                threatInfo_identifiedAt_t,
                threatInfo_updatedAt_t,
                threatInfo_threatId_s,
                mitigationStatus_s;
        let rawgroupsiteactivitydata = activitydata
            | where activityType_d in (RawGroupSiteActivityIds)
            | parse-kv DataFields_s as (username: string, userName: string, userFullName: string, newValue: string, policyEnabled: string, siteName: string, oldValue: string, ipAddress: string, oldSiteName: string, policy: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | parse-kv policy as (id: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | project-rename ObjectId = id
            | lookup EventFieldsLookup on activityType_d;
        let groupsiteactivitydata_onoff = rawgroupsiteactivitydata
            | where activityType_d in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150)
            | lookup EventTypeLookup_onoff on $left.newValue == $right.field
            | lookup EventTypeLookup_onoff on $left.policyEnabled == $right.field
            | extend
                EventType = coalesce(EventType_field, EventType_field1),
                NewValue = coalesce(NewValue_field, NewValue_field1);
        let groupsiteactivitydata_enabledisabled = rawgroupsiteactivitydata
            | where activityType_d in (70, 82, 83, 201)
            | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
            | extend
                EventType = EventType_fieldenableddisabled,
                NewValue = NewValue_fieldenableddisabled;
        let groupsiteactivitydata_other = rawgroupsiteactivitydata
            | where activityType_d !in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150, 70, 82, 83, 201)
            | extend EventType = EventType_activity;
        let groupsiteactivitydata = union
                groupsiteactivitydata_onoff,
                groupsiteactivitydata_enabledisabled,
                groupsiteactivitydata_other
            | extend
                ActorUsername = coalesce(username, userName, userFullName),
                Object = coalesce(Object, siteName, oldSiteName),
                NewValue = coalesce(NewValue, newValue),
                OldValue = oldValue;
        let machineactivitydata = activitydata
            | where activityType_d in (52, 53, 54, 55, 61, 62, 63, 93, 95, 117, 118, 4100, 4101)
            | parse-kv DataFields_s as (username: string, userName: string, computerName: string, threatClassification: string, ipAddress: string, groupName: string, targetGroupName: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | lookup EventFieldsLookupMachineActivity on activityType_d
            | extend
                EventType = EventType_machineactivity,
                EventSubType = EventSubType_machineactivity,
                ThreatCategory_datafields = threatClassification,
                OldValue = groupName,
                NewValue = targetGroupName,
                ObjectId = agentId_s
            | extend ActorUsername = coalesce(username, userName)
            | invoke _ASIM_ResolveDvcFQDN('computerName');
        let accountactivitydata = activitydata
            | where activityType_d in (130, 131, 5040, 5041, 5042, 5044, 7200, 7201, 7202, 7203)
            | parse-kv DataFields_s as (username: string, accountName: string, cloudProviderAccountName: string, ipAddress: string, accountId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | lookup EventFieldsLookupAccountActivity on activityType_d
            | extend
                EventType = EventType_accountactivity,
                EventSubType = EventSubType_accountactivity,
                Object = coalesce(accountName, cloudProviderAccountName),
                ObjectId = accountId;
        let useractivitydata = activitydata
            | where activityType_d in (88, 114)
            | parse-kv DataFields_s as (username: string, byUser: string, newValue: string, ipAddress: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | lookup EventFieldsLookup_useractivity on activityType_d
            | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
            | extend
                ActorUsername = byUser,
                EventType = coalesce(EventType_useractivity, EventType_fieldenableddisabled),
                EventSubType = EventSubType_useractivity,
                NewValue = NewValue_fieldenableddisabled;
        let rawotheractivitydata = activitydata
            | where activityType_d in (RawOtherActivityIds)
            | parse-kv DataFields_s as (username: string, userName: string, email: string, globalTwoFaEnabled: string, cloudIntelligenceOn: string, fileDisplayName: string, roleName: string, oldIncidentStatusTitle: string, oldTicketId: string, oldAnalystVerdictTitle: string, oldConfidenceLevel: string, previous: string, oldStatus: string, oldTagName: string, oldTagDescription: string, newIncidentStatusTitle: string, newTicketId: string, newAnalystVerdictTitle: string, newConfidenceLevel: string, newStatus: string, current: string, Status: string, newTagName: string, newTagDescription: string, value: string, rulesAdded: string, rulesRemoved: string, tagsAdded: string, tagsRemoved: string, incidentName: string, ruleName: string, deviceId: string, ip: string, externalIp: string, affectedDevices: string, featureValue: string, featureName: string, recoveryEmail: string, policyName: string, tagName: string, gatewayExternalIp: string, gatewayMac: string, threatClassification: string, ipAddress: string, applicationPath: string, externalId: string, consoleUrl: string, ruleId: string, policyId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
            | lookup EventFieldsLookup_otheractivity on activityType_d
            | lookup EventTypeLookup_onoff on $left.cloudIntelligenceOn == $right.field
            | lookup EventTypeLookup_onoff on $left.globalTwoFaEnabled == $right.field
            | extend
                ActorUsername = coalesce(username, userName),
                EventType = coalesce(EventType_otheractivity, EventType_field, EventType_field1),
                EventSubType = EventSubType_otheractivity,
                Object = coalesce(Object, fileDisplayName, applicationPath, roleName, ruleName, incidentName, recoveryEmail, featureName, policyName, tagName),
                NewValue = coalesce(newIncidentStatusTitle, newTicketId, newAnalystVerdictTitle, newConfidenceLevel, newStatus, current, Status, newTagName, newTagDescription, featureValue),
                OldValue = coalesce(oldIncidentStatusTitle, oldTicketId, oldAnalystVerdictTitle, oldConfidenceLevel, oldStatus, previous, oldTagName, oldTagDescription),
                TargetIpAddr = coalesce(externalIp, ip, gatewayExternalIp),
                ThreatCategory_datafields = threatClassification,
                RuleName = ruleName,
                TargetDvcId = deviceId,
                ObjectId = coalesce(ruleId, policyId, externalId, deviceId)
            | invoke _ASIM_ResolveDstFQDN('affectedDevices')
            | project-rename
                TargetHostname = DstHostname,
                TargetDomain = DstDomain,
                TargetDomainType = DstDomainType,
                TargetFQDN = DstFQDN,
                TargetUrl = consoleUrl;
        let parsedotheractivitydata_eventtype = rawotheractivitydata
            | where activityType_d in (5256, 5258)
            | extend EventType = case(
                            isnotempty(rulesAdded) or isnotempty(tagsAdded),
                            "Create",
                            isnotempty(rulesRemoved) or isnotempty(tagsRemoved),
                            "Delete",
                            "Set"
                        );
        let parsedotheractivitydata_objectvalue = rawotheractivitydata
            | where activityType_d in (3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3650, 3651, 3652, 3653, 3654)
            | extend Object = strcat(Object, ' ', value);
        let parsedotheractivitydata_severity = rawotheractivitydata
            | where activityType_d in (2036, 2037, 2030)
            | extend EventSeverity_specific = case(
                                        primaryDescription_s has_any ("to malicious", "to True positive"),
                                        "High", 
                                        primaryDescription_s has_any ("to suspicious", "to Undefined"),
                                        "Medium",
                                        primaryDescription_s has "to False positive",
                                        "Low",
                                        "Informational"
                                    );
        let ParsedActivitydata = union
                groupsiteactivitydata,
                machineactivitydata,
                accountactivitydata,
                useractivitydata,
                rawotheractivitydata,
                parsedotheractivitydata_eventtype,
                parsedotheractivitydata_objectvalue
            | where activityType_d !in(2030, 2036, 2037)
            | lookup EventSeverityLookup on EventResult
            | lookup EventSeverityLookup_activity on activityType_d;
        let UnParsedActivitydatawithThreat = union ParsedActivitydata, parsedotheractivitydata_severity
            | where isnotempty(threatId_s)
            | join kind=inner (SentinelOne_CL
                | where event_name_s == "Threats."
                | project
                    TimeGenerated,
                    threatInfo_confidenceLevel_s,
                    threatInfo_analystVerdict_s,
                    threatInfo_threatName_s,
                    threatInfo_incidentStatus_s,
                    threatInfo_identifiedAt_t,
                    threatInfo_updatedAt_t,
                    threatInfo_threatId_s,
                    mitigationStatus_s)
                on $left.threatId_s == $right.threatInfo_threatId_s
            | where TimeGenerated1 >= TimeGenerated
            | summarize arg_min(TimeGenerated1, *) by activityType_d, threatId_s, createdAt_t, TimeGenerated;
        let undefineddata = UnParsedActivitydatawithThreat
            | where threatInfo_confidenceLevel_s == "Undefined"
            | lookup ThreatConfidenceLookup_undefined on threatInfo_analystVerdict_s;
        let suspiciousdata = UnParsedActivitydatawithThreat
            | where threatInfo_confidenceLevel_s == "suspicious"
            | lookup ThreatConfidenceLookup_suspicious on threatInfo_analystVerdict_s;
        let maliciousdata = UnParsedActivitydatawithThreat
            | where threatInfo_confidenceLevel_s == "malicious"
            | lookup ThreatConfidenceLookup_malicious on threatInfo_analystVerdict_s;
        let ParsedActivitydatawithThreat = union undefineddata, suspiciousdata, maliciousdata
            | extend
                ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious),
                AdditionalFields = bag_pack(
                        "threatUpdatedAt",
                        threatInfo_updatedAt_t,
                        "threatAnalystVerdict",
                        threatInfo_analystVerdict_s,
                        "threatIncidentStatus",
                        threatInfo_incidentStatus_s,
                        "mitigationStatus",
                        mitigationStatus_s
                    )
            | project-rename
                ThreatId = threatId_s,
                ThreatName = threatInfo_threatName_s,
                ThreatFirstReportedTime = threatInfo_identifiedAt_t,
                ThreatCategory_threats = threatInfo_classification_s,
                ThreatOriginalConfidence = threatInfo_confidenceLevel_s;
        let ParsedActivitydatawithoutThreat = ParsedActivitydata
            | where isempty(threatId_s);
        union ParsedActivitydatawithThreat, ParsedActivitydatawithoutThreat
        | extend 
            EventSeverity = coalesce(EventSeverity_specific, EventSeverity_activity, EventSeverity_lookup),
            EventProduct = "SentinelOne",
            EventVendor = "SentinelOne",
            EventSchema = "AuditEvent",
            EventSchemaVersion = "0.1",
            EventCount = toint(1),
            AdditionalFields = bag_merge(AdditionalFields, todynamic(DataFields_s)),
            EventOriginalType = tostring(toint(activityType_d)),
            SrcIpAddr = iff(ipAddress != "null", ipAddress, ""),
            DvcAction = iff(EventResult == "Success", "Allow", "Deny"),
            ThreatCategory = coalesce(ThreatCategory_datafields, ThreatCategory_threats)
        | project-rename
            EventStartTime = createdAt_t,
            EventUid = _ItemId,
            EventMessage = primaryDescription_s,
            ActorUserId = userId_s,
            DvcId = agentId_s,
            EventOriginalUid = activityUuid_g
        | extend
            ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
            ActorUserType = _ASIM_GetUserType(ActorUsername, ActorUserId),
            ActorUserIdType = iff(isnotempty(ActorUserId), "Other", ""),
            DvcIdType = iff(isnotempty(DvcId), "Other", ""),
            TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
            ValueType = iff(isnotempty(NewValue), "Other", "")
        | extend
            EventEndTime = EventStartTime,
            User = ActorUsername,
            IpAddr = SrcIpAddr,
            Dvc = coalesce(DvcHostname, DvcId, EventProduct),
            Dst = coalesce(TargetHostname, TargetIpAddr),
            Src = SrcIpAddr,
            Rule = RuleName,
            Value = NewValue
        | project-away
            *_d,
            *_s,
            *_t,
            *_g,
            *_b,
            Computer,
            MG,
            ManagementGroupName,
            RawData,
            SourceSystem,
            TenantId,
            username,
            userName,
            userFullName,
            newValue,
            policyEnabled,
            siteName,
            oldValue,
            computerName,
            accountName,
            cloudProviderAccountName,
            email,
            globalTwoFaEnabled,
            cloudIntelligenceOn,
            fileDisplayName,
            roleName,
            oldIncidentStatusTitle,
            oldTicketId,
            oldAnalystVerdictTitle,
            oldConfidenceLevel,
            previous,
            oldStatus,
            oldTagName,
            oldTagDescription,
            newIncidentStatusTitle,
            newTicketId,
            newAnalystVerdictTitle,
            newConfidenceLevel,
            newStatus,
            current,
            Status,
            newTagName,
            newTagDescription,
            value,
            rulesAdded,
            rulesRemoved,
            tagsAdded,
            tagsRemoved,
            incidentName,
            ruleName,
            deviceId,
            ip,
            externalIp,
            affectedDevices,
            featureValue,
            featureName,
            recoveryEmail,
            policyName,
            policy,
            tagName,
            gatewayExternalIp,
            gatewayMac,
            threatClassification,
            applicationPath,
            externalId,
            groupName,
            oldSiteName,
            targetGroupName,
            ipAddress,
            EventType_*,
            EventSubType_*,
            EventSeverity_*,
            NewValue_*,
            _ResourceId,
            TimeGenerated1,
            ThreatCategory_*,
            ThreatConfidence_*,
            accountId,
            policyId,
            ruleId,
            byUser
    };
    parser(disabled=disabled)