Parser:
  Title: Audit Event ASIM parser for VMware Carbon Black Cloud
  Version: "0.2.0"
  LastUpdated: Jan 31 2024
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: AuditEvent
  Version: "0.1"
References:
  - Title: ASIM Audit Event Schema
    Link: https://aka.ms/ASimAuditEventDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: VMware Carbon Black Cloud documentation
    Link:
      https://developer.carbonblack.com/reference/carbon-black-cloud/data-forwarder/schema/latest/endpoint.event-1.0.0/
      https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Audit Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimAuditEventVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_AuditEvent_VMwareCarbonBlackCloud
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "*"
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: object_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: newvalue_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventTypeLookup = datatable(temp_type: string, EventType: string)[
      "created", "Create",
      "updated", "Set",
      "deleted", "Delete",
      "added", "Create",
      "modified", "Set"
  ];
  let parser=(
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      srcipaddr_has_any_prefix: dynamic=dynamic([]), 
      eventtype_in: dynamic=dynamic([]), 
      eventresult: string='*', 
      actorusername_has_any: dynamic=dynamic([]), 
      operation_has_any: dynamic=dynamic([]), 
      object_has_any: dynamic=dynamic([]), 
      newvalue_has_any: dynamic=dynamic([]), 
      disabled: bool = false
      ) {
      let allData = CarbonBlackAuditLogs_CL
          | where not(disabled)
          | where ((isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime))
              and not(description_s has_any ("logged in", "login"))
              and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(clientIp_s, srcipaddr_has_any_prefix))
              and (array_length(actorusername_has_any) == 0 or loginName_s has_any (actorusername_has_any))
              and (array_length(object_has_any) == 0 or description_s has_any (object_has_any))
              and (array_length(newvalue_has_any) == 0 or description_s has_any (newvalue_has_any))
              and (array_length(operation_has_any) == 0 or description_s has_any (operation_has_any));
      let Enabled = allData
          | where description_s has_cs "Enabled"
          | parse description_s with "Enabled " temp_object1: string " in policy " temp_restmessage1: string
          | parse description_s with "Enabled " temp_object2: string " with " temp_restmessage2: string
          | parse description_s with temp_object3: string " Enabled " temp_restmessage3: string
          | extend
              EventType = "Enable",
              Operation = description_s,
              Object = coalesce(temp_object1, temp_object2, temp_object3),
              ObjectType = iff(description_s has "policy", "Policy Rule", "Configuration Atom"),
              EventSeverity1 = iff(description_s has "Sensor Bypass", "Low", "Informational");
      let Set = allData
            | where description_s startswith "Set"
            | parse description_s with "Set " temp_field_s: string  " to " NewValue: string " for device(s): " temp_deviceid_s: string
            | parse temp_deviceid_s with TargetFQDN: string " (ID: " TargetDvcId: string ")" *
            | invoke _ASIM_ResolveFQDN ("TargetFQDN")
            | extend
                Object = temp_field_s,
                EventType = "Set",
                Operation = strcat("Set ", temp_field_s, " to ", NewValue),
                ObjectType = "Configuration Atom",
                AdditionalFields = bag_pack("devices", temp_deviceid_s);
      let AlertNotify = allData
          | where description_s has "alert notification"
          | parse-kv description_s as (name: string) with (pair_delimiter=" ", kv_delimiter=":")
          | parse description_s with temp_type: string " alert notification " temp_restmessage: string
          | extend
              Operation = strcat(temp_type, " alert notification"),
              temp_type = tolower(temp_type),
              Object = coalesce(name, "alert notification"),
              ObjectType = "Service"
          | lookup EventTypeLookup on temp_type;
      let CustomRole = allData
          | where description_s has "custom role"
          | parse description_s with temp_type1: string " custom role " temp_rolename1: string " (psc:role:" temp_roleid1: string ")" temp_restmessage1: string 
          | parse description_s with * " role " temp_rolename2: string " (psc:role:" temp_roleid2: string ") " temp_type2: string " with" temp_restmessage2: string
          | extend
              temp_type = tolower(coalesce(temp_type1, temp_type2)),
              Object = coalesce(temp_rolename1, temp_rolename2),
              ObjectType = "Other"
          | lookup EventTypeLookup on temp_type
          | extend
              Operation = strcat(temp_type, " custom role ", Object),
              AdditionalFields = bag_pack("role id", coalesce(temp_roleid1, temp_roleid2));
      let Policy = allData
          | where description_s startswith "Policy"
          | parse description_s with "Policy " temp_policyname1: string " (ID: " temp_policyid1 ") " temp_type1: string " successfully"
          | parse description_s with "Policy " temp_policyname2: string " (ID: " temp_policyid2: string ") " temp_type2: string " and renamed to " NewValue: string " (ID: " temp_restmessage2: string
          | parse description_s with "Policy " temp_policyname3: string " (ID: " temp_policyid3 ") " temp_type3: string
          | extend
              Object = coalesce(temp_policyname1, temp_policyname2, temp_policyname3),
              ObjectType = "Policy Rule",
              temp_type = replace_regex(coalesce(temp_type1, temp_type2, temp_type3), @'[is,was]* (\S+)', @'\1'),
              OldValue = temp_policyname2,
              AdditionalFields = bag_pack("policy id", coalesce(temp_policyid1, temp_policyid2, temp_policyid3))
          | lookup EventTypeLookup on temp_type
          | extend
              Operation = iff(isnotempty(temp_type2), strcat("Policy ", Object, " ", temp_type, " and renamed to ", NewValue), strcat("Policy ", Object, " ", temp_type));
      let Changed = allData
            | where description_s startswith "Changed policy"
            | parse description_s with temp_operation_s: string " to " NewValue: string ")" * "device(s): " temp_deviceid_s: string 
            | extend
                EventType = "Set",
                Operation = strcat(temp_operation_s, " to ", NewValue),
                Object = NewValue,
                ObjectType = "Policy Rule",
                AdditionalFields = bag_pack("devices", temp_deviceid_s),
                TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
      let ParamsUpdated = allData
          | where description_s startswith "Parameters updated"
          | parse description_s with "Parameters updated for " temp_config1: string " (ID: " temp_configid1: string ") for policy " temp_policyname1: string " (ID: " temp_policyid1: string ")" temp_restmessage1: string
          | parse description_s with "Parameters updated for " temp_config2: string " (ID: " temp_configid2: string ") for policy with ID " temp_policyid2: string
          | extend
              temp_operation = coalesce(temp_config1, temp_config2),
              temp_configid = coalesce(temp_configid1, temp_configid2)
          | extend
              EventType = "Set", 
              Operation = strcat("Parameters updated for ", temp_operation, " for policy ", temp_policyname1, tostring(split(temp_policyid2, "{")[0])),
              Object = strcat("Policy ", coalesce(temp_policyname1, temp_policyid2)),
              ObjectType = "Policy Rule",
              AdditionalFields = bag_pack("config id", temp_configid);
      let Reputation = allData
          | where description_s has_cs "Reputation"
          | parse description_s with "User " * " " temp_type1: string " Reputation" * " for Organization ID " temp_orgid1: string " of type " temp_reptype1: string " to " temp_list1: string " with content: " temp_content1: string " | " temp_restmessage1: string
          | parse description_s with "User " * " " temp_type2: string " Reputation" * " for Organization ID " temp_orgid2: string ": " temp_content2: string " | " temp_restmessage2: string
          | extend
              temp_type = coalesce(temp_type1, temp_type2),
              Object = iff(isnotempty(temp_reptype1), strcat("Reputation Override of type ", temp_reptype1), "Reputation Override"),
              ObjectType = "Configuration Atom"
          | lookup EventTypeLookup on temp_type
          | extend
              Operation = strcat(temp_type, " ", Object),
              ActorScopeId = coalesce(temp_orgid1, temp_orgid2),
              AdditionalFields = bag_pack("reputation value", coalesce(temp_content1, temp_content2));
        let PolicyUpdateApplied = allData
            | where description_s has "Policy update applied"
            | parse description_s with * "policy to " Object: string
            | extend
                EventType = "Set",
                Operation = "Policy update applied",
                ObjectType = "Policy Rule",
                OriginalObjectType = "Policy"
        ;
        let auto_deletion = allData
            | where description_s has_all ("auto-deletion", "devices")
            | parse description_s with TargetFQDN: string " " *
            | invoke _ASIM_ResolveFQDN ("TargetFQDN")
            | extend
                EventType = "Delete",
                Operation = "auto-deletion",
                Object = TargetFQDN,
                ObjectType = "Directory Service Object",
                OriginalObjectType = "Device";
        let Hash_Deleted = allData
            | where description_s startswith "Hash - "
            | parse description_s with "Hash - " HashName_s: string " " * "on device " TargetFQDN: string
            | invoke _ASIM_ResolveFQDN ("TargetFQDN")
            | extend
                EventType = "Delete",
                Operation = "Delete Request",
                Object = HashName_s,
                ObjectType = "Configuration Atom",
                OriginalObjectType = "Hash";
        let Failure_Deleting_Hash = allData
            | where description_s startswith "Failure deleting hash"
            | parse description_s with "Failure deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
            | extend
                EventType = "Delete",
                Operation = "Deleting hash",
                Object = HashName_s,
                ObjectType = "Configuration Atom",
                OriginalObjectType = "Hash",
                EventResult = "Failure";
        let Delete_Hash = allData
            | where description_s startswith "Delete Hash"
            | parse description_s with "Delete Hash " HashName_s: string " " * "device(s): " temp_deviceid_s: string
            | extend
                EventType = "Delete",
                Operation = "Delete Hash",
                Object = HashName_s,
                ObjectType = "Configuration Atom",
                OriginalObjectType = "Hash",
                AdditionalFields = bag_pack("devices", temp_deviceid_s),
                TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
        let Success_Deleting_Hash = allData
            | where description_s startswith "Success deleting hash"
            | parse description_s with "Success deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
            | extend
                EventType = "Delete",
                Operation = "Deleting hash",
                Object = HashName_s,
                ObjectType = "Configuration Atom",
                OriginalObjectType = "Hash",
                EventResult = "Success";
        let DeviceUninstalled = allData
            | where description_s has_all ("Device", "uninstalled")
            | parse description_s with "Device " TargetFQDN: string " with deviceId " TargetDvcId: string " " *
            | invoke _ASIM_ResolveFQDN ("TargetFQDN")
            | extend
                EventType = "Uninstall",
                Operation = "Uninstall",
                Object = TargetFQDN,
                ObjectType = "Directory Service Object",
                OriginalObjectType = "Device";
        let DeviceReset = allData
            | where description_s startswith ("Device reset requested")
            | parse description_s with "Device reset requested on device " TargetDvcId: string
            | extend 
                EventType = "Set",
                Operation = "Device reset",
                Object = TargetDvcId,
                ObjectType = "Directory Service Object",
                OriginalObjectType = "Device";
        let CreateOrModifyPolicy = allData
            | where description_s startswith "Request received to"
            | parse description_s with * "policy " Object: string
            | extend
                EventType = case(
                    description_s has "modify policy",
                    "Set", 
                    description_s has "create new policy",
                    "Create",
                    ""
                ),
                Operation = case(
                    description_s has "modify policy",
                    "modify policy", 
                    description_s has "create new policy",
                    "create new policy",
                    ""
                ),
                Object = replace_string(Object, "- ", ""),
                ObjectType = "Policy Rule",
                OriginalObjectType = "Policy";
        let LogsRequested = allData
            | where description_s startswith ("Logs requested")
            | parse description_s with "Logs requested for device " TargetDvcId: string
            | extend 
                EventType = "Read",
                Operation = "Logs requested",
                Object = TargetDvcId,
                ObjectType = "Directory Service Object",
                OriginalObjectType = "Device";
        let Re_Registration = allData
        | where description_s startswith "Re-registration of device"
        | parse description_s with "Re-registration of device" TargetFQDN: string " of " TargetDvcId: string " device completed" *
        | invoke _ASIM_ResolveFQDN ("TargetFQDN")
        | extend
            EventType = "Enable",
            Operation = "Re-registration of device",
            Object = TargetFQDN,
            ObjectType = "Directory Service Object",
            OriginalObjectType = "Device";
      union
          Enabled,
            Set,
            AlertNotify,
            CustomRole,
            Policy,
            Changed,
            ParamsUpdated,
            Reputation,
            PolicyUpdateApplied,
            auto_deletion,
            Hash_Deleted,
            Failure_Deleting_Hash,
            Delete_Hash,
            Success_Deleting_Hash,
            DeviceUninstalled,
            DeviceReset,
            CreateOrModifyPolicy,
            LogsRequested,
            Re_Registration
      | extend EventResult = iif(isnotempty(EventResult), EventResult, "Success")
      | where (eventresult == "*" or EventResult =~ eventresult)
          and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
          and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
          and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
      | extend
          EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
          EventSeverity = coalesce(EventSeverity1, "Informational"),
          AdditionalFields = bag_merge(AdditionalFields, bag_pack("flagged", flagged_b, "request url", requestUrl_s))
      | extend
          EventProduct = "Carbon Black Cloud",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1",
          EventVendor = "VMware",
          EventCount = int(1)
      | project-rename
          ActorUsername = loginName_s,
          EventUid = _ItemId,
          SrcIpAddr = clientIp_s,
          EventMessage = description_s,
          EventOriginalUid = eventId_g,
          ActorScope = orgName_s
      | extend
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
          TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
          EventEndTime = EventStartTime,
          Src = SrcIpAddr,
          IpAddr = SrcIpAddr,
          Dvc = EventProduct,
          User = ActorUsername,
          Value = NewValue,
          ValueType = iff(isnotempty(NewValue), "Other", "")
      | project-away 
          *_s,
          *_d,
          *_b,
          temp*,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          _ResourceId,
          name,
          EventSeverity1
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      eventtype_in=eventtype_in, 
      eventresult=eventresult, 
      actorusername_has_any=actorusername_has_any, 
      operation_has_any=operation_has_any, 
      object_has_any=object_has_any, 
      newvalue_has_any=newvalue_has_any, 
      disabled=disabled
  )
