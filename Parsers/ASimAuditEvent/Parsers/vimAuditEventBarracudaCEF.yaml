Parser:
  Title: Audit Event ASIM parser for Barracuda WAF
  Version: '0.2.1'
  LastUpdated: Jun 12, 2024
Product:
  Name: Barracuda WAF
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Logs type Description in Barracuda WAF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports normalizing Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Audit Event schema.
ParserName: vimAuditEventBarracudaCEF
EquivalentBuiltInParser: _Im_AuditEvent_BarracudaCEF
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: newvalue_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let EventTypeLookup = datatable (
      ChangeType_s: string,
      EventType_lookup: string
  )
      [
      "SET", "Set",
      "ADD", "Create",
      "DEL", "Delete",
      "NONE", "Other",
      "", "Other"
  ];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[
      "global", "Other",
      "Services", "Service",
      "web_firewall_policy", "Policy Rule",
      "service", "Service",
      "json_url_profile", "Other",
      "server", "Service",
      "header_acl", "Directory Service Object",
      "virtual_ip_config_address", "Configuration Atom",
      "aps_req_rewrite_policy", "Policy Rule",
      "aps_url_acl", "Directory Service Object",
      "websocket_security_policy", "Policy Rule",
      "aps_ftp_acl", "Directory Service Object",
      "user_system_ip", "Configuration Atom",
      "syslog_server", "Service",
      "attack_action", "Configuration Atom",
      "global_adr", "Configuration Atom",
      "aps_content_protection", "Other"
  ];
  let parser = (
      disabled: bool=false,
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      eventtype_in: dynamic=dynamic([]),
      eventresult: string='*',
      newvalue_has_any: dynamic=dynamic([]),
      operation_has_any: dynamic=dynamic([]))
      {
        let BarracudaCEF = 
            CommonSecurityLog
            | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
            | where DeviceEventCategory == "AUDIT" 
                and (toupper(ProcessName) !in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
            | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
            | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
            | extend
                Operation = ProcessName,
                EventResult = "Success"
            | where (eventresult == "*" or EventResult =~ eventresult)
                and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
                and (array_length(newvalue_has_any) == 0 or DeviceCustomString1 has_any (newvalue_has_any))
            | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason:string 
            | extend Reason = trim(@'(")', Reason)
            | extend 
                EventResultDetails = Reason
            | lookup EventTypeLookup on $left.EventOutcome == $right.ChangeType_s
            | extend EventType = EventType_lookup
            | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)
            | extend 
                severity = toint(LogSeverity)
            | lookup SeverityLookup on severity
            | lookup ObjectTypeLookup on $left.FileType == $right.ObjectType_s
            | extend
                EventSchema = "AuditEvent",
                EventSchemaVersion = "0.1.0",
                EventVendor = "Barracuda",
                EventProduct = "WAF",
                EventCount = toint(1)
            | extend
                Dvc = DeviceName, 
                Operation = ProcessName,
                DvcIpAddr = DeviceAddress,
                NewValue = DeviceCustomString1,
                SrcIpAddr = SourceIP,
                EventMessage = Message,
                OldValue = DeviceCustomString2,
                DvcHostname = DeviceName,
                ActorUsername = DestinationUserName,
                Object = FileName,
                EventUid = _ItemId,
                ThreatConfidence = toint(ThreatConfidence),
                EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
            | extend
                Src = SrcIpAddr,
                ActorUsernameType = iff(isnotempty(ActorUsername),"Simple",""),
                ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
                User = ActorUsername,
                Value = NewValue,
                EventEndTime = EventStartTime
            | extend
                IpAddr = SrcIpAddr,
                ValueType = iff(isnotempty(Value),"Other","")
            | project-away
                EventType_lookup,
                ThreatConfidence,
                CommunicationDirection,
                AdditionalExtensions,
                Device*,
                Source*,
                Destination*,
                Activity,
                LogSeverity,
                ApplicationProtocol,
                ProcessID,
                ExtID,
                Protocol,
                Reason,
                ReceiptTime,
                SimplifiedDeviceAction,
                OriginalLogSeverity,
                ProcessName,
                EndTime,
                ExternalID,
                File*,
                ReceivedBytes,
                Message,
                Old*,
                EventOutcome,
                Request*,
                StartTime,
                Field*,
                Flex*,
                Remote*,
                Malicious*,
                severity,
                ThreatSeverity,
                IndicatorThreatType,
                ThreatDescription,
                _ResourceId,
                SentBytes,
                ReportReferenceLink,
                Computer,
                TenantId,CollectorHostName,
                _ItemId;
        BarracudaCEF
      };
      parser(
                disabled=disabled,
                starttime=starttime,
                endtime=endtime,
                srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
                eventtype_in=eventtype_in,
                eventresult=eventresult,
                newvalue_has_any=newvalue_has_any,
                operation_has_any=operation_has_any
            )