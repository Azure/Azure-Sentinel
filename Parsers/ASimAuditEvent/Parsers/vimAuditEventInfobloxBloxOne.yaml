Parser:
  Title: AuditEvent ASIM parser for Infoblox BloxOne
  Version: '0.1.0'
  LastUpdated: Sep 11, 2024
Product:
  Name: Infoblox BloxOne
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM AuditEvent Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Infoblox BloxOne Documentation
  Link: https://docs.infoblox.com/space/BloxOneThreatDefense
Description: |
  This ASIM parser supports normalizing AuditEvent logs from Infoblox BloxOne to the ASIM AuditEvent normalized schema. These events are captured through the Azure Monitor Agent (AMA) which are sent by the Data Connector Service of Infoblox BloxOne.
ParserName: vimAuditEventInfbloxBloxOne
EquivalentBuiltInParser: _Im_AuditEvent_InfobloxBloxOne
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: object_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: newvalue_has_any
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let EventSeverityLookup = datatable (LogSeverity:string, EventSeverity:string)
      [
      "0", "Low",
      "1", "Low",
      "2", "Low",
      "3", "Low",
      "4", "Medium",
      "5", "Medium",
      "6", "Medium",
      "7", "High",
      "8", "High",
      "9", "High",
      "10", "High"
  ];
  let OperationLookup = datatable (DeviceAction:string, Object:string, ObjectType:string)
  [
    "CreateSecurityPolicy", "Security Policy", "Policy Role",
    "UpdateSecurityPolicy", "Security Policy", "Policy",
    "Create", "Network Resource", "Service",
    "Update", "Network Resource", "Service",
    "Restore", "Infoblox Resource", "Service",
    "CreateOrGetDoHFQDN", "DOHFQDN", "Service",
    "CreateOrUpdateDfpService", "Dfp Service", "Service",
    "MoveToRecyclebin", "Recyclebin", "Other",
    "CreateCategoryFilter", "Category Filter", "Other",
    "GetLookalikeThreatCounts", "Lookalike Threat Counts", "Other",
    "GetLookalikeDomainCounts", "Lookalike Domain Counts", "Other",
    "CreateRoamingDeviceGroup", "Roaming Device Group", "Configuration Atom",
    "UpdatePartialRoamingDeviceGroup", "Partial Roaming Device Group", "Configuration Atom"
  ];
  let parser = (disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), object_has_any: dynamic=dynamic([]), newvalue_has_any: dynamic=dynamic([])) {
      CommonSecurityLog
      | where not(disabled) 
          and (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime) 
          and DeviceVendor == "Infoblox"
          and DeviceEventClassID has "AUDIT"
          and (eventresult == "*" or EventOutcome =~ eventresult)
          and (array_length(operation_has_any) == 0 or DeviceAction has_any (operation_has_any))
          and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
          and (array_length(actorusername_has_any) == 0 or SourceUserName has_any (actorusername_has_any))
          and array_length(newvalue_has_any) == 0
      | parse-kv AdditionalExtensions as (InfobloxHTTPReqBody:string, InfobloxHTTPRespBody:string) with (pair_delimiter=";", kv_delimiter="=")
      | extend EventType = case(
                  DeviceAction has_any ("update", "upsert"),
                  "Set", 
                  DeviceAction has "create",
                  "Create",
                  DeviceAction has "delete",
                  "Delete",
                  "Other"
              )
      | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
      | lookup EventSeverityLookup on LogSeverity
      | lookup OperationLookup on DeviceAction
      | extend Object = iff(isempty(Object), "Infoblox Network Resource", Object),
        ObjectType = iff(isempty(ObjectType), "Service", ObjectType)
      | where (array_length(object_has_any) == 0 or Object has_any (object_has_any))
      | invoke _ASIM_ResolveDvcFQDN('CollectorHostName')
      | project-rename
          EventResult = EventOutcome,
          Operation = DeviceAction,
          ActorUsername = SourceUserName,
          SrcIpAddr = SourceIP,
          EventOriginalSeverity = LogSeverity,
          EventMessage = Message,
          EventOriginalType = DeviceEventClassID,
          EventUid = _ItemId
      | extend
          Dvc = DvcHostname,
          EventEndTime = TimeGenerated,
          EventStartTime = TimeGenerated,
          Src = SrcIpAddr,
          ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
          AdditionalFields = bag_pack(
                        "InfobloxHTTPReqBody",
                        InfobloxHTTPReqBody,
                        "InfobloxHTTPRespBody",
                        InfobloxHTTPRespBody
                    ),
          User = ActorUsername,
          IpAddr = SrcIpAddr,
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)
      | extend
          EventCount = toint(1),
          EventProduct = "BloxOne",
          EventVendor = "Infoblox",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1"
      | project-away
          Source*,
          Destination*,
          Device*,
          AdditionalExtensions,
          CommunicationDirection,
          Protocol,
          SimplifiedDeviceAction,
          ExternalID,
          EndTime,
          FieldDevice*,
          Flex*,
          File*,
          Old*,
          MaliciousIP*,
          OriginalLogSeverity,
          Process*,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          StartTime,
          TenantId,
          ReportReferenceLink,
          ReceiptTime,
          Indicator*,
          _ResourceId,
          ThreatConfidence,
          ThreatDescription,
          ThreatSeverity,
          Computer,
          ApplicationProtocol,
          ExtID,
          Reason,
          Activity,
          Infoblox*
  };
  parser(disabled=disabled,  starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any)
