Parser:
  Title: Audit Event ASIM filtering parser for Microsoft Sentinel native Audit Event table
  Version: '0.1.0'
  LastUpdated: Dec 13, 2024
Product:
  Name: Native
Normalization:
  Schema: AuditEvent
  Version: '0.1'
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing the native Microsoft Sentinel Audit Event table (ASimAuditEventLogs) to the ASIM Audit Event normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 
ParserName: vimAuditEventNative
EquivalentBuiltInParser: _Im_AuditEvent_Native
ParserParams:
    - Name: starttime
      Type: datetime
      Default: datetime(null)
    - Name: endtime
      Type: datetime
      Default: datetime(null)
    - Name: srcipaddr_has_any_prefix
      Type: dynamic
      Default: dynamic([])
    - Name: actorusername_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: operation_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: eventtype_in
      Type: dynamic
      Default: dynamic([])
    - Name: eventresult
      Type: string
      Default: "*"
    - Name: object_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: newvalue_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: disabled
      Type: bool
      Default: false

ParserQuery: |
  let parser=
  (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    eventtype_in: dynamic=dynamic([]),
    eventresult: string='*',
    actorusername_has_any: dynamic=dynamic([]),
    operation_has_any: dynamic=dynamic([]),
    object_has_any: dynamic=dynamic([]),
    newvalue_has_any: dynamic=dynamic([]),
    disabled: bool = false
  )
  {
    ASimAuditEventLogs  | where not(disabled)
    | project-rename
          EventUid = _ItemId
    | where (isnull(starttime) or TimeGenerated >= starttime) 
                    and (isnull(endtime) or TimeGenerated <= endtime)
                    and ((array_length(srcipaddr_has_any_prefix) == 0) or SrcIpAddr has_any (srcipaddr_has_any_prefix))
                    and (array_length(actorusername_has_any) == 0  or ActorUsername has_any (actorusername_has_any))
                    and (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
                    and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
                    and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
                    and (eventresult == '*' or EventResult == eventresult)
                    and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
    | extend EventSchema = "AuditEvent"
    | extend
          Value	= NewValue,
          User =  ActorUsername,
          Application =  TargetAppName,
          Dst = coalesce (TargetDvcId, TargetHostname, TargetIpAddr, TargetAppId, TargetAppName),
          Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),
          Rule=RuleName,
          IpAddr=SrcIpAddr,
          EventStartTime = TimeGenerated,
          EventEndTime = TimeGenerated,
          Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId)
      | project-away 
          _ResourceId, _SubscriptionId
    };
    parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      eventtype_in=eventtype_in, 
      eventresult=eventresult, 
      actorusername_has_any=actorusername_has_any, 
      operation_has_any=operation_has_any, 
      object_has_any=object_has_any, 
      newvalue_has_any=newvalue_has_any, 
      disabled=disabled
    ) 