{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuditEventBarracudaWAF')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Audit Event ASIM parser for Barracuda WAF",
        "category": "ASIM",
        "FunctionAlias": "vimAuditEventBarracudaWAF",
        "query": "let barracudaSchema = datatable(\n    LogType_s: string,\n    UnitName_s: string,\n    EventName_s: string,\n    DeviceReceiptTime_s: string,\n    ChangeType_s: string,\n    CommandName_s: string,\n    Severity_s: string,\n    LoginIP_s: string,\n    NewValue_s: string,\n    HostIP_s: string,\n    host_s: string,\n    OldValue_s: string,\n    EventMessage_s: string,\n    AdminName_s: string,\n    ObjectType_s: string,\n    ObjectName_s: string,\n    TimeTaken_d: real,\n    _ResourceId: string,\n    RawData: string,\n    SourceIP: string,\n    Message: string,\n    Computer: string,\n    MG: string,\n    ManagementGroupName: string,\n    TenantId: string,\n    SourceSystem: string,\n    TimeGenerated: datetime\n)[];\nlet EventTypeLookup = datatable (\n    ChangeType_s: string,\n    EventType_lookup: string\n)\n    [\n    \"SET\", \"Set\",\n    \"ADD\", \"Create\",\n    \"DEL\", \"Delete\",\n    \"NONE\", \"Other\",\n    \"\", \"Other\"\n];\nlet SeverityLookup = datatable (severity: int, EventSeverity: string)\n    [\n    0, \"High\", \n    1, \"High\", \n    2, \"High\", \n    3, \"Medium\",\n    4, \"Low\",\n    5, \"Low\", \n    6, \"Informational\",\n    7, \"Informational\" \n];\nlet ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[\n    \"global\", \"Other\",\n    \"Services\", \"Service\",\n    \"web_firewall_policy\", \"Policy Rule\",\n    \"service\", \"Service\",\n    \"json_url_profile\", \"Other\",\n    \"server\", \"Service\",\n    \"header_acl\", \"Directory Service Object\",\n    \"virtual_ip_config_address\", \"Configuration Atom\",\n    \"aps_req_rewrite_policy\", \"Policy Rule\",\n    \"aps_url_acl\", \"Directory Service Object\",\n    \"websocket_security_policy\", \"Policy Rule\",\n    \"aps_ftp_acl\", \"Directory Service Object\",\n    \"user_system_ip\", \"Configuration Atom\",\n    \"syslog_server\", \"Service\",\n    \"attack_action\", \"Configuration Atom\",\n    \"global_adr\", \"Configuration Atom\",\n    \"aps_content_protection\", \"Other\"\n];\nlet parser = (\n    disabled: bool=false,\n    starttime: datetime=datetime(null),\n    endtime: datetime=datetime(null),\n    srcipaddr_has_any_prefix: dynamic=dynamic([]),\n    eventtype_in: dynamic=dynamic([]),\n    eventresult: string='*',\n    newvalue_has_any: dynamic=dynamic([]),\n    operation_has_any: dynamic=dynamic([]))\n    {\n      let BarracudaCustom = \n          union isfuzzy=true\n              barracudaSchema,\n              barracuda_CL\n          | where not(disabled)\n          | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime) \n          | where LogType_s == \"AUDIT\" and EventName_s !in (\"LOGIN\", \"LOGOUT\", \"UNSUCCESSFUL_LOGIN\")\n          | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(LoginIP_s, srcipaddr_has_any_prefix))\n          | extend\n              Operation = CommandName_s,\n              EventResult = \"Success\"\n          | where (eventresult == \"*\" or EventResult =~ eventresult)\n              and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))\n              and (array_length(newvalue_has_any) == 0 or NewValue_s has_any (newvalue_has_any))\n          | parse trim(@'[^\\w(\")]+', EventMessage_s) with * \"Reason=\" Reason:string\n          | extend Reason = trim(@'(\")', Reason)\n          | extend\n              EventResultDetails = Reason\n          | lookup EventTypeLookup on ChangeType_s\n          | extend EventType = EventType_lookup\n          | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)\n          | extend \n              severity = toint(Severity_s)\n          | lookup SeverityLookup on severity\n          | lookup ObjectTypeLookup on ObjectType_s\n          | extend\n              EventSchema = \"AuditEvent\",\n              EventSchemaVersion = \"0.1.0\",\n              EventVendor = \"Barracuda\",\n              EventProduct = \"WAF\",\n              EventCount = toint(1)\n          | extend\n              Dvc = UnitName_s,\n              DvcIpAddr = HostIP_s,\n              NewValue = NewValue_s,\n              SrcIpAddr = LoginIP_s,\n              EventMessage = EventMessage_s,\n              OldValue = OldValue_s,\n              DvcHostname = host_s,\n              ActorUsername = AdminName_s,\n              Object = ObjectName_s,\n              EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)))\n          | extend\n              Src = SrcIpAddr,\n              ActorUsernameType = iff(isnotempty(ActorUsername), \"Simple\", \"\"),\n              ActorUserType = iff(isnotempty(ActorUsername), \"Admin\", \"\"),\n              User = ActorUsername,\n              Value = NewValue,\n              EventEndTime = EventStartTime\n          | extend\n              IpAddr = SrcIpAddr,\n              ValueType = iff(isnotempty(Value),\"Other\",\"\")\n          | project-away\n              *_d,\n              *_s,\n              EventType_lookup,\n              Reason,\n              _ResourceId,\n              severity,\n              RawData,\n              SourceIP,\n              Message,\n              Computer,\n              MG,\n              ManagementGroupName,\n              TenantId,\n              SourceSystem;\n      BarracudaCustom\n    };\n    parser(\n              disabled=disabled,\n              starttime=starttime,\n              endtime=endtime,\n              srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n              eventtype_in=eventtype_in,\n              eventresult=eventresult,\n              newvalue_has_any=newvalue_has_any,\n              operation_has_any=operation_has_any\n          )",
        "version": 1,
        "functionParameters": "disabled:bool=False,starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresult:string='*',newvalue_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([])"
      }
    }
  ]
}
