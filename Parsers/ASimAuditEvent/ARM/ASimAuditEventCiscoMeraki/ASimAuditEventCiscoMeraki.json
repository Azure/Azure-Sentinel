{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuditEventCiscoMeraki')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Audit Event ASIM parser for Cisco Meraki",
        "category": "ASIM",
        "FunctionAlias": "ASimAuditEventCiscoMeraki",
        "query": "let EventFieldsLookup = datatable(TempOperation: string, Operation: string, EventResult: string, EventType: string)\n[\n  \"vpn_connectivity_change\", \"VPN connectivity change\",\"Success\", \"Set\",\n  \"purging ISAKMP-SA\", \"Purging ISAKMP-SA\",\"Partial\", \"Delete\",\n  \"purged ISAKMP-SA\", \"Purged ISAKMP-SA\",\"Success\", \"Delete\",\n  \"ISAKMP-SA deleted\", \"ISAKMP-SA deleted\",\"Success\", \"Delete\",\n  \"IPsec-SA request\", \"IPsec-SA request queued\",\"Failure\", \"Other\",\n  \"failed to get sainfo\", \"Failed to get sainfo\",\"Failure\", \"Other\",\n  \"failed to pre-process ph2 packet\", \"Failed to pre-process ph2 packet\",\"Failure\", \"Other\",\n  \"phase2 negotiation failed\", \"Phase2 negotiation failed\",\"Failure\", \"Other\",\n  \"initiate new phase 1 negotiation\", \"Initiate new phase 1 negotiation\",\"Success\", \"Initialize\",\n  \"ISAKMP-SA established\", \"ISAKMP-SA established\",\"Success\", \"Create\",\n  \"initiate new phase 2 negotiation\", \"Initiate new phase 2 negotiation\",\"Partial\", \"Initialize\",\n  \"IPsec-SA established\", \"IPsec-SA established\",\"Success\", \"Create\",\n  \"STP role\", \"Spanning-tree interface role change\",\"Success\", \"Set\",\n  \"STP BPDU\", \"Spanning-tree guard state change\", \"\", \"\",\n  \"VRRP transition\", \"VRRP transition\",\"Success\", \"Set\",\n  \"port status change\", \"Port status change\", \"\", \"\"\n];\nlet EventSeverityLookup=datatable(EventResult: string, EventSeverity: string)[\n    \"Success\", \"Informational\",\n    \"Partial\", \"Informational\",\n    \"Failure\", \"Low\"\n];\nlet parser=(disabled: bool=false) {\nlet allData = union isfuzzy=true\n    (\n    meraki_CL\n    | project-rename LogMessage =  Message\n    );\nlet PreFilteredData = allData\n    | where not(disabled)\n        and LogMessage has \"events\"\n        and (LogMessage has_any (\"vpn_connectivity_change\", \"status changed\", \"VRRP active\", \"VRRP passive\") or LogMessage has_cs \"Site-to-site\" or LogMessage has_cs \"Port\")\n    | extend Parser = extract_all(@\"(\\d+.\\d+)\\s([\\w\\-\\_]+)\\s([\\w\\-\\_]+)\\s([\\S\\s]+)$\", dynamic([1, 2, 3, 4]), LogMessage)[0]\n    | extend\n        LogType = tostring(Parser[2]),\n        Substring = tostring(Parser[3])\n    | where LogType == \"events\";\nlet SiteToSiteData = PreFilteredData\n    | where Substring has_cs \"Site-to-site\";\nlet SiteToSite_deleted = SiteToSiteData\n    | where Substring has \"ISAKMP-SA deleted\"\n    | extend TempOperation = \"ISAKMP-SA deleted\"\n    | parse Substring with * \" deleted \" temp_deletedSrcIp:string  \"-\" temp_deletedTargetIp:string \" \" temp_restmessage:string\n    | extend temp_srcipport = temp_deletedSrcIp,\n            temp_targetipport = temp_deletedTargetIp;\nlet SiteToSite_negotiation = SiteToSiteData\n    | where Substring has_any(\"initiate new phase 1 negotiation\", \"initiate new phase 2 negotiation\")\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \": \" temp_negotiationSrcIp:string \"<=>\" temp_negotiationTargetIp:string\n    | extend temp_srcipport = temp_negotiationSrcIp,\n            temp_targetipport = temp_negotiationTargetIp;\nlet SiteToSite_ESP = SiteToSiteData\n    | where Substring has \"phase2 negotiation failed due to time up waiting for phase1\"\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \" due to \" EventResultDetails \" ESP \" temp_espSrcIp:string \"->\" temp_espTargetIp:string\n    | extend temp_srcipport = temp_espSrcIp,\n            temp_targetipport = temp_espTargetIp;\nlet SiteToSite_tunnel = SiteToSiteData\n    | where Substring has \"IPsec-SA established\"\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \":\" * \"Tunnel \" temp_tunnelSrcIp:string \"->\" temp_tunnelTargetIp:string \" \" temp_restmessage:string\n    | extend temp_srcipport = temp_tunnelSrcIp,\n            temp_targetipport = temp_tunnelTargetIp;\nlet SiteToSite_ISAKMPestablished = SiteToSiteData\n    | where Substring has \"ISAKMP-SA established\"\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \" established \" temp_estSrcIp:string \"-\" temp_estTargetIp:string \" \" temp_restmessage:string\n    | extend TempOperation = strcat(TempOperation, ' ', 'established'),\n            temp_srcipport = temp_estSrcIp,\n            temp_targetipport = temp_estTargetIp;\nlet SiteToSite_IPsecSArequest = SiteToSiteData\n    | where Substring has \"IPsec-SA request\"\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \" for \" temp_forTaregtSrcIp:string \" \" * \" due to\" EventResultDetails:string\n    | extend temp_targetipport = temp_forTaregtSrcIp;\nlet SiteToSite_purging = SiteToSiteData\n    | where Substring has_any(\"purging ISAKMP-SA\", \"purged ISAKMP-SA\")\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string \" spi=\" temp_restmessage:string;\nlet SiteToSite_failed = SiteToSiteData\n    | where Substring has_any (\"failed to get sainfo\", \"failed to pre-process ph2 packet\")\n    | parse Substring with * \"Site-to-site VPN: \" TempOperation:string\n    | extend TempOperation = tostring(split(TempOperation, ' (')[0]);\nlet VPNConnectivityChangeData = PreFilteredData\n    | where Substring has \"vpn_connectivity_change\"\n    | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n    | extend type = trim('\"', type),\n            connectivity = trim('\"', connectivity)\n    | extend TempOperation = type,\n            temp_srcipport = peer_contact;\nlet StatusChangedData = PreFilteredData\n    | where Substring has \"status changed\"\n    | parse Substring with * \"port \" port:string \" \" portnextpart:string\n    | extend TempOperation = \"port status change\";\nlet PortData = PreFilteredData\n    | where Substring has_cs \"Port\"\n    | parse Substring with * \"Port \" Port1:string \" received an \" TempOperation1:string \" from \" STPMac:string \" \" temp_restmessage:string\n    | parse Substring with * \"Port \" Port2:string \" changed \" TempOperation2:string \" from \" PortNextPart:string\n    | extend Port = coalesce(Port1,Port2)\n    | extend TempOperation = coalesce(TempOperation1, TempOperation2);\nlet VRRPData = PreFilteredData\n    | where Substring has_any(\"VRRP active\", \"VRRP passive\")\n    | extend TempOperation = \"VRRP transition\";\nunion VPNConnectivityChangeData, StatusChangedData, PortData, VRRPData, SiteToSite_deleted, SiteToSite_ESP, SiteToSite_failed, SiteToSite_IPsecSArequest, SiteToSite_ISAKMPestablished, SiteToSite_negotiation, SiteToSite_purging, SiteToSite_tunnel\n      | extend Epoch = tostring(Parser[0]),\n          Device = tostring(Parser[1])\n      | extend EpochTimestamp = split(Epoch, \".\")\n      | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))\n      | lookup EventFieldsLookup on TempOperation\n      | extend \n          temp_srcipport = iff(temp_srcipport has \"]\" and temp_srcipport !has \":\", trim(']', temp_srcipport), temp_srcipport),\n          temp_targetipport = iff(temp_targetipport has \"]\" and temp_targetipport !has \":\", trim(']', temp_targetipport), temp_targetipport)\n      | extend \n          temp_srcipport = iff(temp_srcipport has \"[\" and temp_srcipport !has \":\", replace_string(temp_srcipport,'[',':'), temp_srcipport),\n          temp_targetipport = iff(temp_targetipport has \"[\" and temp_targetipport !has \":\", replace_string(temp_targetipport,'[',':'), temp_targetipport),\n          DvcMacAddr = iff(Operation == \"Spanning-tree guard state change\" and isnotempty(STPMac) and STPMac matches regex \"([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4})\\'*\", STPMac, \"\")\n      | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == \"Spanning-tree guard state change\", STPMac, temp_srcipport)\n      | extend\n          temp_srcipport = trim(\"'\", temp_srcipport),\n          temp_targetipport = trim(\"'\", temp_targetipport)\n      | extend \n          temp_srcipport = trim('\"', temp_srcipport),\n          temp_targetipport = trim('\"', temp_targetipport)\n      | parse temp_srcipport with * \"[\" temp_srcip \"]:\" temp_srcport\n      | extend SrcIpAddr = iff(temp_srcipport has \".\", split(temp_srcipport, \":\")[0], coalesce(temp_srcip, temp_srcipport))\n      | parse temp_targetipport with * \"[\" temp_targetip \"]:\" temp_targetport\n      | extend TargetIpAddr = iff(temp_targetipport has \".\", split(temp_targetipport, \":\")[0], coalesce(temp_targetip, temp_targetipport))\n      | extend TargetPortNumber = iff(TargetIpAddr has \".\", toint(split(temp_targetipport, \":\")[1]), toint(coalesce(temp_targetport, \"\")))\n      | extend SrcPortNumber = case(\n                              isnotempty(temp_srcipport),\n                              iff(SrcIpAddr has \".\", toint(split(temp_srcipport, \":\")[1]), toint(coalesce(temp_srcport, \"\"))),\n                              Substring has_cs \"Port\",\n                              toint(Port),\n                              Operation == \"Port status change\",\n                              toint(port),\n                              int(null)\n                          )\n      | extend EventResult = case(\n                              (Operation == \"Port status change\" and Substring has \"from Down\") or (Operation has_cs \"Spanning-tree guard state change\" and Substring has_any (\"connected\", \"forwarding\")),\n                              \"Success\",\n                              (Operation == \"Port status change\" and Substring has \"to Down\") or (Operation has_cs \"Spanning-tree guard state change\" and Substring has_any (\"disconnected\", \"error disabled\", \"blocked\", \"disabled\", \"not configured\")),\n                              \"Failure\",\n                              Operation has_cs \"Spanning-tree guard state change\" and Substring has \"learning\",\n                              \"Partial\",\n                              EventResult\n                          )\n        | extend EventType = case(Operation in(\"Port status change\", \"Spanning-tree guard state change\") and EventResult == \"Success\", \"Enable\",\n            (Operation == \"Port status change\" and EventResult == \"Failure\") or (Operation == \"Spanning-tree guard state change\" and EventResult in (\"Partial\", \"Failure\")), \"Disable\",\n            EventType\n        )\n      | lookup EventSeverityLookup on EventResult\n      | extend\n          EventResultDetails = case(\n                                  Operation == \"VPN connectivity change\" and isnotempty(connectivity), strcat(\"connectivity=\", connectivity),\n                                  Operation == \"IPsec-SA request queued\" or Operation == \"Phase2 negotiation failed\", split(Substring, 'due to')[1], \n                                  Substring has \"Site-to-site\", split(Substring, 'Site-to-site ')[1],\n                                  Substring\n                              ),\n          EventMessage = Substring,\n          EventOriginalType = LogType,\n          EventUid = _ResourceId\n      | invoke _ASIM_ResolveDvcFQDN('Device')\n      | extend\n          Dvc = DvcHostname,\n          IpAddr = SrcIpAddr,\n          Src = SrcIpAddr,\n          EventEndTime = EventStartTime, \n          EventCount = int(1),\n          EventProduct = \"Meraki\",\n          EventVendor = \"Cisco\",\n          EventSchema = \"AuditEvent\",\n          EventSchemaVersion = \"0.1\"\n      | project-away\n          LogMessage,\n          Parser,\n          Epoch,\n          EpochTimestamp,\n          Device,\n          Substring,\n          TempOperation*,\n          temp*,\n          STPMac,\n          peer_contact,\n          connectivity,\n          Port*,\n          port,\n          portnextpart,\n          LogType,\n          type,\n          TenantId,\n          SourceSystem,\n          Computer,\n          _ResourceId,\n          MG,\n          ManagementGroupName,\n          RawData\n  };\n  parser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
