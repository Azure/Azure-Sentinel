{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuditEventMicrosoftWindowsEvents')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Audit Event ASIM filtering parser for Microsoft Windows Events audit events",
        "category": "ASIM",
        "FunctionAlias": "vimAuditEventMicrosoftWindowsEvents",
        "query": "let parser = (\nstarttime: datetime=datetime(null), \nendtime: datetime=datetime(null),\nsrcipaddr_has_any_prefix: dynamic=dynamic([]), \neventtype_in: dynamic=dynamic([]),\neventresult: string='*',\nactorusername_has_any: dynamic=dynamic([]),\noperation_has_any: dynamic=dynamic([]),\nobject_has_any: dynamic=dynamic([]),\nnewvalue_has_any: dynamic=dynamic([]),\ndisabled: bool = false\n) {\n// Parsed Events Ids\nlet ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);\n// Eventlog Event Ids\nlet EventlogEventIds = dynamic([1102]);\n// Scheduled Task Event Ids\nlet ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);\n// Active Directory Replica Source Naming Context Event Ids\nlet ActiveDirectoryReplicaIds = dynamic([4929]);\n// Firewall Event Ids\nlet FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);\n// Service Event Ids\nlet ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]);   \n// EventID Lookup\n// Directory Service Object Ids\nlet DirectoryServiceIds = dynamic([5136]);\n// Clear Audit Log Event\nlet AuditLogClearedEventID = dynamic([1102]); \nlet EventIDLookup = datatable(\nEventID: int,\nOperation: string,\nEventType: string,\nObject: string,\nObjectType: string,\nEventResult: string\n)\n        [   \n    1102, \"Delete Logs\", \"Delete\", \"Security Logs\", \"Event Log\", \"Success\",\n    4698, \"Create Scheduled Task\", \"Create\", \"\", \"Scheduled Task\", \"Success\",\n    4699, \"Delete Scheduled Task\", \"Delete\", \"\", \"Scheduled Task\", \"Success\",\n    4700, \"Enable Scheduled Task\", \"Enable\", \"\", \"Scheduled Task\", \"Success\",\n    4701, \"Disable Scheduled Task \", \"Disable\", \"\", \"Scheduled Task\", \"Success\",\n    4702, \"Update Scheduled Task\", \"Set\", \"\", \"Scheduled Task\", \"Success\",\n    4929, \"Remove Active Directory Replica Source Naming Context\", \"Delete\", \"\", \"Other\", \"Success\",\n    5025, \"Stop Firewall Service\", \"Disable\", \"Firewall Service\", \"Service\", \"Success\",\n    5027, \"Retrieve the Security Policy From The Local Storage\", \"Read\", \"Firewall Service\", \"Service\", \"Failure\",\n    5028, \"Parse the new Security Policy\", \"Set\", \"Firewall Service\", \"Service\", \"Failure\",\n    5029, \"Initialize the Firewall Driver\", \"Initialize\", \"Firewall Service\", \"Service\", \"Failure\",\n    5030, \"Start the Firewall Service\", \"Start\", \"Firewall Service\", \"Service\", \"Failure\",\n    5034, \"Stop Firewall Driver\", \"Stop\", \"Firewall Driver\", \"Driver\", \"Failure\",\n    5035, \"Start Firewall Driver\", \"Start\", \"Firewall Driver\", \"Driver\", \"Failure\",\n    5037, \"Terminating Firewall Driver\", \"Terminate\", \"Firewall Driver\", \"Driver\", \"Failure\",\n    7035, \"Start Control Sent\", \"Execute\", \"Service\", \"Service\", \"Success\",\n    7036, \"Enter Stop State\", \"Stop\", \"Service\", \"Service\", \"Success\",\n    7040, \"Changed Service Settings\", \"Set\", \"Service\", \"Service\", \"Success\",\n    7045, \"Install Service\", \"Install\", \"Service\", \"Service\", \"Success\",\n    2009, \"Load Group Policy\", \"Other\", \"Service\", \"Service\", \"Failure\",\n    5136, \"Modified Directory Services Object\", \"Set\", \"\", \"Directory Service Object\", \"Success\"\n];\n    let FilteredEventIds = toscalar(EventIDLookup \n        | where (array_length(eventtype_in) == 0 or EventType in (eventtype_in))\n            and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))\n            and (eventresult == '*' or EventResult == eventresult)\n            and EventID != 1102 // Exclude this EventID, we have separate section for including EventID 1102\n        | summarize make_set(EventID)\n        );\n    let ParsedEvents =\n        union\n            (\n            WindowsEvent\n            | where not(disabled)\n            | where (isnull(starttime) or TimeGenerated >= starttime) \n                and (isnull(endtime) or TimeGenerated <= endtime)\n                and EventID in(FilteredEventIds)\n            | where (array_length(srcipaddr_has_any_prefix) == 0)\n                and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))   \n                and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))\n            | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId\n            | extend\n                SubjectUserSid = tostring(EventData.SubjectUserSid),\n                SubjectUserName = tostring(EventData.SubjectUserName),\n                SubjectDomainName = tostring(EventData.SubjectDomainName),\n                SubjectLogonId = tostring(EventData.SubjectLogonId),\n                TaskName = tostring(EventData.TaskName),\n                TaskContent = tostring(EventData.TaskContent),\n                TaskContentNew = tostring(EventData.TaskContentNew),\n                ClientProcessId = tostring(EventData.ClientProcessId),\n                DestinationDRA = tostring(EventData.DestinationDRA),\n                SourceDRA = tostring(EventData.SourceDRA),\n                SourceAddr = tostring(EventData.SourceAddr),\n                ObjectDN = tostring(EventData.ObjectDN),\n                AttributeValue = tostring(EventData.AttributeValue)\n            | where \n                array_length(actorusername_has_any) == 0 \n                or SubjectUserName has_any (actorusername_has_any) \n                or SubjectUserName has_any (actorusername_has_any)        \n            | project-away EventData\n            ),\n            (\n            WindowsEvent\n            | where not(disabled)\n            | where (isnull(starttime) or TimeGenerated >= starttime) \n                and (isnull(endtime) or TimeGenerated <= endtime)\n            | where EventID in (AuditLogClearedEventID) and Provider == \"Microsoft-Windows-Eventlog\"\n            | where (array_length(srcipaddr_has_any_prefix) == 0)\n                and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))\n                and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))\n                and (array_length(eventtype_in) == 0 or 'Delete' in (eventtype_in))\n                and (array_length(operation_has_any) == 0 or 'Delete Logs' has_any (operation_has_any))\n                and (eventresult == '*' or 'Success' =~ eventresult)\n            | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId\n            | extend\n                SubjectUserSid = tostring(EventData.SubjectUserSid),\n                SubjectUserName = tostring(EventData.SubjectUserName),\n                SubjectDomainName = tostring(EventData.SubjectDomainName),\n                SubjectLogonId = tostring(EventData.SubjectLogonId)\n            | where \n                array_length(actorusername_has_any) == 0 \n                or SubjectUserName has_any (actorusername_has_any) \n                or SubjectDomainName has_any (actorusername_has_any)\n                or (strcat(SubjectDomainName, '\\\\', SubjectUserName)) has_any (actorusername_has_any)\n            | project-away EventData\n            )\n        | lookup EventIDLookup on EventID\n    ;\n    // Parse EventLog\n    let EventLog = ParsedEvents\n        | where EventID in(EventlogEventIds)\n            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))\n        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;\n    // Parse Scheduled Task\n    let ScheduledTask = ParsedEvents\n        | where EventID in(ScheduledTaskEventIds)\n        | where (array_length(object_has_any) == 0 or TaskName has_any (object_has_any))\n        | extend \n            Object = TaskName,\n            NewValue = coalesce(\n            TaskContent,\n            TaskContentNew\n        )\n        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))\n        | extend \n            Value = NewValue\n        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue\n    ;\n    // Parse ADR\n    let ActiveDirectoryReplica = ParsedEvents\n        | where EventID in(ActiveDirectoryReplicaIds)\n        | where (array_length(object_has_any) == 0 or DestinationDRA has_any (object_has_any))\n        | extend \n            NewValue = SourceDRA,\n            OldValue = DestinationDRA,\n            SrcFQDN = SourceAddr\n        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))\n        | extend \n            Value = NewValue,\n            Object = OldValue\n        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue\n    ;\n    // Parse WindowsFirewall\n    let WindowsFirewall = ParsedEvents\n        | where EventID in(FirewallEventIds)\n            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))\n        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue\n    ;\n    // Parse ServiceEvent\n    let ServiceEvent = ParsedEvents\n        | where EventID in(ServiceEventIds)\n            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))\n        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue\n    ;\n    // Parse DirectoryService\n    let DirectoryService = ParsedEvents\n        | where EventID in(DirectoryServiceIds)\n            and (array_length(object_has_any) == 0 or ObjectDN has_any (object_has_any))\n        | extend\n            Object = ObjectDN\n        | project-rename \n            NewValue = AttributeValue\n        | extend\n            Value = NewValue\n        | project-away Task*, *DRA, SourceAddr, ObjectDN\n    ;\n    // Union Events\n    union\n        EventLog,\n        ScheduledTask,\n        ActiveDirectoryReplica,\n        WindowsFirewall,\n        ServiceEvent,\n        DirectoryService\n    | invoke _ASIM_ResolveDvcFQDN(\"Computer\")\n    | project-rename \n        ActorUserId = SubjectUserSid,\n        ActorSessionId = SubjectLogonId,\n        DvcId = _ResourceId,\n        ActingAppId = ClientProcessId,\n        EventUid = _ItemId\n    | extend\n        EventCount = int(1),\n        EventStartTime = TimeGenerated, \n        EventEndTime= TimeGenerated,\n        EventProduct = 'Security Events',\n        EventVendor = 'Microsoft',\n        EventSchemaVersion = '0.1.0',\n        EventSchema = 'AuditEvent',\n        EventOriginalType = tostring(EventID),\n        DvcIdType = iff (DvcId == \"\", \"\", \"AzureResourceID\"),\n        ActorUsername = iff (SubjectDomainName == \"\", SubjectUserName, strcat (SubjectDomainName, '\\\\', SubjectUserName)),\n        ActorUsernameType = iff (SubjectDomainName == \"\", 'Simple', 'Windows'),\n        ActorUserIdType = iff (ActorUserId == \"\", \"\", \"SID\"),\n        ActingAppType = \"Process\"\n    | extend\n        User = ActorUsername,\n        Dvc = DvcFQDN\n    | project-away Subject*, EventID, Computer\n};\n  parser (\n      starttime = starttime,\n      endtime = endtime,\n      srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,\n      actorusername_has_any = actorusername_has_any,\n      eventtype_in = eventtype_in,\n      eventresult = eventresult,\n      operation_has_any = operation_has_any,\n      object_has_any=object_has_any,\n      newvalue_has_any=newvalue_has_any,\n      disabled=disabled\n  )",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresult:string='*',object_has_any:dynamic=dynamic([]),newvalue_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
