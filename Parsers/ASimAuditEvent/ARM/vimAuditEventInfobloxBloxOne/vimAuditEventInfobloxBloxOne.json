{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuditEventInfbloxBloxOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "AuditEvent ASIM parser for Infoblox BloxOne",
        "category": "ASIM",
        "FunctionAlias": "vimAuditEventInfbloxBloxOne",
        "query": "let EventSeverityLookup = datatable (LogSeverity:string, EventSeverity:string)\n    [\n    \"0\", \"Low\",\n    \"1\", \"Low\",\n    \"2\", \"Low\",\n    \"3\", \"Low\",\n    \"4\", \"Medium\",\n    \"5\", \"Medium\",\n    \"6\", \"Medium\",\n    \"7\", \"High\",\n    \"8\", \"High\",\n    \"9\", \"High\",\n    \"10\", \"High\"\n];\nlet OperationLookup = datatable (DeviceAction:string, Object:string, ObjectType:string)\n[\n  \"CreateSecurityPolicy\", \"Security Policy\", \"Policy Role\",\n  \"UpdateSecurityPolicy\", \"Security Policy\", \"Policy\",\n  \"Create\", \"Network Resource\", \"Service\",\n  \"Update\", \"Network Resource\", \"Service\",\n  \"Restore\", \"Infoblox Resource\", \"Service\",\n  \"CreateOrGetDoHFQDN\", \"DOHFQDN\", \"Service\",\n  \"CreateOrUpdateDfpService\", \"Dfp Service\", \"Service\",\n  \"MoveToRecyclebin\", \"Recyclebin\", \"Other\",\n  \"CreateCategoryFilter\", \"Category Filter\", \"Other\",\n  \"GetLookalikeThreatCounts\", \"Lookalike Threat Counts\", \"Other\",\n  \"GetLookalikeDomainCounts\", \"Lookalike Domain Counts\", \"Other\",\n  \"CreateRoamingDeviceGroup\", \"Roaming Device Group\", \"Configuration Atom\",\n  \"UpdatePartialRoamingDeviceGroup\", \"Partial Roaming Device Group\", \"Configuration Atom\"\n];\nlet parser = (disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), object_has_any: dynamic=dynamic([]), newvalue_has_any: dynamic=dynamic([])) {\n    CommonSecurityLog\n    | where not(disabled) \n        and (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime) \n        and DeviceVendor == \"Infoblox\"\n        and DeviceEventClassID has \"AUDIT\"\n        and (eventresult == \"*\" or EventOutcome =~ eventresult)\n        and (array_length(operation_has_any) == 0 or DeviceAction has_any (operation_has_any))\n        and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))\n        and (array_length(actorusername_has_any) == 0 or SourceUserName has_any (actorusername_has_any))\n        and array_length(newvalue_has_any) == 0\n    | parse-kv AdditionalExtensions as (InfobloxHTTPReqBody:string, InfobloxHTTPRespBody:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n    | extend EventType = case(\n                DeviceAction has_any (\"update\", \"upsert\"),\n                \"Set\", \n                DeviceAction has \"create\",\n                \"Create\",\n                DeviceAction has \"delete\",\n                \"Delete\",\n                \"Other\"\n            )\n    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))\n    | lookup EventSeverityLookup on LogSeverity\n    | lookup OperationLookup on DeviceAction\n    | extend Object = iff(isempty(Object), \"Infoblox Network Resource\", Object),\n      ObjectType = iff(isempty(ObjectType), \"Service\", ObjectType)\n    | where (array_length(object_has_any) == 0 or Object has_any (object_has_any))\n    | invoke _ASIM_ResolveDvcFQDN('CollectorHostName')\n    | project-rename\n        EventResult = EventOutcome,\n        Operation = DeviceAction,\n        ActorUsername = SourceUserName,\n        SrcIpAddr = SourceIP,\n        EventOriginalSeverity = LogSeverity,\n        EventMessage = Message,\n        EventOriginalType = DeviceEventClassID,\n        EventUid = _ItemId\n    | extend\n        Dvc = DvcHostname,\n        EventEndTime = TimeGenerated,\n        EventStartTime = TimeGenerated,\n        Src = SrcIpAddr,\n        ActorUserType = _ASIM_GetUserType(ActorUsername, \"\"),\n        AdditionalFields = bag_pack(\n                      \"InfobloxHTTPReqBody\",\n                      InfobloxHTTPReqBody,\n                      \"InfobloxHTTPRespBody\",\n                      InfobloxHTTPRespBody\n                  ),\n        User = ActorUsername,\n        IpAddr = SrcIpAddr,\n        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)\n    | extend\n        EventCount = toint(1),\n        EventProduct = \"BloxOne\",\n        EventVendor = \"Infoblox\",\n        EventSchema = \"AuditEvent\",\n        EventSchemaVersion = \"0.1\"\n    | project-away\n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        Protocol,\n        SimplifiedDeviceAction,\n        ExternalID,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        StartTime,\n        TenantId,\n        ReportReferenceLink,\n        ReceiptTime,\n        Indicator*,\n        _ResourceId,\n        ThreatConfidence,\n        ThreatDescription,\n        ThreatSeverity,\n        Computer,\n        ApplicationProtocol,\n        ExtID,\n        Reason,\n        Activity,\n        Infoblox*\n};\nparser(disabled=disabled,  starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any)\n",
        "version": 1,
        "functionParameters": "disabled:bool=False,starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresult:string='*',actorusername_has_any:dynamic=dynamic([]),object_has_any:dynamic=dynamic([]),newvalue_has_any:dynamic=dynamic([])"
      }
    }
  ]
}