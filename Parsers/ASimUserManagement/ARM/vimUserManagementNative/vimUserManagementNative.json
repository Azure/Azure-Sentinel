{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimUserManagementNative')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "User Management activity ASIM filtering parser for Microsoft Sentinel native User Management activity table",
        "category": "ASIM",
        "FunctionAlias": "vimUserManagementNative",
        "query": "let parser = (\n  starttime:datetime                  = datetime(null)\n  , endtime:datetime                  = datetime(null)\n  , srcipaddr_has_any_prefix:dynamic  = dynamic([])\n  , targetusername_has_any:dynamic    = dynamic([])\n  , actorusername_has_any:dynamic     = dynamic([])\n  , eventtype_in:dynamic              = dynamic([])\n  , disabled:bool                     = false\n)\n{\n  ASimUserManagementActivityLogs\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix))\n      and (array_length(actorusername_has_any) == 0 or ActorUsername has_any (actorusername_has_any))\n      and (array_length(targetusername_has_any) == 0 or TargetUsername has_any (targetusername_has_any))\n      and (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))\n  | project-rename\n      EventUid = _ItemId\n  | extend          \n      EventSchema = \"UserManagement\",\n      DvcScopeId = iff(isempty(DvcScopeId), _SubscriptionId, DvcScopeId)\n  //  -- Aliases\n  | extend\n      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),\n      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),\n      Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId),\n      Rule = coalesce(RuleName, tostring(RuleNumber)),\n      User = ActorUsername,\n      Hostname = DvcHostname,\n      IpAddr = SrcIpAddr,\n      Src = coalesce (SrcHostname,SrcIpAddr, SrcDvcId),\n      UpdatedPropertyName = EventSubType\n  | project-away\n      TenantId,\n      SourceSystem,\n      _SubscriptionId,\n      _ResourceId\n};\nparser (\n  starttime                  = starttime\n  , endtime                  = endtime\n  , srcipaddr_has_any_prefix = srcipaddr_has_any_prefix\n  , targetusername_has_any   = targetusername_has_any\n  , actorusername_has_any    = actorusername_has_any\n  , eventtype_in             = eventtype_in\n  , disabled                 = disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetusername_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}
