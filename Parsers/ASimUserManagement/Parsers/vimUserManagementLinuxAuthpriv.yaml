Parser:
  Title: User Management ASIM parser for Linux Authpriv logs
  Version: '0.1.1'
  LastUpdated: Mar 06, 2024
Product:
  Name: Microsoft
Normalization:
  Schema: UserManagement
  Version: '0.1.1'
References:
- Title: ASIM User Management Schema
  Link: https://aka.ms/ASimUserManagementDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Ubuntu remote logging
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man5/rsyslog.conf.5.html 
- Title: gpasswd
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man1/gpasswd.1.html
- Title: groupadd
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/groupadd.8.html
- Title: groupdel
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/groupdel.8.html
- Title: groupmod
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/groupmod.8.html
- Title: useradd
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/useradd.8.html
- Title: userdel
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/userdel.8.html
- Title: usermod
  Link: https://manpages.ubuntu.com/manpages/lunar/en/man8/usermod.8.html
Description: |
  This ASIM parser supports normalizing Linux authpriv logs delivered using Syslog to the ASIM UserManagement normalized schema.
ParserName: vimUserManagementLinuxAuthpriv
EquivalentBuiltInParser: _Im_UserManagement_LinuxAuthpriv
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null),
        srcipaddr_has_any_prefix: dynamic=dynamic([]), 
        targetusername_has_any: dynamic=dynamic([]),
        actorusername_has_any: dynamic=dynamic([]),
        eventtype_in: dynamic=dynamic([]),
        disabled:bool=false
    ) {
  let ActionLookup = datatable (Action:string, EventType:string)
  [
      "added",  "UserAddedToGroup",
      "removed","UserRemovedFromGroup"
  ];
  let SeverityLookup = datatable (SeverityLevel:string, EventSeverity:string)
  [
      "info", "Informational",
      "warn", "Low",
      "err",  "Medium",
      "crit", "High"
  ];    
  let ItemParser = (T:(SyslogMessage:string,SeverityLevel:string,ProcessID:int)) {
      T
      | lookup SeverityLookup on SeverityLevel
      | extend ActingAppId = tostring(ProcessID)
      | project-away SyslogMessage,SeverityLevel, ProcessID
  };
  let SyslogParsed = (
      Syslog
      | where not(disabled)
      | where (isnull(starttime) or TimeGenerated >= starttime)
           and (isnull(endtime) or TimeGenerated <= endtime)
      | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(HostIP, srcipaddr_has_any_prefix)) and
                (array_length(targetusername_has_any) == 0 or (SyslogMessage has_any(targetusername_has_any))) and 
                (array_length(actorusername_has_any) == 0 or (SyslogMessage has_any(actorusername_has_any)))
      | where Computer in (_ASIM_GetSourceBySourceType('LinuxAuthpriv'))
      | where Facility == "authpriv"
          and ProcessName in ("useradd","usermod","userdel","groupadd","groupmod","groupdel","gpasswd")
      | project-away EventTime,Facility,MG,CollectorHostName,SourceSystem,TenantId
  );
  union (
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName == "useradd"
          and  SyslogMessage startswith "new user: name="
      | parse SyslogMessage with "new user: name=" TargetUsername ", UID=" TargetUserId ", GID=" GroupId ", " *
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserCreated", 
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName == "useradd"
          and SyslogMessage startswith "failed adding user '"
      | parse SyslogMessage with "failed adding user '" TargetUsername "', exit code: " EventOriginalResultDetails
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType          = "UserCreated", 
          EventResult        = "Failure",
          EventResultDetails = "Other"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName == "useradd"
          and SyslogMessage startswith "new group: name="
      | parse SyslogMessage with "new user: name=" GroupName ", GID=" GroupId
      | extend 
          EventType   = "UserCreated", 
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName == "useradd"
          and SyslogMessage startswith "cannot open login definitions"
      | extend EventType     = "UserCreated", 
          EventResult        = "Failure",
          EventResultDetails = "NotAuthorized"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName =="useradd" 
          and SyslogMessage startswith "add '"
      | parse SyslogMessage with "add '" TargetUsername "'" * "group '" GroupName "'" 
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserCreated",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserModified" in (eventtype_in)))
      | where ProcessName == "usermod"
          and SyslogMessage startswith "change user name '"
      | parse SyslogMessage with "change user name '" TargetUsername "'" *
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserModified",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserAddedToGroup" in (eventtype_in)))
      | where ProcessName =="usermod" 
          and SyslogMessage startswith "add '"
      | parse SyslogMessage with "add '" TargetUsername "'" * "group '" GroupName "'" 
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserAddedToGroup",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserDisabled" in (eventtype_in)) or ("UserEnabled" in (eventtype_in)))
      | where ProcessName == "usermod"
          and SyslogMessage startswith "change user '"
          and not (SyslogMessage endswith "' password")
      | parse SyslogMessage with "change user '" TargetUsername "' " EventSubType " from '" PreviousPropertyValue "' to '" NewPropertyValue "'"
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType = case (
              EventSubType == "expiration" and PreviousPropertyValue == "never", "UserDisabled",
              EventSubType == "expiration" and NewPropertyValue == "never", "UserEnabled",
              "UserModified"
          ),
          EventResult = "Success"
      | where (array_length(eventtype_in) == 0 or (EventType in (eventtype_in)))
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserCreated" in (eventtype_in)))
      | where ProcessName == "usermod"
          and SyslogMessage startswith "cannot open login definitions"
      | extend 
          EventType          = "UserCreated", 
          EventResult        = "Failure",
          EventResultDetails = "NotAuthorized"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "PasswordChanged" in (eventtype_in)))
      | where ProcessName == "usermod"
          and SyslogMessage startswith "change user '"
          and SyslogMessage endswith "password"
      | parse SyslogMessage with "change user '" TargetUsername "' " EventSubType
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "PasswordChanged",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserLocked" in (eventtype_in)))
      | where ProcessName == "usermod"
          and SyslogMessage startswith "lock user '"
          and SyslogMessage endswith "' password"
      | parse SyslogMessage with "lock user '" TargetUsername "' password"
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserLocked",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserDeleted" in (eventtype_in)))
      | where ProcessName == "userdel"
          and SyslogMessage startswith "delete '"
      | parse SyslogMessage with "delete '" TargetUsername "'" * "group '" GroupName "'" *
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserDeleted",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserDeleted" in (eventtype_in)))
      | where ProcessName == "userdel"
          and SyslogMessage startswith "delete user '"
      | parse SyslogMessage with "delete user '" TargetUsername "'" *
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserDeleted",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "UserDeleted" in (eventtype_in)))
      | where ProcessName == "userdel"
          and (SyslogMessage startswith "removed group '" 
          or SyslogMessage startswith "removed shadow group '")
      | parse SyslogMessage with "removed" * "group '" GroupName "' owned by '" TargetUsername "'"
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any)))
      | extend 
          EventType   = "UserDeleted",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupCreated" in (eventtype_in)))
      | where ProcessName == "groupadd"
          and SyslogMessage startswith "group added to "
          and SyslogMessage has "GID="
      | parse SyslogMessage with "group added to " * "name=" GroupName ", GID=" GroupId
      | extend 
          EventType   = "GroupCreated",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupCreated" in (eventtype_in)))
      | where ProcessName == "groupadd"
          and SyslogMessage startswith "group added to "
          and not(SyslogMessage has "GID=")
      | parse SyslogMessage with "group added to " * "name=" GroupName
      | extend 
          EventType   = "GroupCreated",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupCreated" in (eventtype_in)))
      | where ProcessName == "groupadd"
          and SyslogMessage startswith "new group: name="
      | parse SyslogMessage with "new group: name=" GroupName ", GID=" GroupId
      | extend 
          EventType   = "GroupCreated",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupCreated" in (eventtype_in)))
      | where ProcessName == "groupadd"
          and SyslogMessage startswith "cannot open login definitions"
      | extend 
          EventType          = "GroupCreated", 
          EventResult        = "Failure",
          EventResultDetails = "NotAuthorized"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupModified" in (eventtype_in)))
      | where ProcessName == "groupmod"
          and SyslogMessage startswith "group changed in "
      | parse SyslogMessage with "group changed in " * " (group " Temp_GroupName ", new name: " *
      | extend 
          split(Temp_GroupName, "/")
      | extend 
          GroupName = tostring(Temp_GroupName[0]),
          GroupId   = tostring(Temp_GroupName[1])
      | project-away Temp_GroupName
      | extend 
          EventType   = "GroupModified",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupModified" in (eventtype_in)))
      | where ProcessName == "groupmod"
          and SyslogMessage startswith "failed to change "
      | parse SyslogMessage with "failed to change " * " (group " Temp_GroupName ", new name: " *
      | extend split(Temp_GroupName, "/")
      | extend 
          GroupName = tostring(Temp_GroupName[0]),
          GroupId   = tostring(Temp_GroupName[1])
      | project-away Temp_GroupName
      | extend 
          EventType   = "GroupModified",
          EventResult = "Failure"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(actorusername_has_any) == 0 and 
          (array_length(eventtype_in) == 0 or "GroupDeleted" in (eventtype_in)))
      | where ProcessName == "groupdel"
      | parse SyslogMessage with "group '" GroupName "' removed" *
      | extend 
          EventType   = "GroupDeleted",
          EventResult = "Success"
      | invoke ItemParser()
  ),(
      SyslogParsed
      | where (array_length(eventtype_in) == 0 or ("UserAddedToGroup" in (eventtype_in)) or ("UserRemovedFromGroup" in (eventtype_in)))
      | where ProcessName == "gpasswd"
      | parse SyslogMessage with "user " TargetUsername " " Action " by " ActorUsername " " * " group " GroupName
      | where (array_length(targetusername_has_any) == 0 or (TargetUsername has_any(targetusername_has_any))) and
          (array_length(actorusername_has_any) == 0 or (ActorUsername has_any(actorusername_has_any)))
      | lookup ActionLookup on Action
      | where (array_length(eventtype_in) == 0 or (EventType in (eventtype_in)))
      | project-away Action
      | extend 
          EventResult = "Success"
      | invoke ItemParser()
  )
  | invoke _ASIM_ResolveDvcFQDN ("HostName")
  | project-rename 
      ActingAppName = ProcessName,
      DvcId         = _ResourceId,
      EventUid      = _ItemId
  | extend
      ActingAppType       = "Process",
      ActorUsernameType   = iif(isnotempty(ActorUsername), "Simple", ""),
      DvcIdType           = iff (DvcId == "", "", "AzureResourceID"),
      DvcIpAddr           = iif(HostIP == "Unknown IP","",HostIP),
      DvcOs               = "Linux",
      EventCount          = int(1),
      EventEndTime        = TimeGenerated,
      EventProduct        = "Authpriv",
      EventSchema         = "UserManagement",
      EventSchemaVersion  = "0.1.1",
      EventStartTime      = TimeGenerated,
      EventVendor         = "Linux",
      GroupIdType         = iif(isnotempty(GroupId), "UID", ""),
      GroupNameType       = iif(isnotempty(GroupName), "Simple", ""),
      Hostname            = DvcHostname,
      TargetUserIdType    = iif(isnotempty(TargetUserId), "UID", ""),
      TargetUsernameType  = iif(isnotempty(TargetUsername), "Simple", ""),
      UpdatedPropertyName = EventSubType,
      User                = ActorUsername
      | extend SrcIpAddr = DvcIpAddr
  | project-away Computer, HostIP, HostName
  };
  parser (
    starttime                = starttime,
    endtime                  = endtime,
    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
    targetusername_has_any   = targetusername_has_any,
    actorusername_has_any   = actorusername_has_any,
    eventtype_in             = eventtype_in,
    disabled                 = disabled
  )