Parser:
  Title: User Management ASIM filtering parser
  Version: '0.1.3'
  LastUpdated: May 30, 2024
Product:
  Name: Source agnostic
Normalization:
  Schema: UserManagement
  Version: '0.1'
References:
- Title: ASIM UserManagement Schema
  Link: https://aka.ms/ASimUserManagementDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing User Management logs from all supported sources to the ASIM User Management normalized schema.
ParserName: imUserManagement
EquivalentBuiltInParser: _Im_UserManagement
Parsers:
  - _Im_UserManagement_Empty
  - _Im_UserManagement_CiscoISE 
  - _Im_UserManagement_LinuxAuthpriv
  - _Im_UserManagement_MicrosoftWindowsEvent
  - _Im_UserManagement_MicrosoftSecurityEvent
  - _Im_UserManagement_SentinelOne
  - _Im_UserManagement_Native
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: targetusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: pack
    Type: bool
    Default: false
ParserQuery: |
  let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers')
    | where SearchKey in ('Any', 'ExcludevimUserManagement')
    | extend SourceSpecificParser=column_ifexists('SourceSpecificParser', '')
    | distinct SourceSpecificParser
    | where isnotempty(SourceSpecificParser));
  let ASimBuiltInDisabled=toscalar('ExcludevimUserManagement' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
  let parser=(
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      targetusername_has_any: dynamic=dynamic([]),
      actorusername_has_any: dynamic=dynamic([]),
      eventtype_in: dynamic=dynamic([]),
      pack: bool=false) {
      union isfuzzy=true
          vimUserManagementEmpty,
          vimUserManagementMicrosoftSecurityEvent(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementMicrosoftSecurityEvent'      in (DisabledParsers)))),
          vimUserManagementMicrosoftWindowsEvent(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementMicrosoftWindowsEvent'      in (DisabledParsers)))),
          vimUserManagementCiscoISE(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementCiscoISE'      in (DisabledParsers)))),
          vimUserManagementSentinelOne(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementSentinelOne'      in (DisabledParsers)))),
          vimUserManagementLinuxAuthpriv(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementLinuxAuthpriv'      in (DisabledParsers)))),
          vimUserManagementNative(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, targetusername_has_any=targetusername_has_any, actorusername_has_any=actorusername_has_any, eventtype_in=eventtype_in, disabled = (ASimBuiltInDisabled or ('ExcludevimUserManagementNative'      in (DisabledParsers))))
  }; 
  parser (
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
      targetusername_has_any   = targetusername_has_any, 
      actorusername_has_any    = actorusername_has_any,
      eventtype_in             = eventtype_in,
      pack=pack
  )
