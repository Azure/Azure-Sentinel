Parser:
  Title: User Management ASIM parser for Microsoft Windows Event logs
  Version: '0.2.1'
  LastUpdated: May 29, 2024
Product:
  Name: Microsoft Windows Event
Normalization:
  Schema: UserManagement
  Version: '0.1.1'
References:
- Title: ASIM User Management Schema
  Link: https://aka.ms/ASimUserManagementDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Audit User Account Management
  Link: https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-user-account-management
Description: |
  This ASIM parser supports normalizing Microsoft Security Event logs ingested in 'WindowsEvent' table to the ASIM User Management normalized schema.
ParserName: ASimUserManagementMicrosoftWindowsEvent
EquivalentBuiltInParser: _ASim_UserManagement_MicrosoftWindowsEvent
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
      disabled:bool = false
  ) {
      let EventIDLookup = datatable(EventID:int, EventType:string, EventSubType:string, GroupType:string)
      [   
          "4720", "UserCreated", "UserCreated", "", 
          "4722", "UserEnabled", "UserModified", "", 
          "4723", "PasswordChanged", "UserModified", "", 
          "4724", "PasswordReset", "UserModified", "", 
          "4725", "UserDisabled", "UserModified", "", 
          "4726", "UserDeleted", "UserModified", "", 
          "4727", "GroupCreated", "GroupCreated", "Global Security Enabled", 
          "4728", "UserAddedToGroup", "GroupModified", "Global Security Enabled", 
          "4729", "UserRemovedFromGroup", "GroupModified", "Global Security Enabled", 
          "4730", "GroupDeleted", "GroupModified", "Global Security Enabled", 
          "4731", "GroupCreated", "GroupCreated", "Local Security Enabled", 
          "4732", "UserAddedToGroup", "GroupModified", "Local Security Enabled", 
          "4733", "UserRemovedFromGroup", "GroupModified", "Local Security Enabled", 
          "4734", "GroupDeleted", "GroupModified", "Local Security Enabled", 
          "4738", "UserModified", "UserModified", "", 
          "4740", "UserLocked", "UserModified", "", 
          "4744", "GroupCreated", "GroupCreated", "Local Distribution", 
          "4748", "GroupDeleted", "GroupModified", "Local Distribution", 
          "4749", "GroupCreated", "GroupCreated", "Global Distribution", 
          "4753", "GroupDeleted", "GroupModified", "Global Distribution", 
          "4754", "GroupCreated", "GroupCreated", "Universal Security Enabled", 
          "4756", "UserAddedToGroup", "GroupModified", "Universal Security Enabled", 
          "4757", "UserRemovedFromGroup", "GroupModified", "Universal Security Enabled", 
          "4758", "GroupDeleted", "GroupModified", "Universal Security Enabled", 
          "4759", "GroupCreated", "GroupCreated", "Universal Distribution", 
          "4763", "GroupDeleted", "GroupModified", "Universal Distribution", 
          "4767", "UserLocked", "UserModified", "", 
          "4781", "UserModified", "UserModified", "" 
      ];
      let UserTypeLookup = datatable (ActorOriginalUserType:string, ActorUserType:string)
      [
          'Machine', 'Machine',
          'User', 'Regular'
      ]; 
      let UserEventID = toscalar(
          EventIDLookup
          | where not(disabled)
          | where EventSubType in("UserCreated","UserModified") 
          | summarize make_set(EventID)
      );
      let GroupEventID = toscalar(
          EventIDLookup
          | where not(disabled)
          | where EventSubType in("GroupCreated","GroupModified")  
          | summarize make_set(EventID)
      );
      union (
          WindowsEvent
          | where not(disabled)
          | where EventID in(UserEventID)
          | extend
              ActorOriginalUserType = tostring(EventData.AccountType),
              ActorSessionId = tostring(EventData.SubjectLogonId),
              ActorUserId = tostring(EventData.SubjectUserSid),
              NewTargetUserName = tostring(EventData.NewTargetUserName),
              OldTargetUserName = tostring(EventData.OldTargetUserName),
              SubjectDomainName = tostring(EventData.SubjectDomainName),
              SubjectUserName = tostring(EventData.SubjectUserName),
              TargetDomain = tostring(EventData.TargetDomainName),
              TargetUserId = tostring(EventData.TargetSid),
              TargetUsername = tostring(EventData.TargetUserName),
              EventMessage = tostring(EventData.Activity)
          | project-rename
              NewPropertyValue = NewTargetUserName,
              PreviousPropertyValue = OldTargetUserName
          | extend 
              TargetUsername = coalesce(TargetUsername, PreviousPropertyValue)
          | project TimeGenerated, EventID, Computer, _ResourceId, _ItemId, TargetDomain, TargetUserId, TargetUsername, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, NewPropertyValue, PreviousPropertyValue, EventMessage
          | extend
              TargetUserIdType = iif(isnotempty(TargetUserId), "SID",""),
              TargetUsername = iff (TargetDomain == "", TargetUsername, strcat (TargetDomain, '\\', TargetUsername))
          | project-away TargetDomain
      ),(
          WindowsEvent
          | where not(disabled)
          | where EventID in(GroupEventID)
          | extend 
              ActorOriginalUserType = tostring(EventData.AccountType),
              ActorSessionId = tostring(EventData.SubjectLogonId),
              ActorUserId = tostring(EventData.SubjectUserSid),
              GroupDomain = tostring(EventData.TargetDomainName),
              GroupId = tostring(EventData.TargetSid),
              GroupName = tostring(EventData.TargetUserName),
              MemberName = tostring(EventData.MemberName),
              MemberSid = tostring(EventData.MemberSid),
              NewTargetUserName = tostring(EventData.NewTargetUserName),
              OldTargetUserName = tostring(EventData.OldTargetUserName),
              SubjectDomainName = tostring(EventData.SubjectDomainName),
              SubjectUserName = tostring(EventData.SubjectUserName),
              EventMessage = tostring(EventData.Activity)
          | extend 
              GroupName = iff (GroupDomain == "", GroupName, strcat (GroupDomain, "\\" ,GroupName)),
              TargetUserId = MemberSid,
              TargetUsername = MemberName
          | project TimeGenerated, EventID, Computer, _ResourceId, _ItemId, GroupId, GroupName, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, TargetUsername, TargetUserId, EventMessage
          | extend 
              GroupIdType = iif(isnotempty(GroupId), "SID","")
      )
  | lookup EventIDLookup on EventID
  | extend UpdatedPropertyName = EventSubType
  | invoke _ASIM_ResolveDvcFQDN ("Computer")
  | lookup UserTypeLookup on ActorOriginalUserType
  | extend  EventOriginalType = tostring(EventID)
  | project-rename 
      EventUid = _ItemId
  | extend 
      ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
      Dvc = DvcHostname,
      DvcIdType = iff (isnotempty(_ResourceId), "AzureResourceID", ""),
      DvcOs = "Windows",
      EventCount = int(1),
      EventEndTime = TimeGenerated,
      EventProduct = 'Security Events',
      EventResult = "Success",
      EventSchema = "UserManagement",
      EventSchemaVersion = "0.1.1",
      EventSeverity = "Informational",
      EventStartTime = TimeGenerated,
      EventVendor = 'Microsoft',
      Hostname = DvcHostname,
      ActorUserIdType="SID"
  | project-away Subject*, Computer, _ResourceId,EventID
  | extend
      ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
      ActorUserType = _ASIM_GetUserType(ActorUsername,ActorUserId),
      GroupNameType = _ASIM_GetUsernameType(GroupName),
      TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
      TargetUserType = _ASIM_GetUserType(TargetUsername,TargetUserId),
      User = ActorUsername
  };
    parser (disabled = disabled)