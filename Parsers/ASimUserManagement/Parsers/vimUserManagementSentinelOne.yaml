Parser:
  Title: User Management ASIM parser for SentinelOne
  Version: '0.1.1'
  LastUpdated: Nov 07, 2023
Product:
  Name: SentinelOne
Normalization:
  Schema: UserManagement
  Version: '0.1.1'
References:
- Title: ASIM UserManagement Schema
  Link: https://aka.ms/ASimUserManagementDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: SentinelOne Documentation
- Link: https://<SOneInstanceDomain>.sentinelone.net/api-doc/overview
Description: |
  This ASIM parser supports normalizing SentinelOne logs to the ASIM User Management normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.
ParserName: vimUserManagementSentinelOne
EquivalentBuiltInParser: _Im_UserManagement_SentinelOne
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventTypeLookup = datatable (
      activityType_d: real,
      EventType: string,
      EventOriginalType: string,
      EventSubType: string
  )[
      23, "UserCreated", "User Added", "",
      24, "UserModified", "User Modified", "MultipleProperties",
      25, "UserDeleted", "User Deleted", "",
      37, "UserModified", "User modified", "MultipleProperties",
      102, "UserDeleted", "User Deleted", "",
      110, "UserModified", "Enable API Token Generation", "NewPermissions",
      111, "UserModified", "Disable API Token Generation", "PreviousPermissions",
      140, "UserCreated", "Service User creation", "",
      141, "UserModified", "Service User modification", "MultipleProperties",
      142, "UserDeleted", "Service User deletion", "",
      3522, "GroupCreated", "Ranger Deploy - Credential Group Created", "",
      3523, "GroupModified", "Ranger Deploy -Credential Group Edited", "MultipleProperties",
      3524, "GroupDeleted", "Ranger Deploy - Credential Group Deleted", "",
      3710, "PasswordReset", "User Reset Password with Forgot Password from the Login", "",
      3711, "PasswordChanged", "User Changed Their Password", "",
      3715, "PasswordReset", "User Reset Password by Admin Request", "",
      5006, "GroupDeleted", "Group Deleted", "",
      5008, "GroupCreated", "User created a Manual or Pinned Group", "",
      5011, "GroupModified", "Group Policy Reverted", "Newpolicy",
      67, "", "User 2FA Modified", "",
      145, "UserModified", "Enroll 2FA", "",
      146, "UserModified", "Reset 2FA", "",
      42, "", "Global 2FA modified", "",
      147, "UserModified", "User Configured 2FA", ""
  ];
  let UsermanagementactivityIds = dynamic([23, 24, 25, 37, 102, 110, 111, 140, 141, 142, 3522, 3523, 3524, 3710, 3711, 3715, 5006, 5008, 5011, 67, 145, 146, 42, 147]);
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]), 
      targetusername_has_any: dynamic=dynamic([]),
      actorusername_has_any: dynamic=dynamic([]),
      eventtype_in: dynamic=dynamic([]),
      disabled: bool=false
      ) {
      SentinelOne_CL
      | where not(disabled)
      | where event_name_s == "Activities."
          and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
          and activityType_d in (UsermanagementactivityIds)
          and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(DataFields_s, srcipaddr_has_any_prefix))
          and (array_length(targetusername_has_any) == 0 or DataFields_s has_any (targetusername_has_any))
          and (array_length(actorusername_has_any) == 0 or DataFields_s has_any (actorusername_has_any))
      | parse-kv DataFields_s as (byUser: string, username: string, email: string, ipAddress: string, group: string, groupName: string, name: string, oldDescription: string, oldRole: string, description: string, role: string, userScope: string, scopeLevelName: string, scopeName: string, roleName: string, modifiedFields: string, deactivationPeriodInDays: string, descriptionChanged: string, groupType: string, newValue: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
      | where array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(ipAddress, srcipaddr_has_any_prefix)
      | parse modifiedFields with 'Modified fields: ' ModifiedFields: string
      | parse description_s with * "with id=" id: string "," restOfMessage
      | lookup EventTypeLookup on activityType_d
      | extend
          EventType = case (
                activityType_d in (67, 42) and primaryDescription_s has "enabled",
                "UserEnabled",
                activityType_d in (67, 42) and primaryDescription_s has "disabled",
                "UserDisabled",
                EventType
            )
      | where (array_length(eventtype_in) == 0 or (EventType in (eventtype_in)))
      | extend 
          PreviousPropertyValue = case(
                              activityType_d in (67, 42) and primaryDescription_s has "enabled",
                              "disabled",
                              activityType_d in (67, 42) and primaryDescription_s has "disabled",
                              "enabled",
                              activityType_d == 141 and descriptionChanged == "true",
                              oldDescription, 
                              activityType_d == 141 and descriptionChanged == "false",
                              oldRole,
                              ""
                          ),
          NewPropertyValue = case(
                        activityType_d in (67, 42) and primaryDescription_s has "enabled",
                        "enabled", 
                        activityType_d in (67, 42) and primaryDescription_s has "disabled",
                        "disabled",
                        activityType_d == 141 and descriptionChanged == "true",
                        description, 
                        activityType_d == 141 and descriptionChanged == "false",
                        role,
                        ""
                    ),
          ActorUsername = iff(activityType_d == 102, "SentinelOne", coalesce(byUser, username, email)),        
          GroupName = coalesce(group, groupName, name),
          TargetUsername = iff(isnotempty(byUser) or activityType_d in (147, 42), username, "")
      | where (array_length(targetusername_has_any) == 0 or TargetUsername has_any (targetusername_has_any))
          and (array_length(actorusername_has_any) == 0 or ActorUsername has_any (actorusername_has_any))
      | extend GroupName = iff(GroupName == "null", "", GroupName)
      | project-rename
          EventStartTime = createdAt_t,
          SrcIpAddr = ipAddress,
          EventUid = _ItemId,
          ActorUserId = id,
          GroupId = groupId_s,
          EventMessage = primaryDescription_s,
          EventOriginalUid = activityUuid_g
      | extend
          EventCount = int(1),
          EventResult = "Success",
          DvcAction = "Allowed",
          EventSeverity = "Informational",
          EventSchema = "UserManagement",
          EventSchemaVersion = "0.1.1",
          EventProduct = "SentinelOne",
          EventVendor = "SentinelOne",
          EventResultDetails = "Other"
      | extend
          Dvc = EventProduct,
          EventEndTime = EventStartTime,
          IpAddr = SrcIpAddr,
          User = ActorUsername,
          UpdatedPropertyName = EventSubType,
          ActorUserIdType = iff(isnotempty(ActorUserId), "Other", ""),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ActorUserId),
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          GroupIdType = iff(isnotempty(GroupId), "UID", ""),
          GroupNameType = iff(isnotempty(GroupName), "Simple", ""),
          GroupType = iff(isnotempty(groupType), "Other", ""),
          GroupOriginalType = groupType,
          TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
          TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
          AdditionalFields = bag_pack(
                        "userScope", userScope,
                        "scopeLevelName", scopeLevelName,
                        "scopeName", scopeName,
                        "modifiedFields", modifiedFields,
                        "roleName", roleName,
                        "deactivationPeriodInDays", deactivationPeriodInDays,
                        "descriptionChanged", descriptionChanged
                    )
      | project-away 
          *_b,
          *_d,
          *_g,
          *_s,
          *_t,
          byUser,
          username,
          email,
          group,
          groupName,
          groupType,
          name,
          oldDescription,
          oldRole,
          description,
          role,
          userScope,
          scopeLevelName,
          scopeName,
          roleName,
          modifiedFields,
          ModifiedFields,
          deactivationPeriodInDays,
          descriptionChanged,
          restOfMessage,
          _ResourceId,
          TenantId,
          RawData,
          Computer,
          MG,
          ManagementGroupName,
          SourceSystem,
          newValue
  };
  parser(
      starttime = starttime,
      endtime = endtime,
      srcipaddr_has_any_prefix  = srcipaddr_has_any_prefix,
      targetusername_has_any = targetusername_has_any,
      actorusername_has_any = actorusername_has_any,
      eventtype_in = eventtype_in,
      disabled = disabled
  )
