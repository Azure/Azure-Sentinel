{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationPostgreSQL')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for PostgreSQL",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationPostgreSQL",
        "query": "let PostgreSQLSignInAuthorized=(\n starttime: datetime=datetime(null), \n endtime: datetime=datetime(null), \n username_has_any: dynamic = dynamic([]),\n targetappname_has_any: dynamic = dynamic([]),\n srcipaddr_has_any_prefix: dynamic = dynamic([]),\n srchostname_has_any: dynamic = dynamic([]),\n eventtype_in: dynamic = dynamic([]),\n eventresultdetails_in: dynamic = dynamic([]),\n eventresult: string = '*',\n disabled: bool=false\n ) {\n  PostgreSQL_CL\n | where not(disabled)\n // ************************************************************************* \n //      <Prefilterring>\n // *************************************************************************\n | where \n     (isnull(starttime) or TimeGenerated >= starttime)\n     and (isnull(endtime) or TimeGenerated <= endtime)\n     and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))\n     and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n     and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source\n     and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n     and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n     and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source\n     and (eventresult == \"*\" or ('Success' == eventresult))\n // ************************************************************************* \n //      </Prefilterring>\n // ************************************************************************* \n | where RawData has 'connection authorized'\n | extend\n     EventVendor = 'PostgreSQL'\n     ,\n     EventProduct = 'PostgreSQL'\n     ,\n     EventCount = int(1)\n     ,\n     EventSchema = 'Authentication'\n     ,\n     EventSchemaVersion = '0.1.1'\n     ,\n     EventResult = 'Success'\n     ,\n     EventStartTime = TimeGenerated\n     ,\n     EventEndTime = TimeGenerated\n     ,\n     EventType = 'Logon'\n     ,\n     DvcHostname = Computer\n     ,\n     DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n     ,\n     TargetUsernameType = 'Simple'\n     ,\n     TargetUsername = extract(@'user=([^\\s,]+)', 1, RawData)\n     ,\n     EventOriginalRestultDetails = 'Connection authorized'\n // ********************** <Postfilterring> **********************************\n | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n // ********************** </Postfilterring> *********************************\n // mapping ASimMatchingUsername\n | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n // ActorUsername not coming from source. Hence, not mapped.\n | extend ASimMatchingUsername = case\n     (\n                                 array_length(username_has_any) == 0,\n                                 \"-\",\n                                 temp_isMatchTargetUsername,\n                                 \"TargetUsername\",\n                                 \"No match\"\n                             )\n // ************************ \n //      <Aliases> \n // ************************\n | extend\n     User=TargetUsername\n     ,\n     Dvc=Computer\n // ************************ \n //      </Aliases> \n // ************************\n | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n };\n let PostgreSQLAuthFailure1=(\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null), \n     username_has_any: dynamic = dynamic([]),\n     targetappname_has_any: dynamic = dynamic([]),\n     srcipaddr_has_any_prefix: dynamic = dynamic([]),\n     srchostname_has_any: dynamic = dynamic([]),\n     eventtype_in: dynamic = dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string = '*',\n     disabled: bool=false\n     ) {\n     PostgreSQL_CL\n     | where not(disabled)\n     // ************************************************************************* \n     //      <Prefilterring>\n     // *************************************************************************\n     | where \n         (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))\n         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n         and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source\n         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n         and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))\n         and (eventresult == \"*\" or ('Failure' == eventresult))\n     // ************************************************************************* \n     //      </Prefilterring>\n     // *************************************************************************\n     | where RawData has 'authentication failed'\n     | extend \n         EventVendor = 'PostgreSQL'\n         ,\n         EventProduct = 'PostgreSQL'\n         ,\n         EventCount = int(1)\n         ,\n         EventSchema = 'Authentication'\n         ,\n         EventSchemaVersion = '0.1.1'\n         ,\n         EventResult = 'Failure'\n         ,\n         EventStartTime = TimeGenerated\n         ,\n         EventEndTime = TimeGenerated\n         ,\n         EventType = 'Logon'\n         ,\n         DvcHostname = Computer\n         ,\n         DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n         ,\n         TargetUsernameType = 'Simple'\n         ,\n         TargetUsername = extract(@'for user\\s\"(.*?)\"', 1, RawData)\n         ,\n         EventResultDetails = 'No such user or password'\n         ,\n         EventOriginalRestultDetails = 'User authentication failed'\n     // ********************** <Postfilterring> **********************************\n     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n     // ********************** </Postfilterring> *********************************\n     // mapping ASimMatchingUsername\n     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n     // ActorUsername not coming from source. Hence, not mapped.\n     | extend ASimMatchingUsername = case\n         (\n                                     array_length(username_has_any) == 0,\n                                     \"-\",\n                                     temp_isMatchTargetUsername,\n                                     \"TargetUsername\",\n                                     \"No match\"\n                                 )\n     // ************************ \n     //      <Aliases> \n     // ************************\n     | extend\n         User=TargetUsername\n         ,\n         Dvc=Computer\n     // ************************ \n     //      </Aliases> \n     // ************************\n     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n };\n let PostgreSQLAuthFailure2=(\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null), \n     username_has_any: dynamic = dynamic([]),\n     targetappname_has_any: dynamic = dynamic([]),\n     srcipaddr_has_any_prefix: dynamic = dynamic([]),\n     srchostname_has_any: dynamic = dynamic([]),\n     eventtype_in: dynamic = dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string = '*',\n     disabled: bool=false\n     ) {\n     PostgreSQL_CL\n     | where not(disabled)\n     // ************************************************************************* \n     //      <Prefilterring>\n     // *************************************************************************\n     | where \n         (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))\n         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n         and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source\n         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n         and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))\n         and (eventresult == \"*\" or ('Failure' == eventresult))\n     // ************************************************************************* \n     //      </Prefilterring>\n     // *************************************************************************\n     | where RawData has_all ('role', 'does', 'not', 'exist')\n     | extend \n         EventVendor = 'PostgreSQL'\n         ,\n         EventProduct = 'PostgreSQL'\n         ,\n         EventCount = int(1)\n         ,\n         EventSchema = 'Authentication'\n         ,\n         EventSchemaVersion = '0.1.1'\n         ,\n         EventResult = 'Failure'\n         ,\n         EventStartTime = TimeGenerated\n         ,\n         EventEndTime = TimeGenerated\n         ,\n         EventType = 'Logon'\n         ,\n         DvcHostname = Computer\n         ,\n         DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n         ,\n         TargetUsernameType = 'Simple'\n         ,\n         TargetUsername = extract(@'role\\s\"(.*?)\"\\sdoes', 1, RawData)\n         ,\n         EventResultDetails = 'No such user or password'\n         ,\n         EventOriginalRestultDetails = 'Role does not exist'\n     // ********************** <Postfilterring> **********************************\n     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n     // ********************** </Postfilterring> *********************************\n     // mapping ASimMatchingUsername\n     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n     // ActorUsername not coming from source. Hence, not mapped.\n     | extend ASimMatchingUsername = case\n         (\n                                     array_length(username_has_any) == 0,\n                                     \"-\",\n                                     temp_isMatchTargetUsername,\n                                     \"TargetUsername\",\n                                     \"No match\"\n                                 )\n     // ************************ \n     //      <Aliases> \n     // ************************\n     | extend\n         User=TargetUsername\n         ,\n         Dvc=Computer\n     // ************************ \n     //      </Aliases> \n     // ************************\n     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n };\n let PostgreSQLAuthFailure3=(\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null), \n     username_has_any: dynamic = dynamic([]),\n     targetappname_has_any: dynamic = dynamic([]),\n     srcipaddr_has_any_prefix: dynamic = dynamic([]),\n     srchostname_has_any: dynamic = dynamic([]),\n     eventtype_in: dynamic = dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string = '*',\n     disabled: bool=false\n     ) {\n     PostgreSQL_CL\n     | where not(disabled)\n     // ************************************************************************* \n     //      <Prefilterring>\n     // *************************************************************************\n     | where \n         (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))\n         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))\n         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n         and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))\n         and (eventresult == \"*\" or ('Failure' == eventresult))\n     // ************************************************************************* \n     //      </Prefilterring>\n     // *************************************************************************\n     | where RawData has_all ('no', 'entry', 'user')\n     | extend \n         EventVendor = 'PostgreSQL'\n         ,\n         EventProduct = 'PostgreSQL'\n         ,\n         EventCount = int(1)\n         ,\n         EventSchema = 'Authentication'\n         ,\n         EventSchemaVersion = '0.1.1'\n         ,\n         EventResult = 'Failure'\n         ,\n         EventStartTime = TimeGenerated\n         ,\n         EventEndTime = TimeGenerated\n         ,\n         EventType = 'Logon'\n         ,\n         DvcHostname = Computer\n         ,\n         DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n         ,\n         TargetUsernameType = 'Simple'\n         ,\n         TargetUsername = extract(@'user\\s\"(.*?)\",', 1, RawData)\n         ,\n         SrcIpAddr = extract(@'host\\s\"(.*?)\",', 1, RawData)\n         ,\n         EventResultDetails = 'No such user or password'\n         ,\n         EventOriginalRestultDetails = 'No entry for user'\n     // ********************** <Postfilterring> **********************************\n     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n     // ********************** </Postfilterring> *********************************\n     // mapping ASimMatchingUsername\n     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n     // ActorUsername not coming from source. Hence, not mapped.\n     | extend ASimMatchingUsername = case\n         (\n                                     array_length(username_has_any) == 0,\n                                     \"-\",\n                                     temp_isMatchTargetUsername,\n                                     \"TargetUsername\",\n                                     \"No match\"\n                                 )\n     // ************************ \n     //      <Aliases> \n     // ************************\n     | extend\n         User=TargetUsername\n         ,\n         Dvc=Computer\n     // ************************ \n     //      </Aliases> \n     // ************************\n     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n };\n let PostgreSQLDisconnect=(\n     starttime: datetime=datetime(null), \n     endtime: datetime=datetime(null), \n     username_has_any: dynamic = dynamic([]),\n     targetappname_has_any: dynamic = dynamic([]),\n     srcipaddr_has_any_prefix: dynamic = dynamic([]),\n     srchostname_has_any: dynamic = dynamic([]),\n     eventtype_in: dynamic = dynamic([]),\n     eventresultdetails_in: dynamic = dynamic([]),\n     eventresult: string = '*',\n     disabled: bool=false\n     ) {\n     PostgreSQL_CL\n     | where not(disabled)\n     // ************************************************************************* \n     //      <Prefilterring>\n     // *************************************************************************\n     | where \n         (isnull(starttime) or TimeGenerated >= starttime)\n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))\n         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))\n         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n         and ((array_length(eventtype_in) == 0) or \"Logoff\" in~ (eventtype_in))\n         and (array_length(eventresultdetails_in) == 0 or 'Session expired' in~ (eventresultdetails_in))\n         and (eventresult == \"*\" or ('Success' == eventresult))\n     // ************************************************************************* \n     //      </Prefilterring>\n     // *************************************************************************\n     | where RawData has 'disconnection'\n     | extend \n         EventVendor = 'PostgreSQL'\n         ,\n         EventProduct = 'PostgreSQL'\n         ,\n         EventCount = int(1)\n         ,\n         EventSchema = 'Authentication'\n         ,\n         EventSchemaVersion = '0.1.1'\n         ,\n         EventResult = 'Success'\n         ,\n         EventStartTime = TimeGenerated\n         ,\n         EventEndTime = TimeGenerated\n         ,\n         EventType = 'Logoff'\n         ,\n         DvcHostname = Computer\n         ,\n         DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n         ,\n         TargetUsernameType = 'Simple'\n         ,\n         TargetUsername = extract(@'user=([^\\s,]+)', 1, RawData)\n         ,\n         SrcIpAddr = extract(@'host=([\\d.]+)', 1, RawData)\n         ,\n         EventResultDetails = 'Session expired'\n         ,\n         EventOriginalRestultDetails = 'User session closed'\n     // ********************** <Postfilterring> **********************************\n     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n     // ********************** </Postfilterring> *********************************\n     // mapping ASimMatchingUsername\n     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n     // ActorUsername not coming from source. Hence, not mapped.\n     | extend ASimMatchingUsername = case\n         (\n                                     array_length(username_has_any) == 0,\n                                     \"-\",\n                                     temp_isMatchTargetUsername,\n                                     \"TargetUsername\",\n                                     \"No match\"\n                                 )\n     // ************************ \n     //      <Aliases> \n     // ************************\n     | extend\n         User=TargetUsername\n         ,\n         Dvc=Computer\n     // ************************ \n     //      </Aliases> \n     // ************************\n     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n };\n union isfuzzy=false PostgreSQLSignInAuthorized(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n               ,  PostgreSQLAuthFailure1(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n               ,  PostgreSQLAuthFailure2(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n               ,  PostgreSQLAuthFailure3(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n               ,  PostgreSQLDisconnect(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
