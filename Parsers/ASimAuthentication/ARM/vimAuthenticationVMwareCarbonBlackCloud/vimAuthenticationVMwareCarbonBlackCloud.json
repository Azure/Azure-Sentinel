{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationVMwareCarbonBlackCloud')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication parser for VMware Carbon Black Cloud",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationVMwareCarbonBlackCloud",
        "query": "let parser = (\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  ) {\n  CarbonBlackAuditLogs_CL\n  | where not(disabled)\n  | where (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (description_s has_any (\"logged in\", \"login\", \"second factor authentication\") and description_s !has \"connector\")\n      and ((array_length(username_has_any) == 0) or (loginName_s has_any (username_has_any)))\n      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n      and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(clientIp_s, srcipaddr_has_any_prefix))\n      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n      and (array_length(eventtype_in) == 0 or 'Logon' has_any (eventtype_in))\n  // Filtering for eventresultdetails_in done later in the parser\n  // Filtering for eventresult done later in the parser\n  | extend\n      EventResult = iff(description_s has \"successfully\", \"Success\", \"Failure\"),\n      EventType = \"Logon\"\n  | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))\n      and (eventresult == '*' or EventResult has eventresult)\n  | extend EventResultDetails = case(\n                                EventResult == \"Failure\" and description_s has (\"locked\"),\n                                \"User locked\",\n                                EventResult == \"Failure\" and description_s has_any (\"logged in\", \"login\"),\n                                \"Incorrect password\",\n                                EventResult == \"Failure\" and description_s has (\"second factor authentication\"),\n                                \"MFA not satisfied\",\n                                \"\"\n                            )\n  // Filtering on eventresultdetails_in\n  | where (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))\n  | extend\n      EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),\n      AdditionalFields = bag_pack(\"flagged\", flagged_b),\n      EventSeverity = iff(flagged_b == true, \"Low\", \"Informational\"),\n      EventCount = int(1),\n      EventProduct = \"Carbon Black Cloud\",\n      EventSchema = \"Authentication\",\n      EventSchemaVersion = \"0.1.3\",\n      EventVendor = \"VMware\",\n      EventOriginalResultDetails = iff(EventResult == \"Failure\", tostring(split(description_s, ';')[1]), \"\")\n  | project-rename\n      EventMessage = description_s,\n      EventOriginalUid = eventId_g,\n      TargetUsername = loginName_s,\n      SrcIpAddr = clientIp_s,\n      EventUid=_ItemId,\n      EventOwner = orgName_s\n  | extend\n      IpAddr = SrcIpAddr,\n      TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),\n      TargetUserType = _ASIM_GetUserType(TargetUsername, \"\"),\n      Dvc = EventProduct,\n      EventEndTime = EventStartTime,\n      User = TargetUsername,\n      Src = SrcIpAddr\n  // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n        (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n  | project-away\n      *_s,\n      *_d,\n      *_b,\n      _ResourceId,\n      Computer,\n      MG,\n      ManagementGroupName,\n      RawData,\n      SourceSystem,\n      TenantId,\n      temp_*\n};\nparser(\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
