{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationMD4IoT')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for Microsoft Defender for IoT endpoint logs",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationMD4IoT",
        "query": "let parser=(disabled:bool=false)\n{\n  SecurityIoTRawEvent | where not(disabled)\n  | where RawEventName == \"Login\" \n  | project-rename EventUid = _ItemId\n  | extend\n      EventDetails = todynamic(EventDetails)\n  | extend\n      EventCount         = int(1),\n      EventEndTime       = todatetime(TimeGenerated), \n      EventOriginalUid   = tostring(EventDetails.OriginalEventId), \n      EventProduct       = 'Microsoft Defender for IoT',\n      EventResult        = iff (EventDetails.Operation == 'LoginFailed', 'Failure', 'Success'),  \n      EventSchemaVersion = '0.1.0', \n      EventStartTime     = todatetime(EventDetails.TimestampUTC), \n      EventType          = iff (EventDetails.Operation == 'Logout', 'Logoff', 'Logon'),  \n      EventVendor        = 'Microsoft'\n  | extend\n      ActingProcessId    = tostring(EventDetails.ProcessId),  \n      ActingProcessName  = tostring(EventDetails.Executable),  // -- Linux input device or service used to authenticate, for example pts/1, tty1, pts/0, ssh:notty \n      DvcOs              = iif (EventDetails.MessageSource == \"Linux\", \"Linux\", \"Windows\"),  // -- Intermediate fix\n      SrcIpAddr          = tostring(EventDetails.RemoteAddress), \n      TargetUsername     = tostring(EventDetails.UserName),\n      TargetUsernameType = \"Simple\"\n  | project-rename\n      _ResourceId         = AssociatedResourceId, \n      _SubscriptionId     = AzureSubscriptionId, \n      DvcHostname         = DeviceId, \n      EventProductVersion = AgentVersion  // -- Not available in Windows\n    // -- aliases\n  | extend \n      Dvc          = DvcHostname,\n      IpAddr       = SrcIpAddr,\n      Process      = ActingProcessName, \n      SrcDvcIpAddr = SrcIpAddr,\n      User         = TargetUsername\n  };\n  parser (\n      disabled = disabled\n  )",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
