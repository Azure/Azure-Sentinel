{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationPostgreSQL')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for PostgreSQL",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationPostgreSQL",
        "query": "let PostgreSQLSignInAuthorized=(disabled:bool=false){\nPostgreSQL_CL \n| where not(disabled)\n| where RawData has 'connection authorized'\n| project-rename \n    EventUid = _ItemId\n| extend\n    DvcHostname                 = Computer,\n    DvcIpAddr                   = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer),\n    EventCount                  = int(1),\n    EventEndTime                = TimeGenerated,\n    EventOriginalRestultDetails = 'Connection authorized',\n    EventProduct                = 'PostgreSQL',\n    EventResult                 = 'Success',\n    EventSchema                 = 'Authentication',\n    EventSchemaVersion          = '0.1.1',\n    EventStartTime              = TimeGenerated,\n    EventType                   = 'Logon',\n    EventVendor                 = 'PostgreSQL',\n    TargetUsername              = extract(@'user=([^\\s,]+)', 1, RawData),\n    TargetUsernameType          = 'Simple'\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n    Dvc=Computer,\n    User=TargetUsername\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nlet PostgreSQLAuthFailure1=(disabled:bool=false){\nPostgreSQL_CL \n| where not(disabled)\n| where RawData has 'authentication failed'\n| extend \n    DvcHostname                 = Computer,\n    DvcIpAddr                   = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer),\n    EventCount                  = int(1),\n    EventEndTime                = TimeGenerated,\n    EventOriginalRestultDetails = 'User authentication failed',\n    EventProduct                = 'PostgreSQL',\n    EventResult                 = 'Failure',\n    EventResultDetails          = 'No such user or password',\n    EventSchema                 = 'Authentication',\n    EventSchemaVersion          = '0.1.1',\n    EventStartTime              = TimeGenerated,\n    EventType                   = 'Logon',\n    EventVendor                 = 'PostgreSQL',\n    TargetUsername              = extract(@'for user\\s\"(.*?)\"', 1, RawData),\n    TargetUsernameType          = 'Simple'\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n    Dvc  = Computer,\n    User = TargetUsername\n// ************************ \n//      </Aliases> \n// ************************\n| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n};\nlet PostgreSQLAuthFailure2=(disabled:bool=false){\nPostgreSQL_CL \n| where not(disabled)\n| where RawData has_all ('role', 'does', 'not', 'exist')\n| extend \n    DvcHostname                 = Computer,\n    DvcIpAddr                   = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer),\n    EventCount                  = int(1),\n    EventEndTime                = TimeGenerated,\n    EventOriginalRestultDetails = 'Role does not exist',\n    EventProduct                = 'PostgreSQL',\n    EventResult                 = 'Failure',\n    EventResultDetails          = 'No such user or password',\n    EventSchema                 = 'Authentication',\n    EventSchemaVersion          = '0.1.1',\n    EventStartTime              = TimeGenerated,\n    EventType                   = 'Logon',\n    EventVendor                 = 'PostgreSQL',\n    TargetUsername              = extract(@'role\\s\"(.*?)\"\\sdoes', 1, RawData),\n    TargetUsernameType          = 'Simple'\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n    Dvc  = Computer,\n    User = TargetUsername\n// ************************ \n//      </Aliases> \n// ************************\n| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n};\nlet PostgreSQLAuthFailure3=(disabled:bool=false){\nPostgreSQL_CL \n| where not(disabled)\n| where RawData has_all ('no', 'entry', 'user')\n| extend \n    DvcHostname                 = Computer,\n    DvcIpAddr                   = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer),\n    EventCount                  = int(1),\n    EventEndTime                = TimeGenerated,\n    EventOriginalRestultDetails = 'No entry for user',\n    EventProduct                = 'PostgreSQL',\n    EventResult                 = 'Failure',\n    EventResultDetails          = 'No such user or password',\n    EventSchema                 = 'Authentication',\n    EventSchemaVersion          = '0.1.1',\n    EventStartTime              = TimeGenerated,\n    EventType                   = 'Logon',\n    EventVendor                 = 'PostgreSQL',\n    SrcIpAddr                   = extract(@'host\\s\"(.*?)\",', 1, RawData),\n    TargetUsername              = extract(@'user\\s\"(.*?)\",', 1, RawData),\n    TargetUsernameType          = 'Simple'\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n    Dvc  = Computer,\n    User = TargetUsername\n// ************************ \n//      </Aliases> \n// ************************\n| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n};\nlet PostgreSQLDisconnect=(disabled:bool=false){\nPostgreSQL_CL \n| where not(disabled)\n| where RawData has 'disconnection'\n| extend \n    DvcHostname                 = Computer,\n    DvcIpAddr                   = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer),\n    EventCount                  = int(1),\n    EventEndTime                = TimeGenerated,\n    EventOriginalRestultDetails = 'User session closed',\n    EventProduct                = 'PostgreSQL',\n    EventResult                 = 'Success',\n    EventResultDetails          = 'Session expired',\n    EventSchema                 = 'Authentication',\n    EventSchemaVersion          = '0.1.1',\n    EventStartTime              = TimeGenerated,\n    EventType                   = 'Logoff',\n    EventVendor                 = 'PostgreSQL',\n    SrcIpAddr                   = extract(@'host=([\\d.]+)', 1, RawData),\n    TargetUsername              = extract(@'user=([^\\s,]+)', 1, RawData),\n    TargetUsernameType          = 'Simple'\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n    Dvc  = Computer,\n    User = TargetUsername\n// ************************ \n//      </Aliases> \n// ************************\n| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n};\nunion isfuzzy=false \n  PostgreSQLSignInAuthorized(disabled = disabled), \n  PostgreSQLAuthFailure1(disabled = disabled), \n  PostgreSQLAuthFailure2(disabled = disabled), \n  PostgreSQLAuthFailure3(disabled = disabled), \n  PostgreSQLDisconnect(disabled = disabled)\n",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
