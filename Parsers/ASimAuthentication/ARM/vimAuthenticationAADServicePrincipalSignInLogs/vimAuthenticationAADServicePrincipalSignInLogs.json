{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationAADServicePrincipalSignInLogs')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Microsoft Entra ID service principal sign-in logs",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationAADServicePrincipalSignInLogs",
        "query": "let AADResultTypes = (T: (ResultType: string))\n{\n    let AADResultTypesLookup = datatable\n(\n    ResultType: string,\n    EventResultDetails: string,\n    EventType: string,\n    EventResult: string,\n    EventOriginalResultDetails: string,\n    EventSeverity: string\n)\n[\n    \"0\", \"\", \"Logon\", \"Success\", \"\", \"Informational\",\n    \"53003\", \"Logon violates policy\", \"Logon\", \"Failure\", \"53003 - BlockedByConditionalAccess\", \"Low\",\n    \"50034\", \"No such user\", \"Logon\", \"Failure\", \"50034 - UserAccountNotFound\", \"Low\",\n    \"50059\", \"No such user\", \"Logon\", \"Failure\", \"50059 - MissingTenantRealmAndNoUserInformationProvided\", \"Low\",\n    \"50053\", \"User locked\", \"Logon\", \"Failure\", \"50053 - IdsLocked or IP address with malicious activity\", \"Low\",\n    \"50055\", \"Password expired\", \"Logon\", \"Failure\", \"50055 - InvalidPasswordExpiredPassword\", \"Low\",\n    \"50056\", \"Incorrect password\", \"Logon\", \"Failure\", \"50056 - Invalid or null password\", \"Low\",\n    \"50057\", \"User disabled\", \"Logon\", \"Failure\", \"50057 - UserDisabled\", \"Low\",\n    \"50058\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50058 - UserInformationNotProvided\", \"Low\",\n    \"50011\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50011 - The redirect URI specified in the request does not match\", \"Low\",\n    \"50064\", \"No such user or password\", \"Logon\", \"Failure\", \"50064 - CredentialAuthenticationError\", \"Low\",\n    \"50076\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50076 - UserStrongAuthClientAuthNRequired\", \"Low\",\n    \"50079\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50079 - UserStrongAuthEnrollmentRequired\", \"Low\",\n    \"50105\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50105 - EntitlementGrantsNotFound\", \"Low\",\n    \"50126\", \"No such user or password\", \"Logon\", \"Failure\", \"50126 - InvalidUserNameOrPassword\", \"Low\",\n    \"50132\", \"Password expired\", \"Logon\", \"Failure\", \"50132 - SsoArtifactInvalidOrExpired\", \"Low\",\n    \"50133\", \"Password expired\", \"Logon\", \"Failure\", \"50133 - SsoArtifactRevoked\", \"Low\",\n    \"50144\", \"Password expired\", \"Logon\", \"Failure\", \"50144 - InvalidPasswordExpiredOnPremPassword\", \"Low\",\n    \"50173\", \"Session expired\", \"Logon\", \"Failure\", \"50173 -FreshTokenNeeded\", \"Low\",\n    \"80012\", \"Logon violates policy\", \"Logon\", \"Failure\", \"80012 - OnPremisePasswordValidationAccountLogonInvalidHours\", \"Low\",\n    \"51004\", \"No such user\", \"Logon\", \"Failure\", \"51004 - UserAccountNotInDirectory\", \"Low\",\n    \"50072\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50072 - UserStrongAuthEnrollmentRequiredInterrupt\", \"Low\",\n    \"50005\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50005 - DevicePolicyError\", \"Low\",\n    \"50020\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50020 - UserUnauthorized\", \"Low\",\n    \"50074\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50074 - UserStrongAuthClientAuthNRequiredInterrupt\", \"Low\",\n    \"70008\", \"Session expired\", \"Logon\", \"Failure\", \"70008 - ExpiredOrRevokedGrant\", \"Low\",\n    \"700016\", \"No such user\", \"Logon\", \"Failure\", \"700016 - UnauthorizedClient_DoesNotMatchRequest\", \"Low\",\n    \"500011\", \"No such user\", \"Logon\", \"Failure\", \"500011 - InvalidResourceServicePrincipalNotFound\", \"Low\",\n    \"700027\", \"Incorrect key\", \"Logon\", \"Failure\", \"700027 - The certificate with identifier used to sign the client assertion is not registered on application\", \"Low\",\n    \"100003\", \"Other\", \"Logon\", \"Failure\", \"100003\", \"Low\",\n    \"700082\", \"Session expired\", \"Logon\", \"Failure\", \"700082 - ExpiredOrRevokedGrantInactiveToken\", \"Low\",\n    \"530034\", \"Logon violates policy\", \"Logon\", \"Failure\", \"530034 - DelegatedAdminBlockedDueToSuspiciousActivity\", \"Low\",\n    \"530032\", \"Logon violates policy\", \"Logon\", \"Failure\", \"530032 - BlockedByConditionalAccessOnSecurityPolicy\", \"Low\",\n    \"50061\", \"\", \"Logoff\", \"Failure\", \"50061 - SignoutInvalidRequest\", \"Low\",\n    \"50068\", \"\", \"Logoff\", \"Failure\", \"50068 - SignoutInitiatorNotParticipant\", \"Low\",\n    \"50078\", \"Logon violates policy\", \"Logon\", \"Failure\", \"50078 - UserStrongAuthExpired\", \"Low\",\n    \"7000222\", \"Session expired\", \"Logon\", \"Failure\", \"7000222 - The provided client secret keys are expired\", \"Low\",\n    \"70021\", \"No such user\", \"Logon\", \"Failure\", \"70021 - No matching federated identity record found for presented assertion\", \"Low\",\n    \"500341\", \"User disabled\", \"Logon\", \"Failure\", \"500341 - The user account has been deleted from the directory\", \"Low\",\n    \"1002016\", \"Logon violates policy\", \"Logon\", \"Failure\", \"1002016 - You are using TLS version 1.0, 1.1 and/or 3DES cipher\", \"Low\",\n    \"7000215\", \"Incorrect password\", \"Logon\", \"Failure\", \"7000215 - Invalid client secret is provided\", \"Low\",\n    \"90033\", \"Transient error\", \"Logon\", \"Failure\", \"90033 - A transient error has occurred\", \"Informational\",\n    \"90024\", \"Transient error\", \"Logon\", \"Failure\", \"90024 - RequestBudgetExceededError - A transient error has occurred\", \"Informational\"\n];\n    T \n    | lookup AADResultTypesLookup on ResultType\n    | extend\n        EventType                   = iff(isempty(EventType), \"Logon\", EventType)\n        ,\n        EventResult                 = iff(isempty(EventResult), \"Failure\", EventResult)\n        ,\n        EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails)\n        ,\n        EventSeverity               = iff(isempty(EventSeverity), \"Low\", EventSeverity)\n};\nlet parser = (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    )\n{\n    AADServicePrincipalSignInLogs\n    | where not(disabled)\n        and (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or ServicePrincipalName has_any (username_has_any))\n        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n    | invoke AADResultTypes()\n    | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n        and (eventresult == \"*\" or (EventResult == eventresult))\n    | project-rename\n        ActingAppId               = AppId\n        ,\n        TargetAppId               = ResourceIdentity \n        ,\n        TargetAppName             = ResourceDisplayName\n        ,\n        TargetUsername            = ServicePrincipalName\n        ,\n        TargetUserId              = ServicePrincipalId\n        ,\n        EventOriginalUid          = Id\n        ,\n        TargetSessionId           = CorrelationId\n        ,\n        SrcIpAddr                 = IPAddress\n        ,\n        EventUid                  = _ItemId\n        ,\n        EventProductVersion       = OperationVersion\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | extend \n        EventVendor                = 'Microsoft'\n        ,\n        EventProduct               = 'Entra ID'\n        ,\n        EventSchema                = 'Authentication'\n        ,\n        EventSchemaVersion         = '0.1.3'\n        ,\n        Dvc                        = 'Microsft/Entra ID'\n        ,\n        LogonMethod                = \"Service Principal\"\n        ,\n        TargetAppType              = \"Resource\"\n        ,\n        EventCount                 = int(1)\n        ,\n        TargetUserType             = 'Service'\n        ,\n        TargetUsernameType         = 'Simple'\n        ,\n        TargetUserIdType           = 'EntraID'\n    | extend\n        LocationDetails = todynamic(LocationDetails)\n    | extend\n        SrcGeoCity                   = tostring(LocationDetails.city)\n        ,\n        SrcGeoCountry              = Location\n        ,\n        SrcGeoLatitude             = toreal(LocationDetails.geoCoordinates.latitude)\n        ,\n        SrcGeoLongitude            = toreal(LocationDetails.geoCoordinates.longitude)\n        ,\n        SrcGeoRegion               = tostring(LocationDetails.state)\n    | project-away\n        OperationName,\n        Category,\n        Result*,\n        ServicePrincipal*,\n        SourceSystem,\n        DurationMs,\n        Resource*,\n        Location*,\n        UniqueTokenIdentifier,\n        FederatedCredentialId,\n        Conditional*,\n        Authentication*,\n        Identity,\n        Level,\n        TenantId,\n        temp*\n    // \n    // -- Aliases\n    | extend \n        User                         = TargetUsername\n        ,\n        LogonTarget                = TargetAppName\n        ,\n        EventStartTime             = TimeGenerated\n        ,\n        EventEndTime               = TimeGenerated\n        ,\n        Application                = TargetAppName\n        ,\n        Dst                        = TargetAppName\n        ,\n        Src                        = SrcIpAddr\n        ,\n        IpAddr                     = SrcIpAddr\n        ,\n        TargetSimpleUsername       = TargetUsername\n        ,\n        TargetUserAadId            = TargetUserId\n};\nparser  \n(\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
