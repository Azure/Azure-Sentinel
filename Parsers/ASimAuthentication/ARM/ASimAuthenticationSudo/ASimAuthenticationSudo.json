{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationSudo')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for Syslog sudo",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationSudo",
        "query": "let SudoSignInAuthorized=(disabled:bool=false){\nSyslog \n  | where not(disabled)\n  | where ProcessName == \"sudo\" and \n      SyslogMessage has 'TTY=' and \n      SyslogMessage has 'USER=' and\n      SyslogMessage has 'COMMAND='\n  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with (pair_delimiter=' ', kv_delimiter='=')\n  | project-rename TargetUsername = USER\n  | extend\n      EventVendor                 = 'sudo',\n      EventProduct                = 'sudo',\n      EventCount                  = int(1),\n      EventSchema                 = 'Authentication',\n      EventSchemaVersion          = '0.1.1',\n      EventResult                 = 'Success',\n      EventStartTime              = TimeGenerated,\n      EventEndTime                = TimeGenerated,\n      EventType                   = 'Logon',\n      DvcHostname                 = Computer,\n      ActorUsernameType           = 'Simple',\n      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),\n      TargetUsernameType          = 'Simple',\n      EventResultDetails          = 'Other',\n      EventOriginalRestultDetails = 'Connection authorized'\n// ************************\n//      <Aliases>\n// ************************\n  | extend\n      User  = TargetUsername,\n      Dvc   = Computer\n// ************************\n//      </Aliases>\n// ************************\n  | project-away Computer, MG, SourceSystem, TenantId\n  };\nlet SudoAuthFailure1=(disabled:bool=false){\nSyslog | where not(disabled)\n  | where ProcessName == \"sudo\" and (SyslogMessage has 'user NOT in sudoers' or SyslogMessage has 'incorrect password attempts')\n  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with  (pair_delimiter=' ', kv_delimiter='=')\n  | project-rename \n      EventUid       = _ItemId,\n      TargetUsername = USER\n  | extend\n      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),\n      ActorUsernameType           = 'Simple',\n      DvcHostname                 = Computer,\n      EventCount                  = int(1),\n      EventEndTime                = TimeGenerated,\n      EventOriginalRestultDetails = 'User authentication failed',\n      EventProduct                = 'sudo',\n      EventResult                 = 'Failure',\n      EventResultDetails          = 'No such user or password',\n      EventSchema                 = 'Authentication',\n      EventSchemaVersion          = '0.1.1',\n      EventStartTime              = TimeGenerated,\n      EventType                   = 'Logon',\n      EventVendor                 = 'sudo',\n      TargetUsernameType          = 'Simple'\n  | project-away Computer, MG, SourceSystem, TenantId\n  };\nlet SudoDisconnect=(disabled:bool=false){\n  Syslog \n  | where not(disabled)\n  | where ProcessName == \"sudo\" and \n      SyslogMessage   has 'session closed for user '\n  | parse SyslogMessage with * \"for user \" TargetUsername:string\n  | extend\n      DvcHostname                 = Computer,\n      EventCount                  = int(1),\n      EventEndTime                = TimeGenerated,\n      EventOriginalRestultDetails = 'User session closed',\n      EventProduct                = 'sudo',\n      EventResult                 = 'Success',\n      EventResultDetails          = 'Other',\n      EventSchema                 = 'Authentication',\n      EventSchemaVersion          = '0.1.1',\n      EventStartTime              = TimeGenerated,\n      EventType                   = 'Logoff',\n      EventVendor                 = 'sudo',\n      TargetUsernameType          = 'Simple'\n// ************************\n//      <Aliases>\n// ************************\n| extend\n    Dvc   = Computer,\n    User  = TargetUsername\n// ************************\n//      </Aliases>\n// ************************\n  | project-away Computer, MG, SourceSystem, TenantId\n  };\nunion isfuzzy=false \n  SudoSignInAuthorized(disabled = disabled), \n  SudoAuthFailure1(disabled = disabled), \n  SudoDisconnect(disabled = disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
