{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationSu')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for Linux su",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationSu",
        "query": "let parser = (disabled: bool=false)\n{\n    let SyslogProjects = Syslog\n        | project\n            TimeGenerated,\n            Computer,\n            SyslogMessage,\n            ProcessName,\n            ProcessID,\n            HostIP,\n            Type,\n            _ItemId,\n            _ResourceId,\n            _SubscriptionId;\n    //\n    // -- Successful SU\n    // Parses the event \"Successful su for <user> by <user>\"\n    let SuSignInAuthorized=(disabled: bool=false)\n{\n    SyslogProjects \n        | where not(disabled)\n        | where ProcessName == \"su\" and SyslogMessage startswith \"Successful su for\"\n        | parse SyslogMessage with * \"for \" TargetUsername: string \" by \" ActorUsername: string\n        | extend\n            EventType = 'Elevation'\n        | project-away SyslogMessage, ProcessName\n};\n    // \n    // -- SU end\n    // Parsers the event \"pam_unix(su[-l]:session): session closed for user <user>\"\n    let SuDisconnect=(disabled: bool=false)\n{\n    SyslogProjects \n        | where not(disabled)\n        | where ProcessName == \"su\" and SyslogMessage has_all ('pam_unix(su', 'session): session closed for user')\n        | parse SyslogMessage with * \"for user \" TargetUsername: string\n        | extend\n            EventType = 'Logoff'\n        | project-away SyslogMessage, ProcessName\n};\n    union isfuzzy=false \n        SuDisconnect(disabled = disabled),\n        SuSignInAuthorized (disabled = disabled)\n    | invoke _ASIM_ResolveDvcFQDN ('Computer')\n    | extend\n        ActingAppId           = tostring(ProcessID),\n        ActingAppType         = 'Process',\n        ActorUsernameType     = 'Simple',\n        DvcIdType             = iff (isnotempty(_ResourceId), \"AzureResourceId\", \"\"),\n        DvcOs                 = 'Linux',\n        EventCount            = int(1),\n        EventEndTime          = TimeGenerated,\n        EventProduct          = 'su',\n        EventResult           = 'Success',\n        EventSchema           = 'Authentication',\n        EventSchemaVersion    = '0.1.2',\n        EventSeverity         = 'Informational',\n        EventStartTime        = TimeGenerated,\n        EventVendor           = 'Linux',\n        TargetDvcOs           = 'Linux',\n        TargetUsernameType    = 'Simple'\n    | project-away Computer, ProcessID\n    | project-rename \n        DvcId                 = _ResourceId,\n        DvcIpAddr             = HostIP,\n        DvcScopeId            = _SubscriptionId,\n        EventUid              = _ItemId\n    //\n    // -- Aliases\n    | extend\n        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr),\n        Dvc                   = DvcHostname,\n        IpAddr                = DvcIpAddr,\n        TargetDomain          = DvcDomain,\n        TargetDomainType      = DvcDomainType,\n        TargetDvcId           = DvcId,\n        TargetDvcIdType       = DvcDomainType,\n        TargetDvcScopeId      = DvcScopeId,\n        TargetFQDN            = DvcFQDN,\n        TargetHostname        = DvcHostname,\n        TargetIpAddr          = DvcIpAddr,\n        User                  = TargetUsername\n};\nparser\n(\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
