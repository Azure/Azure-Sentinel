{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationMicrosoftSecurityEvents')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Security Events",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationMicrosoftSecurityEvents",
        "query": "let LogonEvents=dynamic([4624, 4625]);\nlet LogoffEvents=dynamic([4634, 4647]);\nlet LogonTypes=datatable(LogonType: int, EventSubType: string)\n[\n    2, 'Interactive',\n    3, 'Network',\n    4, 'Batch',\n    5, 'Service',\n    7, 'Unlock',\n    8, 'NetworkCleartext',\n    9, 'NewCredentials',\n    10, 'RemoteInteractive',\n    11, 'CachedInteractive'\n];\n// https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/quick-reference-troubleshooting-netlogon-error-codes/ba-p/256000\nlet LogonStatus=datatable \n(\n    EventStatus: string,\n    EventOriginalResultDetails: string,\n    EventResultDetails: string\n)\n[\n    '0x80090325', 'SEC_E_UNTRUSTED_ROOT', 'Other',\n    '0xc0000064', 'STATUS_NO_SUCH_USER', 'No such user or password',\n    '0xc000006f', 'STATUS_INVALID_LOGON_HOURS', 'Logon violates policy',\n    '0xc0000070', 'STATUS_INVALID_WORKSTATION', 'Logon violates policy',\n    '0xc0000071', 'STATUS_PASSWORD_EXPIRED', 'Password expired',\n    '0xc0000072', 'STATUS_ACCOUNT_DISABLED', 'User disabled',\n    '0xc0000133', 'STATUS_TIME_DIFFERENCE_AT_DC', 'Other',\n    '0xc000018d', 'STATUS_TRUSTED_RELATIONSHIP_FAILURE', 'Other',\n    '0xc0000193', 'STATUS_ACCOUNT_EXPIRED', 'Account expired',\n    '0xc0000380', 'STATUS_SMARTCARD_WRONG_PIN', 'Other',\n    '0xc0000381', 'STATUS_SMARTCARD_CARD_BLOCKED', 'Other',\n    '0xc0000382', 'STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED', 'Other',\n    '0xc0000383', 'STATUS_SMARTCARD_NO_CARD', 'Other',\n    '0xc0000384', 'STATUS_SMARTCARD_NO_KEY_CONTAINER', 'Other',\n    '0xc0000385', 'STATUS_SMARTCARD_NO_CERTIFICATE', 'Other',\n    '0xc0000386', 'STATUS_SMARTCARD_NO_KEYSET', 'Other',\n    '0xc0000387', 'STATUS_SMARTCARD_IO_ERROR', 'Other',\n    '0xc0000388', 'STATUS_DOWNGRADE_DETECTED', 'Other',\n    '0xc0000389', 'STATUS_SMARTCARD_CERT_REVOKED', 'Other',\n    '0x80090302', 'SEC_E_UNSUPPORTED_FUNCTION', 'Other',\n    '0x80090308', 'SEC_E_INVALID_TOKEN', 'Other',\n    '0x8009030e', 'SEC_E_NO_CREDENTIALS', 'Other',\n    '0xc0000008', 'STATUS_INVALID_HANDLE', 'Other',\n    '0xc0000017', 'STATUS_NO_MEMORY', 'Other',\n    '0xc0000022', 'STATUS_ACCESS_DENIED', 'Other',\n    '0xc0000034', 'STATUS_OBJECT_NAME_NOT_FOUND', 'Other',\n    '0xc000005e', 'STATUS_NO_LOGON_SERVERS', 'Other',\n    '0xc000006a', 'STATUS_WRONG_PASSWORD', 'Incorrect password',\n    '0xc000006d', 'STATUS_LOGON_FAILURE', 'Other',\n    '0xc000006e', 'STATUS_ACCOUNT_RESTRICTION', 'Logon violates policy',\n    '0xc0000073', 'STATUS_NONE_MAPPED', 'Other',\n    '0xc00000fe', 'STATUS_NO_SUCH_PACKAGE', 'Other',\n    '0xc000009a', 'STATUS_INSUFFICIENT_RESOURCES', 'Other',\n    '0xc00000dc', 'STATUS_INVALID_SERVER_STATE', 'Other',\n    '0xc0000106', 'STATUS_NAME_TOO_LONG', 'Other',\n    '0xc000010b', 'STATUS_INVALID_LOGON_TYPE', 'Logon violates policy',\n    '0xc000015b', 'STATUS_LOGON_TYPE_NOT_GRANTED', 'Logon violates policy',\n    '0xc000018b', 'STATUS_NO_TRUST_SAM_ACCOUNT', 'Logon violates policy',\n    '0xc0000224', 'STATUS_PASSWORD_MUST_CHANGE', 'Other',\n    '0xc0000234', 'STATUS_ACCOUNT_LOCKED_OUT', 'User locked',\n    '0xc00002ee', 'STATUS_UNFINISHED_CONTEXT_DELETED', 'Other'\n];\nlet SecEventLogon =(starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false)\n{\n    SecurityEvent\n    | where not(disabled)\n    // ************************************************************************* \n    //       <Prefilterring>\n    // *************************************************************************\n    | where \n        (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or (TargetUserName has_any (username_has_any)) or (TargetDomainName has_any (username_has_any)) or (strcat(TargetDomainName, '\\\\', TargetUserName) has_any (username_has_any)) or (SubjectUserName has_any (username_has_any)) or (SubjectDomainName has_any (username_has_any)) or (strcat(SubjectDomainName, '\\\\', SubjectUserName) has_any (username_has_any)))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(IpAddress, srcipaddr_has_any_prefix))\n        and ((array_length(srchostname_has_any) == 0) or (WorkstationName has_any (srchostname_has_any)))\n    // eventtype_in filtering done later in the parser\n    // eventresultdetails_in filtering done later in the parser\n    // eventresult filtering done later in the parser\n    // ************************************************************************* \n    //       </Prefilterring>\n    // ************************************************************************* \n    | where EventID in (LogonEvents) or \n        EventID in (LogoffEvents)\n    | extend IpAddr=IpAddress\n    | project-rename \n        EventMessage = Activity\n        ,\n        ActorSessionId=SubjectLogonId\n        ,\n        TargetSessionId=TargetLogonId\n        ,\n        ActorUserId=SubjectUserSid\n        ,\n        TargetUserId =TargetUserSid\n        ,\n        SrcDvcHostname = WorkstationName // Backword Compatibility. Will be removed by July 2024\n        ,\n        TargetDvcHostname = Computer\n        ,\n        EventOriginalUid = EventOriginId\n        ,\n        LogonProtocol=AuthenticationPackageName\n        ,\n        SrcDvcIpAddr=IpAddress // Backword Compatibility. Will be removed by July 2024\n        ,\n        EventOriginalType=EventID\n    | extend\n        EventResult = iff(EventOriginalType == 4625, 'Failure', 'Success')\n        ,\n        EventCount=int(1)\n        ,\n        EventSchemaVersion='0.1.0'\n        ,\n        EventProduct = \"Security Events\"\n        ,\n        ActorUserIdType='SID'\n        ,\n        TargetUserIdType='SID'\n        ,\n        EventVendor='Microsoft' \n        ,\n        EventStartTime =TimeGenerated\n        ,\n        EventEndTime=TimeGenerated\n        ,\n        EventType=iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon')\n        ,\n        ActorUsername = iff (SubjectDomainName in ('-', ''), SubjectUserName, SubjectAccount)\n        ,\n        ActorUsernameType= iff(SubjectDomainName in ('-', ''), 'Simple', 'Windows')\n        ,\n        TargetUsername = iff (TargetDomainName in ('-', ''), trim(@'\\\\', TargetUserName), trim(@'\\\\', TargetAccount))\n        ,\n        TargetUsernameType=iff (TargetDomainName in ('-', ''), 'Simple', 'Windows')\n        ,\n        SrcDvcOs = 'Windows'\n        ,\n        EventStatus= iff(SubStatus == '0x0', Status, SubStatus)\n        ,\n        SrcHostname = SrcDvcHostname // Backword Compatibility. Will be removed by July 2024\n        ,\n        SrcIpAddr = SrcDvcIpAddr // Backword Compatibility. Will be removed by July 2024\n    // mapping ASimMatchingUsername\n    | extend\n        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n        ,\n        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                    \"Both\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    temp_isMatchActorUsername,\n                                    \"ActorUsername\",\n                                    \"No match\"\n                                )\n    // filtering on 'eventtype_in', 'eventresult', 'TargetUsername' and 'ActorUsername'\n    | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))\n        and (eventresult == \"*\" or (EventResult == eventresult))\n        and ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n    | project-away TargetUserName, AccountType,temp_isMatchActorUsername,temp_isMatchTargetUsername\n    | extend\n        ActorUserType = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)\n        ,\n        TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)\n    | lookup LogonStatus on EventStatus\n    // filtering on 'eventresultdetails_in'\n    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n    | lookup LogonTypes on LogonType\n    /// ** Aliases \n    | extend\n        User=TargetUsername\n        ,\n        LogonTarget=TargetDvcHostname\n        ,\n        Dvc=SrcDvcHostname,\n        EventSchema = 'Authentication',\n        EventOriginalType=tostring(EventOriginalType)\n};\nSecEventLogon(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}