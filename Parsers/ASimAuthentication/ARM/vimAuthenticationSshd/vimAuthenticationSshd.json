{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationSshd')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for OpenSSH sshd",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationSshd",
        "query": "let parser = (\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  )\n{\n    let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))\n{\n    T\n        | where \n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))\n            and ((array_length(targetappname_has_any) == 0) or 'sshd' in~ (targetappname_has_any))\n            and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SyslogMessage, srcipaddr_has_any_prefix)))\n            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n            and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in) or \"Logoff\" in~ (eventtype_in))\n// eventresultdetails_in filtering done later in the parser\n// eventresult filtering done later in the parser\n};\n    let SyslogProjects = Syslog\n        | project\n            TimeGenerated,\n            Computer,\n            SyslogMessage,\n            ProcessName,\n            ProcessID,\n            HostIP,\n            Type,\n            _ItemId,\n            _ResourceId,\n            _SubscriptionId;\n    //\n    // -- Successful login\n    let SSHDAccepted=(disabled: bool=false)\n{ \n    // -- Parse events with the format \"Accepted password for <User> from <IP address> port <port> ssh2\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage startswith 'Accepted'\n        | invoke prefilter()\n        | parse SyslogMessage with \"Accepted password for \" TargetUsername: string \" from \" SrcIpAddr: string \" port\" SrcPortNumber: int *\n        | extend\n            EventResult     = 'Success'\n            ,\n            EventSeverity = 'Informational'\n            ,\n            EventType     = 'Logon'\n            ,\n            EventCount    = int(1)\n        | project-away SyslogMessage, ProcessName\n};\n    //\n    // -- Failed login - incorrect password\n    let SSHDFailed=(disabled: bool=false)\n{\n    // -- Parse events with the format Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]\"\n    // -- Or a number of such events message repeated <n> times: [ <message> ]\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and (\n            SyslogMessage startswith 'Failed' \n            or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')\n            )\n        | invoke prefilter()\n        | parse SyslogMessage with * \"Failed \" * \" for \" TargetUsername: string \" from \" SrcIpAddr: string \" port\" SrcPortNumber: int *\n        | parse SyslogMessage with \"message repeated\" EventCount: int \" times:\" * \n        | extend\n            EventResult          = 'Failure'\n            ,\n            EventSeverity      = 'Low' \n            ,\n            EventType          = 'Logon'\n            ,\n            LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')\n            ,\n            EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password')\n            ,\n            EventCount         = toint(coalesce(EventCount, 1))\n        | project-away SyslogMessage, ProcessName\n};\n    //\n    // -- Logoff - Timeout\n    let SSHDTimeout=(disabled: bool=false)\n{\n    // -- Parse events with the format \"Timeout, client not responding from user yanivsh 131.107.174.198 port 7623\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage startswith 'Timeout'\n        | invoke prefilter()\n        | parse-where SyslogMessage with * \"user \" TargetUsername: string \" \" SrcIpAddr: string \" port \" SrcPortNumber: int\n        | extend\n            EventSeverity    = 'Informational'\n            ,\n            EventType      = 'Logoff'\n            ,\n            EventResult    = 'Success'\n            ,\n            EventCount     = int(1)\n        | project-away SyslogMessage, ProcessName\n};\n    //\n    // -- Failed login - invalid user\n    let SSHDInvalidUser=(disabled: bool=false)\n{\n    // -- Parse events with the format \"Invalid user [<User>] from <IP address> port <port>\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage startswith 'Invalid user'\n        | invoke prefilter()\n        | parse SyslogMessage with \"Invalid user \" TargetUsername: string \" from \" SrcIpAddr: string \" port \" SrcPortNumber: int\n        | parse SyslogMessage with \"Invalid user  from \" SrcIpAddrNoUser: string \" port \" SrcPortNumberNoUser: int\n        | extend\n            EventResult             = 'Failure'\n            ,\n            EventSeverity         = 'Low'\n            ,\n            EventType             = 'Logon'\n            ,\n            EventResultDetails    = 'No such user'\n            ,\n            EventCount            = int(1)\n            ,\n            SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser)\n            ,\n            SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)\n        | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser\n};\n    //\n    // -- Blocked intrusion attempts\n    let SSHDABreakInAttemptMappingFailed=(disabled: bool=false)\n{\n    // -- Parse events with the format \"reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage startswith \"reverse mapping checking getaddrinfo for\"\n        | invoke prefilter()\n        | parse SyslogMessage with * \" for \" Src \" [\" SrcIpAddr \"]\" *\n        | invoke _ASIM_ResolveSrcFQDN ('Src')\n        | extend\n            EventResult             = 'Failure'\n            ,\n            EventType             = 'Logon'\n            ,\n            DvcAction             = 'Block'\n            ,\n            TargetUsername        = ''\n            ,\n            EventSeverity         = 'Medium'\n            ,\n            EventCount            = int(1)\n            ,\n            EventResultDetails    = 'Logon violates policy'\n            ,\n            RuleName              = \"Reverse mapping failed\"\n        | extend\n            Rule = RuleName\n        | project-away SyslogMessage, ProcessName, Src\n};\n    let SSHDABreakInAttemptMappingMismatch=(disabled: bool=false)\n{\n    // -- Parse events with the format \"Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage has \"but this does not map back to the address\"\n        | invoke prefilter()\n        | parse SyslogMessage with \"Address \" SrcIpAddr: string \" maps to \" Src: string \", but this\" *\n        | invoke _ASIM_ResolveSrcFQDN ('Src')\n        | extend\n            EventResult          = 'Failure'\n            ,\n            EventType          = 'Logon'\n            ,\n            DvcAction          = 'Block'\n            ,\n            TargetUsername     = ''\n            ,\n            EventSeverity      = 'Medium'\n            ,\n            EventCount         = int(1)\n            ,\n            EventResultDetails = 'Logon violates policy'\n            ,\n            RuleName = \"Address to host to address mapping does not map back to address\"\n        | extend\n            Rule = RuleName\n        | project-away SyslogMessage, ProcessName, Src\n};\n    let SSHDABreakInAttemptNastyPtr=(disabled: bool=false)\n{\n    // -- Parse events with the format \"Nasty PTR record \"<RR>\" is set up for <IP Address>, ignoring\"\n    SyslogProjects\n        | where not(disabled)\n        | where ProcessName == \"sshd\" and SyslogMessage startswith \"Nasty PTR record\"\n        | invoke prefilter()\n        | parse SyslogMessage with * \"set up for \" SrcIpAddr: string \", ignoring\"\n        | extend\n            EventResult          = 'Failure'\n            ,\n            EventType          = 'Logon'\n            ,\n            DvcAction          = 'Block'\n            ,\n            TargetUsername     = ''\n            ,\n            EventSeverity      = 'Medium'\n            ,\n            EventCount         = int(1)\n            ,\n            EventResultDetails = 'Logon violates policy'\n            ,\n            RuleName = \"Nasty PTR record set for IP Address\"\n        | extend\n            Rule = RuleName\n        | project-away SyslogMessage, ProcessName\n};\n    union isfuzzy=false \n        SSHDAccepted (disabled=disabled)\n        ,\n        SSHDFailed (disabled=disabled)\n        ,\n        SSHDInvalidUser (disabled=disabled)\n        ,\n        SSHDTimeout (disabled=disabled)\n        ,\n        SSHDABreakInAttemptMappingFailed (disabled=disabled)\n        ,\n        SSHDABreakInAttemptMappingMismatch (disabled=disabled)\n        ,\n        SSHDABreakInAttemptNastyPtr (disabled=disabled)\n    // Post-filtering\n    | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))\n        and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n        and (eventresult == \"*\" or (EventResult == eventresult))\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | invoke _ASIM_ResolveDvcFQDN ('Computer')\n    | extend \n        EventVendor             = 'OpenBSD'\n        ,\n        EventProduct          = 'OpenSSH'\n        ,\n        DvcOs                 = 'Linux'\n        ,\n        TargetDvcOs           = 'Linux'\n        ,\n        LogonProtocol         = 'ssh'\n        ,\n        TargetAppName         = 'sshd'\n        ,\n        TargetAppType         = 'Service'\n        ,\n        EventSubType          = 'Remote'\n        ,\n        EventSchema           = 'Authentication'\n        ,\n        EventSchemaVersion    = '0.1.2'\n        ,\n        EventStartTime        = TimeGenerated\n        ,\n        EventEndTime          = TimeGenerated\n        ,\n        TargetUsernameType    = 'Simple'\n        ,\n        DvcIdType             = iff (isnotempty(_ResourceId), \"AzureResourceId\", \"\")\n        ,\n        TargetAppId           = tostring(ProcessID)\n    | project-away Computer, ProcessID, temp*\n    | project-rename \n        EventUid                = _ItemId\n        ,\n        DvcScopeId            = _SubscriptionId\n        ,\n        DvcId                 = _ResourceId\n        ,\n        DvcIpAddr             = HostIP\n    //\n    // -- Aliases\n    | extend\n        User                    = TargetUsername\n        ,\n        Dvc                   = DvcHostname\n        ,\n        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)\n        ,\n        TargetDomain          = DvcDomain\n        ,\n        TargetFQDN            = DvcFQDN\n        ,\n        TargetDomainType      = DvcDomainType\n        ,\n        TargetHostname        = DvcHostname\n        ,\n        TargetDvcId           = DvcId\n        ,\n        TargetDvcScopeId      = DvcScopeId\n        ,\n        TargetDvcIdType       = DvcDomainType\n        ,\n        IpAddr                = DvcIpAddr\n        ,\n        TargetIpAddr          = DvcIpAddr\n};\n  parser\n  (\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
