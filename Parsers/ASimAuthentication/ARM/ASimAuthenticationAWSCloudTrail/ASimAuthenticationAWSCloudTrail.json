{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationAWSCloudTrail')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for AWS sign-in logs",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationAWSCloudTrail",
        "query": "// -- Refer to https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html for details\nlet usertype_lookup = datatable (TargetOriginalUserType:string, TargetUserType:string) [\n    // -- For console login, only IAMUser, Root and AssumedRole are relevant\n    'Root', 'Admin', \n    'IAMUser', 'Regular', \n    'AssumedRole', 'Service', \n    'Role' ,'Service', \n    'FederatedUser', 'Regular',\n    'Directory','Other',\n    'AWSAccount','Guest',\n    'AWSService',  'Application',\n    'Unknown', 'Other',\n];\nlet eventresultdetails_lookup = datatable (EventOriginalResultDetails:string, EventOriginalDetails:string) [\n  'No username found in supplied account', 'No such user',\n  'Failed authentication', ''\n];\nlet ASIM_GetUsernameType = (username:string) { \n    case ( \n        username contains \"@\" , \"UPN\",\n        username contains \"\\\\\", \"Windows\",\n        (username has \"CN=\" or username has \"OU=\" or username has \"DC=\"), \"DN\",\n        isempty(username), \"\",\n        \"Simple\"\n    )\n};\nlet parser=(disabled:bool=false){\n  AWSCloudTrail \n  | where not(disabled)\n  | where EventName == 'ConsoleLogin'\n  | project-rename\n      EventOriginalResultDetails  = ErrorMessage,\n      EventOriginalUid            = AwsEventId,\n      EventProductVersion         = EventVersion,\n      EventUid                    = _ItemId,\n      HttpUserAgent               = UserAgent,\n      SrcIpAddr                   = SourceIpAddress,\n      TargeCloudRegion            = AWSRegion,\n      TargetOriginalUserType      = UserIdentityType,\n      TargetUserScopeId           = UserIdentityAccountId\n  | extend\n      Dvc                         = 'AWS',\n      EventCount                  = int(1),\n      EventEndTime                = TimeGenerated,\n      EventProduct                = 'CloudTrail',\n      EventResult                 = iff (ResponseElements has 'Success', 'Success', 'Failure'),\n      EventSchema                 = 'Authentication',\n      EventSchemaVersion          = '0.1.3',\n      EventStartTime              = TimeGenerated,\n      EventSubType                = 'Interactive',\n      EventType                   = 'Logon',\n      EventVendor                 = 'AWS',\n      LogonMethod                 = iff (AdditionalEventData has '\"MFAUsed\": \"Yes\"', 'MFA',''),\n      LogonProtocol               = 'HTTPS',\n      SrcDeviceType               = iff (AdditionalEventData has '\"MobileVersion\":\"Yes\"', 'Mobile Device', 'Computer'),\n      TargetUserId                = tostring(split(UserIdentityPrincipalid, ':')[0]),\n      TargetUserIdType            = 'AWSId',\n      TargetUsername              = case (\n            UserIdentityUserName   == \"HIDDEN_DUE_TO_SECURITY_REASONS\", \"\",\n            TargetOriginalUserType == 'IAMUser'                       , UserIdentityUserName,\n            TargetOriginalUserType == 'Root'                          , 'root',\n            TargetOriginalUserType == 'AssumedRole'                   , tostring(split(UserIdentityArn, '/')[-1]), // -- This is the AssuderRole session name, which typically represents a user.           \n            UserIdentityUserName\n        )\n  | extend\n      TargetUsernameType          = ASIM_GetUsernameType (TargetUsername)\n  | parse AdditionalEventData with * '\"LoginTo\":\"' TargetUrl:string '\"' *\n  | lookup eventresultdetails_lookup on EventOriginalResultDetails\n  | lookup usertype_lookup on TargetOriginalUserType \n  | extend \n      EventSeverity = iff(EventResult == 'Failure', 'Low','Informational'),\n      LogonTarget=tostring(split(TargetUrl,'?')[0]),\n    // -- Specific identifier aliases\n      TargetUserAWSId = TargetUserId\n    // -- Aliases\n    | extend\n        Dst    = LogonTarget,\n        Dvc    = EventVendor,\n        IpAddr = SrcIpAddr,\n        Src    = SrcIpAddr,\n        User   = TargetUsername\n    | project-away EventSource, EventTypeName, EventName, ResponseElements, AdditionalEventData, Session*, Category, ErrorCode, Aws*, ManagementEvent, OperationName, ReadOnly, RequestParameters, Resources, ServiceEventDetails, SharedEventId, SourceSystem, UserIdentity*, VpcEndpointId, APIVersion, RecipientAccountId, TenantId, EC2RoleDelivery\n    };\n    parser  \n    (\n        disabled = disabled\n    )",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
