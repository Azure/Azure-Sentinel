{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationCiscoASA')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering for Cisco Device Logon Events",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationCiscoASA",
        "query": "let parser = (\n starttime: datetime=datetime(null), \n endtime: datetime=datetime(null), \n username_has_any: dynamic = dynamic([]),\n targetappname_has_any: dynamic = dynamic([]),\n srcipaddr_has_any_prefix: dynamic = dynamic([]),\n srchostname_has_any: dynamic = dynamic([]),\n eventtype_in: dynamic = dynamic([]),\n eventresultdetails_in: dynamic = dynamic([]),\n eventresult: string = '*',\n disabled: bool=false\n ) {\n  let DeviceEventClassIDLookup = datatable (\n DeviceEventClassID: string,\n EventResultDetails: string,\n EventType: string,\n EventResult: string,\n DvcAction: string,\n EventSubType: string\n )\n         [\n     \"113004\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"113005\", \"Incorrect password\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"113006\", \"Logon violates policy\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"113008\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"113010\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"113012\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"113019\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"113039\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"315011\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"502103\", \"\", \"Elevate\", \"Success\", \"Allowed\", \"AssumeRole\",\n     \"605004\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"605005\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"611101\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"611102\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"611103\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"713198\", \"Logon violates policy\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"716002\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"716038\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"716039\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"716040\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"Remote\",\n     \"722022\", \"\", \"Logon\", \"Success\", \"Allowed\", \"Remote\",\n     \"722023\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"722028\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"722037\", \"\", \"Logoff\", \"Success\", \"Allowed\", \"\",\n     \"772002\", \"\", \"Logon\", \"Success\", \"Allowed\", \"\",\n     \"772003\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"\",\n     \"772004\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"\",\n     \"772005\", \"\", \"Logon\", \"Success\", \"Allowed\", \"\",\n     \"772006\", \"Other\", \"Logon\", \"Failure\", \"Blocked\", \"\"\n ];\n     let FilteredDeviceEventClassID = toscalar(\n         DeviceEventClassIDLookup \n         | summarize make_set(DeviceEventClassID)\n         );\n     let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity: string)\n         [\n     \"1\", \"High\", // Alert,\n     \"2\", \"High\", // Critical\n     \"3\", \"Medium\", // Error\n     \"4\", \"Low\", // Warning\n     \"5\", \"Informational\", // Notification\n     \"6\", \"Informational\", // Information\n     \"7\", \"Informational\", // Debug\n ];\n     let LogMessages = \n         CommonSecurityLog \n         | where not(disabled)\n         | where\n             (isnull(starttime) or TimeGenerated >= starttime) and\n             (isnull(endtime) or TimeGenerated <= endtime) \n         | where DeviceVendor =~ \"Cisco\"\n             and DeviceProduct == \"ASA\"\n             and DeviceEventClassID in(FilteredDeviceEventClassID)\n             and ((array_length(username_has_any) == 0) or (Message has_any (username_has_any)))\n             and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(Message, srcipaddr_has_any_prefix))\n             and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n         // eventtype_in filtering done later in the parser\n         // eventresultdetails_in filtering done later in the parser\n         // eventresult filtering done later in the parser\n         | extend EventOriginalSeverity = tostring(split(Message, \"-\", 1)[0])\n         | lookup SeverityLookup on EventOriginalSeverity\n         | project\n             TimeGenerated,\n             Type,\n             Computer,\n             _ItemId,\n             DeviceEventClassID,\n             Message,\n             DeviceAddress,\n             EventOriginalSeverity,\n             EventSeverity\n         | lookup DeviceEventClassIDLookup on DeviceEventClassID\n         // Filtering on eventtype_in and eventresult\n         | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))\n             and (eventresult == \"*\" or (EventResult == eventresult));\n     union \n         (\n         LogMessages\n         | where DeviceEventClassID == 113005\n         | parse Message with * 'reason = ' EventOriginalResultDetails ' : server = ' TargetIpAddr ' ' * 'user = ' TargetUsername ' ' * 'user IP = ' SrcIpAddr\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 502103\n         | parse Message with * \"Uname: \" TargetUsername \" \" *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(605004, 605005)\n         | parse Message with * 'from ' SrcIpAddr '/' SrcPortNumber: int \" to \" * \":\" TargetIpAddr '/' * 'user \"' TargetUsername '\"'\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(611101, 611102)\n         | parse Message with * 'IP address: ' SrcIpAddr ', Uname: ' TargetUsername\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 611103\n         | parse Message with * ' Uname: ' TargetUsername\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 113004\n         | parse Message with * 'server = ' TargetIpAddr ' ' * 'user = ' TargetUsername\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(113008, 113012)\n         | parse Message with * 'user = ' TargetUsername\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 113019\n         | parse Message with * 'Username = ' TargetUsername ', IP = ' SrcIpAddr ',' * \n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(113039, 716002, 716039, 722022, 722023, 722028, 722037)\n         | parse Message with * '> User <' TargetUsername \"> IP <\" SrcIpAddr \">\" *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 315011\n         | parse Message with * 'from ' SrcIpAddr ' ' * 'user \"' TargetUsername '\" ' * ' reason: \"' EventOriginalResultDetails '\" ' *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | extend EventResultDetails = iif(EventOriginalResultDetails == \"Internal error\", \"Other\", EventResultDetails)\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 113010\n         | parse Message with * 'user ' TargetUsername ' from  server' SrcIpAddr\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 113006\n         | parse Message with * 'User ' TargetUsername ' locked' *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 716040\n         | parse Message with * 'Denied ' TargetUsername ' login' *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 713198\n         | parse Message with * 'Failed: ' TargetUsername ' User' *\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID == 716038\n         | parse Message with * 'User ' TargetUsername ' IP ' SrcIpAddr ' Authentication'*\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(772002)\n         | parse Message with * 'user ' TargetUsername ', cause: ' EventOriginalResultDetails\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),\n         (\n         LogMessages\n         | where DeviceEventClassID in(772003, 772004)\n         | parse Message with * 'user ' TargetUsername ', IP ' SrcIpAddr ', cause: ' EventOriginalResultDetails\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n         | project-away Message\n         ), \n         (\n         LogMessages\n         | where DeviceEventClassID in(772005)\n         | parse Message with * 'user ' TargetUsername ' passed'\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         ),  \n         (\n         LogMessages\n         | where DeviceEventClassID in(772006)\n         | parse Message with * 'user ' TargetUsername ' failed'\n         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n             and ((array_length(srcipaddr_has_any_prefix) == 0))\n         | project-away Message\n         )\n     // mapping ASimMatchingUsername\n     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n     // ActorUsername not coming from source. Hence, not mapped.\n     | extend ASimMatchingUsername = case\n         (\n                                     array_length(username_has_any) == 0,\n                                     \"-\",\n                                     temp_isMatchTargetUsername,\n                                     \"TargetUsername\",\n                                     \"No match\"\n                                 )\n     | project-rename \n         DvcHostname           = Computer,\n         EventUid              = _ItemId,\n         EventOriginalType     = DeviceEventClassID,\n         DvcIpAddr             = DeviceAddress\n     | extend \n         EventSchemaVersion = \"0.1.3\",\n         EventSchema        = \"Authentication\",\n         EventVendor        = \"Cisco\",\n         EventProduct       = \"ASA\",\n         EventCount         = int(1),\n         EventStartTime     = TimeGenerated,\n         EventEndTime       = TimeGenerated,\n         Dvc                = DvcHostname,\n         User               = TargetUsername,\n         Src                = SrcIpAddr,\n         IpAddr             = SrcIpAddr,\n         Dst                = TargetIpAddr,\n         TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),\n         EventResultDetails = iif(TargetUsername == \"*****\", \"No such user or password\", EventResultDetails)\n     // filtering on 'eventresultdetails_in'\n     | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n   };\n parser (\n     starttime=starttime,\n     endtime=endtime,\n     username_has_any=username_has_any,\n     targetappname_has_any=targetappname_has_any,\n     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n     srchostname_has_any=srchostname_has_any,\n     eventtype_in=eventtype_in,\n     eventresultdetails_in=eventresultdetails_in,\n     eventresult=eventresult,\n     disabled=disabled\n ) ",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
