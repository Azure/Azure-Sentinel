{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationSentinelOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication parser for SentinelOne",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationSentinelOne",
        "query": "let EventResultDetailsLookup = datatable (comments_s: string, EventResultDetails: string)\n  [\n      \"invalid 2FA code\", \"Incorrect password\",\n      \"IP/User mismatch\", \"No such user or password\",\n      \"invalid password\", \"Incorrect password\",\n      \"user temporarily locked 2FA attempt\", \"User locked\",\n      \"no active site\", \"Other\"\n  ];\n  let EventFieldsLookup = datatable (\n      activityType_d: real,\n      EventType: string,\n      EventResult: string,\n      EventOriginalResultDetails: string\n  )\n  [\n      27, \"Logon\", \"Success\", \"User Logged In\",\n      33, \"Logoff\", \"Success\", \"User Logged Out\",\n      133, \"Logon\", \"Failure\", \"Existing User Login Failure\",\n      134, \"Logon\", \"Failure\", \"Unknown User Login\",\n      139, \"Logon\", \"Failure\", \"User Failed to Start an Unrestricted Session\",\n      3629, \"Logon\", \"Success\", \"Login Using Saved 2FA Recovery Code\"\n  ];\n  let EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)\n  [\n      \"WINLOGONATTEMPT\", \"Logon\",\n      \"WINLOGOFFATTEMPT\", \"Logoff\"\n  ];\n  let EventSubTypeLookup = datatable (alertInfo_loginType_s: string, EventSubType: string)\n  [\n      \"BATCH\", \"System\",\n      \"CACHED_INTERACTIVE\", \"Interactive\",\n      \"CACHED_REMOTE_INTERACTIVE\", \"RemoteInteractive\",\n      \"CACHED_UNLOCK\", \"System\",\n      \"INTERACTIVE\", \"Interactive\",\n      \"NETWORK_CLEAR_TEXT\", \"Remote\",\n      \"NETWORK_CREDENTIALS\", \"Remote\",\n      \"NETWORK\", \"Remote\",\n      \"REMOTE_INTERACTIVE\", \"RemoteInteractive\",\n      \"SERVICE\", \"Service\",\n      \"SYSTEM\", \"System\",\n      \"UNLOCK\", \"System\"\n  ];\n  let DeviceTypeLookup = datatable (\n      agentDetectionInfo_machineType_s: string,\n      SrcDeviceType: string\n  )\n  [\n      \"desktop\", \"Computer\",\n      \"server\", \"Computer\",\n      \"laptop\", \"Computer\",\n      \"kubernetes node\", \"Other\",\n      \"unknown\", \"Other\"\n  ];\n  let ThreatConfidenceLookup_undefined = datatable(\n      alertInfo_analystVerdict_s: string,\n      ThreatConfidence_undefined: int\n  )\n  [\n      \"FALSE_POSITIVE\", 5,\n      \"Undefined\", 15,\n      \"SUSPICIOUS\", 25,\n      \"TRUE_POSITIVE\", 33 \n  ];\n  let ThreatConfidenceLookup_suspicious = datatable(\n      alertInfo_analystVerdict_s: string,\n      ThreatConfidence_suspicious: int\n  )\n  [\n      \"FALSE_POSITIVE\", 40,\n      \"Undefined\", 50,\n      \"SUSPICIOUS\", 60,\n      \"TRUE_POSITIVE\", 67 \n  ];\n  let ThreatConfidenceLookup_malicious = datatable(\n      alertInfo_analystVerdict_s: string,\n      ThreatConfidence_malicious: int\n  )\n  [\n      \"FALSE_POSITIVE\", 75,\n      \"Undefined\", 80,\n      \"SUSPICIOUS\", 90,\n      \"TRUE_POSITIVE\", 100 \n  ];\n  let TargetUserTypesList = dynamic([\"Regular\", \"Machine\", \"Admin\", \"System\", \"Application\", \"Service Principal\", \"Service\", \"Anonymous\"]);\n  let parser = (disabled: bool=false) {\n      let alldata = SentinelOne_CL\n          | where not(disabled);\n      let activitydata = alldata\n          | where event_name_s == \"Activities.\"\n              and activityType_d in (27, 33, 133, 134, 139, 3629)\n          | parse-kv DataFields_s as (ipAddress: string, username: string, userScope: string, accountName: string, fullScopeDetails: string, fullScopeDetailsPath: string, role: string, scopeLevel: string, source: string, sourceType: string) with (pair_delimiter=\",\", kv_delimiter=\":\", quote='\"')\n          | lookup EventFieldsLookup on activityType_d\n          | lookup EventResultDetailsLookup on comments_s\n          | extend \n              SrcIpAddr = iff(ipAddress == \"null\", \"\", ipAddress),\n              EventOriginalType = tostring(toint(activityType_d)),\n              TargetUsername = username,\n              TargetUserScope = userScope,\n              AdditionalFields = bag_pack(\n                    \"accountName\", accountName,\n                    \"fullScopeDetails\", fullScopeDetails,\n                    \"fullScopeDetailsPath\", fullScopeDetailsPath,\n                    \"scopeLevel\", scopeLevel,\n                    \"source\", source,\n                    \"sourceType\", sourceType\n                ),\n              TargetOriginalUserType = role,\n              TargetUserType = case(\n                              role in (TargetUserTypesList), role,\n                              role == \"null\", \"\",\n                              \"Other\"\n                          )\n          | project-rename\n              EventStartTime = createdAt_t,\n              TargetUserId = userId_s,\n              EventOriginalUid = activityUuid_g,\n              EventMessage = primaryDescription_s\n          | extend TargetUserIdType = iff(isnotempty(TargetUserId), \"Other\", \"\");\n      let alertdata = alldata\n          | where event_name_s == \"Alerts.\"\n              and alertInfo_eventType_s in (\"WINLOGONATTEMPT\", \"WINLOGOFFATTEMPT\")\n          | lookup EventTypeLookup on alertInfo_eventType_s\n          | lookup EventSubTypeLookup on alertInfo_loginType_s\n          | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s;\n      let undefineddata = alertdata\n          | where ruleInfo_treatAsThreat_s == \"UNDEFINED\"\n          | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;\n      let suspiciousdata = alertdata\n          | where ruleInfo_treatAsThreat_s == \"Suspicious\"\n          | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;\n      let maliciousdata = alertdata\n          | where ruleInfo_treatAsThreat_s == \"Malicious\"\n          | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;\n      let alertdatawiththreatfield = union undefineddata, suspiciousdata, maliciousdata\n          | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')\n          | invoke _ASIM_ResolveSrcFQDN('alertInfo_loginAccountDomain_s')\n          | extend\n              EventResult = iff(alertInfo_loginIsSuccessful_s == \"true\", \"Success\", \"Failure\"),\n              EventSeverity = iff(ruleInfo_severity_s == \"Critical\", \"High\", ruleInfo_severity_s),\n              ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)\n          | project-rename\n              EventStartTime = alertInfo_createdAt_t,\n              SrcIpAddr = alertInfo_srcMachineIp_s,\n              ActingAppName = sourceProcessInfo_name_s,\n              DvcId = agentDetectionInfo_uuid_g,\n              DvcOs = agentDetectionInfo_osName_s,\n              DvcOsVersion = agentDetectionInfo_osRevision_s,\n              EventOriginalSeverity = ruleInfo_severity_s,\n              EventOriginalType = alertInfo_eventType_s,\n              EventOriginalSubType = alertInfo_loginType_s,\n              RuleName = ruleInfo_name_s,\n              TargetUserId = alertInfo_loginAccountSid_s,\n              TargetUsername = alertInfo_loginsUserName_s,\n              ThreatOriginalConfidence = ruleInfo_treatAsThreat_s\n          | extend\n              Rule = RuleName,\n              ActingAppType = iff(isnotempty(ActingAppName), \"Process\", \"\"),\n              DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n              TargetUserType = _ASIM_GetUserType(TargetUsername, TargetUserId),\n              TargetUserIdType = iff(isnotempty(TargetUserId), \"SID\", \"\");\n      union activitydata, alertdatawiththreatfield\n      | extend\n          EventCount = int(1),\n          EventProduct = \"SentinelOne\",\n          EventSchemaVersion = \"0.1.3\",\n          EventVendor = \"SentinelOne\",\n          EventSchema = \"Authentication\"\n      | extend\n          Dvc = coalesce(DvcHostname, EventProduct),\n          EventEndTime = EventStartTime,\n          EventUid = _ItemId,\n          User = TargetUsername\n      | extend\n          IpAddr = SrcIpAddr,\n          Src = SrcIpAddr\n      | project-away\n          *_b,\n          *_d,\n          *_g,\n          *_s,\n          *_t,\n          ipAddress,\n          username,\n          accountName,\n          fullScopeDetails,\n          fullScopeDetailsPath,\n          role,\n          scopeLevel,\n          source,\n          sourceType,\n          userScope,\n          Computer,\n          MG,\n          ManagementGroupName,\n          RawData,\n          SourceSystem,\n          TenantId,\n          _ItemId,\n          _ResourceId,\n          ThreatConfidence_*\n  };\n  parser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
