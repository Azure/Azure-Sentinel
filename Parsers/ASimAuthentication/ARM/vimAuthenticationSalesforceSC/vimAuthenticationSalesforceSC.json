{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationSalesforceSC')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication filtering parser for Salesforce Service Cloud",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationSalesforceSC",
        "query": "let parser = (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    )\n{\n    let SalesforceSchema = datatable\n(\n    api_version_s: string,\n    browser_type_s: string,\n    cipher_suite_s: string,\n    client_ip_s: string,\n    delegated_user_id_s: string,\n    delegated_user_name_s: string,\n    event_type_s: string,\n    login_key_s: string,\n    login_status_s: string,\n    login_type_s: string,\n    login_sub_type_s: string,\n    organization_id_s: string,\n    platform_type_s: string,\n    request_id_s: string,\n    request_status_s: string,\n    session_key_s: string,\n    source_ip_s: string,\n    timestamp_s: string,\n    tls_protocol_s: string,\n    uri_s: string,\n    user_id_s: string,\n    user_name_s: string,\n    user_type_s: string,\n    wave_session_id_g: string\n)[];\n    let EventResultLookup = datatable\n(\n    login_status_s: string,\n    DvcAction: string,\n    EventResultDetails: string,\n    EventResult: string,\n    EventSeverity: string\n)\n[\n    \"LOGIN_CHALLENGE_ISSUED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_CHALLENGE_PENDING\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_DATA_DOWNLOAD_ONLY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_END_SESSION_TXN_SECURITY_POLICY\", \"Blocked\", \"Logon violates policy\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_API_TOO_OLD\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ASYNC_USER_CREATE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_AVANTGO_DISABLED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_AVANTGO_TRIAL_EXP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_CLIENT_NO_ACCESS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_CLIENT_REQ_UPDATE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_CSS_FROZEN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_CSS_PW_LOCKOUT\", \"Blocked\", \"User locked\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_DUPLICATE_USERNAME\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_EXPORT_RESTRICTED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_GLOBAL_BLOCK_DOMAIN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_HT_DOWN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_HTP_METHD_INVALID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_INSECURE_LOGIN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_INVALID_GATEWAY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_INVALID_ID_FIELD\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_INVALID_PASSWORD\", \"Blocked\", \"Incorrect password\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_LOGINS_EXCEEDED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_MUST_USE_API_TOKEN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_MUTUAL_AUTHENTICATION\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_NETWORK_INACTIVE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_NO_HT_ACCESS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_NO_NETWORK_ACCESS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_NO_NETWORK_INFO\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_NO_SET_COOKIES\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_OFFLINE_DISABLED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_OFFLINE_TRIAL_EXP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_CLOSED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_DOMAIN_ONLY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_IN_MAINTENANCE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_INACTIVE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_IS_DOT_ORG\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_LOCKOUT\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_SIGNING_UP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_ORG_SUSPENDED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_OUTLOOK_DISABLED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_PAGE_REQUIRES_LOGIN\", \"Blocked\", \"Session expired\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_PASSWORD_EMPTY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_PASSWORD_LOCKOUT\", \"Blocked\", \"User locked\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_PORTAL_INACTIVE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_RATE_EXCEEDED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_RESTRICTED_DOMAIN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_RESTRICTED_TIME\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SESSION_TIMEOUT\", \"Blocked\", \"Session expired\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SSO_PWD_INVALID\", \"Blocked\", \"Incorrect password\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SSO_SVC_DOWN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SSO_URL_INVALID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_STORE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_STORE_DOWN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SWITCH_SFDC_INSTANCE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SWITCH_SFDC_LOGIN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SYNCOFFLINE_DISBLD\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_SYSTEM_DOWN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USER_API_ONLY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USER_FROZEN\", \"Blocked\", \"User locked\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USER_INACTIVE\", \"Blocked\", \"User disabled\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USER_NON_MOBILE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USER_STORE_ACCESS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_USERNAME_EMPTY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_WIRELESS_DISABLED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ERROR_WIRELESS_TRIAL_EXP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_LIGHTNING_LOGIN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_NO_ERROR\", \"Allowed\", \"\", \"Success\", \"Informational\",\n    \"LOGIN_OAUTH_API_DISABLED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_CONSUMER_DELETED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_DS_NOT_EXPECTED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_EXCEED_GET_AT_LMT\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_CODE_CHALLENGE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_CODE_VERIFIER\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_DEVICE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_DS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_DSIG\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_IP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_NONCE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_SIG_METHOD\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_TIMESTAMP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_TOKEN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_VERIFIER\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_INVALID_VERSION\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_MISSING_DS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_NO_CALLBACK_URL\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_NO_CONSUMER\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_NO_TOKEN\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_NONCE_REPLAY\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_PACKAGE_MISSING\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_PACKAGE_OLD\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_OAUTH_UNEXPECTED_PARAM\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_ORG_TRIAL_EXP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_READONLY_CANNOT_VALIDATE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_AUDIENCE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_CONFIG\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_FORMAT\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_IN_RES_TO\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_ISSUER\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_ORG_ID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_PORTAL_ID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_RECIPIENT\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_SESSION_LEVEL\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_SIGNATURE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_SITE_URL\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_STATUS\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_SUB_CONFIRM\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_TIMESTAMP\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_USERNAME\", \"Blocked\", \"No such user\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_INVALID_VERSION\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_MISMATCH_CERT\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_MISSING_ORG_ID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_MISSING_PORTAL_ID\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_PROVISION_ERROR\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_REPLAY_ATTEMPTED\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_SAML_SITE_INACTIVE\", \"Blocked\", \"Other\", \"Failure\", \"Informational\",\n    \"LOGIN_TWOFACTOR_REQ\", \"Blocked\", \"Logon violates policy\", \"Failure\", \"Informational\"\n];\n    let SalesforceEventType = dynamic(['Login', 'LoginAs', 'Logout']);\n    let EventTypeLookup = datatable(event_type_s: string, EventType: string)\n[\n    \"Login\", \"Logon\",\n    \"LoginAs\", \"Logon\",\n    \"Logout\", \"Logoff\"\n];\n    let DvcOsLookup = datatable\n(\n    platform_type_s: string,\n    DvcOs: string,\n    DvcOsVersion: string\n)\n[\n    \"1000\", \"Windows\", \"\",\n    \"1008\", \"Windows\", \"2003\",\n    \"1013\", \"Windows\", \"8.1\",\n    \"1015\", \"Windows\", \"10\",\n    \"2003\", \"Macintosh/Apple\", \"OSX\",\n    \"4000\", \"Linux\", \"\",\n    \"5005\", \"Android\", \"\",\n    \"5006\", \"iPhone\", \"\",\n    \"5007\", \"iPad\", \"\",\n    \"5200\", \"Android\", \"10.0\"\n];\n    let LogonMethodLookup = datatable\n(\n    LoginType_s: string,\n    LogonMethodOriginal: string,\n    LogonMethod: string\n)\n[\n    \"7\", \"AppExchange\", \"Other\",\n    \"A\", \"Application\", \"Other\",\n    \"s\", \"Certificate-based login\", \"PKI\",\n    \"k\", \"Chatter Communities External User\", \"Other\",\n    \"n\", \"Chatter Communities External User Third Party SSO\", \"Other\",\n    \"r\", \"Employee Login to Community\", \"Other\",\n    \"z\", \"Lightning Login\", \"Username & Password\",\n    \"l\", \"Networks Portal API Only\", \"Other\",\n    \"6\", \"Remote Access Client\", \"Other\",\n    \"i\", \"Remote Access 2.0\", \"Other\",\n    \"I\", \"Other Apex API\", \"Other\",\n    \"R\", \"Partner Product\", \"Other\",\n    \"w\", \"Passwordless Login\", \"Passwordless\",\n    \"3\", \"Customer Service Portal\", \"Other\",\n    \"q\", \"Partner Portal Third-Party SSO\", \"Other\",\n    \"9\", \"Partner Portal\", \"Other\",\n    \"5\", \"SAML Idp Initiated SSO\", \"Other\",\n    \"m\", \"SAML Chatter Communities External User SSO\", \"Other\",\n    \"b\", \"SAML Customer Service Portal SSO\", \"Other\",\n    \"c\", \"SAML Partner Portal SSO\", \"Other\",\n    \"h\", \"SAML Site SSO\", \"Other\",\n    \"8\", \"SAML Sfdc Initiated SSO\", \"Other\",\n    \"E\", \"SelfService\", \"Other\",\n    \"j\", \"Third Party SSO\", \"Other\"\n];\n    let LogonProtocolLookup = datatable\n(\n    LoginSubType_s: string,\n    LogonProtocolOriginal: string,\n    LogonProtocol: string\n)\n[\n    \"uiup\", \"UI Username-Password\", \"Basic Auth\",\n    \"oauthpassword\", \"OAuth Username-Password\", \"OAuth\",\n    \"oauthtoken\", \"OAuth User-Agent\", \"OAuth\",\n    \"oauthhybridtoken\", \"OAuth User-Agent for Hybrid Apps\", \"OAuth\",\n    \"oauthtokenidtoken\", \"OAuth User-Agent with ID Token\", \"OAuth\",\n    \"oauthclientcredential\", \"OAuth Client Credential\", \"OAuth\",\n    \"oauthcode\", \"OAuth Web Server\", \"OAuth\",\n    \"oauthhybridauthcode\", \"OAuth Web Server for Hybrid Apps\", \"OAuth\",\n];\n    let TempEventResultLookup = datatable(request_status_s: string, TempEventResult: string)\n[\n    \"S\", \"Success\",\n    \"F\", \"Failure\",\n    \"A\", \"Failure\",\n    \"R\", \"Success\",\n    \"N\", \"Failure\",\n    \"U\", \"NA\"\n];\n    let UserTypeLookup = datatable(user_type_s: string, TargetUserType: string)\n[\n    \"CsnOnly\", \"Other\",\n    \"CspLitePortal\", \"Other\",\n    \"CustomerSuccess\", \"Other\",\n    \"Guest\", \"Anonymous\",\n    \"PowerCustomerSuccess\", \"Other\",\n    \"PowerPartner\", \"Other\",\n    \"SelfService\", \"Other\",\n    \"Standard\", \"Regular\",\n    \"A\", \"Application\",\n    \"b\", \"Other\",\n    \"C\", \"Other\",\n    \"D\", \"Other\",\n    \"F\", \"Other\",\n    \"G\", \"Anonymous\",\n    \"L\", \"Other\",\n    \"N\", \"Service\",\n    \"n\", \"Other\",\n    \"O\", \"Other\",\n    \"o\", \"Other\",\n    \"P\", \"Other\",\n    \"p\", \"Other\",\n    \"S\", \"Regular\",\n    \"X\", \"Admin\"\n];\n    union isfuzzy=true\n        SalesforceSchema,\n        SalesforceServiceCloud_CL \n    | where not(disabled)\n    | extend TimeGenerated = todatetime(tostring(split(timestamp_s, '.', 0)[0]))\n    //  -- Pre filtering\n    | where \n        (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or (user_name_s has_any (username_has_any)) or (delegated_user_name_s has_any (username_has_any)))\n        and ((array_length(targetappname_has_any) == 0) or ('Salesforce Dot Com(SFDC)' in~ (targetappname_has_any)))\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(source_ip_s, srcipaddr_has_any_prefix)))\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        // eventtype_in filtering done later in the parser\n        // eventresultdetails_in filtering done later in the parser\n        // eventresult filtering done later in the parser\n        and event_type_s in~ (SalesforceEventType)\n    //  -- end pre-filtering\n    // mapping ASimMatchingUsername\n    | extend\n        temp_isMatchTargetUsername=user_name_s has_any(username_has_any)\n        ,\n        temp_isMatchActorUsername=delegated_user_name_s has_any(username_has_any)\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                    \"Both\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    temp_isMatchActorUsername,\n                                    \"ActorUsername\",\n                                    \"No match\"\n                                )\n    | extend LoginType_s = login_type_s, LoginSubType_s = login_sub_type_s\n    | lookup EventResultLookup on login_status_s\n    // filtering on 'eventresultdetails_in'\n    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n    | lookup EventTypeLookup on event_type_s\n    // Filtering on eventtype_in\n    | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))\n    | lookup LogonMethodLookup on LoginType_s\n    | lookup LogonProtocolLookup on LoginSubType_s\n    | lookup TempEventResultLookup on request_status_s\n    | lookup DvcOsLookup on platform_type_s\n    | lookup UserTypeLookup on user_type_s\n    | project-rename\n        EventProductVersion = api_version_s,\n        EventOriginalResultDetails = login_status_s,\n        TargetUserId = user_id_s,\n        SrcIpAddr = source_ip_s,\n        EventOriginalUid = request_id_s,\n        TlsCipher = cipher_suite_s,\n        TlsVersion = tls_protocol_s,\n        HttpUserAgent= browser_type_s,\n        TargetUserScopeId = organization_id_s,\n        TargetUrl = uri_s,\n        TargetOriginalUserType = user_type_s,\n        ActorUsername = delegated_user_name_s,\n        ActorUserId = delegated_user_id_s,\n        TargetUsername = user_name_s\n    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n    | extend\n        EventVendor = 'Salesforce',\n        EventProduct='Service Cloud',\n        EventCount = int(1),\n        EventSchema = 'Authentication',\n        EventSchemaVersion = '0.1.3',\n        TargetAppName = \"Salesforce Dot Com(SFDC)\",\n        TargetAppType = \"SaaS application\",\n        EventUid = _ItemId,\n        EventOriginalType=event_type_s,\n        SrcIpAddr = coalesce(SrcIpAddr, client_ip_s)\n    | extend\n        TargetSessionId = coalesce(session_key_s, login_key_s),\n        TargetUserScope = \"Salesforce Organization\",\n        TargetUserIdType = iff(isnotempty(TargetUserId), \"SaleforceId\", \"\"),\n        ActorUserIdType = iff(isnotempty(ActorUserId), \"SaleforceId\", \"\"),\n        TargetUsernameType = iff(isnotempty(TargetUsername), \"UPN\", \"\"),\n        ActorUsernameType = iff(isnotempty(ActorUsername), \"UPN\", \"\"),\n        User = coalesce(TargetUsername, TargetUserId),\n        Src = SrcIpAddr,\n        IpAddr = SrcIpAddr,\n        Dvc = EventProduct,\n        EventResult = coalesce(EventResult, TempEventResult),\n        Application = TargetAppName,\n        EventStartTime = TimeGenerated,\n        EventEndTime = TimeGenerated\n    // Filtering on 'eventresult'\n    | where (eventresult == \"*\" or (EventResult == eventresult))\n    | project-away\n        *_s,\n        *_t,\n        *_g,\n        TenantId,\n        SourceSystem,\n        Computer,\n        MG,\n        ManagementGroupName,\n        Message,\n        RawData,\n        TempEventResult,\n        _ItemId,\n        temp*\n};\nparser (\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
