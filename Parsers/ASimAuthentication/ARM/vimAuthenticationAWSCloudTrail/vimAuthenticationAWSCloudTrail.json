{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationAWSCloudTrail')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for AWS sign-in logs",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationAWSCloudTrail",
        "query": "// -- Refer to https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html for details\nlet usertype_lookup = datatable (TargetOriginalUserType: string, TargetUserType: string) [\n    // -- For console login, only IAMUser, Root and AssumedRole are relevant\n    'Root', 'Admin', \n    'IAMUser', 'Regular', \n    'AssumedRole', 'Service', \n    'Role', 'Service', \n    'FederatedUser', 'Regular',\n    'Directory', 'Other',\n    'AWSAccount', 'Guest',\n    'AWSService', 'Application',\n    'Unknown', 'Other',\n];\nlet eventresultdetails_lookup = datatable (\n    EventOriginalResultDetails: string,\n    EventOriginalDetails: string\n) [\n    'No username found in supplied account', 'No such user',\n    'Failed authentication', ''\n];\nlet ASIM_GetUsernameType = (username: string) { \n    case ( \n    username contains \"@\",\n    \"UPN\"\n    ,\n    username contains \"\\\\\",\n    \"Windows\"\n    ,\n    (username has \"CN=\" or username has \"OU=\" or username has \"DC=\"),\n    \"DN\"\n    ,\n    isempty(username),\n    \"\"\n    ,\n    \"Simple\"\n)\n};\nlet parser= (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    ) {\n    AWSCloudTrail\n    | where not(disabled)\n    //  -- Pre filtering\n    | where (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and EventName == 'ConsoleLogin'\n        and ((array_length(username_has_any) == 0) or (UserIdentityArn has_any (username_has_any)) or (UserIdentityUserName has_any (username_has_any)))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SourceIpAddress, srcipaddr_has_any_prefix)))\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source\n    // eventresult filtering done later in the parser\n    //  -- end pre-filtering\n    | project-rename\n        EventOriginalUid            = AwsEventId,\n        EventOriginalResultDetails  = ErrorMessage,\n        TargetOriginalUserType      = UserIdentityType,\n        EventProductVersion         = EventVersion,\n        SrcIpAddr                   = SourceIpAddress,\n        TargeCloudRegion            = AWSRegion,\n        TargetUserScopeId           = UserIdentityAccountId,\n        HttpUserAgent               = UserAgent,\n        EventUid                    = _ItemId\n    | extend\n        TargetUsername              = case (\n                                  UserIdentityUserName == \"HIDDEN_DUE_TO_SECURITY_REASONS\",\n                                  \"\",\n                                  TargetOriginalUserType == 'IAMUser',\n                                  UserIdentityUserName,\n                                  TargetOriginalUserType == 'Root',\n                                  'root',\n                                  TargetOriginalUserType == 'AssumedRole',\n                                  tostring(split(UserIdentityArn, '/')[-1]), // -- This is the AssuderRole session name, which typically represents a user.           \n                                  UserIdentityUserName\n                              )\n    // Filtering on 'username_has_any'\n    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n        (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | extend\n        EventVendor                 = 'AWS',\n        Dvc                         = 'AWS',\n        EventProduct                = 'CloudTrail',\n        EventCount                  = int(1),\n        EventSchemaVersion          = '0.1.3',\n        EventSchema                 = 'Authentication',\n        EventStartTime              = TimeGenerated,\n        EventEndTime                = TimeGenerated,\n        EventType                   = 'Logon',\n        EventSubType                = 'Interactive',\n        TargetUserIdType            = 'AWSId',\n        LogonProtocol               = 'HTTPS',\n        TargetUserId                = tostring(split(UserIdentityPrincipalid, ':')[0]),\n        LogonMethod                 = iff (AdditionalEventData has '\"MFAUsed\": \"Yes\"', 'MFA', ''),\n        SrcDeviceType               = iff (AdditionalEventData has '\"MobileVersion\":\"Yes\"', 'Mobile Device', 'Computer'),\n        EventResult                 = iff (ResponseElements has 'Success', 'Success', 'Failure')\n    // Filtering on 'eventresult'\n    | where (eventresult == \"*\" or (EventResult == eventresult))\n    | extend\n        TargetUsernameType          = ASIM_GetUsernameType (TargetUsername)\n    | parse AdditionalEventData with * '\"LoginTo\":\"' TargetUrl: string '\"' *\n    | lookup eventresultdetails_lookup on EventOriginalResultDetails\n    | lookup usertype_lookup on TargetOriginalUserType \n    | extend \n        LogonTarget=tostring(split(TargetUrl, '?')[0]),\n        EventSeverity = iff(EventResult == 'Failure', 'Low', 'Informational')\n    // -- Specific idetifier aliases\n    | extend \n        TargetUserAWSId = TargetUserId\n    // -- Aliases\n    | extend\n        User   = TargetUsername,\n        Dvc    = EventVendor,\n        Dst    = LogonTarget,\n        IpAddr = SrcIpAddr,\n        Src    = SrcIpAddr\n    | project-away\n        EventSource,\n        EventTypeName,\n        EventName,\n        ResponseElements,\n        AdditionalEventData,\n        Session*,\n        Category,\n        ErrorCode,\n        Aws*,\n        ManagementEvent,\n        OperationName,\n        ReadOnly,\n        RequestParameters,\n        Resources,\n        ServiceEventDetails,\n        SharedEventId,\n        SourceSystem,\n        UserIdentity*,\n        VpcEndpointId,\n        APIVersion,\n        RecipientAccountId,\n        TenantId,\n        EC2RoleDelivery,\n        temp_*\n};\nparser (\n    starttime=starttime,\n    endtime=endtime,\n    username_has_any=username_has_any,\n    targetappname_has_any=targetappname_has_any,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    srchostname_has_any=srchostname_has_any,\n    eventtype_in=eventtype_in,\n    eventresultdetails_in=eventresultdetails_in,\n    eventresult=eventresult,\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
