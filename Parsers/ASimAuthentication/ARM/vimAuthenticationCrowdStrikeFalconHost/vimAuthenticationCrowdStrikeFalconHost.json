{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationCrowdStrikeFalconHost')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication parser for CrowdStrike Falcon Endpoint Protection",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationCrowdStrikeFalconHost",
        "query": "let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)\n  [\n  \"0\", \"Informational\",\n  \"1\", \"Informational\",\n  \"2\", \"Low\",\n  \"3\", \"Medium\",\n  \"4\", \"High\",\n  \"5\", \"High\"\n];\nlet parser = ( \n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    ) {\n    CommonSecurityLog\n    | where not(disabled)\n    | where (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and (DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\")\n        and (DeviceEventCategory == \"AuthActivityAuditEvent\" and DeviceEventClassID in (\"userAuthenticate\", \"twoFactorAuthenticate\"))\n        and ((array_length(username_has_any) == 0) or DestinationUserName has_any (username_has_any))\n        and (array_length(targetappname_has_any) == 0 or ProcessName has_any (targetappname_has_any))\n        and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        // eventtype_in filtering done later in the parser\n        and array_length(eventresultdetails_in) == 0 // EventResultDetails not available in source\n    // eventresult filtering done later in the parser\n    | extend\n        EventResult = iff(EventOutcome == \"true\", \"Success\", \"Failure\"),\n        EventType = \"Logon\"\n    | where (eventresult == '*' or eventresult =~ EventResult)\n        and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))\n    | lookup EventSeverityLookup on LogSeverity\n    | extend\n        EventStartTime = todatetime(DeviceCustomDate1),\n        EventCount = int(1),\n        EventSchema = \"Authentication\",\n        EventSchemaVersion = \"0.1.3\",\n        EventProduct = \"FalconHost\",\n        EventVendor = \"CrowdStrike\"\n    | project-rename \n        TargetIpAddr = DestinationTranslatedAddress,\n        EventUid = _ItemId,\n        EventOriginalSeverity = LogSeverity,\n        EventOriginalSubType = DeviceEventClassID,\n        EventOriginalType = DeviceEventCategory,\n        EventProductVersion = DeviceVersion,\n        EventOriginalResultDetails = EventOutcome,\n        TargetUsername = DestinationUserName,\n        TargetAppName = ProcessName\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n        (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | extend\n        EventEndTime = EventStartTime,\n        DvcIpAddr = TargetIpAddr,\n        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),\n        TargetUserType = _ASIM_GetUserType(TargetUsername, \"\"),\n        TargetAppType = iff(isnotempty(TargetAppName), \"Service\", \"\"),\n        LogonMethod = iff(EventOriginalSubType =~ \"userAuthenticate\", \"Username and Password\", \"Two Factor Authentication\")\n    | extend\n        User = TargetUsername,\n        Dst = TargetIpAddr,\n        Dvc = coalesce(DvcIpAddr, EventProduct),\n        Application = TargetAppName\n    | project-away \n        Source*,\n        Destination*,\n        Device*,\n        AdditionalExtensions,\n        CommunicationDirection,\n        Computer,\n        EndTime,\n        FieldDevice*,\n        Flex*,\n        File*,\n        Old*,\n        MaliciousIP*,\n        OriginalLogSeverity,\n        Process*,\n        Protocol,\n        Activity,\n        ReceivedBytes,\n        SentBytes,\n        Remote*,\n        Request*,\n        SimplifiedDeviceAction,\n        StartTime,\n        TenantId,\n        Threat*,\n        IndicatorThreatType,\n        ExternalID,\n        ReportReferenceLink,\n        ReceiptTime,\n        Reason,\n        ApplicationProtocol,\n        _ResourceId,\n        ExtID,\n        Message,\n        temp_*\n};\nparser(\n    starttime=datetime(null),\n    endtime=datetime(null),\n    username_has_any=dynamic([]),\n    targetappname_has_any=dynamic([]),\n    srcipaddr_has_any_prefix=dynamic([]),\n    srchostname_has_any=dynamic([]),\n    eventtype_in=dynamic([]),\n    eventresultdetails_in=dynamic([]),\n    eventresult=dynamic([]),\n    disabled=false\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
