{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationMD4IoT')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Microsoft Defender for IoT endpoint logs",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationMD4IoT",
        "query": "let Authentication_MD4IoT=(\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  ) {\n  SecurityIoTRawEvent\n  | where not(disabled)\n  | where RawEventName == \"Login\"\n  // ************************************************************************* \n  //       <Prefilterring>\n  // *************************************************************************\n  | where \n      (isnull(starttime) or TimeGenerated >= starttime) \n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and ((array_length(username_has_any) == 0) or EventDetails has_any (username_has_any))\n      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n      and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(EventDetails, srcipaddr_has_any_prefix)))\n      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n      // Filtering for eventtype_in done later in the parser\n      and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source\n  // Filtering for eventresult done later in the parser\n  // ************************************************************************* \n  //       </Prefilterring>\n  // ************************************************************************* \n  | extend\n      EventDetails = todynamic(EventDetails)\n  //\n  | extend\n      EventOriginalUid = tostring(EventDetails.OriginalEventId), \n      EventProduct = 'Microsoft Defender for IoT',\n      EventCount=int(1),\n      EventVendor = 'Microsoft', \n      EventSchemaVersion = '0.1.0', \n      EventStartTime = todatetime(EventDetails.TimestampUTC), \n      EventEndTime = todatetime(TimeGenerated), \n      EventType = iff (EventDetails.Operation == 'Logout', 'Logoff', 'Logon'),  \n      EventResult = iff (EventDetails.Operation == 'LoginFailed', 'Failure', 'Success')  \n  // Filtering on 'eventtype_in' and 'eventresult'\n  | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))\n      and (eventresult == \"*\" or (EventResult == eventresult))\n  | extend\n      ActingProcessId = tostring(EventDetails.ProcessId),  \n      ActingProcessName = tostring(EventDetails.Executable),  // -- Linux input device or service used to authenticate, for example pts/1, tty1, pts/0, ssh:notty \n      DvcOs = iif (EventDetails.MessageSource == \"Linux\", \"Linux\", \"Windows\"),  // -- Intermediate fix\n      TargetUsernameType = \"Simple\",\n      TargetUsername = tostring(EventDetails.UserName)\n  | extend SrcIpAddr = tostring(EventDetails.RemoteAddress)\n  // Post-filtering on username_has_any and srcipaddr_has_any_prefix\n  | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n      and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))\n  // mapping ASimMatchingUsername\n  | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n  // ActorUsername not coming from source. Hence, not mapped.\n  | extend ASimMatchingUsername = case\n      (\n                                  array_length(username_has_any) == 0,\n                                  \"-\",\n                                  temp_isMatchTargetUsername,\n                                  \"TargetUsername\",\n                                  \"No match\"\n                              )\n  | project-rename\n      DvcHostname = DeviceId, \n      EventProductVersion = AgentVersion,  // -- Not available in Windows\n      _ResourceId = AssociatedResourceId, \n      _SubscriptionId = AzureSubscriptionId \n  //\n  // -- aliases\n  | extend \n      User = TargetUsername, \n      Process = ActingProcessName, \n      Dvc = DvcHostname,\n      SrcDvcIpAddr = SrcIpAddr,\n      IpAddr = SrcIpAddr\n};\n  Authentication_MD4IoT(\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
