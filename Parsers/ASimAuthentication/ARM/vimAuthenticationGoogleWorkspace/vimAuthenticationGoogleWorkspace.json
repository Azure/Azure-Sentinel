{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationGoogleWorkspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Google Workspace",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationGoogleWorkspace",
        "query": "let parser = (\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  )\n{\n    let GoogleWorkspaceSchema = datatable\n(\n    event_name_s: string,\n    event_type_s: string,\n    id_uniqueQualifier_s: string,\n    actor_email_s: string,\n    actor_profileId_s: string,\n    IPAddress: string,\n    login_challenge_method_s: string,\n    id_applicationName_s: string,\n    affected_email_address_s: string,\n    is_suspicious_b: bool,\n    is_second_factor_b: bool,\n    login_type_s: string,\n    sensitive_action_name_s: string,\n    login_challenge_status_s: string,\n    TimeGenerated: datetime,\n    _ItemId: string,\n    _ResourceId: string,\n    Computer: string,\n    MG: string,\n    ManagementGroupName: string,\n    RawData: string,\n    SourceSystem: string,\n    TenantId: string\n)[];\n    let EventFieldsLookup = datatable\n(\n    EventOriginalSubType: string,\n    EventType: string,\n    EventResult: string,\n    DvcAction: string\n)\n[\n    \"login_success\", \"Logon\", \"Success\", \"Allowed\",\n    \"login_failure\", \"Logon\", \"Failure\", \"Blocked\",\n    \"login_challenge\", \"Logon\", \"\", \"\",\n    \"login_verification\", \"Logon\", \"\", \"\",\n    \"risky_sensitive_action_blocked\", \"Logon\", \"Failure\", \"Blocked\",\n    \"riskay_sensitive_action_allowed\", \"Logon\", \"Success\", \"Allowed\",\n    \"logout\", \"Logoff\", \"Success\", \"Allowed\",\n    \"suspicious_login\", \"Logon\", \"Failure\", \"Blocked\",\n    \"suspicious_login_less_secure_app\", \"Logon\", \"Failure\", \"Blocked\",\n    \"suspicious_programmatic_login\", \"Logon\", \"Failure\", \"Blocked\",\n    \"user_signed_out_due_to_suspicious_session_cookie\", \"Logoff\", \"Success\", \"Allowed\"\n];\n    let ThreatEventTypes = dynamic(['suspicious_login', 'suspicious_login_less_secure_app', 'suspicious_programmatic_login', 'user_signed_out_due_to_suspicious_session_cookie']);\n    let SupportedEventNames = EventFieldsLookup\n        | project EventOriginalSubType;\n    union isfuzzy=true  GoogleWorkspaceSchema, GWorkspace_ReportsAPI_login_CL\n    | where not(disabled)\n    //  -- Pre filtering\n    | where \n        (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or actor_email_s has_any (username_has_any))\n        and ((array_length(targetappname_has_any) == 0) or 'Google Workspace - login' in~ (targetappname_has_any))\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        and ((array_length(eventtype_in) == 0) or (\"Logon\" in~ (eventtype_in)) or (\"Logoff\" in~ (eventtype_in)))\n        // eventresultdetails_in filtering done later in the parser\n        // eventresult filtering done later in the parser\n        and event_name_s in (SupportedEventNames)\n    | lookup EventFieldsLookup on $left.event_name_s == $right.EventOriginalSubType\n    // Filtering on 'eventresult' and eventtype_in\n    | where (eventresult == \"*\" or (EventResult == eventresult))\n        and ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))\n    | project-rename\n        TargetUsername = actor_email_s,\n        TargetUserId = actor_profileId_s,\n        SrcIpAddr = IPAddress,\n        LogonMethod = login_challenge_method_s,\n        EventOriginalType = event_type_s,\n        EventOriginalUid = id_uniqueQualifier_s\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | extend\n        TargetUsername = iif(event_name_s in (ThreatEventTypes), affected_email_address_s, TargetUsername),\n        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),\n        TargetUserIdType = iif(isnotempty(TargetUserId), \"GWorkspaceProfileID\", \"\"),\n        EventSeverity = iif(event_name_s in (ThreatEventTypes), \"High\", \"Informational\")\n    | extend \n        AdditionalFields = bag_pack\n                  (\n                      \"Is_Suspicious\",\n                      is_suspicious_b,\n                      \"Is_Second_Factor_b\",\n                      is_second_factor_b,\n                      \"Logon_Type\",\n                      login_type_s,\n                      \"Sensitive_Action_Name\",\n                      sensitive_action_name_s\n                  ),\n        EventResult = case\n              (\n                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == \"passed\",\n                  \"Success\",\n                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == \"incorrect_answer_entered\",\n                  \"Failure\",\n                  EventResult\n              ),\n        EventResultDetails = iif(event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == \"incorrect_answer_entered\", \"MFA not satisfied\", \"\"),\n        RuleName = case\n          (\n              event_name_s == 'suspicious_login',\n              \"Google has detected a suspicious login for TargetUSerName\",\n              event_name_s == 'suspicious_login_less_secure_app',\n              \"Google has detected a suspicious login for TargetUSerName from a less secure app\",\n              event_name_s == 'suspicious_programmatic_login',\n              \"Google has detected a suspicious programmatic login for TargetUserName\",\n              event_name_s == 'user_signed_out_due_to_suspicious_session_cookie',\n              \"Suspicious session cookie detected for user TargetUserName\",\n              \"\"\n          ),\n        ThreatField = iif(event_name_s in (ThreatEventTypes), \"TargetUserName\", \"\"),\n        ThreatFirstReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null)),\n        ThreatLastReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null))\n    // filtering on 'eventresultdetails_in'\n    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n    | extend\n        EventOriginalSubType = event_name_s,\n        TargetAppName = \"Google Workspace - login\",\n        Dst = \"Google Workspace\",\n        Application = \"Google Workspace\",\n        TargetAppType = \"SaaS application\",\n        IpAddr = SrcIpAddr,\n        User = TargetUsername,\n        EventCount = int(1),\n        EventStartTime = TimeGenerated,\n        EventEndTime = TimeGenerated,\n        EventProduct = \"Workspace\",\n        EventVendor = \"Google\",\n        Dvc=\"Workspace\",\n        EventSchema = 'Authentication',\n        EventSchemaVersion = '0.1.3',\n        EventUid = _ItemId\n    | project-away \n        *_s,\n        *_b,\n        _ResourceId,\n        Computer,\n        MG,\n        ManagementGroupName,\n        RawData,\n        SourceSystem,\n        TenantId,\n        temp*\n};\nparser\n(\n    starttime=starttime,\n    endtime=endtime,\n    username_has_any=username_has_any,\n    targetappname_has_any=targetappname_has_any,\n    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n    srchostname_has_any=srchostname_has_any,\n    eventtype_in=eventtype_in,\n    eventresultdetails_in=eventresultdetails_in,\n    eventresult=eventresult,\n    disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
