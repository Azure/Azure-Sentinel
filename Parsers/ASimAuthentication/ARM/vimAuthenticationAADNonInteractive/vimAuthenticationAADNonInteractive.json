{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationAADNonInteractiveUserSignInLogs')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Microsoft Entra ID non-interactive sign-in logs",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationAADNonInteractiveUserSignInLogs",
        "query": "let FailedReason=datatable(ResultType: string, EventResultDetails: string)[\n  '0', 'Success',\n  '53003', 'Logon violates policy',\n  '50034', 'No such user or password',\n  '50059', 'No such user or password',\n  '50053', 'User locked',\n  '50055', 'Password expired',\n  '50056', 'Incorrect password',\n  '50057', 'User disabled',\n  '50058', 'Logon violates policy',\n  '50011', 'Logon violates policy', \n  '50064', 'No such user or password',\n  '50076', 'Logon violates policy',\n  '50079', 'Logon violates policy',\n  '50105', 'Logon violates policy',\n  '50126', 'No such user or password',\n  '50132', 'Password expired',\n  '50133', 'Password expired',\n  '50144', 'Password expired',\n  '50173', 'Password expired',\n  '80012', 'Logon violates policy',\n  '51004', 'No such user or password',\n  '50072', 'Logon violates policy',\n  '50005', 'Logon violates policy',\n  '50020', 'Logon violates policy',\n  '50074', 'Logon violates policy', \n  '70008', 'Password expired',\n  '700016', 'No such user or password', \n  '500011', 'No such user or password' \n];\nlet AADNIAuthentication=(starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false) {\n    AADNonInteractiveUserSignInLogs\n    | where not(disabled)\n    // ************************************************************************* \n    //       <Prefilterring>\n    // *************************************************************************\n    | where \n        (isnull(starttime) or TimeGenerated >= starttime) \n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or UserPrincipalName has_any (username_has_any))\n        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))\n        and (array_length(srchostname_has_any) == 0 or tostring(todynamic(DeviceDetail).displayName) has_any (srchostname_has_any))\n        and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n    // eventresultdetails_in filtering done later in the parser\n    // eventresult filtering done later in the parser\n    // ************************************************************************* \n    //       </Prefilterring>\n    // ************************************************************************* \n    | extend\n        EventVendor = 'Microsoft'\n        ,\n        EventProduct = 'Entra ID'\n        ,\n        EventSchemaVersion='0.1.0'\n        ,\n        EventCount=int(1)\n        ,\n        EventResult = iff (ResultType == 0, 'Success', 'Failure')\n        ,\n        EventOriginalResultDetails = coalesce(ResultDescription, ResultType)\n        ,\n        EventStartTime = TimeGenerated\n        ,\n        EventEndTime= TimeGenerated\n        ,\n        EventType= 'Logon'\n        ,\n        SrcDvcId=tostring(todynamic(DeviceDetail).deviceId)\n        ,\n        SrcHostname =tostring(todynamic(DeviceDetail).displayName)\n        ,\n        SrcDvcOs=tostring(todynamic(DeviceDetail).operatingSystem)\n        ,\n        Location = todynamic(LocationDetails)\n        ,\n        TargetAppId = ResourceIdentity \n        ,\n        EventSubType = 'NonInteractive'\n        ,\n        TargetUsernameType='UPN'\n        ,\n        TargetUserIdType='EntraID'\n        ,\n        TargetAppName=ResourceDisplayName\n    // Filtering on 'eventresult'\n    | where (eventresult == \"*\" or (EventResult == eventresult))\n    | extend\n        SrcGeoCity=tostring(Location.city)\n        ,\n        SrcGeoCountry=tostring(Location.countryOrRegion)\n        ,\n        SrcGeoLatitude=toreal(Location.geoCoordinates.latitude)\n        ,\n        SrcGeoLongitude=toreal(Location.geoCoordinates.longitude)\n    | project-rename\n        EventOriginalUid =Id\n        ,\n        LogonMethod = AuthenticationRequirement\n        ,\n        HttpUserAgent=UserAgent\n        ,\n        TargetSessionId=CorrelationId\n        ,\n        TargetUserId = UserId\n        ,\n        TargetUsername=UserPrincipalName\n        ,\n        SrcIpAddr = IPAddress\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case(\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | lookup FailedReason on ResultType\n    // filtering on 'eventresultdetails_in'\n    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n    | extend\n        User=TargetUsername\n        ,\n        LogonTarget=ResourceIdentity\n        ,\n        Dvc=EventVendor\n        // -- Entity identifier explicit aliases\n        ,\n        TargetUserUpn = TargetUsername\n        ,\n        TargetUserAadId = TargetUserId\n};\nAADNIAuthentication(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
