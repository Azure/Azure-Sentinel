{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationOktaSSO')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM parser for Okta",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationOktaSSO",
        "query": "let parser=(disabled: bool=false) {\n  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);\n  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);\n  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);\n  let emptyOctV1Table = datatable(TimeGenerated:datetime)[];\n    // https://developer.okta.com/docs/reference/api/event-types/#catalog\n    let OktaV1 = union isfuzzy=true emptyOctV1Table, Okta_CL \n        | where not(disabled)\n        | extend\n            outcome_result_s=column_ifexists('outcome_result_s', \"\")\n            ,\n            eventType_s=column_ifexists('eventType_s', \"\")\n            ,\n            legacyEventType_s=column_ifexists('legacyEventType_s', \"\")\n            ,\n            client_geographicalContext_geolocation_lat_d=column_ifexists('client_geographicalContext_geolocation_lat_d', \"\")\n            ,\n            client_geographicalContext_geolocation_lon_d=column_ifexists('client_geographicalContext_geolocation_lon_d', \"\")\n        | where eventType_s in (OktaSigninEvents)\n        | extend \n            EventProduct='Okta'\n            ,\n            EventVendor='Okta'\n            ,\n            EventSchema = 'Authentication'\n            ,\n            EventCount=int(1)\n            ,\n            EventSchemaVersion='0.1.0'\n            ,\n            EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')\n            ,\n            EventStartTime=TimeGenerated\n            ,\n            EventEndTime=TimeGenerated\n            ,\n            EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')\n            ,\n            EventSubType=legacyEventType_s\n            ,\n            EventMessage=column_ifexists('displayMessage_s', \"\")\n            ,\n            EventOriginalResultDetails=column_ifexists('outcome_reason_s', \"\")\n            ,\n            EventOriginalUid = column_ifexists('uuid_g', \"\")\n            ,\n            TargetUserIdType='OktaId'\n            ,\n            TargetUsernameType='UPN'\n            ,\n            TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', \"\")\n            ,\n            TargetUserId=column_ifexists('actor_id_s', \"\")\n            ,\n            TargetUsername=column_ifexists('actor_alternateId_s', \"\")\n            ,\n            TargetUserType=column_ifexists('actor_type_s', \"\")\n            ,\n            SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)\n            ,\n            SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)\n            ,\n            SrcDvcOs=column_ifexists('client_userAgent_os_s', \"\")\n            ,\n            SrcIsp=column_ifexists('securityContext_isp_s', \"\")\n            ,\n            SrcGeoCity=column_ifexists('client_geographicalContext_city_s', \"\")\n            ,\n            SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', \"\")\n            ,\n            SrcIpAddr = column_ifexists('client_ipAddress_s', \"\")\n            ,\n            ActingAppName=column_ifexists('client_userAgent_browser_s', \"\")\n            ,\n            ActingAppType=\"Browser\"\n            ,\n            LogonMethod=column_ifexists('authenticationContext_credentialType_s', \"\")\n            ,\n            HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', \"\")\n        // ** Aliases\n        | extend \n            User=TargetUsername\n            ,\n            Dvc=EventVendor\n            ,\n            IpAddr=SrcIpAddr\n        | project-away *_s, *_d, *_b, *_g, *_t;\n    OktaV1\n};\nparser(disabled = disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
