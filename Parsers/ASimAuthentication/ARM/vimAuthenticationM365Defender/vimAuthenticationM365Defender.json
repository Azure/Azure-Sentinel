{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationM365Defender')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for M365 Defender Device Logon Events",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationM365Defender",
        "query": "let EventResultDetailsLookup=datatable\n(\n    EventOriginalResultDetails: string,\n    EventResultDetails: string\n)\n[\n    'InvalidUserNameOrPassword', 'No such user or password'\n];\nlet EventSubTypeLookup = datatable (EventOriginalType: string, EventSubType: string)\n[ \n    'Interactive', 'Interactive',\n    'Remote interactive (RDP) logons', 'RemoteInteractive',\n    'Network', 'Remote',\n    'Batch', 'Service',\n    'Service', 'Service',\n    'Unknown', '',\n    'RemoteInteractive', 'RemoteInteractive',\n    'CachedInteractive', 'Interactive'\n];\nlet EventResultLookup = datatable (ActionType: string, EventResult: string)\n[ \n    'LogonSuccess', 'Success',\n    'LogonFailed', 'Failure',\n    'LogonAttempted', 'NA'\n];\nlet parser = (\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    )\n{\n    let UnixDeviceLogonEvents = (disabled: bool=false)\n{\n    DeviceLogonEvents  \n        | where not(disabled)\n        // -- prefilter\n        | where\n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime) \n            and ((array_length(username_has_any) == 0) or (InitiatingProcessAccountName has_any (username_has_any)) or AccountName has_any (username_has_any))\n            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n            and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RemoteIP, srcipaddr_has_any_prefix))\n            and ((array_length(srchostname_has_any) == 0) or (RemoteDeviceName has_any (srchostname_has_any)))\n            and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n        // eventresultdetails_in filtering done later in the parser\n        // eventresult filtering done later in the parser\n        // -- end prefilter\n        | where InitiatingProcessFolderPath startswith \"/\"\n        | extend \n            TargetDvcOs        = \"Linux\"\n            ,\n            ActorUsernameType  = \"Simple\"\n            ,\n            TargetUsernameType = \"Simple\"\n        | project-rename \n            ActorUsername      = InitiatingProcessAccountName\n            ,\n            ActingProcessName  = InitiatingProcessFolderPath\n            ,\n            TargetUsername     = AccountName\n        | project-away \n            InitiatingProcessAccountSid,\n            AccountDomain,\n            InitiatingProcessAccountDomain,\n            InitiatingProcessFileName,\n            AccountSid\n};\n    let WindowsDeviceLogonEvents = (disabled: bool=false)\n{\n    DeviceLogonEvents  \n        | where not(disabled)\n        // -- prefilter\n        | where\n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime) \n            and ((array_length(username_has_any) == 0) or (AccountName has_any (username_has_any)) or (AccountDomain has_any (username_has_any)) or (strcat(AccountDomain, '\\\\', AccountName) has_any (username_has_any)) or (InitiatingProcessAccountName has_any (username_has_any)) or (InitiatingProcessAccountDomain has_any (username_has_any)) or (strcat(InitiatingProcessAccountDomain, '\\\\', InitiatingProcessAccountName) has_any (username_has_any)))\n            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n            and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RemoteIP, srcipaddr_has_any_prefix))\n            and ((array_length(srchostname_has_any) == 0) or (RemoteDeviceName has_any (srchostname_has_any)))\n            and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n        // eventresultdetails_in filtering done later in the parser\n        // eventresult filtering done later in the parser\n        // -- end prefilter\n        | where InitiatingProcessFolderPath !startswith \"/\"\n        | extend \n            TargetDvcOs = \"Windows\"\n            ,\n            TargetUserIdType            = 'SID'\n            ,\n            ActorUserIdType             = 'SID'\n            ,\n            ActorUsername               = case\n                              (\n                                  isempty(InitiatingProcessAccountName),\n                                  \"\",\n                                  isempty(InitiatingProcessAccountDomain),\n                                  InitiatingProcessAccountName,\n                                  strcat(InitiatingProcessAccountDomain, '\\\\', InitiatingProcessAccountName)\n                              )\n            ,\n            TargetUsername              = iff\n                              (\n                                  isempty(AccountDomain),\n                                  AccountName,\n                                  strcat(AccountDomain, '\\\\', AccountName)\n                              )           \n            ,\n            TargetUsernameType          = iff (AccountDomain == '', 'Simple', 'Windows')\n            ,\n            ActorUsernameType           = iff (InitiatingProcessAccountDomain == '', 'Simple', 'Windows')\n            ,\n            ActingProcessName           = strcat (InitiatingProcessFolderPath, '\\\\', InitiatingProcessFileName)\n        | project-rename \n            ActorUserId        = InitiatingProcessAccountSid\n            ,\n            TargetUserId       = AccountSid\n        // -- Specific identifiers aliases\n        | extend \n            TargetUserSid         = TargetUserId\n            ,\n            ActorUserSid          = ActorUserId\n            ,\n            TargetWindowsUsername = TargetUsername\n            ,\n            ActorWindowsUsername  = ActorUsername\n            ,\n            ActorUserType         = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)\n        | extend \n            TargetUserType = iff\n                (\n                    IsLocalAdmin, \n                    'Admin',\n                    _ASIM_GetWindowsUserType (TargetWindowsUsername, TargetUserSid)\n                )\n        | project-away\n            InitiatingProcessAccountName,\n            InitiatingProcessAccountDomain,\n            AccountDomain,\n            AccountName,\n            InitiatingProcessFolderPath,\n            InitiatingProcessFileName\n};\n    union \n        WindowsDeviceLogonEvents (disabled=disabled),\n        UnixDeviceLogonEvents (disabled=disabled)\n    | project-away SourceSystem, TenantId, Timestamp, MachineGroup\n    // mapping ASimMatchingUsername\n    | extend\n        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n        ,\n        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                    \"Both\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    temp_isMatchActorUsername,\n                                    \"ActorUsername\",\n                                    \"No match\"\n                                )\n    | project-rename \n        EventOriginalResultDetails  = FailureReason \n        ,\n        EventOriginalType           = LogonType\n        ,\n        EventUid                    = _ItemId\n        ,\n        LogonProtocol               = Protocol\n        ,\n        TargetDvcId                 = DeviceId\n        ,\n        SrcHostname                 = RemoteDeviceName\n        ,\n        ActingProcessCommandLine    = InitiatingProcessCommandLine\n        ,\n        ActingProcessCreationTime   = InitiatingProcessCreationTime\n        ,\n        ActingProcessMD5            = InitiatingProcessMD5\n        ,\n        ActingProcessSHA1           = InitiatingProcessSHA1 \n        ,\n        ActingProcessSHA256         = InitiatingProcessSHA256\n        ,\n        ActingProcessIntegrityLevel = InitiatingProcessIntegrityLevel\n        ,\n        ActingProcessTokenElevation = InitiatingProcessTokenElevation\n        ,\n        ParentProcessName           = InitiatingProcessParentFileName\n        ,\n        ParentProcessCreationTime   = InitiatingProcessParentCreationTime\n        //??, ActingProcessName           = InitiatingProcessFolderPath \n        ,\n        ActorUserUpn                = InitiatingProcessAccountUpn\n        ,\n        ActorUserAadId              = InitiatingProcessAccountObjectId\n        ,\n        SrcPortNumber               = RemotePort\n    | extend \n        EventCount                  = int(1)\n        ,\n        EventStartTime              = TimeGenerated\n        ,\n        EventEndTime                = TimeGenerated\n        ,\n        EventSchemaVersion          = '0.1.3'\n        ,\n        EventType                   = 'Logon'\n        ,\n        EventVendor                 = 'Microsoft'\n        ,\n        EventProduct                = 'M365 Defender for EndPoint'\n        ,\n        EventSchema                 = 'Authentication'\n        ,\n        TargetDvcIdType             = 'MDEid'\n        ,\n        ActingProcessId             = tostring (InitiatingProcessId)\n        ,\n        ParentProcessId             = tostring (InitiatingProcessParentId)\n        ,\n        EventOriginalUid            = tostring (ReportId)\n        ,\n        TargetSessionId             = tostring (LogonId)\n        ,\n        SrcIpAddr                   = iff (RemoteIP == '-', '', RemoteIP)\n    | extend\n        Hash = coalesce\n      (\n          ActingProcessSHA256\n        ,\n          ActingProcessSHA1\n        ,\n          ActingProcessMD5\n      )\n    | extend\n        HashType = tostring(dynamic([\"SHA256\", \"SHA1\", \"MD5\"])[array_index_of(pack_array(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5), Hash)])     \n    | invoke _ASIM_ResolveFQDN('DeviceName')\n    | project-rename \n        TargetFQDN         = FQDN\n        ,\n        TargetHostname     = ExtractedHostname\n        ,\n        TargetDomainType   = DomainType\n        ,\n        TargetDomain       = Domain  \n    | project-away DeviceName\n    | lookup EventResultDetailsLookup on EventOriginalResultDetails\n    // filtering on 'eventresultdetails_in', 'TargetUsername' and 'ActorUsername'\n    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))\n        and ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n    | lookup EventSubTypeLookup on EventOriginalType\n    | lookup EventResultLookup on ActionType\n    // Filtering on 'eventresult'\n    | where (eventresult == \"*\" or (EventResult == eventresult))\n    | extend\n        EventSeverity = iff (EventResult == \"Success\", \"Informational\", \"Low\")\n    // -- Specific identifiers aliases\n    | extend\n        TargetDvcMDEid        = TargetDvcId\n        ,\n        DvcMDEid              = TargetDvcId\n    // --  Aliases\n    | extend \n        User          = TargetUsername \n        ,\n        Prcess        = ActingProcessName\n        ,\n        IpAddr        = SrcIpAddr\n        ,\n        ActingAppName = ActingProcessName\n        ,\n        ActingAppType = \"Process\"\n        ,\n        Dvc           = coalesce (TargetFQDN, TargetHostname)\n        ,\n        Src           = coalesce (SrcIpAddr, SrcHostname)\n        // -- Alias Dvc to Target\n        ,\n        DvcFQDN       = TargetFQDN\n        ,\n        DvcHostname   = TargetHostname\n        ,\n        DvcDomain     = TargetDomain\n        ,\n        DvcDomainType = TargetDomainType\n        ,\n        DvcId         = TargetDvcId\n        ,\n        DvcIdType     = TargetDvcIdType\n        ,\n        DvcOs         = TargetDvcOs\n    | extend \n        LogonTarget   = Dvc\n        ,\n        Dst = Dvc\n    | project-away\n        ReportId,\n        LogonId,\n        InitiatingProcessId,\n        InitiatingProcessParentId,\n        ActionType,\n        InitiatingProcessFileSize,\n        InitiatingProcessVersionInfoCompanyName,\n        InitiatingProcessVersionInfoFileDescription,\n        InitiatingProcessVersionInfoInternalFileName,\n        InitiatingProcessVersionInfoOriginalFileName,\n        InitiatingProcessVersionInfoProductName,\n        InitiatingProcessVersionInfoProductVersion,\n        AppGuardContainerId,\n        RemoteIPType,\n        IsLocalAdmin,\n        RemoteIP,\n        temp*\n};\nparser (\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n) ",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
