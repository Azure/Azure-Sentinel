{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationSentinelOne')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication parser for SentinelOne",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationSentinelOne",
        "query": "let EventResultDetailsLookup = datatable (comments_s: string, EventResultDetails: string)\n[\n\"invalid 2FA code\", \"Incorrect password\",\n\"IP/User mismatch\", \"No such user or password\",\n\"invalid password\", \"Incorrect password\",\n\"user temporarily locked 2FA attempt\", \"User locked\",\n\"no active site\", \"Other\"\n];\nlet EventFieldsLookup = datatable (\n    activityType_d: real,\n    EventType: string,\n    EventResult: string,\n    EventOriginalResultDetails: string\n)\n    [\n    27, \"Logon\", \"Success\", \"User Logged In\",\n    33, \"Logoff\", \"Success\", \"User Logged Out\",\n    133, \"Logon\", \"Failure\", \"Existing User Login Failure\",\n    134, \"Logon\", \"Failure\", \"Unknown User Login\",\n    139, \"Logon\", \"Failure\", \"User Failed to Start an Unrestricted Session\",\n    3629, \"Logon\", \"Success\", \"Login Using Saved 2FA Recovery Code\"\n];\nlet EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)\n    [\n    \"WINLOGONATTEMPT\", \"Logon\",\n    \"WINLOGOFFATTEMPT\", \"Logoff\"\n];\nlet EventSubTypeLookup = datatable (alertInfo_loginType_s: string, EventSubType: string)\n    [\n    \"BATCH\", \"System\",\n    \"CACHED_INTERACTIVE\", \"Interactive\",\n    \"CACHED_REMOTE_INTERACTIVE\", \"RemoteInteractive\",\n    \"CACHED_UNLOCK\", \"System\",\n    \"INTERACTIVE\", \"Interactive\",\n    \"NETWORK_CLEAR_TEXT\", \"Remote\",\n    \"NETWORK_CREDENTIALS\", \"Remote\",\n    \"NETWORK\", \"Remote\",\n    \"REMOTE_INTERACTIVE\", \"RemoteInteractive\",\n    \"SERVICE\", \"Service\",\n    \"SYSTEM\", \"System\",\n    \"UNLOCK\", \"System\"\n];\nlet DeviceTypeLookup = datatable (\n    agentDetectionInfo_machineType_s: string,\n    SrcDeviceType: string\n)\n    [\n    \"desktop\", \"Computer\",\n    \"server\", \"Computer\",\n    \"laptop\", \"Computer\",\n    \"kubernetes node\", \"Other\",\n    \"unknown\", \"Other\"\n];\nlet ThreatConfidenceLookup_undefined = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_undefined: int\n)\n    [\n    \"FALSE_POSITIVE\", 5,\n    \"Undefined\", 15,\n    \"SUSPICIOUS\", 25,\n    \"TRUE_POSITIVE\", 33\n];\nlet ThreatConfidenceLookup_suspicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_suspicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 40,\n    \"Undefined\", 50,\n    \"SUSPICIOUS\", 60,\n    \"TRUE_POSITIVE\", 67 \n];\nlet ThreatConfidenceLookup_malicious = datatable(\n    alertInfo_analystVerdict_s: string,\n    ThreatConfidence_malicious: int\n)\n    [\n    \"FALSE_POSITIVE\", 75,\n    \"Undefined\", 80,\n    \"SUSPICIOUS\", 90,\n    \"TRUE_POSITIVE\", 100\n];\nlet TargetUserTypesList = dynamic([\"Regular\", \"Machine\", \"Admin\", \"System\", \"Application\", \"Service Principal\", \"Service\", \"Anonymous\"]);\nlet parser=(\nstarttime: datetime=datetime(null), \nendtime: datetime=datetime(null), \nusername_has_any: dynamic = dynamic([]),\ntargetappname_has_any: dynamic = dynamic([]),\nsrcipaddr_has_any_prefix: dynamic = dynamic([]),\nsrchostname_has_any: dynamic = dynamic([]),\neventtype_in: dynamic = dynamic([]),\neventresultdetails_in: dynamic = dynamic([]),\neventresult: string = '*',\ndisabled: bool=false\n) {\nlet alldata = SentinelOne_CL\n    | where not(disabled)\n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or DataFields_s has_any (username_has_any))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(DataFields_s, srcipaddr_has_any_prefix)))\n        and ((array_length(srchostname_has_any) == 0) or (alertInfo_loginAccountDomain_s has_any (srchostname_has_any)))\n// Filtering for eventtype_in done later in the parser\n// Filtering for eventresultdetails_in done later in the parser\n// Filtering for eventresult done later in the parser\n;\nlet activitydata = alldata\n    | where event_name_s == \"Activities.\"\n        and activityType_d in (27, 33, 133, 134, 139, 3629)\n    | parse-kv DataFields_s as (ipAddress: string, username: string, userScope: string, accountName: string, fullScopeDetails: string, fullScopeDetailsPath: string, role: string, scopeLevel: string, source: string, sourceType: string) with (pair_delimiter=\",\", kv_delimiter=\":\", quote='\"')\n    | lookup EventFieldsLookup on activityType_d\n    | lookup EventResultDetailsLookup on comments_s\n    // Filtering on eventtype_in, eventresultdetails_in and eventresult\n    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))\n        and (eventresult == '*' or EventResult has eventresult)\n    | extend \n        SrcIpAddr = iff(ipAddress == \"null\", \"\", ipAddress),\n        EventOriginalType = tostring(toint(activityType_d)),\n        TargetUsername = username,\n        TargetUserScope = userScope,\n        AdditionalFields = bag_pack(\n                   \"accountName\",\n                   accountName,\n                   \"fullScopeDetails\",\n                   fullScopeDetails,\n                   \"fullScopeDetailsPath\",\n                   fullScopeDetailsPath,\n                   \"scopeLevel\",\n                   scopeLevel,\n                   \"source\",\n                   source,\n                   \"sourceType\",\n                   sourceType\n               ),\n        TargetOriginalUserType = role,\n        TargetUserType = case(\n                 role in (TargetUserTypesList),\n                 role,\n                 role == \"null\",\n                 \"\",\n                 \"Other\"\n             )\n    // Post-filtering on srcipaddr_has_any_prefix and username_has_any\n    | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))\n        and ((array_length(username_has_any) == 0) or DataFields_s has_any (username_has_any))\n    | project-rename\n        EventStartTime = createdAt_t,\n        TargetUserId = userId_s,\n        EventOriginalUid = activityUuid_g,\n        EventMessage = primaryDescription_s\n    | extend TargetUserIdType = iff(isnotempty(TargetUserId), \"Other\", \"\");\nlet alertdata = alldata\n    | where event_name_s == \"Alerts.\"\n        and alertInfo_eventType_s in (\"WINLOGONATTEMPT\", \"WINLOGOFFATTEMPT\")\n        and array_length(eventresultdetails_in) == 0 // EventResultDetails not available in this event\n        and ((array_length(username_has_any) == 0) or alertInfo_loginsUserName_s has_any (username_has_any))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(alertInfo_srcMachineIp_s, srcipaddr_has_any_prefix))\n        and ((array_length(srchostname_has_any) == 0) or (alertInfo_loginAccountDomain_s has_any (srchostname_has_any)))\n    | lookup EventTypeLookup on alertInfo_eventType_s\n    // Filtering on eventtype_in\n    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))\n    | lookup EventSubTypeLookup on alertInfo_loginType_s\n    | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s\n    | extend EventResult = iff(alertInfo_loginIsSuccessful_s == \"true\", \"Success\", \"Failure\")\n    // Filtering on eventresult\n    | where (eventresult == '*' or EventResult has eventresult);\nlet undefineddata = alertdata\n    | where ruleInfo_treatAsThreat_s == \"UNDEFINED\"\n    | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;\nlet suspiciousdata = alertdata\n    | where ruleInfo_treatAsThreat_s == \"Suspicious\"\n    | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;\nlet maliciousdata = alertdata\n    | where ruleInfo_treatAsThreat_s == \"Malicious\"\n    | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;\nlet alertdatawiththreatfield = union undefineddata, suspiciousdata, maliciousdata\n    | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')\n    | invoke _ASIM_ResolveSrcFQDN('alertInfo_loginAccountDomain_s')\n    // Post-filtering on srchostname_has_any\n    | where ((array_length(srchostname_has_any) == 0) or (SrcHostname has_any (srchostname_has_any)))\n    | extend\n        EventSeverity = iff(ruleInfo_severity_s == \"Critical\", \"High\", ruleInfo_severity_s),\n        ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)\n    | project-rename\n        EventStartTime = alertInfo_createdAt_t,\n        SrcIpAddr = alertInfo_srcMachineIp_s,\n        ActingAppName = sourceProcessInfo_name_s,\n        DvcId = agentDetectionInfo_uuid_g,\n        DvcOs = agentDetectionInfo_osName_s,\n        DvcOsVersion = agentDetectionInfo_osRevision_s,\n        EventOriginalSeverity = ruleInfo_severity_s,\n        EventOriginalType = alertInfo_eventType_s,\n        EventOriginalSubType = alertInfo_loginType_s,\n        RuleName = ruleInfo_name_s,\n        TargetUserId = alertInfo_loginAccountSid_s,\n        TargetUsername = alertInfo_loginsUserName_s,\n        ThreatOriginalConfidence = ruleInfo_treatAsThreat_s\n    | extend\n        Rule = RuleName,\n        ActingAppType = iff(isnotempty(ActingAppName), \"Process\", \"\"),\n        DvcIdType = iff(isnotempty(DvcId), \"Other\", \"\"),\n        TargetUserType = _ASIM_GetUserType(TargetUsername, TargetUserId),\n        TargetUserIdType = iff(isnotempty(TargetUserId), \"SID\", \"\");\nunion activitydata, alertdatawiththreatfield\n// mapping ASimMatchingUsername\n| extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n// ActorUsername not coming from source. Hence, not mapped.\n| extend ASimMatchingUsername = case\n    (\n                                array_length(username_has_any) == 0,\n                                \"-\",\n                                temp_isMatchTargetUsername,\n                                \"TargetUsername\",\n                                \"No match\"\n                            )\n| extend\n    EventCount = int(1),\n    EventProduct = \"SentinelOne\",\n    EventSchemaVersion = \"0.1.3\",\n    EventVendor = \"SentinelOne\",\n    EventSchema = \"Authentication\"\n| extend\n    Dvc = coalesce(DvcHostname, EventProduct),\n    EventEndTime = EventStartTime,\n    EventUid = _ItemId,\n    User = TargetUsername\n| extend\n    IpAddr = SrcIpAddr,\n    Src = SrcIpAddr\n| project-away\n    *_b,\n    *_d,\n    *_g,\n    *_s,\n    *_t,\n    ipAddress,\n    username,\n    accountName,\n    fullScopeDetails,\n    fullScopeDetailsPath,\n    role,\n    scopeLevel,\n    source,\n    sourceType,\n    userScope,\n    Computer,\n    MG,\n    ManagementGroupName,\n    RawData,\n    SourceSystem,\n    TenantId,\n    _ItemId,\n    _ResourceId,\n    ThreatConfidence_*\n};\nparser(\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)\n",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
