{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationSudo')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Syslog sudo",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationSudo",
        "query": "let SudoSignInAuthorized=(\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  ) {\n  Syslog \n  | where not(disabled)\n  | where ProcessName == \"sudo\" and \n      SyslogMessage has 'TTY=' and \n      SyslogMessage has 'USER=' and\n      SyslogMessage has 'COMMAND='\n      and (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))\n      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n      and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source\n      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n      and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n      and (array_length(eventresultdetails_in) == 0 or 'Other' in~ (eventresultdetails_in))\n      and (eventresult == \"*\" or ('Success' == eventresult))\n  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with (pair_delimiter=' ', kv_delimiter='=')\n  | project-rename TargetUsername = USER\n  | extend\n      EventVendor                 = 'Linux',\n      EventProduct                = 'sudo',\n      EventCount                  = int(1),\n      EventSchema                 = 'Authentication',\n      EventSchemaVersion          = '0.1.1',\n      EventResult                 = 'Success',\n      EventStartTime              = TimeGenerated,\n      EventEndTime                = TimeGenerated,\n      EventType                   = 'Logon',\n      DvcHostname                 = Computer,\n      ActorUsernameType           = 'Simple',\n      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),\n      TargetUsernameType          = 'Simple',\n      EventResultDetails          = 'Other',\n      EventOriginalRestultDetails = 'Connection authorized'\n  // Post-filtering on username_has_any\n  | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n  // mapping ASimMatchingUsername\n  | extend\n      temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n      ,\n      temp_isMatchActorUsername=ActorUsername has_any(username_has_any)\n  | extend ASimMatchingUsername = case\n      (\n                                  array_length(username_has_any) == 0,\n                                  \"-\",\n                                  temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                  \"Both\",\n                                  temp_isMatchTargetUsername,\n                                  \"TargetUsername\",\n                                  temp_isMatchActorUsername,\n                                  \"ActorUsername\",\n                                  \"No match\"\n                              )\n  // ************************\n  //      <Aliases>\n  // ************************\n  | extend\n      User  = TargetUsername,\n      Dvc   = Computer\n  // ************************\n  //      </Aliases>\n  // ************************\n  | project-away Computer, MG, SourceSystem, TenantId, temp_*\n};\nlet SudoAuthFailure1=(\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    ) {\n    Syslog\n    | where not(disabled)\n    | where ProcessName == \"sudo\" and (SyslogMessage has 'user NOT in sudoers' or SyslogMessage has 'incorrect password attempts')\n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        and ((array_length(eventtype_in) == 0) or \"Logon\" in~ (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))\n        and (eventresult == \"*\" or ('Failure' == eventresult))\n    | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with  (pair_delimiter=' ', kv_delimiter='=')\n    | project-rename \n        EventUid       = _ItemId,\n        TargetUsername = USER\n    | extend\n        ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),\n        ActorUsernameType           = 'Simple',\n        DvcHostname                 = Computer,\n        EventCount                  = int(1),\n        EventEndTime                = TimeGenerated,\n        EventOriginalRestultDetails = 'User authentication failed',\n        EventProduct                = 'sudo',\n        EventResult                 = 'Failure',\n        EventResultDetails          = 'No such user or password',\n        EventSchema                 = 'Authentication',\n        EventSchemaVersion          = '0.1.1',\n        EventStartTime              = TimeGenerated,\n        EventType                   = 'Logon',\n        EventVendor                 = 'Linux',\n        TargetUsernameType          = 'Simple'\n    // Post-filtering on username_has_any\n    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n    // mapping ASimMatchingUsername\n    | extend\n        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n        ,\n        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)\n    | extend ASimMatchingUsername = case\n        (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                    \"Both\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    temp_isMatchActorUsername,\n                                    \"ActorUsername\",\n                                    \"No match\"\n                                )\n    | project-away Computer, MG, SourceSystem, TenantId, temp_*\n};\nlet SudoDisconnect=(\n    starttime: datetime=datetime(null), \n    endtime: datetime=datetime(null), \n    username_has_any: dynamic = dynamic([]),\n    targetappname_has_any: dynamic = dynamic([]),\n    srcipaddr_has_any_prefix: dynamic = dynamic([]),\n    srchostname_has_any: dynamic = dynamic([]),\n    eventtype_in: dynamic = dynamic([]),\n    eventresultdetails_in: dynamic = dynamic([]),\n    eventresult: string = '*',\n    disabled: bool=false\n    ) {\n    Syslog \n    | where not(disabled)\n    | where ProcessName == \"sudo\"\n        and SyslogMessage has 'session closed for user '\n        and (isnull(starttime) or TimeGenerated >= starttime)\n        and (isnull(endtime) or TimeGenerated <= endtime)\n        and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))\n        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n        and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source\n        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n        and ((array_length(eventtype_in) == 0) or \"Logoff\" in~ (eventtype_in))\n        and (array_length(eventresultdetails_in) == 0 or 'Other' in~ (eventresultdetails_in))\n        and (eventresult == \"*\" or ('Success' == eventresult))\n    | parse SyslogMessage with * \"for user \" TargetUsername: string\n    // Post-filtering on username_has_any\n    | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))\n    // mapping ASimMatchingUsername\n    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n    // ActorUsername not coming from source. Hence, not mapped.\n    | extend ASimMatchingUsername = case\n        (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    \"No match\"\n                                )\n    | extend\n        DvcHostname                 = Computer,\n        EventCount                  = int(1),\n        EventEndTime                = TimeGenerated,\n        EventOriginalRestultDetails = 'User session closed',\n        EventProduct                = 'sudo',\n        EventResult                 = 'Success',\n        EventResultDetails          = 'Other',\n        EventSchema                 = 'Authentication',\n        EventSchemaVersion          = '0.1.1',\n        EventStartTime              = TimeGenerated,\n        EventType                   = 'Logoff',\n        EventVendor                 = 'Linux',\n        TargetUsernameType          = 'Simple'\n    // ************************\n    //      <Aliases>\n    // ************************\n    | extend\n        Dvc   = Computer,\n        User  = TargetUsername\n    // ************************\n    //      </Aliases>\n    // ************************\n    | project-away Computer, MG, SourceSystem, TenantId, temp_*\n};\nunion isfuzzy=false \n  SudoSignInAuthorized(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled), \n  SudoAuthFailure1(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled), \n  SudoDisconnect(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
