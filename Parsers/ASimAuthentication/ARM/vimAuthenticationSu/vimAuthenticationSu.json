{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/vimAuthenticationSu')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "Authentication ASIM filtering parser for Linux su",
        "category": "ASIM",
        "FunctionAlias": "vimAuthenticationSu",
        "query": "let parser = (\n  starttime: datetime=datetime(null), \n  endtime: datetime=datetime(null), \n  username_has_any: dynamic = dynamic([]),\n  targetappname_has_any: dynamic = dynamic([]),\n  srcipaddr_has_any_prefix: dynamic = dynamic([]),\n  srchostname_has_any: dynamic = dynamic([]),\n  eventtype_in: dynamic = dynamic([]),\n  eventresultdetails_in: dynamic = dynamic([]),\n  eventresult: string = '*',\n  disabled: bool=false\n  )\n{\n    let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))\n{\n    T\n        | where \n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))\n            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source\n            and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source\n            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source\n            and ((array_length(eventtype_in) == 0) or ('Logoff' in~ (eventtype_in)) or ('Elevation' in~ (eventtype_in)))\n            and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source\n            and (eventresult == \"*\" or (eventresult == \"Success\"))\n};\n    let SyslogProjects = Syslog\n        | project\n            TimeGenerated,\n            Computer,\n            SyslogMessage,\n            ProcessName,\n            ProcessID,\n            HostIP,\n            Type,\n            _ItemId,\n            _ResourceId,\n            _SubscriptionId;\n    //\n    // -- Sucessful SU\n    // Parses the event \"Successful su for <user> by <user>\"\n    let SuSignInAuthorized=(disabled: bool=false)\n{\n    SyslogProjects \n        | where not(disabled)\n        | where ProcessName == \"su\" and SyslogMessage startswith \"Successful su for\"\n        | invoke prefilter()\n        | parse SyslogMessage with * \"for \" TargetUsername: string \" by \" ActorUsername: string\n        | extend\n            EventType = 'Elevation'\n        | project-away SyslogMessage, ProcessName\n};\n    // \n    // -- SU end\n    // Parsers the event \"pam_unix(su[-l]:session): session closed for user <user>\"\n    let SuDisconnect=(disabled: bool=false)\n{\n    SyslogProjects \n        | where not(disabled)\n        | where ProcessName == \"su\" and SyslogMessage has_all ('pam_unix(su', 'session): session closed for user')\n        | invoke prefilter()\n        | parse SyslogMessage with * \"for user \" TargetUsername: string\n        | extend\n            EventType = 'Logoff'\n        | project-away SyslogMessage, ProcessName\n};\n    union isfuzzy=false \n        SuSignInAuthorized (disabled = disabled)\n        ,\n        SuDisconnect(disabled = disabled)\n    // Post-filtering\n    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))\n        and (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))\n    // mapping ASimMatchingUsername\n    | extend\n        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)\n        ,\n        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)\n    | extend ASimMatchingUsername = case\n                                (\n                                    array_length(username_has_any) == 0,\n                                    \"-\",\n                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,\n                                    \"Both\",\n                                    temp_isMatchTargetUsername,\n                                    \"TargetUsername\",\n                                    temp_isMatchActorUsername,\n                                    \"ActorUsername\",\n                                    \"No match\"\n                                )\n    | invoke _ASIM_ResolveDvcFQDN ('Computer')\n    | extend\n        EventVendor             = 'Linux'\n        ,\n        EventProduct          = 'su'\n        ,\n        DvcOs                 = 'Linux'\n        ,\n        TargetDvcOs           = 'Linux'\n        ,\n        EventCount            = int(1)\n        ,\n        EventSchema           = 'Authentication'\n        ,\n        EventSchemaVersion    = '0.1.2'\n        ,\n        EventResult           = 'Success'\n        ,\n        EventStartTime        = TimeGenerated\n        ,\n        EventEndTime          = TimeGenerated\n        ,\n        ActorUsernameType     = 'Simple'\n        ,\n        TargetUsernameType    = 'Simple'\n        ,\n        EventSeverity         = 'Informational'\n        ,\n        ActingAppType         = 'Process'\n        ,\n        DvcIdType             = iff (isnotempty(_ResourceId), \"AzureResourceId\", \"\")\n        ,\n        ActingAppId           = tostring(ProcessID)\n    | project-away Computer, ProcessID, temp*\n    | project-rename \n        EventUid                = _ItemId\n        ,\n        DvcScopeId            = _SubscriptionId\n        ,\n        DvcId                 = _ResourceId\n        ,\n        DvcIpAddr             = HostIP\n    //\n    // -- Aliases\n    | extend\n        User                    = TargetUsername\n        ,\n        Dvc                   = DvcHostname\n        ,\n        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)\n        ,\n        TargetDomain          = DvcDomain\n        ,\n        TargetFQDN            = DvcFQDN\n        ,\n        TargetDomainType      = DvcDomainType\n        ,\n        TargetHostname        = DvcHostname\n        ,\n        TargetDvcId           = DvcId\n        ,\n        TargetDvcScopeId      = DvcScopeId\n        ,\n        TargetDvcIdType       = DvcDomainType\n        ,\n        IpAddr                = DvcIpAddr\n        ,\n        TargetIpAddr          = DvcIpAddr\n};\nparser (\n  starttime=starttime,\n  endtime=endtime,\n  username_has_any=username_has_any,\n  targetappname_has_any=targetappname_has_any,\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,\n  srchostname_has_any=srchostname_has_any,\n  eventtype_in=eventtype_in,\n  eventresultdetails_in=eventresultdetails_in,\n  eventresult=eventresult,\n  disabled=disabled\n)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),username_has_any:dynamic=dynamic([]),targetappname_has_any:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),srchostname_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
      }
    }
  ]
}
