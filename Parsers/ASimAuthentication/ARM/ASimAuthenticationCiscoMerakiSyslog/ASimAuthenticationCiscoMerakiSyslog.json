{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/ASimAuthenticationCiscoMerakiSyslog')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication parser for Cisco Meraki",
        "category": "ASIM",
        "FunctionAlias": "ASimAuthenticationCiscoMerakiSyslog",
        "query": "let LogSubTypeList = dynamic([\"8021x_auth\", \"wpa_auth\", \"splash_auth\", \"8021x_deauth\", \"8021x_client_deauth\", \"wpa_deauth\", \"8021x_eap_failure\", \"8021x_eap_success\"]);\nlet EventResultDetailsLookup = datatable (reason: string, EventResultDetails: string)\n    [\n    \"0\", \"Other\",\n    \"1\", \"Other\",\n    \"2\", \"Password expired\",\n    \"3\", \"Other\",\n    \"4\", \"Session expired\",\n    \"5\", \"Other\",\n    \"6\", \"Other\",\n    \"7\", \"Other\",\n    \"8\", \"Other\",\n    \"9\", \"Other\",\n    \"10\", \"Logon violates policy\",\n    \"11\", \"Logon violates policy\",\n    \"12\", \"Other\",\n    \"13\", \"Logon violates policy\",\n    \"14\", \"Other\",\n    \"15\", \"Other\",\n    \"16\", \"Other\",\n    \"17\", \"Other\",\n    \"18\", \"Incorrect key\",\n    \"19\", \"Incorrect key\",\n    \"20\", \"Incorrect key\",\n    \"21\", \"Other\",\n    \"22\", \"Other\",\n    \"23\", \"Other\",\n    \"24\", \"Logon violates policy\",\n];\nlet EventFieldsLookup = datatable (\n    LogSubType: string,\n    EventResult: string,\n    EventType: string,\n    EventSeverity: string\n)\n    [\n    \"8021x_auth\", \"Success\", \"Logon\", \"Informational\",\n    \"wpa_auth\", \"Success\", \"Logon\", \"Informational\",\n    \"splash_auth\", \"Success\", \"Logon\", \"Informational\",\n    \"8021x_eap_success\", \"Success\", \"Logon\", \"Informational\",\n    \"8021x_deauth\", \"Success\", \"Logoff\", \"Informational\",\n    \"8021x_client_deauth\", \"Success\", \"Logoff\", \"Informational\",\n    \"wpa_deauth\", \"Success\", \"Logoff\", \"Informational\",\n    \"8021x_eap_failure\", \"Failure\", \"Logon\", \"Low\",\n    \"disassociation\", \"Failure\", \"Logon\", \"Low\",\n];\nlet parser = (disabled: bool=false) {\n    (\n        Syslog\n        | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))\n        | project-rename LogMessage =  SyslogMessage\n        )\n    | where not(disabled)\n        and LogMessage has \"events\"\n        and (LogMessage has_any (LogSubTypeList) or LogMessage has_all(\"disassociation\",\"auth_neg_failed\"))\n    | extend Parser = extract_all(@\"(\\d+.\\d+)\\s([\\w\\-\\_]+)\\s([\\w\\-\\_]+)\\s([\\S\\s]+)$\", dynamic([1, 2, 3, 4]), LogMessage)[0]\n    | extend\n        Epoch = tostring(Parser[0]),\n        Device = tostring(Parser[1]),\n        LogType = tostring(Parser[2]),\n        Substring = tostring(Parser[3])\n    | where LogType == \"events\"\n    | parse Substring with * \"type=\" LogSubType:string \" \" restOfMessage:string\n    | where LogSubType in (LogSubTypeList) or (LogSubType == \"disassociation\" and Substring has \"auth_neg_failed\")\n    | extend EpochTimestamp = split(Epoch, \".\")\n    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))\n    | extend EventEndTime = EventStartTime\n    | invoke _ASIM_ResolveDvcFQDN('Device')\n    | parse-kv Substring as(last_known_client_ip: string, ip: string, client_ip: string, client_mac: string, identity: string, reason: string, aid: string) with (pair_delimiter=\" \", kv_delimiter=\"=\", quote=\"'\")\n    | extend Dvc = DvcHostname, \n          aid = trim('\"', aid)\n    | extend\n        SrcIpAddr = tostring(split(coalesce(last_known_client_ip, ip, client_ip), \" \")[0]),\n        DvcMacAddr = client_mac,\n        TargetUsername = identity,\n        AdditionalFields = bag_pack(\"aid\", aid),\n        EventOriginalType = LogType,\n        EventOriginalSubType = LogSubType,\n        EventUid = _ResourceId\n    | extend\n        SrcIpAddr = trim('\"', SrcIpAddr),\n        DvcMacAddr = trim('\"', DvcMacAddr),\n        TargetUsername = trim('\"', TargetUsername),\n        reason = trim('\"', reason)\n    | extend\n        DvcIpAddr = SrcIpAddr,\n        IpAddr = SrcIpAddr,\n        User = TargetUsername,\n        TargetUsernameType = iff(isnotempty(TargetUsername), \"Simple\", \"\")\n    | lookup EventFieldsLookup on LogSubType\n    | lookup EventResultDetailsLookup on reason\n    | extend EventResultDetails = iff(tolong(reason) between (25 .. 65535), \"Other\", EventResultDetails)\n    | extend\n        EventCount=int(1),\n        EventProduct=\"Meraki\",\n        EventVendor=\"Cisco\",\n        EventSchema=\"Authentication\",\n        EventSchemaVersion=\"0.1.3\"\n    | project-away\n        LogMessage,\n        Parser,\n        Epoch,\n        EpochTimestamp,\n        Device,\n        Substring,\n        LogType,\n        LogSubType,\n        restOfMessage,\n        reason,\n        last_known_client_ip,\n        client_ip,\n        ip,\n        client_mac,\n        identity,\n        aid,\n        TenantId,\n        SourceSystem,\n        Computer,\n        _ResourceId,\n        MG,\n        EventTime,\n        Facility,\n        HostName,\n        SeverityLevel,\n        ProcessID,\n        HostIP,\n        ProcessName,\n        CollectorHostName\n};\nparser(disabled=disabled)",
        "version": 1,
        "functionParameters": "disabled:bool=False"
      }
    }
  ]
}
