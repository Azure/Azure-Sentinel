Parser:
  Title: Authentication ASIM filtering parser for PostgreSQL
  Version: '0.1.4'
  LastUpdated: Apr 10, 2024
Product:
  Name: PostgreSQL
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing PostgreSQL sign in logs to the ASIM Authentication schema.
ParserName: vimAuthenticationPostgreSQL
EquivalentBuiltInParser: _Im_Authentication_PostgreSQL
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
   let PostgreSQLSignInAuthorized=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
     PostgreSQL_CL
    | where not(disabled)
    // ************************************************************************* 
    //      <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
        and (eventresult == "*" or ('Success' == eventresult))
    // ************************************************************************* 
    //      </Prefilterring>
    // ************************************************************************* 
    | where RawData has 'connection authorized'
    | extend
        EventVendor = 'PostgreSQL'
        ,
        EventProduct = 'PostgreSQL'
        ,
        EventCount = int(1)
        ,
        EventSchema = 'Authentication'
        ,
        EventSchemaVersion = '0.1.1'
        ,
        EventResult = 'Success'
        ,
        EventStartTime = TimeGenerated
        ,
        EventEndTime = TimeGenerated
        ,
        EventType = 'Logon'
        ,
        DvcHostname = Computer
        ,
        DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
        ,
        TargetUsernameType = 'Simple'
        ,
        TargetUsername = extract(@'user=([^\s,]+)', 1, RawData)
        ,
        EventOriginalRestultDetails = 'Connection authorized'
    // ********************** <Postfilterring> **********************************
    | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
    // ********************** </Postfilterring> *********************************
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    // ************************ 
    //      <Aliases> 
    // ************************
    | extend
        User=TargetUsername
        ,
        Dvc=Computer
    // ************************ 
    //      </Aliases> 
    // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
    let PostgreSQLAuthFailure1=(
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        username_has_any: dynamic = dynamic([]),
        targetappname_has_any: dynamic = dynamic([]),
        srcipaddr_has_any_prefix: dynamic = dynamic([]),
        srchostname_has_any: dynamic = dynamic([]),
        eventtype_in: dynamic = dynamic([]),
        eventresultdetails_in: dynamic = dynamic([]),
        eventresult: string = '*',
        disabled: bool=false
        ) {
        PostgreSQL_CL
        | where not(disabled)
        // ************************************************************************* 
        //      <Prefilterring>
        // *************************************************************************
        | where 
            (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
            and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
            and (eventresult == "*" or ('Failure' == eventresult))
        // ************************************************************************* 
        //      </Prefilterring>
        // *************************************************************************
        | where RawData has 'authentication failed'
        | extend 
            EventVendor = 'PostgreSQL'
            ,
            EventProduct = 'PostgreSQL'
            ,
            EventCount = int(1)
            ,
            EventSchema = 'Authentication'
            ,
            EventSchemaVersion = '0.1.1'
            ,
            EventResult = 'Failure'
            ,
            EventStartTime = TimeGenerated
            ,
            EventEndTime = TimeGenerated
            ,
            EventType = 'Logon'
            ,
            DvcHostname = Computer
            ,
            DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
            ,
            TargetUsernameType = 'Simple'
            ,
            TargetUsername = extract(@'for user\s"(.*?)"', 1, RawData)
            ,
            EventResultDetails = 'No such user or password'
            ,
            EventOriginalRestultDetails = 'User authentication failed'
        // ********************** <Postfilterring> **********************************
        | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
        // ********************** </Postfilterring> *********************************
        // mapping ASimMatchingUsername
        | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        // ActorUsername not coming from source. Hence, not mapped.
        | extend ASimMatchingUsername = case
            (
                                        array_length(username_has_any) == 0,
                                        "-",
                                        temp_isMatchTargetUsername,
                                        "TargetUsername",
                                        "No match"
                                    )
        // ************************ 
        //      <Aliases> 
        // ************************
        | extend
            User=TargetUsername
            ,
            Dvc=Computer
        // ************************ 
        //      </Aliases> 
        // ************************
        | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
    let PostgreSQLAuthFailure2=(
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        username_has_any: dynamic = dynamic([]),
        targetappname_has_any: dynamic = dynamic([]),
        srcipaddr_has_any_prefix: dynamic = dynamic([]),
        srchostname_has_any: dynamic = dynamic([]),
        eventtype_in: dynamic = dynamic([]),
        eventresultdetails_in: dynamic = dynamic([]),
        eventresult: string = '*',
        disabled: bool=false
        ) {
        PostgreSQL_CL
        | where not(disabled)
        // ************************************************************************* 
        //      <Prefilterring>
        // *************************************************************************
        | where 
            (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
            and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
            and (eventresult == "*" or ('Failure' == eventresult))
        // ************************************************************************* 
        //      </Prefilterring>
        // *************************************************************************
        | where RawData has_all ('role', 'does', 'not', 'exist')
        | extend 
            EventVendor = 'PostgreSQL'
            ,
            EventProduct = 'PostgreSQL'
            ,
            EventCount = int(1)
            ,
            EventSchema = 'Authentication'
            ,
            EventSchemaVersion = '0.1.1'
            ,
            EventResult = 'Failure'
            ,
            EventStartTime = TimeGenerated
            ,
            EventEndTime = TimeGenerated
            ,
            EventType = 'Logon'
            ,
            DvcHostname = Computer
            ,
            DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
            ,
            TargetUsernameType = 'Simple'
            ,
            TargetUsername = extract(@'role\s"(.*?)"\sdoes', 1, RawData)
            ,
            EventResultDetails = 'No such user or password'
            ,
            EventOriginalRestultDetails = 'Role does not exist'
        // ********************** <Postfilterring> **********************************
        | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
        // ********************** </Postfilterring> *********************************
        // mapping ASimMatchingUsername
        | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        // ActorUsername not coming from source. Hence, not mapped.
        | extend ASimMatchingUsername = case
            (
                                        array_length(username_has_any) == 0,
                                        "-",
                                        temp_isMatchTargetUsername,
                                        "TargetUsername",
                                        "No match"
                                    )
        // ************************ 
        //      <Aliases> 
        // ************************
        | extend
            User=TargetUsername
            ,
            Dvc=Computer
        // ************************ 
        //      </Aliases> 
        // ************************
        | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
    let PostgreSQLAuthFailure3=(
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        username_has_any: dynamic = dynamic([]),
        targetappname_has_any: dynamic = dynamic([]),
        srcipaddr_has_any_prefix: dynamic = dynamic([]),
        srchostname_has_any: dynamic = dynamic([]),
        eventtype_in: dynamic = dynamic([]),
        eventresultdetails_in: dynamic = dynamic([]),
        eventresult: string = '*',
        disabled: bool=false
        ) {
        PostgreSQL_CL
        | where not(disabled)
        // ************************************************************************* 
        //      <Prefilterring>
        // *************************************************************************
        | where 
            (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
            and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
            and (eventresult == "*" or ('Failure' == eventresult))
        // ************************************************************************* 
        //      </Prefilterring>
        // *************************************************************************
        | where RawData has_all ('no', 'entry', 'user')
        | extend 
            EventVendor = 'PostgreSQL'
            ,
            EventProduct = 'PostgreSQL'
            ,
            EventCount = int(1)
            ,
            EventSchema = 'Authentication'
            ,
            EventSchemaVersion = '0.1.1'
            ,
            EventResult = 'Failure'
            ,
            EventStartTime = TimeGenerated
            ,
            EventEndTime = TimeGenerated
            ,
            EventType = 'Logon'
            ,
            DvcHostname = Computer
            ,
            DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
            ,
            TargetUsernameType = 'Simple'
            ,
            TargetUsername = extract(@'user\s"(.*?)",', 1, RawData)
            ,
            SrcIpAddr = extract(@'host\s"(.*?)",', 1, RawData)
            ,
            EventResultDetails = 'No such user or password'
            ,
            EventOriginalRestultDetails = 'No entry for user'
        // ********************** <Postfilterring> **********************************
        | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
            and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
        // ********************** </Postfilterring> *********************************
        // mapping ASimMatchingUsername
        | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        // ActorUsername not coming from source. Hence, not mapped.
        | extend ASimMatchingUsername = case
            (
                                        array_length(username_has_any) == 0,
                                        "-",
                                        temp_isMatchTargetUsername,
                                        "TargetUsername",
                                        "No match"
                                    )
        // ************************ 
        //      <Aliases> 
        // ************************
        | extend
            User=TargetUsername
            ,
            Dvc=Computer
        // ************************ 
        //      </Aliases> 
        // ************************
        | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
    let PostgreSQLDisconnect=(
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        username_has_any: dynamic = dynamic([]),
        targetappname_has_any: dynamic = dynamic([]),
        srcipaddr_has_any_prefix: dynamic = dynamic([]),
        srchostname_has_any: dynamic = dynamic([]),
        eventtype_in: dynamic = dynamic([]),
        eventresultdetails_in: dynamic = dynamic([]),
        eventresult: string = '*',
        disabled: bool=false
        ) {
        PostgreSQL_CL
        | where not(disabled)
        // ************************************************************************* 
        //      <Prefilterring>
        // *************************************************************************
        | where 
            (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or "Logoff" in~ (eventtype_in))
            and (array_length(eventresultdetails_in) == 0 or 'Session expired' in~ (eventresultdetails_in))
            and (eventresult == "*" or ('Success' == eventresult))
        // ************************************************************************* 
        //      </Prefilterring>
        // *************************************************************************
        | where RawData has 'disconnection'
        | extend 
            EventVendor = 'PostgreSQL'
            ,
            EventProduct = 'PostgreSQL'
            ,
            EventCount = int(1)
            ,
            EventSchema = 'Authentication'
            ,
            EventSchemaVersion = '0.1.1'
            ,
            EventResult = 'Success'
            ,
            EventStartTime = TimeGenerated
            ,
            EventEndTime = TimeGenerated
            ,
            EventType = 'Logoff'
            ,
            DvcHostname = Computer
            ,
            DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
            ,
            TargetUsernameType = 'Simple'
            ,
            TargetUsername = extract(@'user=([^\s,]+)', 1, RawData)
            ,
            SrcIpAddr = extract(@'host=([\d.]+)', 1, RawData)
            ,
            EventResultDetails = 'Session expired'
            ,
            EventOriginalRestultDetails = 'User session closed'
        // ********************** <Postfilterring> **********************************
        | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
            and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
        // ********************** </Postfilterring> *********************************
        // mapping ASimMatchingUsername
        | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        // ActorUsername not coming from source. Hence, not mapped.
        | extend ASimMatchingUsername = case
            (
                                        array_length(username_has_any) == 0,
                                        "-",
                                        temp_isMatchTargetUsername,
                                        "TargetUsername",
                                        "No match"
                                    )
        // ************************ 
        //      <Aliases> 
        // ************************
        | extend
            User=TargetUsername
            ,
            Dvc=Computer
        // ************************ 
        //      </Aliases> 
        // ************************
        | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
    union isfuzzy=false PostgreSQLSignInAuthorized(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
                  ,  PostgreSQLAuthFailure1(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
                  ,  PostgreSQLAuthFailure2(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
                  ,  PostgreSQLAuthFailure3(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
                  ,  PostgreSQLDisconnect(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
