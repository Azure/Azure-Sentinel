Parser:
  Title: Authentication ASIM filtering parser for AWS sign-in logs
  Version: '0.2.2'
  LastUpdated: Apr 03, 2024
Product:
  Name: AWS
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Amazon Web Service sign in logs, stored in the  AWSCloudTrail table, to the ASIM Authentication schema.
ParserName: vimAuthenticationAWSCloudTrail
EquivalentBuiltInParser: _Im_Authentication_AWSCloudTrail
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  // -- Refer to https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html for details
  let usertype_lookup = datatable (TargetOriginalUserType: string, TargetUserType: string) [
      // -- For console login, only IAMUser, Root and AssumedRole are relevant
      'Root', 'Admin', 
      'IAMUser', 'Regular', 
      'AssumedRole', 'Service', 
      'Role', 'Service', 
      'FederatedUser', 'Regular',
      'Directory', 'Other',
      'AWSAccount', 'Guest',
      'AWSService', 'Application',
      'Unknown', 'Other',
  ];
  let eventresultdetails_lookup = datatable (
      EventOriginalResultDetails: string,
      EventOriginalDetails: string
  ) [
      'No username found in supplied account', 'No such user',
      'Failed authentication', ''
  ];
  let ASIM_GetUsernameType = (username: string) { 
      case ( 
      username contains "@",
      "UPN"
      ,
      username contains "\\",
      "Windows"
      ,
      (username has "CN=" or username has "OU=" or username has "DC="),
      "DN"
      ,
      isempty(username),
      ""
      ,
      "Simple"
  )
  };
  let parser= (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      username_has_any: dynamic = dynamic([]),
      targetappname_has_any: dynamic = dynamic([]),
      srcipaddr_has_any_prefix: dynamic = dynamic([]),
      srchostname_has_any: dynamic = dynamic([]),
      eventtype_in: dynamic = dynamic([]),
      eventresultdetails_in: dynamic = dynamic([]),
      eventresult: string = '*',
      disabled: bool=false
      ) {
      AWSCloudTrail
      | where not(disabled)
      //  -- Pre filtering
      | where (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
          and EventName == 'ConsoleLogin'
          and ((array_length(username_has_any) == 0) or (UserIdentityArn has_any (username_has_any)) or (UserIdentityUserName has_any (username_has_any)))
          and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
          and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SourceIpAddress, srcipaddr_has_any_prefix)))
          and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
          and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
          and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
      // eventresult filtering done later in the parser
      //  -- end pre-filtering
      | project-rename
          EventOriginalUid            = AwsEventId,
          EventOriginalResultDetails  = ErrorMessage,
          TargetOriginalUserType      = UserIdentityType,
          EventProductVersion         = EventVersion,
          SrcIpAddr                   = SourceIpAddress,
          TargeCloudRegion            = AWSRegion,
          TargetUserScopeId           = UserIdentityAccountId,
          HttpUserAgent               = UserAgent,
          EventUid                    = _ItemId
      | extend
          TargetUsername              = case (
                                    UserIdentityUserName == "HIDDEN_DUE_TO_SECURITY_REASONS",
                                    "",
                                    TargetOriginalUserType == 'IAMUser',
                                    UserIdentityUserName,
                                    TargetOriginalUserType == 'Root',
                                    'root',
                                    TargetOriginalUserType == 'AssumedRole',
                                    tostring(split(UserIdentityArn, '/')[-1]), // -- This is the AssuderRole session name, which typically represents a user.           
                                    UserIdentityUserName
                                )
      // Filtering on 'username_has_any'
      | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
      // mapping ASimMatchingUsername
      | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      // ActorUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
          (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
      | extend
          EventVendor                 = 'AWS',
          Dvc                         = 'AWS',
          EventProduct                = 'CloudTrail',
          EventCount                  = int(1),
          EventSchemaVersion          = '0.1.3',
          EventSchema                 = 'Authentication',
          EventStartTime              = TimeGenerated,
          EventEndTime                = TimeGenerated,
          EventType                   = 'Logon',
          EventSubType                = 'Interactive',
          TargetUserIdType            = 'AWSId',
          LogonProtocol               = 'HTTPS',
          TargetUserId                = tostring(split(UserIdentityPrincipalid, ':')[0]),
          LogonMethod                 = iff (AdditionalEventData has '"MFAUsed": "Yes"', 'MFA', ''),
          SrcDeviceType               = iff (AdditionalEventData has '"MobileVersion":"Yes"', 'Mobile Device', 'Computer'),
          EventResult                 = iff (ResponseElements has 'Success', 'Success', 'Failure')
      // Filtering on 'eventresult'
      | where (eventresult == "*" or (EventResult == eventresult))
      | extend
          TargetUsernameType          = ASIM_GetUsernameType (TargetUsername)
      | parse AdditionalEventData with * '"LoginTo":"' TargetUrl: string '"' *
      | lookup eventresultdetails_lookup on EventOriginalResultDetails
      | lookup usertype_lookup on TargetOriginalUserType 
      | extend 
          LogonTarget=tostring(split(TargetUrl, '?')[0]),
          EventSeverity = iff(EventResult == 'Failure', 'Low', 'Informational')
      // -- Specific idetifier aliases
      | extend 
          TargetUserAWSId = TargetUserId
      // -- Aliases
      | extend
          User   = TargetUsername,
          Dvc    = EventVendor,
          Dst    = LogonTarget,
          IpAddr = SrcIpAddr,
          Src    = SrcIpAddr
      | project-away
          EventSource,
          EventTypeName,
          EventName,
          ResponseElements,
          AdditionalEventData,
          Session*,
          Category,
          ErrorCode,
          Aws*,
          ManagementEvent,
          OperationName,
          ReadOnly,
          RequestParameters,
          Resources,
          ServiceEventDetails,
          SharedEventId,
          SourceSystem,
          UserIdentity*,
          VpcEndpointId,
          APIVersion,
          RecipientAccountId,
          TenantId,
          EC2RoleDelivery,
          temp_*
  };
  parser (
      starttime=starttime,
      endtime=endtime,
      username_has_any=username_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
  )