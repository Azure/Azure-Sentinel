Parser:
  Title: ASIM Authentication parser for VMware Carbon Black Cloud
  Version: '0.1.1'
  LastUpdated: Apr 11 2024
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation
  Link: 
    https://developer.carbonblack.com/reference/carbon-black-cloud/data-forwarder/schema/latest/endpoint.event-1.0.0/
    https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Authentication normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimAuthenticationVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_Authentication_VMwareCarbonBlackCloud
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    CarbonBlackAuditLogs_CL
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and (description_s has_any ("logged in", "login", "second factor authentication") and description_s !has "connector")
        and ((array_length(username_has_any) == 0) or (loginName_s has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(clientIp_s, srcipaddr_has_any_prefix))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and (array_length(eventtype_in) == 0 or 'Logon' has_any (eventtype_in))
    // Filtering for eventresultdetails_in done later in the parser
    // Filtering for eventresult done later in the parser
    | extend
        EventResult = iff(description_s has "successfully", "Success", "Failure"),
        EventType = "Logon"
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
        and (eventresult == '*' or EventResult has eventresult)
    | extend EventResultDetails = case(
                                  EventResult == "Failure" and description_s has ("locked"),
                                  "User locked",
                                  EventResult == "Failure" and description_s has_any ("logged in", "login"),
                                  "Incorrect password",
                                  EventResult == "Failure" and description_s has ("second factor authentication"),
                                  "MFA not satisfied",
                                  ""
                              )
    // Filtering on eventresultdetails_in
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))
    | extend
        EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
        AdditionalFields = bag_pack("flagged", flagged_b),
        EventSeverity = iff(flagged_b == true, "Low", "Informational"),
        EventCount = int(1),
        EventProduct = "Carbon Black Cloud",
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventVendor = "VMware",
        EventOriginalResultDetails = iff(EventResult == "Failure", tostring(split(description_s, ';')[1]), "")
    | project-rename
        EventMessage = description_s,
        EventOriginalUid = eventId_g,
        TargetUsername = loginName_s,
        SrcIpAddr = clientIp_s,
        EventUid=_ItemId,
        EventOwner = orgName_s
    | extend
        IpAddr = SrcIpAddr,
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        Dvc = EventProduct,
        EventEndTime = EventStartTime,
        User = TargetUsername,
        Src = SrcIpAddr
    // mapping ASimMatchingUsername
      | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      // ActorUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
          (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
    | project-away
        *_s,
        *_d,
        *_b,
        _ResourceId,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId,
        temp_*
  };
  parser(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )
