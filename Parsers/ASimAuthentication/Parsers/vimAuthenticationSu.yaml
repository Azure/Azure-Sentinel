Parser:
  Title: Authentication ASIM filtering parser for Linux su 
  Version: '0.2.2'
  LastUpdated: Mar 21, 2024
Product:
  Name: su
Normalization:
  Schema: Authentication
  Version: '0.1.2'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Linux su elevation commands collected using Syslog to the ASIM Authentication schema.
ParserName: vimAuthenticationSu
EquivalentBuiltInParser: _Im_Authentication_Su
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
  {
      let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))
  {
      T
          | where 
              (isnull(starttime) or TimeGenerated >= starttime) 
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
              and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
              and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
              and ((array_length(eventtype_in) == 0) or ('Logoff' in~ (eventtype_in)) or ('Elevation' in~ (eventtype_in)))
              and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
              and (eventresult == "*" or (eventresult == "Success"))
  };
      let SyslogProjects = Syslog
          | project
              TimeGenerated,
              Computer,
              SyslogMessage,
              ProcessName,
              ProcessID,
              HostIP,
              Type,
              _ItemId,
              _ResourceId,
              _SubscriptionId;
      //
      // -- Sucessful SU
      // Parses the event "Successful su for <user> by <user>"
      let SuSignInAuthorized=(disabled: bool=false)
  {
      SyslogProjects 
          | where not(disabled)
          | where ProcessName == "su" and SyslogMessage startswith "Successful su for"
          | invoke prefilter()
          | parse SyslogMessage with * "for " TargetUsername: string " by " ActorUsername: string
          | extend
              EventType = 'Elevation'
          | project-away SyslogMessage, ProcessName
  };
      // 
      // -- SU end
      // Parsers the event "pam_unix(su[-l]:session): session closed for user <user>"
      let SuDisconnect=(disabled: bool=false)
  {
      SyslogProjects 
          | where not(disabled)
          | where ProcessName == "su" and SyslogMessage has_all ('pam_unix(su', 'session): session closed for user')
          | invoke prefilter()
          | parse SyslogMessage with * "for user " TargetUsername: string
          | extend
              EventType = 'Logoff'
          | project-away SyslogMessage, ProcessName
  };
      union isfuzzy=false 
          SuSignInAuthorized (disabled = disabled)
          ,
          SuDisconnect(disabled = disabled)
      // Post-filtering
      | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
          and (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))
      // mapping ASimMatchingUsername
      | extend
          temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
          ,
          temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
      | extend ASimMatchingUsername = case
                                  (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                      "Both",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      temp_isMatchActorUsername,
                                      "ActorUsername",
                                      "No match"
                                  )
      | invoke _ASIM_ResolveDvcFQDN ('Computer')
      | extend
          EventVendor             = 'Linux'
          ,
          EventProduct          = 'su'
          ,
          DvcOs                 = 'Linux'
          ,
          TargetDvcOs           = 'Linux'
          ,
          EventCount            = int(1)
          ,
          EventSchema           = 'Authentication'
          ,
          EventSchemaVersion    = '0.1.2'
          ,
          EventResult           = 'Success'
          ,
          EventStartTime        = TimeGenerated
          ,
          EventEndTime          = TimeGenerated
          ,
          ActorUsernameType     = 'Simple'
          ,
          TargetUsernameType    = 'Simple'
          ,
          EventSeverity         = 'Informational'
          ,
          ActingAppType         = 'Process'
          ,
          DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", "")
          ,
          ActingAppId           = tostring(ProcessID)
      | project-away Computer, ProcessID, temp*
      | project-rename 
          EventUid                = _ItemId
          ,
          DvcScopeId            = _SubscriptionId
          ,
          DvcId                 = _ResourceId
          ,
          DvcIpAddr             = HostIP
      //
      // -- Aliases
      | extend
          User                    = TargetUsername
          ,
          Dvc                   = DvcHostname
          ,
          Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)
          ,
          TargetDomain          = DvcDomain
          ,
          TargetFQDN            = DvcFQDN
          ,
          TargetDomainType      = DvcDomainType
          ,
          TargetHostname        = DvcHostname
          ,
          TargetDvcId           = DvcId
          ,
          TargetDvcScopeId      = DvcScopeId
          ,
          TargetDvcIdType       = DvcDomainType
          ,
          IpAddr                = DvcIpAddr
          ,
          TargetIpAddr          = DvcIpAddr
  };
  parser (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )