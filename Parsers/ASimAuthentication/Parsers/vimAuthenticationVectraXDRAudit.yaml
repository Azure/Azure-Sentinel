Parser:
  Title: Authentication ASIM filtering parser for Vectra XDR Audit Logs Event
  Version: '0.1.1'
  LastUpdated: Apr 10 2024
Product:
  Name: Vectra
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Authentication schema.
ParserName: vimAuthenticationVectraXDRAudit
EquivalentBuiltInParser: _Im_Authentication_VectraXDRAudit
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      username_has_any: dynamic = dynamic([]),
      targetappname_has_any: dynamic = dynamic([]),
      srcipaddr_has_any_prefix: dynamic = dynamic([]),
      srchostname_has_any: dynamic = dynamic([]),
      eventtype_in: dynamic = dynamic([]),
      eventresultdetails_in: dynamic = dynamic([]),
      eventresult: string = '*',
      disabled: bool=false
      ) {
      Audits_Data_CL
      | where not(disabled)
          and event_action_s in ("login", "logout")
          and (isnull(starttime) or event_timestamp_t >= starttime)
          and (isnull(endtime) or event_timestamp_t <= endtime)
          and ((array_length(username_has_any) == 0) or username_s has_any (username_has_any))
          and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
          and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
          and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
          and ((array_length(eventtype_in) == 0) or ("Logon" in~ (eventtype_in)) or ("Logoff" in~ (eventtype_in)))
          and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
      // eventresult filtering done later in the parser
      | extend
          EventCount = int(1),
          EventEndTime = event_timestamp_t,
          EventProduct = 'Vectra XDR',
          EventResult = case(result_status_s == "success", "Success", result_status_s == "failure", "Failure", "NA"),
          EventSchema = "Authentication",
          EventSchemaVersion = "0.1.3",
          EventStartTime = event_timestamp_t,
          EventType = case(event_action_s == "login", "Logon", event_action_s == "logout", "Logoff", ""),
          EventVendor = 'Vectra',
          ActorUserId = tostring(toint(user_id_d)),
          ActorUserIdType = "VectraUserId",
          ActorUsernameType = "UPN",
          EventUid = tostring(toint(id_d))
      // Post-filtering on eventtype_in and eventresult
      | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
          and ((eventresult == "*") or (EventResult == eventresult))
      | project-rename
          DvcIpAddr = source_ip_s,
          ActorOriginalUserType = user_type_s,
          ActorUsername = username_s,
          EventMessage = Message,
          EventProductVersion = version_s
      // mapping ASimMatchingUsername
      | extend temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
      // TargetUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
          (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchActorUsername,
                                      "ActorUsername",
                                      "No match"
                                  )
      | extend
          User = ActorUsername,
          Dvc = DvcIpAddr
      | project-away
          *_d,
          *_s,
          event_timestamp_t,
          api_client_id_g,
          TenantId,
          _ResourceId,
          RawData,
          SourceSystem,
          Computer,
          MG,
          ManagementGroupName
  };
  parser (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )