Parser:
  Title: Authentication ASIM filtering parser for OpenSSH sshd
  Version: '0.2.3'
  LastUpdated: Apr 22, 2024
Product:
  Name: OpenSSH
Normalization:
  Schema: Authentication
  Version: '0.1.2'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing OpenSSH server (sshd) sign in logs, collected using Syslog to the ASIM Authentication schema.
Notes: |
  - The parser does not use sshd PAN and preauth events, which are in most cases duplicates of the core sshd events. 
  - Certain preauth events log unsuccessful authentication negotiation, which have security importance but are not authentication events per se, and therefore are not used by this parser.
  - The parser may support other sshd servers, but this has not been tested.  
ParserName: vimAuthenticationSshd
EquivalentBuiltInParser: _Im_Authentication_Sshd
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
  {
      let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))
  {
      T
          | where 
              (isnull(starttime) or TimeGenerated >= starttime) 
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
              and ((array_length(targetappname_has_any) == 0) or 'sshd' in~ (targetappname_has_any))
              and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SyslogMessage, srcipaddr_has_any_prefix)))
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
              and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in) or "Logoff" in~ (eventtype_in))
  // eventresultdetails_in filtering done later in the parser
  // eventresult filtering done later in the parser
  };
      let SyslogProjects = Syslog
          | project
              TimeGenerated,
              Computer,
              SyslogMessage,
              ProcessName,
              ProcessID,
              HostIP,
              Type,
              _ItemId,
              _ResourceId,
              _SubscriptionId;
      //
      // -- Successful login
      let SSHDAccepted=(disabled: bool=false)
  { 
      // -- Parse events with the format "Accepted password for <User> from <IP address> port <port> ssh2"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage startswith 'Accepted'
          | invoke prefilter()
          | parse SyslogMessage with "Accepted password for " TargetUsername: string " from " SrcIpAddr: string " port" SrcPortNumber: int *
          | extend
              EventResult     = 'Success'
              ,
              EventSeverity = 'Informational'
              ,
              EventType     = 'Logon'
              ,
              EventCount    = int(1)
          | project-away SyslogMessage, ProcessName
  };
      //
      // -- Failed login - incorrect password
      let SSHDFailed=(disabled: bool=false)
  {
      // -- Parse events with the format Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]"
      // -- Or a number of such events message repeated <n> times: [ <message> ]
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and (
              SyslogMessage startswith 'Failed' 
              or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')
              )
          | invoke prefilter()
          | parse SyslogMessage with * "Failed " * " for " TargetUsername: string " from " SrcIpAddr: string " port" SrcPortNumber: int *
          | parse SyslogMessage with "message repeated" EventCount: int " times:" * 
          | extend
              EventResult          = 'Failure'
              ,
              EventSeverity      = 'Low' 
              ,
              EventType          = 'Logon'
              ,
              LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')
              ,
              EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password')
              ,
              EventCount         = toint(coalesce(EventCount, 1))
          | project-away SyslogMessage, ProcessName
  };
      //
      // -- Logoff - Timeout
      let SSHDTimeout=(disabled: bool=false)
  {
      // -- Parse events with the format "Timeout, client not responding from user yanivsh 131.107.174.198 port 7623"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage startswith 'Timeout'
          | invoke prefilter()
          | parse-where SyslogMessage with * "user " TargetUsername: string " " SrcIpAddr: string " port " SrcPortNumber: int
          | extend
              EventSeverity    = 'Informational'
              ,
              EventType      = 'Logoff'
              ,
              EventResult    = 'Success'
              ,
              EventCount     = int(1)
          | project-away SyslogMessage, ProcessName
  };
      //
      // -- Failed login - invalid user
      let SSHDInvalidUser=(disabled: bool=false)
  {
      // -- Parse events with the format "Invalid user [<User>] from <IP address> port <port>"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage startswith 'Invalid user'
          | invoke prefilter()
          | parse SyslogMessage with "Invalid user " TargetUsername: string " from " SrcIpAddr: string " port " SrcPortNumber: int
          | parse SyslogMessage with "Invalid user  from " SrcIpAddrNoUser: string " port " SrcPortNumberNoUser: int
          | extend
              EventResult             = 'Failure'
              ,
              EventSeverity         = 'Low'
              ,
              EventType             = 'Logon'
              ,
              EventResultDetails    = 'No such user'
              ,
              EventCount            = int(1)
              ,
              SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser)
              ,
              SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)
          | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser
  };
      //
      // -- Blocked intrusion attempts
      let SSHDABreakInAttemptMappingFailed=(disabled: bool=false)
  {
      // -- Parse events with the format "reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage startswith "reverse mapping checking getaddrinfo for"
          | invoke prefilter()
          | parse SyslogMessage with * " for " Src " [" SrcIpAddr "]" *
          | invoke _ASIM_ResolveSrcFQDN ('Src')
          | extend
              EventResult             = 'Failure'
              ,
              EventType             = 'Logon'
              ,
              DvcAction             = 'Block'
              ,
              TargetUsername        = ''
              ,
              EventSeverity         = 'Medium'
              ,
              EventCount            = int(1)
              ,
              EventResultDetails    = 'Logon violates policy'
              ,
              RuleName              = "Reverse mapping failed"
          | extend
              Rule = RuleName
          | project-away SyslogMessage, ProcessName, Src
  };
      let SSHDABreakInAttemptMappingMismatch=(disabled: bool=false)
  {
      // -- Parse events with the format "Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage has "but this does not map back to the address"
          | invoke prefilter()
          | parse SyslogMessage with "Address " SrcIpAddr: string " maps to " Src: string ", but this" *
          | invoke _ASIM_ResolveSrcFQDN ('Src')
          | extend
              EventResult          = 'Failure'
              ,
              EventType          = 'Logon'
              ,
              DvcAction          = 'Block'
              ,
              TargetUsername     = ''
              ,
              EventSeverity      = 'Medium'
              ,
              EventCount         = int(1)
              ,
              EventResultDetails = 'Logon violates policy'
              ,
              RuleName = "Address to host to address mapping does not map back to address"
          | extend
              Rule = RuleName
          | project-away SyslogMessage, ProcessName, Src
  };
      let SSHDABreakInAttemptNastyPtr=(disabled: bool=false)
  {
      // -- Parse events with the format "Nasty PTR record "<RR>" is set up for <IP Address>, ignoring"
      SyslogProjects
          | where not(disabled)
          | where ProcessName == "sshd" and SyslogMessage startswith "Nasty PTR record"
          | invoke prefilter()
          | parse SyslogMessage with * "set up for " SrcIpAddr: string ", ignoring"
          | extend
              EventResult          = 'Failure'
              ,
              EventType          = 'Logon'
              ,
              DvcAction          = 'Block'
              ,
              TargetUsername     = ''
              ,
              EventSeverity      = 'Medium'
              ,
              EventCount         = int(1)
              ,
              EventResultDetails = 'Logon violates policy'
              ,
              RuleName = "Nasty PTR record set for IP Address"
          | extend
              Rule = RuleName
          | project-away SyslogMessage, ProcessName
  };
      union isfuzzy=false 
          SSHDAccepted (disabled=disabled)
          ,
          SSHDFailed (disabled=disabled)
          ,
          SSHDInvalidUser (disabled=disabled)
          ,
          SSHDTimeout (disabled=disabled)
          ,
          SSHDABreakInAttemptMappingFailed (disabled=disabled)
          ,
          SSHDABreakInAttemptMappingMismatch (disabled=disabled)
          ,
          SSHDABreakInAttemptNastyPtr (disabled=disabled)
      // Post-filtering
      | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
          and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
          and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
          and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
          and (eventresult == "*" or (EventResult == eventresult))
      // mapping ASimMatchingUsername
      | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      // ActorUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
                                  (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
      | invoke _ASIM_ResolveDvcFQDN ('Computer')
      | extend 
          EventVendor             = 'OpenBSD'
          ,
          EventProduct          = 'OpenSSH'
          ,
          DvcOs                 = 'Linux'
          ,
          TargetDvcOs           = 'Linux'
          ,
          LogonProtocol         = 'ssh'
          ,
          TargetAppName         = 'sshd'
          ,
          TargetAppType         = 'Service'
          ,
          EventSubType          = 'Remote'
          ,
          EventSchema           = 'Authentication'
          ,
          EventSchemaVersion    = '0.1.2'
          ,
          EventStartTime        = TimeGenerated
          ,
          EventEndTime          = TimeGenerated
          ,
          TargetUsernameType    = 'Simple'
          ,
          DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", "")
          ,
          TargetAppId           = tostring(ProcessID)
      | project-away Computer, ProcessID, temp*
      | project-rename 
          EventUid                = _ItemId
          ,
          DvcScopeId            = _SubscriptionId
          ,
          DvcId                 = _ResourceId
          ,
          DvcIpAddr             = HostIP
      //
      // -- Aliases
      | extend
          User                    = TargetUsername
          ,
          Dvc                   = DvcHostname
          ,
          Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)
          ,
          TargetDomain          = DvcDomain
          ,
          TargetFQDN            = DvcFQDN
          ,
          TargetDomainType      = DvcDomainType
          ,
          TargetHostname        = DvcHostname
          ,
          TargetDvcId           = DvcId
          ,
          TargetDvcScopeId      = DvcScopeId
          ,
          TargetDvcIdType       = DvcDomainType
          ,
          IpAddr                = DvcIpAddr
          ,
          TargetIpAddr          = DvcIpAddr
  };
    parser
    (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )