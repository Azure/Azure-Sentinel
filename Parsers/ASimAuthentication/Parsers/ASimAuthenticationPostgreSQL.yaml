Parser:
  Title: Authentication ASIM parser for PostgreSQL
  Version: '0.1.4'
  LastUpdated: Apr 17, 2024
Product:
  Name: PostgreSQL
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing PostgreSQL sign in logs to the ASIM Authentication schema.
ParserName: ASimAuthenticationPostgreSQL
EquivalentBuiltInParser: _ASim_Authentication_PostgreSQL
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let PostgreSQLSignInAuthorized=(disabled:bool=false){
  PostgreSQL_CL 
  | where not(disabled)
  | where RawData has 'connection authorized'
  | project-rename 
      EventUid = _ItemId
  | extend
      DvcHostname                 = Computer,
      DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'Connection authorized',
      EventProduct                = 'PostgreSQL',
      EventResult                 = 'Success',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'PostgreSQL',
      TargetUsername              = extract(@'user=([^\s,]+)', 1, RawData),
      TargetUsernameType          = 'Simple'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
      Dvc=Computer,
      User=TargetUsername
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  let PostgreSQLAuthFailure1=(disabled:bool=false){
  PostgreSQL_CL 
  | where not(disabled)
  | where RawData has 'authentication failed'
  | extend 
      DvcHostname                 = Computer,
      DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'User authentication failed',
      EventProduct                = 'PostgreSQL',
      EventResult                 = 'Failure',
      EventResultDetails          = 'No such user or password',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'PostgreSQL',
      TargetUsername              = extract(@'for user\s"(.*?)"', 1, RawData),
      TargetUsernameType          = 'Simple'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
      Dvc  = Computer,
      User = TargetUsername
  // ************************ 
  //      </Aliases> 
  // ************************
  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  };
  let PostgreSQLAuthFailure2=(disabled:bool=false){
  PostgreSQL_CL 
  | where not(disabled)
  | where RawData has_all ('role', 'does', 'not', 'exist')
  | extend 
      DvcHostname                 = Computer,
      DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'Role does not exist',
      EventProduct                = 'PostgreSQL',
      EventResult                 = 'Failure',
      EventResultDetails          = 'No such user or password',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'PostgreSQL',
      TargetUsername              = extract(@'role\s"(.*?)"\sdoes', 1, RawData),
      TargetUsernameType          = 'Simple'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
      Dvc  = Computer,
      User = TargetUsername
  // ************************ 
  //      </Aliases> 
  // ************************
  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  };
  let PostgreSQLAuthFailure3=(disabled:bool=false){
  PostgreSQL_CL 
  | where not(disabled)
  | where RawData has_all ('no', 'entry', 'user')
  | extend 
      DvcHostname                 = Computer,
      DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'No entry for user',
      EventProduct                = 'PostgreSQL',
      EventResult                 = 'Failure',
      EventResultDetails          = 'No such user or password',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'PostgreSQL',
      SrcIpAddr                   = extract(@'host\s"(.*?)",', 1, RawData),
      TargetUsername              = extract(@'user\s"(.*?)",', 1, RawData),
      TargetUsernameType          = 'Simple'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
      Dvc  = Computer,
      User = TargetUsername
  // ************************ 
  //      </Aliases> 
  // ************************
  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  };
  let PostgreSQLDisconnect=(disabled:bool=false){
  PostgreSQL_CL 
  | where not(disabled)
  | where RawData has 'disconnection'
  | extend 
      DvcHostname                 = Computer,
      DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'User session closed',
      EventProduct                = 'PostgreSQL',
      EventResult                 = 'Success',
      EventResultDetails          = 'Session expired',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logoff',
      EventVendor                 = 'PostgreSQL',
      SrcIpAddr                   = extract(@'host=([\d.]+)', 1, RawData),
      TargetUsername              = extract(@'user=([^\s,]+)', 1, RawData),
      TargetUsernameType          = 'Simple'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
      Dvc  = Computer,
      User = TargetUsername
  // ************************ 
  //      </Aliases> 
  // ************************
  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  };
  union isfuzzy=false 
    PostgreSQLSignInAuthorized(disabled = disabled), 
    PostgreSQLAuthFailure1(disabled = disabled), 
    PostgreSQLAuthFailure2(disabled = disabled), 
    PostgreSQLAuthFailure3(disabled = disabled), 
    PostgreSQLDisconnect(disabled = disabled)
