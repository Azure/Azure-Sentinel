Parser:
  Title: Authentication ASIM filtering parser for Okta
  Version: '0.3.1'
  LastUpdated: May 20, 2024
Product:
  Name: Okta
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Okta sign in logs, stored in the OktaV2_CL table, to the ASIM Authentication schema.
ParserName: vimAuthenticationOktaV2
EquivalentBuiltInParser: _Im_Authentication_OktaV2
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let OktaSignin = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false) {
    let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
    let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
    let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
    let emptyOctaV2Table = datatable(
    TimeGenerated: datetime,
    ActorDetailEntry: dynamic,
    ActorDisplayName: string,
    AuthenticationContext: string,
    AuthenticationProvider: string,
    AuthenticationStep: string,
    AuthenticationContextAuthenticationProvider: string,
    AuthenticationContextAuthenticationStep: int,
    AuthenticationContextCredentialProvider: string,
    AuthenticationContextInterface: string,
    AuthenticationContextIssuerId: string,
    AuthenticationContextIssuerType: string,
    DebugData: dynamic,
    DvcAction: string,
    EventResult:string,
    OriginalActorAlternateId: string,
    OriginalClientDevice: string,
    OriginalOutcomeResult: string,
    OriginalSeverity: string,
    OriginalTarget: dynamic,
    OriginalUserId: string,
    OriginalUserType: string,
    Request: dynamic,
    SecurityContextAsNumber: int,
    SecurityContextAsOrg: string,
    SecurityContextDomain: string,
    SecurityContextIsProxy: bool,
    TransactionDetail: dynamic,
    TransactionId: string,
    TransactionType: string
  )[];
      // https://developer.okta.com/docs/reference/api/event-types/#catalog
      let OktaV2 = union isfuzzy=true emptyOctaV2Table, OktaV2_CL
          | where not(disabled) 
          | extend
              EventOriginalType=column_ifexists('EventOriginalType', "") 
              ,
              OriginalActorAlternateId = column_ifexists('OriginalActorAlternateId', "")
              ,
              ActorUsername=column_ifexists('ActorUsername', "")
              ,
              SrcIpAddr = column_ifexists('SrcIpAddr', "")
          | where 
              (isnull(starttime) or TimeGenerated >= starttime) 
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or ActorUsername has_any (username_has_any))
              and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
              and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
              // eventtype_in filtering done later in the parser
              and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
          // eventresult filtering done later in the parser
          // ************************************************************************* 
          //       </Prefiltering>
          // ************************************************************************* 
          | where EventOriginalType in (OktaSigninEvents)
          | extend ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)
          | extend 
              EventProduct='Okta'
              ,
              EventSchema = 'Authentication'
              ,
              EventVendor='Okta'
              ,
              EventCount=int(1)
              ,
              EventSchemaVersion='0.1.0'
              ,
              EventStartTime=TimeGenerated
              ,
              EventEndTime=TimeGenerated
              ,
              EventType=iff(EventOriginalType hassuffix 'start', 'Logon', 'Logoff')       
              ,
              TargetSessionId=column_ifexists('ActorSessionId', "")
              ,
              TargetUserId= column_ifexists('ActorUserId', "")
              ,
              TargetUsername=ActorUsername
              ,
              TargetUserType=column_ifexists('ActorUserType', "")
              ,
              TargetUserIdType=column_ifexists('ActorUserIdType', "")
              ,
              TargetUsernameType=column_ifexists('ActorUsernameType', "")
              //** extend non-normalized fields to be projected-away 
              ,
              //
              ActorDetailEntry,
              ActorDisplayName
              ,
              AuthenticationContextAuthenticationProvider
              ,
              AuthenticationContextAuthenticationStep,
              AuthenticationContextCredentialProvider
              ,
              AuthenticationContextInterface
              ,
              AuthenticationContextIssuerId
              ,
              AuthenticationContextIssuerType
              ,
              DebugData,
              DvcAction
              ,
              OriginalActorAlternateId
              ,
              OriginalClientDevice
              ,
              OriginalOutcomeResult
              ,
              OriginalSeverity
              ,
              OriginalTarget,
              OriginalUserId
              ,
              OriginalUserType
              ,
              Request,
              SecurityContextAsNumber,
              SecurityContextAsOrg
              ,
              SecurityContextDomain
              ,
              SecurityContextIsProxy
              ,
              TransactionDetail,
              TransactionId
              ,
              TransactionType
          // Filtering on 'eventresult' and 'eventtype_in'
          | where (eventresult == "*" or (EventResult == eventresult))
              and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
          // mapping ASimMatchingUsername
          | extend
              temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
              ,
              temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
          | extend ASimMatchingUsername = case
              (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                      "Both",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      temp_isMatchActorUsername,
                                      "ActorUsername",
                                      "No match"
                                  )
          // ** Aliases
          | extend 
              User=TargetUsername
              ,
              Dvc=EventVendor
              ,
              IpAddr=SrcIpAddr
          | project-away
              ActorDetailEntry,
              ActorDisplayName
              ,
              AuthenticationContextAuthenticationProvider
              ,
              AuthenticationContextAuthenticationStep,
              AuthenticationContextCredentialProvider
              ,
              AuthenticationContextInterface
              ,
              AuthenticationContextIssuerId
              ,
              AuthenticationContextIssuerType
              ,
              DebugData,
              DvcAction
              ,
              OriginalActorAlternateId
              ,
              OriginalClientDevice
              ,
              OriginalOutcomeResult
              ,
              OriginalSeverity
              ,
              OriginalTarget,
              OriginalUserId
              ,
              OriginalUserType
              ,
              Request,
              SecurityContextAsNumber,
              SecurityContextAsOrg
              ,
              SecurityContextDomain
              ,
              SecurityContextIsProxy
              ,
              TransactionDetail,
              TransactionId
              ,
              TransactionType;
      OktaV2
  };
  OktaSignin (
      starttime=starttime,
      endtime=endtime,
      username_has_any=username_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
  )
