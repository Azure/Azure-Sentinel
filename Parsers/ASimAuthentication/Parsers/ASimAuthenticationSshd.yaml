Parser:
  Title: Authentication ASIM parser for OpenSSH sshd
  Version: '0.2.2'
  LastUpdated: Sept 18, 2023
Product:
  Name: OpenSSH
Normalization:
  Schema: Authentication
  Version: '0.1.2'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing OpenSSH server (sshd) sign in logs, collected using Syslog to the ASIM Authentication schema.
Notes: |
  - The parser does not use sshd PAN and preauth events, which are in most cases duplicates of the core sshd events. 
  - Certain preauth events log unsuccessful authentication negotiation, which have security importance but are not authentication events per se, and therefore are not used by this parser.
  - The parser may support other sshd servers, but this has not been tested. 
ParserName: ASimAuthenticationSshd
EquivalentBuiltInParser: _ASim_Authentication_Sshd
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (disabled:bool=false) {
    let SyslogProjects = Syslog | project TimeGenerated, Computer, SyslogMessage, ProcessName, ProcessID, HostIP, Type, _ItemId, _ResourceId, _SubscriptionId;
    //
    // -- Successful login
    let SSHDAccepted=(disabled:bool=false) { 
        // -- Parse events with the format "Accepted password for <User> from <IP address> port <port> ssh2"
        SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Accepted'
        | parse SyslogMessage with "Accepted password for " TargetUsername:string " from " SrcIpAddr:string " port" SrcPortNumber:int *
        | extend
            EventCount    = int(1),
            EventResult   = 'Success',
            EventSeverity = 'Informational',
            EventType     = 'Logon'
        | project-away SyslogMessage, ProcessName
    };
    //
    // -- Failed login - incorrect password
    let SSHDFailed=(disabled:bool=false) {
        // -- Parse events with the format "Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]"
        // -- Or a number of such events message repeated <n> times: [ <message> ]
        SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and (
            SyslogMessage startswith 'Failed' 
            or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')
        )
        | parse SyslogMessage with * "Failed " * " for " TargetUsername:string " from " SrcIpAddr:string " port" SrcPortNumber:int *
        | parse SyslogMessage with "message repeated" EventCount:int " times:" * 
        | extend
            EventCount         = toint(coalesce(EventCount,1)),
            EventResult        = 'Failure',
            EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password'),
            EventSeverity      = 'Low' ,
            EventType          = 'Logon',
            LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')
        | project-away SyslogMessage, ProcessName
    };
    //
    // -- Logoff - Timeout
    let SSHDTimeout=(disabled:bool=false) {
        // -- Parse events with the format "Timeout, client not responding from user yanivsh 131.107.174.198 port 7623"
        SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Timeout'
        | parse-where SyslogMessage with * "user " TargetUsername:string " " SrcIpAddr:string " port " SrcPortNumber:int
        | extend
            EventCount     = int(1),
            EventResult    = 'Success',
            EventSeverity  = 'Informational',
            EventType      = 'Logoff'
        | project-away SyslogMessage, ProcessName
    };
    //
    // -- Failed login - invalid user
    let SSHDInvalidUser=(disabled:bool=false) {
        // -- Parse events with the format "Invalid user [<User>] from <IP address> port <port>"
        SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Invalid user'
        | parse SyslogMessage with "Invalid user " TargetUsername:string " from " SrcIpAddr:string " port " SrcPortNumber:int
        | parse SyslogMessage with "Invalid user  from " SrcIpAddrNoUser:string " port " SrcPortNumberNoUser:int
        | extend
            EventCount            = int(1),
            EventResult           = 'Failure',
            EventResultDetails    = 'No such user',
            EventSeverity         = 'Low',
            EventType             = 'Logon',
            SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser),
            SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)
        | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser
    };
    //
    // -- Blocked intrusion attempts
    let SSHDABreakInAttemptMappingFailed=(disabled:bool=false) {
        // -- Parse events with the format "reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!"
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith "reverse mapping checking getaddrinfo for"
        | parse SyslogMessage with * " for " Src " [" SrcIpAddr "]" *
        | invoke _ASIM_ResolveSrcFQDN ('Src')
        | extend
            DvcAction             = 'Block',
            EventCount            = int(1),
            EventResult           = 'Failure',
            EventResultDetails    = 'Logon violates policy',
            EventSeverity         = 'Medium',
            EventType             = 'Logon',
            RuleName              = "Reverse mapping failed",    
            TargetUsername        = ''
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName, Src
    };
    let SSHDABreakInAttemptMappingMismatch=(disabled:bool=false) {
        // -- Parse events with the format "Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!"
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage has "but this does not map back to the address"
        | parse SyslogMessage with "Address " SrcIpAddr:string " maps to " Src:string ", but this" *
        | invoke _ASIM_ResolveSrcFQDN ('Src')
        | extend
            DvcAction          = 'Block',
            EventCount         = int(1),
            EventResult        = 'Failure',
            EventResultDetails = 'Logon violates policy',
            EventSeverity      = 'Medium',
            EventType          = 'Logon',
            RuleName           = "Address to host to address mapping does not map back to address",
            TargetUsername     = ''
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName, Src
    };
    let SSHDABreakInAttemptNastyPtr=(disabled:bool=false) {
        // -- Parse events with the format "Nasty PTR record "<RR>" is set up for <IP Address>, ignoring"
    SyslogProjects | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith "Nasty PTR record"
        | parse SyslogMessage with * "set up for " SrcIpAddr:string ", ignoring"
        | extend
            DvcAction          = 'Block',
            EventCount         = int(1),
            EventResult        = 'Failure',
            EventResultDetails = 'Logon violates policy',
            EventSeverity      = 'Medium',
            EventType          = 'Logon',
            RuleName           = "Nasty PTR record set for IP Address",
            TargetUsername     = ''
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName
    };
    union isfuzzy=false 
        SSHDAccepted (disabled=disabled),
        SSHDFailed (disabled=disabled),
        SSHDInvalidUser (disabled=disabled),
        SSHDTimeout (disabled=disabled),
        SSHDABreakInAttemptMappingFailed (disabled=disabled),
        SSHDABreakInAttemptMappingMismatch (disabled=disabled),
        SSHDABreakInAttemptNastyPtr (disabled=disabled)
    | invoke _ASIM_ResolveDvcFQDN ('Computer')
    | extend 
        DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", ""),
        DvcOs                 = 'Linux',
        EventEndTime          = TimeGenerated,
        EventProduct          = 'OpenSSH',
        EventSchema           = 'Authentication',
        EventSchemaVersion    = '0.1.2',
        EventStartTime        = TimeGenerated,
        EventSubType          = 'Remote',
        EventVendor           = 'OpenBSD',
        LogonProtocol         = 'ssh',
        TargetAppId           = tostring(ProcessID),
        TargetAppName         = 'sshd',
        TargetAppType         = 'Service',
        TargetDvcOs           = 'Linux',
        TargetUsernameType    = 'Simple'
    | project-away Computer, ProcessID
    | project-rename 
        DvcId                 = _ResourceId,
        DvcIpAddr             = HostIP,
        DvcScopeId            = _SubscriptionId,
        EventUid              = _ItemId
    //
    // -- Aliases
    | extend
        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr),
        Dvc                   = DvcHostname,
        IpAddr                = DvcIpAddr,
        TargetDomain          = DvcDomain,
        TargetDomainType      = DvcDomainType,
        TargetDvcId           = DvcId,
        TargetDvcIdType       = DvcDomainType,
        TargetDvcScopeId      = DvcScopeId,
        TargetFQDN            = DvcFQDN,
        TargetHostname        = DvcHostname,
        TargetIpAddr          = DvcIpAddr,
        User                  = TargetUsername
    };
    parser (
        disabled=disabled
    )