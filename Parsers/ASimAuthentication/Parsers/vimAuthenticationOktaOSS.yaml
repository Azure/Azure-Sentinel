Parser:
  Title: Authentication ASIM filtering parser for Okta
  Version: '0.3.0'
  LastUpdated: May 20, 2024
Product:
  Name: Okta
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Okta sign in logs, stored in the  Okta_CL table to the ASIM Authentication schema.
ParserName: vimAuthenticationOktaSSO
EquivalentBuiltInParser: _Im_Authentication_OktaSSO
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let OktaSignin = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false) {
    let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
    let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
    let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
    let emptyOctV1Table = datatable(TimeGenerated: datetime)[];
      // https://developer.okta.com/docs/reference/api/event-types/#catalog
      let OktaV1 = union isfuzzy=true emptyOctV1Table, Okta_CL 
          | where not(disabled)
          // ************************************************************************* 
          //       <Prefiltering>
          // *************************************************************************
          | extend 
              outcome_result_s=column_ifexists('outcome_result_s', ""),
              eventType_s=column_ifexists('eventType_s', ""),
              legacyEventType_s=column_ifexists('legacyEventType_s', ""),
              client_geographicalContext_geolocation_lat_d = column_ifexists('client_geographicalContext_geolocation_lat_d', ""),
              client_geographicalContext_geolocation_lon_d = column_ifexists('client_geographicalContext_geolocation_lon_d', ""),
              actor_alternateId_s = column_ifexists('actor_alternateId_s', ""),
              client_ipAddress_s = column_ifexists('client_ipAddress_s', "")
          | where 
              (isnull(starttime) or TimeGenerated >= starttime) 
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or actor_alternateId_s has_any (username_has_any))
              and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
              and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(client_ipAddress_s, srcipaddr_has_any_prefix)))
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
              // eventtype_in filtering done later in the parser
              and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
          // eventresult filtering done later in the parser
          // ************************************************************************* 
          //       </Prefiltering>
          // ************************************************************************* 
          | where eventType_s in (OktaSigninEvents)
          | extend 
              EventProduct='Okta'
              ,
              EventVendor='Okta'
              ,
              EventSchema = 'Authentication'
              ,
              EventCount=int(1)
              ,
              EventSchemaVersion='0.1.0'
              ,
              EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')
              ,
              EventStartTime=TimeGenerated
              ,
              EventEndTime=TimeGenerated
              ,
              EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')
              ,
              EventSubType=legacyEventType_s
              ,
              EventMessage=column_ifexists('displayMessage_s', "")
              ,
              EventOriginalResultDetails=column_ifexists('outcome_reason_s', "")
              ,
              EventOriginalUid = column_ifexists('uuid_g', "")
              ,
              TargetUserIdType='OktaId'
              ,
              TargetUsernameType='UPN'
              ,
              TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', "")
              ,
              TargetUserId=column_ifexists('actor_id_s', "")
              ,
              TargetUsername=column_ifexists('actor_alternateId_s', "")
              ,
              TargetUserType=column_ifexists('actor_type_s', "")
              ,
              SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)
              ,
              SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)
              ,
              SrcDvcOs=column_ifexists('client_userAgent_os_s', "")
              ,
              SrcIsp=column_ifexists('securityContext_isp_s', "")
              ,
              SrcGeoCity=column_ifexists('client_geographicalContext_city_s', "")
              ,
              SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', "")
              ,
              SrcIpAddr = column_ifexists('client_ipAddress_s', "")
              ,
              ActingAppName=column_ifexists('client_userAgent_browser_s', "")
              ,
              ActingAppType="Browser"
              ,
              LogonMethod=column_ifexists('authenticationContext_credentialType_s', "")
              ,
              HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', "")
          // Filtering on 'eventresult' and 'eventtype_in'
          | where (eventresult == "*" or (EventResult == eventresult))
              and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
          // mapping ASimMatchingUsername
          | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
          // ActorUsername not coming from source. Hence, not mapped.
          | extend ASimMatchingUsername = case
              (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
          // ** Aliases
          | extend 
              User=TargetUsername
              ,
              Dvc=EventVendor
              ,
              IpAddr=SrcIpAddr
          | project-away *_s, *_d, *_b, *_g, *_t;
      OktaV1
  };
  OktaSignin (
      starttime=starttime,
      endtime=endtime,
      username_has_any=username_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
  )
