Parser:
  Title: Authentication ASIM parser for Illumio SaaS Core
  Version: '0.3.0'
  LastUpdated: Oct 1, 2024
Product:
  Name: Illumio
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
  - Title: ASIM Authentication Schema
    Link: https://aka.ms/ASimAuthenticationDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Illumio sign in logs, stored in the Illumio_Auditable_Events_CL table, to the ASIM Authentication schema. 
ParserName: vimAuthenticationIllumioSaaSCore
EquivalentBuiltInParser: _Im_Authentication_IllumioSaaSCore
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let EventTypeLookup = datatable(
        event_type: string, // what Illumio sends
        EventType: string, // an enumerated list [ Logon, Logoff, Elevate ] event type
        EventResultDetails: string,
        EventResult: string
    )
    [
        'user.authenticate', 'Logon', 'Other', 'Success',
        'user.login', 'Logon', 'Other', 'Success',
        'user.logout', 'Logoff', 'Other', 'Success',
        'user.sign_in', 'Logon', 'Other', 'Success',
        'user.sign_out', 'Logoff', 'Other', 'Success',
        'user.use_expired_password', 'Logon', 'Password expired', 'Success'
    ];
    let user_events = dynamic(['user.sigin', 'user.login', 'user.sign_out', 'user.logout', 'user.authenticate', 'user.use_expired_password']);    
    let parser=(
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        username_has_any: dynamic = dynamic([]),
        targetappname_has_any: dynamic = dynamic([]),
        srcipaddr_has_any_prefix: dynamic = dynamic([]),
        srchostname_has_any: dynamic = dynamic([]),
        eventtype_in: dynamic = dynamic([]),
        eventresultdetails_in: dynamic = dynamic([]),
        eventresult: string = '*',
        disabled: bool=false
    ) {
      Illumio_Auditable_Events_CL
      | where not(disabled) and event_type in (user_events) // limited to user signin, login, logoff, signoff events only
      | where
          (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime) 
          and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
          and (array_length(srchostname_has_any) == 0)  // srchostname_has_any not available in source                    
      | extend 
            EventProduct='Core'
            ,
            EventVendor='Illumio'
            ,
            EventSchema = 'Authentication'
            ,
            EventCount=int(1)
            ,
            EventSchemaVersion='0.1.3'    
            ,
            EventOriginalUid = href
      | lookup EventTypeLookup on event_type //fetch EventType, EventResultDetails, EventResult
      | where
          (eventresult == "*" or (EventResult == eventresult)) 
          and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
      | extend              
            EventStartTime=TimeGenerated
            ,
            EventEndTime=TimeGenerated
            ,                            
            TargetUsername = case(                  
                isnotnull(created_by.user), created_by.user.username,                  
                "Unknown"
            ),
            TargetUsernameType = "Simple",
            EventUid = _ItemId,
            SrcIpAddr = iff(action.src_ip == 'FILTERED', "", action.src_ip)        
      // * prefiltering            
      | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
            and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
            and ((array_length(eventtype_in) == 0) or EventType has_any (eventtype_in))
      // * prefiltering
      // ** Aliases
      | extend 
          Dvc=EventVendor
          ,
          IpAddr=SrcIpAddr
          ,
          User = TargetUsername
      | project-away 
        TenantId,
        href,
        pce_fqdn,
        created_by,
        event_type,
        status,
        severity,
        action,
        resource_changes,
        notifications,
        version      
      };
      parser(starttime=starttime,
            endtime=endtime,
            username_has_any=username_has_any,
            targetappname_has_any=targetappname_has_any,
            srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
            srchostname_has_any=srchostname_has_any,
            eventtype_in=eventtype_in,
            eventresultdetails_in=eventresultdetails_in,
            eventresult=eventresult,
            disabled=disabled)