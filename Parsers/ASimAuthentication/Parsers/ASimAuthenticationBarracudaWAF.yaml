Parser:
  Title: ASIM Authentication parser for Barracuda WAF
  Version: '0.2.1'
  LastUpdated: Jun 18, 2024
Product:
  Name: Barracuda WAF
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Logs type Description in Barracuda WAF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports normalizing the Barracuda WAF logs ingested in 'barracuda_CL' table to the ASIM authentication normalized schema.
ParserName: ASimAuthenticationBarracudaWAF
EquivalentBuiltInParser: _ASim_Authentication_BarracudaWAF
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let barracudaSchema = datatable(
      LogType_s: string,
      UnitName_s: string,
      EventName_s: string,
      DeviceReceiptTime_s: string,
      HostIP_s: string,
      host_s: string,
      LoginIP_s: string,
      Severity_s: string,
      LoginPort_d: real,
      AdminName_s: string,
      EventMessage_s: string,
      TimeTaken_d: real,
      TenantId: string,
      Message: string,
      SourceSystem: string,
      _ResourceId: string,
      RawData: string,
      Computer: string,
      MG: string,
      ManagementGroupName: string,
      SourceIP: string
  )[];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventTypeLookup = datatable (
      EventName_s: string,
      EventType_lookup: string,
      EventResult: string
  )
      [
      "LOGIN", "Logon", "Success",
      "UNSUCCESSFUL_LOGIN", "Logoff", "Failure",
      "LOGOUT", "Logoff", "Success"
  ];
  let EventResultDetailsLookup = datatable (
      Reason: string,
      EventResultDetails: string
  )
      [
      "Invalid Username/Password", "Incorrect password",
      "Account Lockout", "User locked",
      "Expired or Disabled Accounts", "User disabled",
      "IP Blocking", "Logon violates policy",
      "Session Timeouts", "Session expired",
      "CAPTCHA Verification", "Other"
  ];
  let parser = (disabled: bool=false)
  {
  let BarracudaCustom = 
      union isfuzzy=true
          barracudaSchema,
          barracuda_CL
      | where not(disabled)
          and (LogType_s == "AUDIT")
          and (EventName_s in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
      | parse trim(@'[^\w(")]+', EventMessage_s) with * "Reason=" Reason:string
      | extend Reason = trim(@'(")', Reason)
      | lookup EventResultDetailsLookup on Reason
      | lookup EventTypeLookup on EventName_s
      | extend 
          EventType = EventType_lookup,
          severity = toint(Severity_s)
      | lookup SeverityLookup on severity
      | extend
          Dvc = UnitName_s,
          EventCount = toint(1),
          EventProduct = "WAF",
          EventSchema = "Authentication",
          EventSchemaVersion = "0.1.3",
          EventVendor = "Barracuda"
      | extend
          EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))),
          SrcPortNumber = toint(LoginPort_d),
          DvcIpAddr = HostIP_s,
          SrcIpAddr = LoginIP_s,
          DvcHostname = host_s,
          ActorUsername = AdminName_s
      | extend
          ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
          ActorUserType = iff(isnotempty(ActorUsername), "Admin", "")
      | extend
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          EventEndTime = EventStartTime
      | project-away
          *_s,
          *_d,
          severity,
          EventType_lookup,
          TenantId,
          Message,
          SourceSystem,
          _ResourceId,
          RawData,
          Computer,
          MG,
          ManagementGroupName,
          SourceIP,
          Reason;
    BarracudaCustom
  };
  parser(disabled=disabled)