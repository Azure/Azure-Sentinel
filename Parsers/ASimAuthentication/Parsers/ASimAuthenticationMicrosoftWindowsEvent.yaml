Parser:
  Title: Authentication ASIM parser for Windows Security Events
  Version: '0.2.1'
  LastUpdated: Oct 15, 2024
Product:
  Name: Windows Security Events
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Windows Authentication events (4624, 4625, 4634, and 4647), collected either by the Log Analytics Agent or the Azure Monitor Agent, into either the WindowsEvent (WEF) or SecurityEvent tables, to the ASIM Authentication schema.
ParserName: ASimAuthenticationMicrosoftWindowsEvent
EquivalentBuiltInParser: _ASim_Authentication_MicrosoftWindowsEvent
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let LogonEvents=dynamic([4624, 4625]);
  let LogoffEvents=dynamic([4634, 4647]);
  let LogonTypes=datatable(LogonType: int, EventSubType: string)[
      2, 'Interactive',
      3, 'Remote',
      4, 'System',
      5, 'Service',
      7, 'Interactive',
      8, 'NetworkCleartext',
      9, 'AssumeRole',
      10, 'RemoteInteractive',
      11, 'Interactive'
  ];
  // https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/quick-reference-troubleshooting-netlogon-error-codes/ba-p/256000
  let LogonStatus=datatable 
      (
      EventStatus: string,
      EventOriginalResultDetails: string,
      EventResultDetails: string
  )[
      '0x80090325', 'SEC_E_UNTRUSTED_ROOT', 'Other',
      '0xc0000064', 'STATUS_NO_SUCH_USER', 'No such user or password',
      '0xc000006f', 'STATUS_INVALID_LOGON_HOURS', 'Logon violates policy',
      '0xc0000070', 'STATUS_INVALID_WORKSTATION', 'Logon violates policy',
      '0xc0000071', 'STATUS_PASSWORD_EXPIRED', 'Password expired',
      '0xc0000072', 'STATUS_ACCOUNT_DISABLED', 'User disabled',
      '0xc0000133', 'STATUS_TIME_DIFFERENCE_AT_DC', 'Other',
      '0xc000018d', 'STATUS_TRUSTED_RELATIONSHIP_FAILURE', 'Other',
      '0xc0000193', 'STATUS_ACCOUNT_EXPIRED', 'Account expired',
      '0xc0000380', 'STATUS_SMARTCARD_WRONG_PIN', 'Other',
      '0xc0000381', 'STATUS_SMARTCARD_CARD_BLOCKED', 'Other',
      '0xc0000382', 'STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED', 'Other',
      '0xc0000383', 'STATUS_SMARTCARD_NO_CARD', 'Other',
      '0xc0000384', 'STATUS_SMARTCARD_NO_KEY_CONTAINER', 'Other',
      '0xc0000385', 'STATUS_SMARTCARD_NO_CERTIFICATE', 'Other',
      '0xc0000386', 'STATUS_SMARTCARD_NO_KEYSET', 'Other',
      '0xc0000387', 'STATUS_SMARTCARD_IO_ERROR', 'Other',
      '0xc0000388', 'STATUS_DOWNGRADE_DETECTED', 'Other',
      '0xc0000389', 'STATUS_SMARTCARD_CERT_REVOKED', 'Other',
      '0x80090302', 'SEC_E_UNSUPPORTED_FUNCTION', 'Other',
      '0x80090308', 'SEC_E_INVALID_TOKEN', 'Other',
      '0x8009030e', 'SEC_E_NO_CREDENTIALS', 'Other',
      '0xc0000008', 'STATUS_INVALID_HANDLE', 'Other',
      '0xc0000017', 'STATUS_NO_MEMORY', 'Other',
      '0xc0000022', 'STATUS_ACCESS_DENIED', 'Other',
      '0xc0000034', 'STATUS_OBJECT_NAME_NOT_FOUND', 'Other',
      '0xc000005e', 'STATUS_NO_LOGON_SERVERS', 'Other',
      '0xc000006a', 'STATUS_WRONG_PASSWORD', 'Incorrect password',
      '0xc000006d', 'STATUS_LOGON_FAILURE', 'Other',
      '0xc000006e', 'STATUS_ACCOUNT_RESTRICTION', 'Logon violates policy',
      '0xc0000073', 'STATUS_NONE_MAPPED', 'Other',
      '0xc00000fe', 'STATUS_NO_SUCH_PACKAGE', 'Other',
      '0xc000009a', 'STATUS_INSUFFICIENT_RESOURCES', 'Other',
      '0xc00000dc', 'STATUS_INVALID_SERVER_STATE', 'Other',
      '0xc0000106', 'STATUS_NAME_TOO_LONG', 'Other',
      '0xc000010b', 'STATUS_INVALID_LOGON_TYPE', 'Logon violates policy',
      '0xc000015b', 'STATUS_LOGON_TYPE_NOT_GRANTED', 'Logon violates policy',
      '0xc000018b', 'STATUS_NO_TRUST_SAM_ACCOUNT', 'Logon violates policy',
      '0xc0000224', 'STATUS_PASSWORD_MUST_CHANGE', 'Other',
      '0xc0000234', 'STATUS_ACCOUNT_LOCKED_OUT', 'User locked',
      '0xc00002ee', 'STATUS_UNFINISHED_CONTEXT_DELETED', 'Other'
  ];
  let WinLogon=(disabled: bool=false) { 
      WindowsEvent 
      | where not(disabled)
      | where Provider == 'Microsoft-Windows-Security-Auditing'
      | where EventID in (LogonEvents) or EventID in (LogoffEvents)
      | project EventData, EventID, EventOriginId, Computer, TimeGenerated, _ItemId, Type
      | extend    
          ActingProcessCreationTime = EventData.ProcessCreationTime,
          ActingProcessId           = tostring(toint(EventData.ProcessId)),
          ActingProcessName         = tostring(EventData.ProcessName),
          ActorSessionId            = tostring(EventData.SubjectLogonId),
          ActorUserId               = tostring(EventData.SubjectUserSid),
          ActorUsername             = tostring(iff (EventData.SubjectDomainName in ('-', ''), EventData.SubjectUserName, strcat(EventData.SubjectDomainName, @"\", EventData.SubjectUserName))),
          EventProduct              = "Security Events",
          LogonGuid                 = tostring(EventData.LogonGuid),
          LogonProtocol             = tostring(EventData.AuthenticationPackageName),
          LogonType                 = toint(EventData.LogonType),
          SrcHostname            = tostring(EventData.WorkstationName),
          SrcIpAddr              = tostring(EventData.IpAddress),
          Status                    = tostring(EventData.Status),
          SubStatus                 = tostring(EventData.SubStatus),
          TargetDomainName          = tostring(EventData.TargetDomainName),
          TargetPortNumber          = toint(EventData.IpPort),
          TargetSessionId           = tostring(EventData.TargetLogonId),
          TargetUserId              = tostring(EventData.TargetUserSid),
          TargetUsername            = tostring(iff (EventData.TargetDomainName in ('-', ''), EventData.TargetUserName, strcat(EventData.TargetDomainName, @"\", EventData.TargetUserName)))
      | extend 
          EventStatus = iff(SubStatus == '0x0', Status, SubStatus)
      // -- creating EventMessage matching EventMessage in SecurityEvent table
      | extend 
          EventMessage = case(
                    EventID == 4624,
                    "4624 - An account was successfully logged on.",
                    EventID == 4625,
                    "4625 - An account failed to log on.",
                    EventID == 4634,
                    "4634 - An account was logged off.", 
                    "4647 - User initiated logoff."
                ),
          EventResult = iff(EventID == 4625, 'Failure', 'Success')
      | project-rename 
          EventOriginalType = EventID,
          EventOriginalUid  = EventOriginId,   
          EventUid          = _ItemId,       
          TargetDvcHostname = Computer
      | extend 
          ActorUserIdType    = 'SID',
          ActorUsernameType  = iff(EventData.SubjectDomainName in ('-', ''), 'Simple', 'Windows'),
          EventCount         = int(1),
          EventEndTime       = TimeGenerated,
          EventSchema        = 'Authentication',
          EventSchemaVersion = '0.1.3',
          EventStartTime     = TimeGenerated,
          EventStatus        = iff(SubStatus == '0x0', Status, SubStatus),
          EventType          = iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon'),
          EventVendor        = 'Microsoft',
          SrcDvcOs           = 'Windows',
          TargetUserIdType   = 'SID',
          TargetUsernameType = iff(TargetDomainName in ('-', ''), 'Simple', 'Windows')
      | extend
          ActorUserType  = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId),
          TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId),
          EventOriginalType = tostring(EventOriginalType)
      | lookup LogonStatus on EventStatus
      | lookup LogonTypes on LogonType
      /// ** Aliases 
      | extend
          Dvc         = SrcHostname,
          LogonTarget = TargetDvcHostname,
          User        = TargetUsername,
          IpAddr   = SrcIpAddr
      | project-away
          EventData,
          LogonGuid,
          EventStatus,
          LogonType,
          Status,
          SubStatus,
          TargetDomainName,
          TargetDvcHostname
  };
  let SecEventLogon=(disabled: bool=false) {
      SecurityEvent 
      | where not(disabled)
      | where EventID in (LogonEvents) or 
          EventID in (LogoffEvents)
      | project
          SubjectLogonId,
          SubjectUserSid,
          Activity,
          EventID,
          EventOriginId,
          AuthenticationPackageName,
          WorkstationName,
          IpAddress,
          Computer,
          TargetLogonId,
          TargetUserSid,
          SubjectDomainName,
          SubjectUserName,
          SubjectAccount,
          TimeGenerated,
          SubStatus,
          TargetDomainName,
          TargetUserName,
          AccountType,
          TargetAccount,
          Status,
          LogonType,
          Type
      | project-rename 
          ActorSessionId    = SubjectLogonId,
          ActorUserId       = SubjectUserSid,
          EventMessage      = Activity,
          EventOriginalType = EventID,
          EventOriginalUid  = EventOriginId,
          LogonProtocol     = AuthenticationPackageName,
          SrcHostname    = WorkstationName,
          SrcIpAddr      = IpAddress,
          TargetDvcHostname = Computer,
          TargetSessionId   = TargetLogonId,
          TargetUserId      = TargetUserSid
      | extend 
          ActorUserIdType    = 'SID',
          ActorUsername      = iff (SubjectDomainName in ('-', ''), SubjectUserName, SubjectAccount),
          ActorUsernameType  = iff(SubjectDomainName in ('-', ''), 'Simple', 'Windows'),
          EventCount         = int(1),
          EventEndTime       = TimeGenerated,
          EventProduct       = "Security Events",
          EventResult        = iff(EventOriginalType == 4625, 'Failure', 'Success'),
          EventSchema        = 'Authentication',
          EventSchemaVersion = '0.1.0',
          EventStartTime     = TimeGenerated,
          EventStatus        = iff(SubStatus == '0x0', Status, SubStatus),
          EventType          = iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon'),
          EventVendor        = 'Microsoft',
          SrcDvcOs           = 'Windows',
          TargetUserIdType   = 'SID',
          TargetUsername     = iff (TargetDomainName in ('-', ''), trim(@'\\', TargetUserName), trim(@'\\', TargetAccount)),
          TargetUsernameType = iff (TargetDomainName in ('-', ''), 'Simple', 'Windows')
      | project-away TargetUserName, AccountType
      | extend
          ActorUserType      = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId),
          TargetUserType     = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId),
          EventOriginalType  = tostring(EventOriginalType)
      | lookup LogonStatus on EventStatus
      | lookup LogonTypes on LogonType
      /// ** Aliases 
      | extend
          Dvc         = SrcHostname,
          LogonTarget = TargetDvcHostname,
          User        = TargetUsername,
          IpAddr   = SrcIpAddr
      | project-away
          EventStatus,
          LogonType,
          Status,
          SubStatus,
          SubjectAccount,
          SubjectDomainName,
          SubjectUserName,
          EventStatus,
          TargetAccount,
          TargetDomainName,
          TargetDvcHostname
  };
  union isfuzzy=true 
      SecEventLogon(disabled=disabled), 
      WinLogon(disabled=disabled)