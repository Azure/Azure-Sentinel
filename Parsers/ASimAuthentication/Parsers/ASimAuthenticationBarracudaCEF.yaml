Parser:
  Title: ASIM Authentication parser for Barracuda CEF
  Version: '0.2.1'
  LastUpdated: Jun 18, 2024
Product:
  Name: Barracuda CEF
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Logs type Description in Barracuda CEF
  Link: https://campus.barracuda.com/product/webapplicationfirewall/doc/78810008/types-of-logs/
Description: |
  This ASIM parser supports normalizing the Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM authentication normalized schema.
ParserName: ASimAuthenticationBarracudaCEF
EquivalentBuiltInParser: _ASim_Authentication_BarracudaCEF
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let barracudaSchema = datatable(
      LogType_s: string,
      UnitName_s: string,
      EventName_s: string,
      DeviceReceiptTime_s: string,
      HostIP_s: string,
      host_s: string,
      LoginIP_s: string,
      Severity_s: string,
      LoginPort_d: real,
      AdminName_s: string,
      EventMessage_s: string,
      TimeTaken_d: real,
      TenantId: string,
      Message: string,
      SourceSystem: string,
      _ResourceId: string,
      RawData: string,
      Computer: string,
      MG: string,
      ManagementGroupName: string,
      SourceIP: string
  )[];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventTypeLookup = datatable (
      EventName_s: string,
      EventType_lookup: string,
      EventResult: string
  )
      [
      "LOGIN", "Logon", "Success",
      "UNSUCCESSFUL_LOGIN", "Logoff", "Failure",
      "LOGOUT", "Logoff", "Success"
  ];
  let EventResultDetailsLookup = datatable (
      Reason: string,
      EventResultDetails: string
  )
      [
      "Invalid Username/Password", "Incorrect password",
      "Account Lockout", "User locked",
      "Expired or Disabled Accounts", "User disabled",
      "IP Blocking", "Logon violates policy",
      "Session Timeouts", "Session expired",
      "CAPTCHA Verification", "Other"
  ];
  let parser = (disabled: bool=false) {
      let BarracudaCEF = 
          CommonSecurityLog
          | where not(disabled)
              and DeviceVendor startswith "Barracuda"
              and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
          | where DeviceEventCategory == "AUDIT"
              and (toupper(ProcessName) in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
          | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason: string
          | extend Reason = trim(@'(")', Reason)
          | lookup EventResultDetailsLookup on Reason
          | extend ProcessName = toupper(ProcessName)
          | lookup EventTypeLookup on $left.ProcessName == $right.EventName_s
          | extend 
              EventType = EventType_lookup,
              severity = toint(LogSeverity)
          | lookup SeverityLookup on severity
          | extend
              Dvc = DeviceName,
              EventCount = toint(1),
              EventProduct = "WAF",
              EventSchema = "Authentication",
              EventSchemaVersion = "0.1.3",
              EventVendor = "Barracuda"
          | extend
              EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime) - tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
              SrcPortNumber = toint(SourcePort),
              DvcIpAddr = DeviceAddress,
              SrcIpAddr = SourceIP,
              DvcHostname = DeviceName,
              EventUid = _ItemId,
              ActorUsername= DestinationUserName
          | extend
              ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
              ActorUserType = iff(isnotempty(ActorUsername), "Admin", "")
          | extend
              IpAddr = SrcIpAddr,
              Src = SrcIpAddr,
              EventEndTime = EventStartTime
          | project-away
              ThreatConfidence,
              EventType_lookup,
              CommunicationDirection,
              AdditionalExtensions,
              Device*,
              Source*,
              Destination*,
              Activity,
              LogSeverity,
              ApplicationProtocol,
              ProcessID,
              ExtID,
              Protocol,
              Reason,
              ReceiptTime,
              SimplifiedDeviceAction,
              OriginalLogSeverity,
              ProcessName,
              EndTime,
              ExternalID,
              File*,
              ReceivedBytes,
              Message,
              Old*,
              EventOutcome,
              Request*,
              StartTime,
              Field*,
              Flex*,
              Remote*,
              Malicious*,
              severity,
              ThreatSeverity,
              IndicatorThreatType,
              ThreatDescription,
              _ResourceId,
              SentBytes,
              ReportReferenceLink,
              Computer,
              TenantId,
              CollectorHostName,
              _ItemId;
      BarracudaCEF
  };
  parser(disabled=disabled)