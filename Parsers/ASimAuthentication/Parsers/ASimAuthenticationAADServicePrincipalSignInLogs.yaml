Parser:
  Title: Authentication ASIM parser for Microsoft Entra ID service principal sign-in logs
  Version: '0.2.2'
  LastUpdated: Mar 20 2024
Product:
  Name: Microsoft Entra ID
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: Using functions
  Link: https://docs.microsoft.com/azure/azure-monitor/log-query/function
- Title: Authentication schema documentation
  Link: https://aka.ms/ASimAuthenticationDoc
Description: |
  This ASIM parser supports normalizing Microsoft Entra ID Service Principal sign in logs, stored in the AADServicePrincipalSignInLogs table, to the ASIM Authentication schema.
ParserName: ASimAuthenticationAADServicePrincipalSignInLogs
EquivalentBuiltInParser: _ASim_Authentication_AADServicePrincipalSignInLogs
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let AADResultTypes = (T:(ResultType:string)) {
        let AADResultTypesLookup = datatable (ResultType:string, EventResultDetails:string, EventType:string, EventResult:string, EventOriginalResultDetails:string, EventSeverity:string)
        [
            "0"     ,""                         ,"Logon"    ,"Success"  ,"", "Informational",
            "50005" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50005 - DevicePolicyError", "Low",
            "50011" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50011 - The redirect URI specified in the request does not match", "Low",
            "50020" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50020 - UserUnauthorized", "Low",
            "50034" ,"No such user"             ,"Logon"    ,"Failure"  ,"50034 - UserAccountNotFound", "Low",
            "50053" ,"User locked"              ,"Logon"    ,"Failure"  ,"50053 - IdsLocked or IP address with malicious activity", "Low",
            "50055" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50055 - InvalidPasswordExpiredPassword", "Low",
            "50056" ,"Incorrect password"       ,"Logon"    ,"Failure"  ,"50056 - Invalid or null password", "Low",
            "50057" ,"User disabled"            ,"Logon"    ,"Failure"  ,"50057 - UserDisabled", "Low",
            "50058" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50058 - UserInformationNotProvided", "Low",
            "50059" ,"No such user"             ,"Logon"    ,"Failure"  ,"50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
            "50061" ,""                         ,"Logoff"   ,"Failure"  ,"50061 - SignoutInvalidRequest", "Low",
            "50064" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50064 - CredentialAuthenticationError", "Low",
            "50068" ,""                         ,"Logoff"   ,"Failure"  ,"50068 - SignoutInitiatorNotParticipant", "Low",
            "50072" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
            "50074" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
            "50076" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50076 - UserStrongAuthClientAuthNRequired", "Low",
            "50078" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50078 - UserStrongAuthExpired", "Low",
            "50079" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50079 - UserStrongAuthEnrollmentRequired", "Low",
            "50105" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50105 - EntitlementGrantsNotFound", "Low",
            "50126" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50126 - InvalidUserNameOrPassword", "Low",
            "50132" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50132 - SsoArtifactInvalidOrExpired", "Low",
            "50133" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50133 - SsoArtifactRevoked", "Low",
            "50144" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50144 - InvalidPasswordExpiredOnPremPassword", "Low",
            "50173" ,"Session expired"          ,"Logon"    ,"Failure"  ,"50173 -FreshTokenNeeded", "Low",
            "51004" ,"No such user"             ,"Logon"    ,"Failure"  ,"51004 - UserAccountNotInDirectory", "Low",
            "53003" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"53003 - BlockedByConditionalAccess", "Low",
            "70008" ,"Session expired"          ,"Logon"    ,"Failure"  ,"70008 - ExpiredOrRevokedGrant", "Low",
            "70021", "No such user"             ,"Logon"    ,"Failure"  ,"70021 - No matching federated identity record found for presented assertion", "Low",
            "80012" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
            "90024",   "Transient error"       ,"Logon"    ,"Failure"  ,"90024 - RequestBudgetExceededError - A transient error has occurred", "Informational",
            "90033",   "Transient error"       ,"Logon"    ,"Failure"  ,"90033 - A transient error has occurred", "Informational",
            "100003","Other"                    ,"Logon"    ,"Failure"  ,"100003", "Low",
            "500011","No such user"             ,"Logon"    ,"Failure"  ,"500011 - InvalidResourceServicePrincipalNotFound", "Low",
            "500341", "User disabled"           ,"Logon"    ,"Failure"  ,"500341 - The user account has been deleted from the directory", "Low",
            "530032","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
            "530034","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
            "700016","No such user"             ,"Logon"    ,"Failure"  ,"700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
            "700027","Incorrect key"            ,"Logon"    ,"Failure"  ,"700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
            "700082","Session expired"          ,"Logon"    ,"Failure"  ,"700082 - ExpiredOrRevokedGrantInactiveToken", "Low",
            "1002016", "Logon violates policy"  ,"Logon"    ,"Failure"  ,"1002016 - You are using TLS version 1.0, 1.1 and/or 3DES cipher", "Low",
            "7000215", "Incorrect password"     ,"Logon"    ,"Failure"  ,"7000215 - Invalid client secret is provided", "Low",
            "7000222", "Session expired"        ,"Logon"    ,"Failure"  ,"7000222 - The provided client secret keys are expired", "Low"
        ];
        T 
        | lookup AADResultTypesLookup on ResultType
        | extend
            EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails),
            EventResult                 = iff(isempty(EventResult), "Failure", EventResult),
            EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity),
            EventType                   = iff(isempty(EventType), "Logon", EventType)
    };
    let parser = (
        disabled:bool=false
      ) {
      AADServicePrincipalSignInLogs
      | where not(disabled)
      | invoke AADResultTypes()
      | project-rename
          ActingAppId               = AppId,
          EventOriginalUid          = Id,
          EventProductVersion       = OperationVersion,
          EventUid                  = _ItemId,
          SrcIpAddr                 = IPAddress,
          TargetAppId               = ResourceIdentity ,
          TargetAppName             = ResourceDisplayName,
          TargetSessionId           = CorrelationId,
          TargetUserId              = ServicePrincipalId,
          TargetUsername            = ServicePrincipalName
      | extend 
          Dvc                        = 'Microsft/Entra ID',
          EventCount                 = int(1),
          EventProduct               = 'Entra ID',
          EventSchema                = 'Authentication',
          EventSchemaVersion         = '0.1.3',
          EventVendor                = 'Microsoft',
          LogonMethod                = "Service Principal",
          LocationDetails            = todynamic(LocationDetails),
          TargetAppType              = "Resource",
          TargetUserIdType           = 'EntraID',
          TargetUsernameType         = 'Simple',
          TargetUserType             = 'Service'
      | extend
          SrcGeoCity                 = tostring(LocationDetails.city),
          SrcGeoCountry              = Location,
          SrcGeoLatitude             = toreal(LocationDetails.geoCoordinates.latitude),
          SrcGeoLongitude            = toreal(LocationDetails.geoCoordinates.longitude),
          SrcGeoRegion               = tostring(LocationDetails.state)
      | project-away OperationName, Category, Result*, ServicePrincipal*,SourceSystem, DurationMs, Resource*, Location*, UniqueTokenIdentifier, FederatedCredentialId, Conditional*, Authentication*, Identity, Level, TenantId
      // 
      // -- Aliases
      | extend 
          Application                = TargetAppName,
          Dst                        = TargetAppName,
          EventEndTime               = TimeGenerated,
          EventStartTime             = TimeGenerated,
          IpAddr                     = SrcIpAddr,
          LogonTarget                = TargetAppName,
          Src                        = SrcIpAddr,
          TargetSimpleUsername       = TargetUsername,
          TargetUserAadId            = TargetUserId,
          User                       = TargetUsername
    };
    parser  
    (
        disabled = disabled
    )