Parser:
  Title: Authentication ASIM parser for M365 Defender Device Logon Events
  Version: '0.1.1'
  LastUpdated: 21 Jul 2023
Product:
  Name: M365 Defender for EndPoint
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing endpoint authentication events, collected by Microsoft 365 Defender for Endpoint, stored in the  DeviceLogonEvents table, to the ASIM Authentication schema.
ParserName: ASimAuthenticationM365Defender
EquivalentBuiltInParser: _ASim_Authentication_M365Defender
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventResultDetailsLookup=datatable(EventOriginalResultDetails:string, EventResultDetails:string)[
    'InvalidUserNameOrPassword','No such user or password'
  ];
  let EventSubTypeLookup = datatable (EventOriginalType:string, EventSubType:string) [ 
    'Batch',                            'Service',
    'CachedInteractive',                'Interactive',
    'Interactive',                      'Interactive',
    'Network',                          'Remote',
    'Remote interactive (RDP) logons',  'RemoteInteractive',
    'RemoteInteractive',                'RemoteInteractive',
    'Service',                          'Service',
    'Unknown',                          ''
  ];
  let EventResultLookup = datatable (ActionType:string, EventResult:string) [ 
    'LogonAttempted', 'NA',
    'LogonFailed',    'Failure',
    'LogonSuccess',   'Success'
  ];
  let parser = (
    disabled:bool=false
  ){
    let UnixDeviceLogonEvents = (disabled:bool=false) {
        DeviceLogonEvents  
        | where not(disabled)
        | where InitiatingProcessFolderPath startswith "/"
        | extend 
            ActorUsernameType  = "Simple",
            TargetDvcOs        = "Linux",
            TargetUsernameType = "Simple"
        | project-rename 
            ActingProcessName  = InitiatingProcessFolderPath,
            ActorUsername      = InitiatingProcessAccountName,
            TargetUsername     = AccountName
        | project-away 
            InitiatingProcessAccountSid, AccountDomain, InitiatingProcessAccountDomain, InitiatingProcessFileName, AccountSid
    };
    let WindowsDeviceLogonEvents = (disabled:bool=false) {
        DeviceLogonEvents  
        | where not(disabled)
        | where InitiatingProcessFolderPath !startswith "/"
        | extend 
            ActingProcessName           = strcat (InitiatingProcessFolderPath,'\\',InitiatingProcessFileName),
            ActorUserIdType             = 'SID',
            ActorUsername               = case (
              isempty(InitiatingProcessAccountName), "",
              isempty(InitiatingProcessAccountDomain), InitiatingProcessAccountName,
              strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName)
            ),
            ActorUsernameType           = iff (
              InitiatingProcessAccountDomain == '','Simple',
              'Windows'
            ),
            TargetDvcOs = "Windows",
            TargetUserIdType            = 'SID',
            TargetUsername              = iff (
                isempty(AccountDomain), AccountName,
                strcat(AccountDomain, '\\', AccountName)
            ),
            TargetUsernameType          = iff (AccountDomain == '','Simple', 'Windows')
        | project-rename 
            ActorUserId        = InitiatingProcessAccountSid,
            TargetUserId       = AccountSid
        // -- Specific identifiers aliases
        | extend 
            TargetUserSid         = TargetUserId,
            ActorUserSid          = ActorUserId,
            TargetWindowsUsername = TargetUsername,
            ActorWindowsUsername  = ActorUsername,
            ActorUserType         = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
        | extend 
            TargetUserType = iff(IsLocalAdmin, 
                'Admin',
                _ASIM_GetWindowsUserType (TargetWindowsUsername, TargetUserSid)
            )
        | project-away InitiatingProcessAccountName, InitiatingProcessAccountDomain, AccountDomain, AccountName, InitiatingProcessFolderPath, InitiatingProcessFileName
    };
    union 
      WindowsDeviceLogonEvents (disabled=disabled),
      UnixDeviceLogonEvents (disabled=disabled)
    | project-away SourceSystem, TenantId, Timestamp, MachineGroup
    | project-rename 
        ActingProcessCommandLine    = InitiatingProcessCommandLine,
        ActingProcessCreationTime   = InitiatingProcessCreationTime,
        ActingProcessIntegrityLevel = InitiatingProcessIntegrityLevel,
        ActingProcessMD5            = InitiatingProcessMD5,
        ActingProcessSHA1           = InitiatingProcessSHA1 ,
        ActingProcessSHA256         = InitiatingProcessSHA256,
        ActingProcessTokenElevation = InitiatingProcessTokenElevation,
        ActorUserAadId              = InitiatingProcessAccountObjectId,
        ActorUserUpn                = InitiatingProcessAccountUpn,
        EventOriginalResultDetails  = FailureReason,
        EventOriginalType           = LogonType,
        EventUid                    = _ItemId,
        LogonProtocol               = Protocol,
        ParentProcessCreationTime   = InitiatingProcessParentCreationTime,
        ParentProcessName           = InitiatingProcessParentFileName,
        SrcHostname                 = RemoteDeviceName,
        SrcPortNumber               = RemotePort,
        TargetDvcId                 = DeviceId
    | extend 
        ActingProcessId             = tostring (InitiatingProcessId),
        EventCount                  = int(1),
        EventEndTime                = TimeGenerated,
        EventOriginalUid            = tostring (ReportId),
        EventProduct                = 'M365 Defender for EndPoint',
        EventSchema                 = 'Authentication',
        EventSchemaVersion          = '0.1.3',
        EventStartTime              = TimeGenerated,
        EventType                   = 'Logon',
        EventVendor                 = 'Microsoft',
        ParentProcessId             = tostring (InitiatingProcessParentId),
        SrcIpAddr                   = iff (RemoteIP == '-', '', RemoteIP),
        TargetDvcIdType             = 'MDEid',
        TargetSessionId             = tostring (LogonId)
    | extend
         Hash = coalesce(
            ActingProcessMD5,
            ActingProcessSHA1,
            ActingProcessSHA256
         )
    | extend
        HashType = tostring(dynamic(["SHA256", "SHA1", "MD5"])[array_index_of(pack_array(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5),Hash)])     
    | invoke _ASIM_ResolveFQDN('DeviceName')
    | project-rename 
        TargetDomain       = Domain, 
        TargetDomainType   = DomainType,
        TargetFQDN         = FQDN,
        TargetHostname     = ExtractedHostname
    | project-away DeviceName
    | lookup EventResultDetailsLookup on EventOriginalResultDetails 
    | lookup EventSubTypeLookup on EventOriginalType
    | lookup EventResultLookup on ActionType
    | extend
         EventSeverity = iff (EventResult == "Success", "Informational", "Low")
    // -- Specific identifiers aliases
    | extend
        DvcMDEid              = TargetDvcId,
        TargetDvcMDEid        = TargetDvcId
    // --  Aliases
    | extend 
        ActingAppName = ActingProcessName,
        ActingAppType = "Process",
        Dvc           = coalesce (TargetFQDN, TargetHostname),
        IpAddr        = SrcIpAddr,
        Prcess        = ActingProcessName,
        Src           = coalesce (SrcIpAddr, SrcHostname),
        User          = TargetUsername,
    // -- Alias Dvc to Target,
        DvcDomain     = TargetDomain,
        DvcDomainType = TargetDomainType,
        DvcFQDN       = TargetFQDN,
        DvcHostname   = TargetHostname,
        DvcId         = TargetDvcId,
        DvcIdType     = TargetDvcIdType,
        DvcOs         = TargetDvcOs
    | extend 
        Dst         = Dvc,
        LogonTarget = Dvc
    | project-away ReportId, LogonId, InitiatingProcessId, InitiatingProcessParentId, ActionType, InitiatingProcessFileSize, InitiatingProcessVersionInfoCompanyName, InitiatingProcessVersionInfoFileDescription, InitiatingProcessVersionInfoInternalFileName, InitiatingProcessVersionInfoOriginalFileName, InitiatingProcessVersionInfoProductName, InitiatingProcessVersionInfoProductVersion, AppGuardContainerId, RemoteIPType, IsLocalAdmin, RemoteIP
  };
  parser (
      disabled = disabled
  )