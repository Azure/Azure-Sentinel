Parser:
  Title: Authentication Event ASIM filtering parser for Microsoft Sentinel native Authentication table
  Version: '0.1.0'
  LastUpdated: Dec 10, 2024
Product:
  Name: Native
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing the native Microsoft Sentinel Authentication table (ASimAuthenticationEventLogs) to the ASIM Authentication Event normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 
ParserName: vimAuthenticationNative
EquivalentBuiltInParser: _Im_Authentication_Native
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false

ParserQuery: |
  let parser=
  (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
  )
  {
    ASimAuthenticationEventLogs  | where not(disabled)
    //  -- Pre-parsing filtering:
    | where
        (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or TargetAppName has_any (targetappname_has_any))  
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
        and ((array_length(srchostname_has_any) == 0) or SrcHostname has_any (srchostname_has_any))
        and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    | extend
          User =  TargetUsername,
          Src = coalesce (SrcDvcId, SrcHostname, SrcIpAddr),
          IpAddr=SrcIpAddr,
          LogonTarget= coalesce (TargetAppName, TargetUrl, TargetHostname),
          Dvc=EventVendor,
          Application=TargetAppName,
          Dst = coalesce (TargetDvcId,TargetHostname, TargetIpAddr, TargetAppId,TargetAppName), 
          Rule = coalesce(RuleName, tostring(RuleNumber)),
          EventStartTime = TimeGenerated,
          EventEndTime = TimeGenerated,
          EventSchema = "Authentication"
    | project-rename
          EventUid = _ItemId
    | project-away TenantId, SourceSystem, _ResourceId, _SubscriptionId
  };
  parser
    (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )
  