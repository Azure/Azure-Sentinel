Parser:
  Title: Authentication ASIM filtering parser for Microsoft Entra ID managed identity sign-in logs
  Version: '0.2.2'
  LastUpdated: Mar 20, 2024
Product:
  Name: Microsoft Entra ID
Normalization:
  Schema: Authentication
  Version: 0.1.0'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Microsoft Entra ID Managed Identity sign in logs, stored in the  AADManagedIdentitySignInLogs table, to the ASIM Authentication schema.
ParserName: vimAuthenticationAADManagedIdentitySignInLogs
EquivalentBuiltInParser: _Im_Authentication_AADManagedIdentitySignInLogs
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let AADResultTypes = (T: (ResultType: string))
  {
      let AADResultTypesLookup = datatable
  (
      ResultType: string,
      EventResultDetails: string,
      EventType: string,
      EventResult: string,
      EventOriginalResultDetails: string,
      EventSeverity: string
  )
  [
      "0", "", "Logon", "Success", "", "Informational",
      "53003", "Logon violates policy", "Logon", "Failure", "53003 - BlockedByConditionalAccess", "Low",
      "50034", "No such user", "Logon", "Failure", "50034 - UserAccountNotFound", "Low",
      "50059", "No such user", "Logon", "Failure", "50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
      "50053", "User locked", "Logon", "Failure", "50053 - IdsLocked or IP address with malicious activity", "Low",
      "50055", "Password expired", "Logon", "Failure", "50055 - InvalidPasswordExpiredPassword", "Low",
      "50056", "Incorrect password", "Logon", "Failure", "50056 - Invalid or null password", "Low",
      "50057", "User disabled", "Logon", "Failure", "50057 - UserDisabled", "Low",
      "50058", "Logon violates policy", "Logon", "Failure", "50058 - UserInformationNotProvided", "Low",
      "50011", "Logon violates policy", "Logon", "Failure", "50011 - The redirect URI specified in the request does not match", "Low",
      "50064", "No such user or password", "Logon", "Failure", "50064 - CredentialAuthenticationError", "Low",
      "50076", "Logon violates policy", "Logon", "Failure", "50076 - UserStrongAuthClientAuthNRequired", "Low",
      "50079", "Logon violates policy", "Logon", "Failure", "50079 - UserStrongAuthEnrollmentRequired", "Low",
      "50105", "Logon violates policy", "Logon", "Failure", "50105 - EntitlementGrantsNotFound", "Low",
      "50126", "No such user or password", "Logon", "Failure", "50126 - InvalidUserNameOrPassword", "Low",
      "50132", "Password expired", "Logon", "Failure", "50132 - SsoArtifactInvalidOrExpired", "Low",
      "50133", "Password expired", "Logon", "Failure", "50133 - SsoArtifactRevoked", "Low",
      "50144", "Password expired", "Logon", "Failure", "50144 - InvalidPasswordExpiredOnPremPassword", "Low",
      "50173", "Session expired", "Logon", "Failure", "50173 -FreshTokenNeeded", "Low",
      "80012", "Logon violates policy", "Logon", "Failure", "80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
      "51004", "No such user", "Logon", "Failure", "51004 - UserAccountNotInDirectory", "Low",
      "50072", "Logon violates policy", "Logon", "Failure", "50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
      "50005", "Logon violates policy", "Logon", "Failure", "50005 - DevicePolicyError", "Low",
      "50020", "Logon violates policy", "Logon", "Failure", "50020 - UserUnauthorized", "Low",
      "50074", "Logon violates policy", "Logon", "Failure", "50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
      "70008", "Session expired", "Logon", "Failure", "70008 - ExpiredOrRevokedGrant", "Low",
      "700016", "No such user", "Logon", "Failure", "700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
      "500011", "No such user", "Logon", "Failure", "500011 - InvalidResourceServicePrincipalNotFound", "Low",
      "700027", "Incorrect key", "Logon", "Failure", "700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
      "100003", "Other", "Logon", "Failure", "100003", "Low",
      "700082", "Session expired", "Logon", "Failure", "700082 - ExpiredOrRevokedGrantInactiveToken", "Low",
      "530034", "Logon violates policy", "Logon", "Failure", "530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
      "530032", "Logon violates policy", "Logon", "Failure", "530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
      "50061", "", "Logoff", "Failure", "50061 - SignoutInvalidRequest", "Low",
      "50068", "", "Logoff", "Failure", "50068 - SignoutInitiatorNotParticipant", "Low",
      "50078", "Logon violates policy", "Logon", "Failure", "50078 - UserStrongAuthExpired", "Low"
  ];
      T 
      | lookup AADResultTypesLookup on ResultType
      | extend
          EventType                   = iff(isempty(EventType), "Logon", EventType)
          ,
          EventResult                 = iff(isempty(EventResult), "Failure", EventResult)
          ,
          EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails)
          ,
          EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity)
  };
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      username_has_any: dynamic = dynamic([]),
      targetappname_has_any: dynamic = dynamic([]),
      srcipaddr_has_any_prefix: dynamic = dynamic([]),
      srchostname_has_any: dynamic = dynamic([]),
      eventtype_in: dynamic = dynamic([]),
      eventresultdetails_in: dynamic = dynamic([]),
      eventresult: string = '*',
      disabled: bool=false
      )
  {
      AADManagedIdentitySignInLogs
      | where not(disabled)
          and (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
          and ((array_length(username_has_any) == 0) or ServicePrincipalName has_any (username_has_any))
          and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))
          and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
          and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
      | invoke AADResultTypes()
      | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
          and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
          and (eventresult == "*" or (EventResult == eventresult))
      | project-rename
          ActingAppId               = AppId
          ,
          TargetAppId               = ResourceIdentity 
          ,
          TargetAppName             = ResourceDisplayName
          ,
          TargetUsername            = ServicePrincipalName
          ,
          TargetUserId              = ServicePrincipalId
          ,
          EventOriginalUid          = Id
          ,
          TargetSessionId           = CorrelationId
          ,
          SrcIpAddr                 = IPAddress
          ,
          EventUid                  = _ItemId
          ,
          EventProductVersion       = OperationVersion
      // mapping ASimMatchingUsername
      | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      // ActorUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
                                  (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
      | extend 
          EventVendor                = 'Microsoft'
          ,
          EventProduct               = 'Entra ID'
          ,
          EventSchema                = 'Authentication'
          ,
          EventSchemaVersion         = '0.1.3'
          ,
          Dvc                        = 'Microsft/Entra ID'
          ,
          LogonMethod                = "Managed Identity"
          ,
          TargetAppType              = "Resource"
          ,
          EventCount                 = int(1)
          ,
          TargetUserType             = 'Application'
          ,
          TargetUsernameType         = 'Simple'
          ,
          TargetUserIdType           = 'EntraID'
      | project-away
          OperationName,
          Category,
          Result*,
          ServicePrincipal*,
          SourceSystem,
          DurationMs,
          Resource*,
          Location*,
          UniqueTokenIdentifier,
          FederatedCredentialId,
          Conditional*,
          Authentication*,
          Identity,
          Level,
          TenantId,
          temp*
      // 
      // -- Aliases
      | extend 
          User                         = TargetUsername
          ,
          LogonTarget                = TargetAppName
          ,
          EventStartTime             = TimeGenerated
          ,
          EventEndTime               = TimeGenerated
          ,
          Application                = TargetAppName
          ,
          Dst                        = TargetAppName
          ,
          Src                        = SrcIpAddr
          ,
          IpAddr                     = SrcIpAddr
          ,
          TargetSimpleUsername       = TargetUsername
          ,
          TargetUserAadId            = TargetUserId
  };
  parser (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )