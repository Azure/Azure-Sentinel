Parser:
  Title: Authentication ASIM parser for Palo Alto Cortex Data Lake
  Version: '0.1.1'
  LastUpdated: Apr 11 2024
Product:
  Name: Palo Alto Cortex Data Lake
Normalization:
  Schema: Authentication
  Version: '0.2.6'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Palo Alto Cortex Data Lake Documentation
  Link: https://docs.paloaltonetworks.com/cortex/cortex-data-lake/log-forwarding-schema-reference/network-logs/network-authentication-log/network-auth-cef-fields
Description: |
  This ASIM parser supports normalizing Palo Alto Cortex Data Lake logs to the ASIM Authentication normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.
ParserName: vimAuthenticationPaloAltoCortexDataLake
EquivalentBuiltInParser: _Im_Authentication_PaloAltoCortexDataLake
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
    [
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Low",
    "5", "Low",
    "6", "Medium",
    "7", "Medium",
    "8", "Medium",
    "9", "High",
    "10", "High"
  ];
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      username_has_any: dynamic = dynamic([]),
      targetappname_has_any: dynamic = dynamic([]),
      srcipaddr_has_any_prefix: dynamic = dynamic([]),
      srchostname_has_any: dynamic = dynamic([]),
      eventtype_in: dynamic = dynamic([]),
      eventresultdetails_in: dynamic = dynamic([]),
      eventresult: string = '*',
      disabled: bool=false
      ) {
      CommonSecurityLog
      | where not(disabled)
          and (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and DeviceVendor == "Palo Alto Networks"
          and DeviceProduct == "LF"
          and DeviceEventClassID == "AUTH"
          and ((array_length(username_has_any) == 0) or (AdditionalExtensions has_any (username_has_any)))
          and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
          and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
          and (array_length(srchostname_has_any) == 0 or AdditionalExtensions has_any(srchostname_has_any))
          and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
          and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
      // eventresult filtering done later in the parser
      | extend
          EventResult = iff(Message has "Invalid Certificate", "Failure", "Success"),
          EventType = "Logon"
      | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
          and (eventresult == '*' or EventResult has eventresult)
      | parse-kv AdditionalExtensions as (PanOSSourceDeviceHost: string, PanOSSourceDeviceOSFamily: string, PanOSAuthenticationProtocol: string, PanOSAuthenticatedUserDomain: string, PanOSAuthenticatedUserName: string, PanOSAuthenticatedUserUUID: string, start: string, PanOSLogSource: string, PanOSRuleMatchedUUID: string, PanOSAuthenticationDescription: string, PanOSClientTypeName: string, PanOSConfigVersion: string, PanOSMFAVendor: string, PanOSSourceDeviceCategory: string, PanOSSourceDeviceModel: string, PanOSSourceDeviceProfile: string, PanOSSourceDeviceVendor: string, PanOSUserAgentString: string, PanOSCortexDataLakeTenantID: string, PanOSSessionID: string) with (pair_delimiter=";", kv_delimiter="=")
      | where ((array_length(username_has_any) == 0) or (PanOSAuthenticatedUserName has_any (username_has_any)))
          and (array_length(srchostname_has_any) == 0 or PanOSSourceDeviceHost has_any(srchostname_has_any))
      | invoke _ASIM_ResolveDvcFQDN('DeviceName')
      | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
      | lookup EventSeverityLookup on LogSeverity
      | extend
          EventStartTime = todatetime(start),
          SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
          TargetIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
          EventMessage = Message,
          LogonMethod = case(
                    FieldDeviceCustomNumber1 == 1,
                    "Username & Password",
                    FieldDeviceCustomNumber1 == 2,
                    "Multi factor authentication",
                    FieldDeviceCustomNumber1 == 3,
                    "Multi factor authentication",
                    ""
                ),
          AdditionalFields = bag_pack(
                        "FileName",
                        FileName,
                        "PanOSLogSource",
                        PanOSLogSource,
                        "PanOSRuleMatchedUUID",
                        PanOSRuleMatchedUUID,
                        DeviceCustomNumber1Label,
                        FieldDeviceCustomNumber1, 
                        DeviceCustomNumber2Label,
                        FieldDeviceCustomNumber2,
                        DeviceCustomString3Label,
                        DeviceCustomString3,
                        DeviceCustomString4Label,
                        DeviceCustomString4,
                        DeviceCustomString5Label,
                        DeviceCustomString5,
                        DeviceCustomString6Label,
                        DeviceCustomString6,
                        "PanOSAuthenticationDescription",
                        PanOSAuthenticationDescription,
                        "PanOSClientTypeName",
                        PanOSClientTypeName,
                        "PanOSConfigVersion",
                        PanOSConfigVersion,
                        "PanOSMFAVendor",
                        PanOSMFAVendor,
                        "PanOSSourceDeviceCategory",
                        PanOSSourceDeviceCategory,
                        "PanOSSourceDeviceModel",
                        PanOSSourceDeviceModel,
                        "PanOSSourceDeviceProfile",
                        PanOSSourceDeviceProfile,
                        "PanOSSourceDeviceVendor",
                        PanOSSourceDeviceVendor
                    )
      | project-rename
          DvcIpAddr = Computer,
          EventUid = _ItemId,
          DvcId = DeviceExternalID,
          EventOriginalResultDetails = Message,
          EventOriginalSeverity = LogSeverity,
          EventOriginalType = DeviceEventClassID,
          EventOriginalUid = ExtID,
          EventProductVersion = DeviceVersion,
          LogonProtocol = PanOSAuthenticationProtocol,
          SrcDvcOs = PanOSSourceDeviceOSFamily,
          TargetUsername = PanOSAuthenticatedUserName,
          TargetUserId = PanOSAuthenticatedUserUUID,
          TargetDomain = PanOSAuthenticatedUserDomain,
          EventOriginalSubType = Activity,
          HttpUserAgent =  PanOSUserAgentString,
          TargetDvcScopeId = PanOSCortexDataLakeTenantID,
          TargetSessionId = PanOSSessionID,
          TargetDvc = DeviceCustomString1
      // mapping ASimMatchingUsername
      | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      // ActorUsername not coming from source. Hence, not mapped.
      | extend ASimMatchingUsername = case
          (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
      | extend
          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          Dst = TargetIpAddr,
          Src = coalesce(SrcFQDN, SrcHostname, SrcIpAddr),
          TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
          User = TargetUsername,
          IpAddr = SrcIpAddr,
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          TargetDomainType = case(
                        array_length(split(DestinationUserName, ".")) > 1,
                        "FQDN",
                        array_length(split(DestinationUserName, "\\")) > 1,
                        "Windows",
                        ""
                    ),
          TargetUserIdType = iff(isnotempty(TargetUserId), "UID", ""),
          TargetUsernameType = _ASIM_GetUsernameType(TargetUsername)
      | extend
          EventSchema = "Authentication",
          EventSchemaVersion = "0.1.3",
          EventProduct = "Cortex Data Lake",
          EventVendor = "Palo Alto"
      | project-away
          Source*,
          Destination*,
          Device*,
          AdditionalExtensions,
          CommunicationDirection,
          EventOutcome,
          PanOS*,
          start,
          EndTime,
          FieldDevice*,
          Flex*,
          File*,
          Old*,
          MaliciousIP*,
          OriginalLogSeverity,
          Process*,
          Protocol,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          SimplifiedDeviceAction,
          StartTime,
          TenantId,
          Threat*,
          ExternalID,
          ReportReferenceLink,
          ReceiptTime,
          Reason,
          ApplicationProtocol,
          Indicator*,
          _ResourceId,
          temp_*
  };
  parser(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
  )
