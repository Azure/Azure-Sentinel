# Sanitization workflow for fork PRs
# This workflow reads changes from fork PRs, creates sanitized internal PRs, and runs full testing
name: Sanitize and Test Fork PR

on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize]
    branches:
      - master
      - asim-github-workflow
    paths:
    - 'Parsers/ASimDns/Parsers/**'
    - 'Parsers/ASimNetworkSession/Parsers/**'
    - 'Parsers/ASimWebSession/Parsers/**'
    - 'Parsers/ASimProcessEvent/Parsers/**'
    - 'Parsers/ASimAuditEvent/Parsers/**'
    - 'Parsers/ASimAuthentication/Parsers/**'
    - 'Parsers/ASimFileEvent/Parsers/**'
    - 'Parsers/ASimRegistryEvent/Parsers/**'
    - 'Parsers/ASimUserManagement/Parsers/**'
    - 'Parsers/ASimDhcpEvent/Parsers/**'
    - 'Parsers/ASimAlertEvent/Parsers/**'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: sanitize-fork-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  sanitize-fork-pr:
    name: Sanitize Fork PR and Create Internal PR
    runs-on: ubuntu-latest
    # Only run for actual fork PRs
    if: github.event.pull_request.head.repo.fork == true
    steps:
      - name: Checkout master repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for existing sanitized PR
        id: check-existing
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            // Look for existing sanitized PR for this fork PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'master'
            });
            
            const existingPr = prs.find(pr => 
              pr.title.includes(`[SANITIZED]`) && 
              pr.body && pr.body.includes(`fork PR #${{ github.event.pull_request.number }}`)
            );
            
            if (existingPr) {
              console.log(`Found existing sanitized PR: #${existingPr.number}`);
              console.log(`Existing branch: ${existingPr.head.ref}`);
              return {
                exists: true,
                pr_number: existingPr.number,
                branch_name: existingPr.head.ref
              };
            } else {
              console.log('No existing sanitized PR found');
              return {
                exists: false,
                pr_number: null,
                branch_name: null
              };
            }

      - name: Get fork PR changes
        id: get-changes
        run: |
          # Get the list of changed files from the fork PR
          echo "Getting changed files from fork PR #${{ github.event.pull_request.number }}..."
          
          # Fetch the fork PR branch
          git remote add fork ${{ github.event.pull_request.head.repo.clone_url }}
          git fetch fork ${{ github.event.pull_request.head.ref }}
          
          # Get the diff between base and fork PR
          echo "Comparing master...fork/${{ github.event.pull_request.head.ref }}"
          
          # Get list of changed parser files and sample data files
          changed_files=$(git diff --name-only master...fork/${{ github.event.pull_request.head.ref }} | grep -E '^(Parsers/.*\.ya?ml|Sample Data/.*\.(csv|json|yaml|yml))$' || true)
          
          if [ -n "$changed_files" ]; then
            echo "Changed parser files:"
            echo "$changed_files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "$changed_files" > changed_files.txt
          else
            echo "No parser files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update sanitized branch
        if: steps.get-changes.outputs.has_changes == 'true'
        id: create-branch
        run: |
          existing_data='${{ steps.check-existing.outputs.result }}'
          existing_branch=$(echo "$existing_data" | jq -r '.branch_name // empty')
          existing_pr=$(echo "$existing_data" | jq -r '.pr_number // empty')
          
          if [ -n "$existing_branch" ] && [ "$existing_branch" != "null" ]; then
            # Use existing branch
            sanitized_branch="$existing_branch"
            echo "Using existing sanitized branch: $sanitized_branch"
            echo "existing_pr_number=$existing_pr" >> $GITHUB_OUTPUT
            
            # Checkout existing branch
            git checkout "$sanitized_branch"
            git pull origin "$sanitized_branch"
          else
            # Create new branch
            sanitized_branch="sanitized-fork-pr-${{ github.event.pull_request.number }}-$(date +%s)"
            echo "Creating new sanitized branch: $sanitized_branch"
            echo "existing_pr_number=" >> $GITHUB_OUTPUT
            
            # Create and checkout the new branch
            git checkout -b "$sanitized_branch"
          fi
          
          echo "branch_name=$sanitized_branch" >> $GITHUB_OUTPUT
          
          # Apply only the parser file changes from the fork
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "Processing changed file: $file"
              
              # Create directory if it doesn't exist
              mkdir -p "$(dirname "$file")"
              
              # Get the file content from the fork branch
              if git show "fork/${{ github.event.pull_request.head.ref }}:$file" > "$file" 2>/dev/null; then
                # Validate file types
                if [[ "$file" =~ \.(yaml|yml)$ ]]; then
                  # YAML validation
                  if ! python3 -c "import yaml; yaml.safe_load(open('$file', 'r'))" 2>/dev/null; then
                    echo "‚ùå Invalid YAML detected in $file - removing"
                    rm -f "$file"
                    continue
                  fi
                elif [[ "$file" =~ \.(csv)$ ]]; then
                  # Basic CSV validation - check if file is readable and not empty
                  if [ ! -s "$file" ]; then
                    echo "‚ùå Empty CSV file detected in $file - removing"
                    rm -f "$file"
                    continue
                  fi
                  # Check for basic CSV structure (at least one comma or valid single column)
                  if ! head -1 "$file" | grep -E '^[^,]*,|^[^,]*$' > /dev/null 2>&1; then
                    echo "‚ùå Invalid CSV format detected in $file - removing"
                    rm -f "$file"
                    continue
                  fi
                elif [[ "$file" =~ \.(json)$ ]]; then
                  # JSON validation
                  if ! python3 -c "import json; json.load(open('$file', 'r'))" 2>/dev/null; then
                    echo "‚ùå Invalid JSON detected in $file - removing"
                    rm -f "$file"
                    continue
                  fi
                fi
                
                echo "‚úÖ File $file validated successfully"
                git add "$file"
              else
                echo "‚ö†Ô∏è Could not retrieve $file from fork branch - may have been deleted"
                # If file was deleted in fork, remove it from our branch too
                if [ -f "$file" ]; then
                  git rm "$file"
                fi
              fi
            fi
          done < changed_files.txt
          
          # Check if we have any changes to commit
          if git diff --cached --quiet; then
            echo "No valid changes to commit"
            echo "has_valid_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_valid_changes=true" >> $GITHUB_OUTPUT
            
            # Commit the sanitized changes
            if [ -n "$existing_branch" ] && [ "$existing_branch" != "null" ]; then
              git commit -m "Update sanitized changes from fork PR #${{ github.event.pull_request.number }}"
            else
              git commit -m "Sanitized changes from fork PR #${{ github.event.pull_request.number }}"
            fi
            
            # Push the branch
            git push origin "$sanitized_branch"
          fi

      - name: Create or update internal PR
        if: steps.get-changes.outputs.has_changes == 'true' && steps.create-branch.outputs.has_valid_changes == 'true'
        id: create-pr
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            const existingPrNumber = '${{ steps.create-branch.outputs.existing_pr_number }}';
            
            if (existingPrNumber && existingPrNumber !== '') {
              // Update existing PR
              console.log(`Updating existing PR #${existingPrNumber}`);
              
              const updatedBody = `## üîÑ Sanitized Fork PR (Updated)
            
            This is an automatically generated internal PR containing sanitized changes from fork PR #${{ github.event.pull_request.number }}.
            
            **üîÑ UPDATED**: This PR has been automatically updated with the latest changes from the fork PR.
            
            ### Original Fork PR Details:
            - **Original PR**: ${{ github.event.pull_request.html_url }}
            - **Author**: ${{ github.event.pull_request.user.login }}
            - **Title**: ${{ github.event.pull_request.title }}
            
            ### Security Notes:
            - ‚úÖ Only parser files (YAML/YML) and sample data files (CSV/JSON) were copied
            - ‚úÖ All files were validated for proper syntax and format
            - ‚úÖ No executable code was transferred
            - ‚úÖ This PR runs with full repository privileges for complete testing
            
            ### What happens next:
            - This PR will run full ASIM validation and Azure testing
            - If tests pass, changes will be merged to master
            - Original fork PR will be updated with results and closed
            
            *This is an automated sanitization process for secure testing of external contributions.*`;
              
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: existingPrNumber,
                body: updatedBody
              });
              
              return existingPrNumber;
            } else {
              // Create new PR
              const prTitle = `[SANITIZED] ${context.payload.pull_request.title}`;
              const prBody = `## üîÑ Sanitized Fork PR
            
            This is an automatically generated internal PR containing sanitized changes from fork PR #${{ github.event.pull_request.number }}.
            
            ### Original Fork PR Details:
            - **Original PR**: ${{ github.event.pull_request.html_url }}
            - **Author**: ${{ github.event.pull_request.user.login }}
            - **Title**: ${{ github.event.pull_request.title }}
            
            ### Security Notes:
            - ‚úÖ Only parser files (YAML/YML) and sample data files (CSV/JSON) were copied
            - ‚úÖ All files were validated for proper syntax and format
            - ‚úÖ No executable code was transferred
            - ‚úÖ This PR runs with full repository privileges for complete testing
            
            ### What happens next:
            - This PR will run full ASIM validation and Azure testing
            - If tests pass, changes will be merged to master
            - Original fork PR will be updated with results and closed
            
            *This is an automated sanitization process for secure testing of external contributions.*`;
              
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: '${{ steps.create-branch.outputs.branch_name }}',
                base: 'master',
                body: prBody,
                draft: false
              });
              
              // Add ASIM label to the newly created PR
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['ASIM']
                });
                console.log(`Added ASIM label to PR #${pr.number}`);
              } catch (error) {
                console.log(`Warning: Could not add ASIM label to PR #${pr.number}: ${error.message}`);
                // Don't fail the workflow if label doesn't exist
              }
              
              console.log(`Created internal PR: #${pr.number}`);
              return pr.number;
            }

      - name: Comment on original fork PR  
        if: steps.get-changes.outputs.has_changes == 'true' && steps.create-branch.outputs.has_valid_changes == 'true'
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            const internalPrNumber = ${{ steps.create-pr.outputs.result }};
            const existingPrNumber = '${{ steps.create-branch.outputs.existing_pr_number }}';
            
            let comment;
            if (existingPrNumber && existingPrNumber !== '') {
              comment = `## üîÑ Fork PR Updated
            
            Thank you for your contribution! Your updated changes have been processed for secure testing.
            
            ### What's happening:
            - ‚úÖ Your latest parser changes have been sanitized and updated in internal PR #${internalPrNumber}
            - üß™ Full ASIM validation and Azure testing is now running on the updated PR
            - üìä You can monitor progress here: https://github.com/${{ github.repository }}/pull/${internalPrNumber}
            
            ### Security Process:
            - Only YAML parser files and sample data files (CSV/JSON) were copied
            - All files were validated for proper syntax and format
            - The internal PR runs with full repository privileges for complete testing
            
            ### Next Steps:
            - If tests pass, your changes will be merged to master
            - This PR will be automatically updated with the results
            - You'll be credited as the author in the commit history
            
            Thank you for contributing to Microsoft Sentinel ASIM parsers! üôè
            
            *This is an automated security process for external contributions.*`;
            } else {
              comment = `## üîÑ Fork PR Processing
            
            Thank you for your contribution! Your changes have been processed for secure testing.
            
            ### What's happening:
            - ‚úÖ Your parser changes have been sanitized and transferred to internal PR #${internalPrNumber}
            - üß™ Full ASIM validation and Azure testing is now running on the internal PR
            - üìä You can monitor progress here: https://github.com/${{ github.repository }}/pull/${internalPrNumber}
            
            ### Security Process:
            - Only YAML parser files and sample data files (CSV/JSON) were copied
            - All files were validated for proper syntax and format
            - The internal PR runs with full repository privileges for complete testing
            
            ### Next Steps:
            - If tests pass, your changes will be merged to master
            - This PR will be automatically updated with the results
            - You'll be credited as the author in the commit history
            
            Thank you for contributing to Microsoft Sentinel ASIM parsers! üôè
            
            *This is an automated security process for external contributions.*`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Handle no changes case
        if: steps.get-changes.outputs.has_changes == 'false'
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            const comment = `## ‚ÑπÔ∏è No Parser Changes Detected
            
            Thank you for your contribution! However, this PR doesn't contain any changes to ASIM parser files that require our specialized testing workflow.
            
            ### What we checked:
            - Changes to files in \`Parsers/\` directories (YAML/YML files)
            - Changes to files in \`Sample Data/\` directories (CSV/JSON/YAML files)
            
            If you believe this is an error or if you're contributing non-parser changes, please reach out to the maintainers.
            
            *This is an automated check for ASIM parser contributions.*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });