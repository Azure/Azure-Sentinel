# Each pull request that updates ASIM parsers triggers the script.
# The script runs ASIM Schema and Data testers on the "eco-connector-test" workspace.
# 
# PERFORMANCE OPTIMIZATIONS:
# - Uses sparse checkout to only download Parsers/ and .script/tests/asimParsersTest/ directories
# - Uses shallow fetch with --depth=1 for merge validation to reduce bandwidth
# - Downloads scripts directly from URLs to avoid needing full repository content
name: Run ASIM tests on "ASIM-SchemaDataTester-GithubShared" workspace
on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize]
    branches:
      - master
      - asim-github-workflow
    paths:
    - 'Parsers/ASimDns/Parsers/**'
    - 'Parsers/ASimNetworkSession/Parsers/**'
    - 'Parsers/ASimWebSession/Parsers/**'
    - 'Parsers/ASimProcessEvent/Parsers/**'
    - 'Parsers/ASimAuditEvent/Parsers/**'
    - 'Parsers/ASimAuthentication/Parsers/**'
    - 'Parsers/ASimFileEvent/Parsers/**'
    - 'Parsers/ASimRegistryEvent/Parsers/**'
    - 'Parsers/ASimUserManagement/Parsers/**'
    - 'Parsers/ASimDhcpEvent/Parsers/**'
    - 'Parsers/ASimAlertEvent/Parsers/**'
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  # id-token only needed in jobs that actually perform Azure login

concurrency:
  group: asim-tests-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  VERIFY_TEMPLATE_SCRIPT: https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/VerifyASimParserTemplate.py
  INGEST_SAMPLE_SCRIPT: https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/ingestASimSampleData.py
  RUN_TESTERS_SCRIPT: https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/runAsimTesters.ps1
  CONVERT_YAML_SCRIPT: https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/convertYamlToObject.ps1
  FILTERING_TEST_SCRIPT: https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/ASimFilteringTest.py

jobs:
  prepare-parsers:
    name: Prepare sanitized parser content
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      pr-number: ${{ steps.meta.outputs.pr_number }}
    steps:
      - name: Extract PR number
        id: meta
        run: echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
      - name: Checkout trusted base (master) - sparse
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: master
          repository: Azure/Azure-Sentinel
          persist-credentials: false
          fetch-depth: 1
          sparse-checkout: |
            Parsers/
            .script/tests/asimParsersTest/
          sparse-checkout-cone-mode: false
      - name: Checkout PR head into pr-code (isolated) - sparse
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          path: pr-code
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          persist-credentials: false
          fetch-depth: 1
          sparse-checkout: |
            Parsers/
            .script/tests/asimParsersTest/
          sparse-checkout-cone-mode: false
      - name: Validate merge (no execution of PR code)
        run: |
          cd pr-code
          git remote add upstream https://github.com/Azure/Azure-Sentinel.git
          # Fetch with enough depth to establish relationship
          git fetch upstream master --depth=50
          set +e
          # Try merge with allow-unrelated-histories in case of shallow repo issues
          git merge --no-commit --no-ff --allow-unrelated-histories upstream/master
          status=$?
          Conflicts=$(git ls-files -u | wc -l)
          if [ "$Conflicts" -gt 0 ] || [ $status -ne 0 ]; then
            echo "Merge conflict detected between PR and current master. Failing early." >&2
            echo "Exit status: $status, Conflicts: $Conflicts"
            git merge --abort 2>/dev/null || true
            exit 1
          fi
          git merge --abort 2>/dev/null || true
          echo "✅ Merge validation passed - no conflicts detected"
      - name: Copy parser assets (sanitized)
        run: |
          mkdir -p sanitized
          # Since we already have sparse checkout, we can copy more efficiently
          rsync -a --prune-empty-dirs --include '*/' --include '*.yaml' --include '*.yml' --include '*.json' --exclude '*' pr-code/Parsers/ sanitized/Parsers/ || true
          # Fallback to full copy if selective copy produced nothing (to preserve behavior)
          if [ ! -d sanitized/Parsers ] || [ "$(find sanitized/Parsers -type f | wc -l)" -eq 0 ]; then
            echo "Selective copy empty; copying entire Parsers directory." >&2
            rsync -a pr-code/Parsers/ sanitized/Parsers/
          fi
          # Detect symlinks (fail if any to avoid traversal attacks)
          if find sanitized/Parsers -type l | grep -q '.'; then
            echo 'Symlinks detected in Parsers directory. Aborting for safety.' >&2
            find sanitized/Parsers -type l -print >&2
            exit 1
          fi
          # Display space savings
          echo "Space usage summary:"
          echo "PR checkout size: $(du -sh pr-code 2>/dev/null | cut -f1)"
          echo "Sanitized artifact size: $(du -sh sanitized 2>/dev/null | cut -f1)"
      - name: Upload sanitized artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sanitized-parsers
          path: sanitized/Parsers
          if-no-files-found: error
          retention-days: 3

  Run-ASim-TemplateValidation:
    name: Run ASIM Template Validation tests
    needs: prepare-parsers
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download sanitized parsers
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: sanitized-parsers
          path: Parsers
      - name: Write dependency manifest
        run: |
          printf "requests\nPyYAML\ntabulate\n" > deps-template.txt
      - name: Restore pip cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('deps-template.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML tabulate
      - name: Run ASim parsers template validations python script
        run: |
          filePath=".script/tests/asimParsersTest/VerifyASimParserTemplate.py"
          url="$VERIFY_TEMPLATE_SCRIPT"
          mkdir -p .script/tests/asimParsersTest
          [ -f "$filePath" ] && rm -f "$filePath"
          echo "Downloading script: $url"
          curl -sSL -o "$filePath" "$url"
          python "$filePath"

  Run-ASim-Sample-Data-Ingest:
    needs: [prepare-parsers, Run-ASim-TemplateValidation]
    name: Run ASim Sample Data Ingestion
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download sanitized parsers
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: sanitized-parsers
          path: Parsers
      - name: Write dependency manifest
        run: |
          printf "azure-identity\nrequests\nPyYAML\nazure-monitor-ingestion\nazure-core\n" > deps-ingest.txt
      - name: Restore pip cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('deps-ingest.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-identity requests PyYAML azure-monitor-ingestion azure-core
      - name: Check Azure secrets availability
        id: azure-check
        run: |
          if [ -n "${{ secrets.AZURE_ASIM_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "available=true" >> $GITHUB_OUTPUT
            echo "✅ Azure secrets available - full testing enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "⚠️ Azure secrets not available (likely fork PR) - skipping Azure-dependent steps" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Login to Azure Public Cloud
        if: steps.azure-check.outputs.available == 'true'
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Asim Sample Log Ingestion
        if: steps.azure-check.outputs.available == 'true'
        run: |
          filePath=".script/tests/asimParsersTest/ingestASimSampleData.py"
          url="$INGEST_SAMPLE_SCRIPT" 
          mkdir -p .script/tests/asimParsersTest
          [ -f "$filePath" ] && rm -f "$filePath"
          echo "Downloading script: $url"
          curl -sSL -o "$filePath" "$url"
          chmod +x "$filePath"
          python "$filePath" "${{ github.event.pull_request.number }}"
      - name: Skip Azure ingestion notice
        if: steps.azure-check.outputs.available == 'false'
        run: |
          echo "⚠️ Skipping Azure log ingestion - secrets not available" >> $GITHUB_STEP_SUMMARY
          echo "This is normal for fork PRs. Template validation was still performed." >> $GITHUB_STEP_SUMMARY

  Run-ASim-Schema-Data-tests:
    needs: Run-ASim-Sample-Data-Ingest
    name: Run ASim Schema and Data tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download sanitized parsers
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: sanitized-parsers
          path: Parsers
      - name: Check Azure secrets availability
        id: azure-check
        run: |
          if [ -n "${{ secrets.AZURE_ASIM_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping Azure schema tests - secrets not available (likely fork PR)" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Login to Azure Public Cloud with AzPowershell
        if: steps.azure-check.outputs.available == 'true'
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true
      - name: Run ASIM Schema and Data tests PowerShell script
        if: steps.azure-check.outputs.available == 'true'
        uses: azure/powershell@1c23bea6616927f9405ab4a2c61a3999d2b25c83
        with:
          inlineScript: |
            $filePath = ".script/tests/asimParsersTest/runAsimTesters.ps1"
            $url = "$env:RUN_TESTERS_SCRIPT"
            if (Test-Path $filePath) { Remove-Item $filePath -Force }
            Write-Host "Downloading script: $url"
            New-Item -ItemType Directory -Force -Path (Split-Path $filePath) | Out-Null
            Invoke-WebRequest -Uri $url -OutFile $filePath
            $filePath_convert_yaml = ".script/tests/asimParsersTest/convertYamlToObject.ps1"
            $url_convert_yaml = "$env:CONVERT_YAML_SCRIPT"
            if (Test-Path $filePath_convert_yaml) { Remove-Item $filePath_convert_yaml -Force }
            Invoke-WebRequest -Uri $url_convert_yaml -OutFile $filePath_convert_yaml
            & $filePath
          azPSVersion: "latest"

  Run-ASim-Parser-Filtering-Tests:
    needs: Run-ASim-Sample-Data-Ingest
    name: Run ASim Parser Filtering tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download sanitized parsers
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: sanitized-parsers
          path: Parsers
      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: '3.x'
      - name: Write dependency manifest
        run: |
          printf "PyYAML\nazure-identity\nazure-monitor-query\n" > deps-filter.txt
      - name: Restore pip cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('deps-filter.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML azure-identity azure-monitor-query
      - name: Check Azure secrets availability
        id: azure-check
        run: |
          if [ -n "${{ secrets.AZURE_ASIM_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping Azure filtering tests - secrets not available (likely fork PR)" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Login to Azure Public Cloud
        if: steps.azure-check.outputs.available == 'true'
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Run ASim parsers filtering tests python script
        if: steps.azure-check.outputs.available == 'true'
        run: |
          filePath=".script/tests/asimParsersTest/ASimFilteringTest.py"
          url="$FILTERING_TEST_SCRIPT"
          mkdir -p .script/tests/asimParsersTest
          [ -f "$filePath" ] && rm -f "$filePath"
          echo "Downloading script: $url"
          curl -sSL -o "$filePath" "$url"
          python "$filePath"

  # Comment on fork PRs to notify contributors
  fork-pr-comment:
    name: Fork PR Notification
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.fork == true
    permissions:
      pull-requests: write
    steps:
      - name: Comment on Fork PR
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Look for our bot comment (identified by unique text)
            const botCommentExists = comments.some(comment => 
              comment.body.includes('Fork PR Detected') && 
              comment.body.includes('automatically generated for fork PR contributions')
            );
            
            if (botCommentExists) {
              console.log('Fork PR comment already exists - skipping duplicate');
              return;
            }
            
            // Post the comment since it doesn't exist yet
            const comment = `## 🔄 Fork PR Detected
            
            Thank you for your contribution to Azure Sentinel ASIM parsers! 
            
            ### 📋 What happens next:
            - ✅ Your PR will be automatically tested with our ASIM validation suite
            - 🔍 Maintainers will review your changes and test results
            - 🚀 Once approved, your contribution will be merged
            
            ### 🛡️ Security Note:
            This workflow runs with repository privileges for testing purposes. Our security measures ensure safe execution of external contributions.
            
            ### ❓ Need Help?
            - Check the [ASIM documentation](https://docs.microsoft.com/azure/sentinel/normalization) for parser guidelines
            - Review existing parsers in the \`Parsers/\` directory for examples
            - Comment on this PR if you have questions
            
            ---
            *This comment was automatically generated for fork PR contributions.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('Fork PR welcome comment posted successfully');
