# Each pull request that updates ASIM parsers triggers the script.
# The script runs ASIM Schema and Data testers on the "eco-connector-test" workspace.
name: Run ASIM tests on "ASIM-SchemaDataTester-GithubShared" workspace
on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize, labeled]
    branches:
      - master
      - asim-github-workflow
    paths:
    - 'Parsers/ASimDns/Parsers/**'
    - 'Parsers/ASimNetworkSession/Parsers/**'
    - 'Parsers/ASimWebSession/Parsers/**'
    - 'Parsers/ASimProcessEvent/Parsers/**'
    - 'Parsers/ASimAuditEvent/Parsers/**'
    - 'Parsers/ASimAuthentication/Parsers/**'
    - 'Parsers/ASimFileEvent/Parsers/**'
    - 'Parsers/ASimRegistryEvent/Parsers/**'
    - 'Parsers/ASimUserManagement/Parsers/**'
    - 'Parsers/ASimDhcpEvent/Parsers/**'
    - 'Parsers/ASimAlertEvent/Parsers/**'
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: asim-tests-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs: 
  # Security gate: Fork PRs require manual approval via "safe to test" label
  # Internal PRs (same repo) can proceed without labels
  security-gate:
    name: Security approval gate for fork PRs
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
      issues: write
    outputs:
      approved: ${{ steps.check-approval.outputs.approved }}
    steps:
      - name: Check if PR needs approval
        id: check-approval
        run: |
          set -x  # Enable debug mode to show all commands
          
          echo "=========================================="
          echo "Starting PR approval check..."
          echo "=========================================="
          
          # Check if this is a fork PR
          is_fork="${{ github.event.pull_request.head.repo.fork }}"
          echo "🔍 Is this a fork PR? $is_fork"
          
          if [ "$is_fork" = "true" ]; then
            echo "📌 FORK PR DETECTED - Proceeding with security checks"
            
            # Check if "safe to test" label is present
            labels='${{ toJson(github.event.pull_request.labels.*.name) }}'
            echo "📝 Available labels: $labels"
            
            if echo "$labels" | grep -q "safe to test"; then
              echo "✅ 'safe to test' label FOUND - Checking for race conditions..."
              
              # SECURITY: Check for race condition - commits after label approval
              # Get when the "safe to test" label was added (most recent time)
              echo ""
              echo "🔐 RACE CONDITION CHECK:"
              echo "---"
              
              pr_number="${{ github.event.pull_request.number }}"
              repo="${{ github.repository }}"
              echo "📊 Fetching timeline for PR #$pr_number in $repo..."
              
              timeline_response=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$repo/issues/$pr_number/timeline")
              
              echo "📥 Timeline API response received (showing labeled events):"
              echo "$timeline_response" | jq '.[] | select(.event == "labeled" and .label.name == "safe to test") | {event, created_at}' 2>/dev/null || echo "   No labeled events found or jq error"
              echo ""
              
              label_created=$(echo "$timeline_response" \
                | jq -r '.[] | select(.event == "labeled" and .label.name == "safe to test") | .created_at' 2>/dev/null \
                | tail -1)
              
              echo "🏷️  Most recent 'safe to test' label timestamp: $label_created"
              
              if [ -n "$label_created" ]; then
                # Get the latest commit timestamp from the PR head commit
                # Use the actual commit timestamp from the PR details
                pr_head_sha="${{ github.event.pull_request.head.sha }}"
                
                # Fetch the PR details to get the head commit timestamp
                echo "📊 Fetching PR details to get latest commit..."
                pr_response=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/$repo/pulls/$pr_number")
                
                latest_commit_date=$(echo "$pr_response" | jq -r '.head.repo.pushed_at' 2>/dev/null)
                head_sha=$(echo "$pr_response" | jq -r '.head.sha' 2>/dev/null)
                
                echo "   PR Head SHA: ${head_sha:0:7}"
                echo "   PR pushed_at: $latest_commit_date"
                echo ""
                
                # Additional validation: fetch the actual commit to double-check the timestamp
                echo "📊 Fetching commit details for SHA: ${head_sha:0:7}..."
                commit_response=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/$repo/commits/$head_sha")
                
                commit_author_date=$(echo "$commit_response" | jq -r '.commit.author.date' 2>/dev/null)
                commit_committer_date=$(echo "$commit_response" | jq -r '.commit.committer.date' 2>/dev/null)
                
                echo "   Commit author date: $commit_author_date"
                echo "   Commit committer date: $commit_committer_date"
                echo ""
                
                # Use author date as it represents when the commit was created
                latest_commit_date="$commit_author_date"
                echo "📌 Latest commit timestamp (using author date): $latest_commit_date"
                echo ""
                
                # Convert to epoch time for comparison
                echo "⏱️  Converting timestamps to epoch (seconds since 1970-01-01):"
                label_epoch=$(date -d "$label_created" +%s 2>/dev/null || echo "0")
                commit_epoch=$(date -d "$latest_commit_date" +%s 2>/dev/null || echo "0")
                
                echo "   Label timestamp: $label_created → epoch: $label_epoch"
                echo "   Latest commit: $latest_commit_date → epoch: $commit_epoch"
                echo ""
                
                # Allow 60 second grace period for GitHub timestamp variations
                grace_period=60
                commit_epoch_with_grace=$((commit_epoch + grace_period))
                
                echo "⏳ Grace period: $grace_period seconds"
                echo "   Commit epoch with grace: $commit_epoch_with_grace"
                echo "   Label epoch: $label_epoch"
                echo ""
                
                if [ "$commit_epoch_with_grace" -gt "$label_epoch" ]; then
                  echo "❌ RACE CONDITION DETECTED!"
                  echo "   ⚠️  New commits were pushed AFTER the label was approved"
                  echo "   Difference: $((commit_epoch_with_grace - label_epoch)) seconds"
                  echo ""
                  echo "⚠️  SECURITY ALERT: Commits may have been pushed after label approval!"
                  echo "Label added: $label_created (epoch: $label_epoch)"
                  echo "Latest commit: $latest_commit_date (epoch: $commit_epoch)"
                  echo "❌ For security, this requires re-approval. Please:"
                  echo "1. Review the latest commits carefully"
                  echo "2. Remove and re-add the 'safe to test' label if commits are safe"
                  echo "approved=false" >> $GITHUB_OUTPUT
                  echo "needs_reapproval=true" >> $GITHUB_OUTPUT
                  echo "=========================================="
                  echo "⚠️  APPROVAL CHECK FAILED - Race condition detected"
                  echo "=========================================="
                else
                  echo "✅ RACE CONDITION CHECK PASSED!"
                  echo "   No new commits detected after label approval"
                  echo "   Safe to proceed with testing"
                  echo "approved=true" >> $GITHUB_OUTPUT
                fi
              else
                echo "❌ ERROR: Could not determine label timestamp"
                echo "⚠️  Could not determine when label was added - manual review recommended"
                echo "For maximum security, please remove and re-add the 'safe to test' label"
                echo "approved=false" >> $GITHUB_OUTPUT
                echo "needs_reapproval=true" >> $GITHUB_OUTPUT
                echo "=========================================="
                echo "❌ APPROVAL CHECK FAILED - Label timestamp not found"
                echo "=========================================="
              fi
            else
              echo "❌ 'safe to test' label NOT FOUND"
              echo "Fork PR requires manual approval from a maintainer"
              echo "approved=false" >> $GITHUB_OUTPUT
              echo "needs_approval=true" >> $GITHUB_OUTPUT
              echo "=========================================="
              echo "⏳ APPROVAL PENDING - Awaiting 'safe to test' label"
              echo "=========================================="
            fi
          else
            echo "✅ INTERNAL PR DETECTED (not a fork)"
            echo "Internal PRs are auto-approved - skipping security checks"
            echo "approved=true" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "=========================================="
          echo "Approval check complete"
          echo "=========================================="
          
          # Display final status
          final_approved=$(cat $GITHUB_OUTPUT | grep "^approved=" | cut -d'=' -f2)
          echo ""
          echo "Final Decision: approved=$final_approved"
      
      - name: Comment on fork PR for approval guidance
        if: |
          github.event.pull_request.head.repo.fork == true && 
          (steps.check-approval.outputs.needs_approval == 'true' || 
           steps.check-approval.outputs.needs_reapproval == 'true')
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            console.log('📝 Comment step triggered');
            console.log('needs_approval: ${{ steps.check-approval.outputs.needs_approval }}');
            console.log('needs_reapproval: ${{ steps.check-approval.outputs.needs_reapproval }}');
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already have a guidance comment to avoid spam
            const existingComment = comments.find(comment => 
              comment.body.includes('🔒 **Security Approval Required**') && 
              comment.user.type === 'Bot'
            );
            
            let commentBody = '';
            
            // Check what type of approval is needed based on the step outputs
            if ('${{ steps.check-approval.outputs.needs_reapproval }}' === 'true') {
              console.log('✅ Re-approval needed - posting re-approval message');
              commentBody = `🔒 **Security Re-approval Required**
            
            ⚠️ **Race condition detected**: New commits were pushed after the \`safe to test\` label was added.
            
            **For security, a maintainer must:**
            1. 📝 Review the latest commits carefully for any security concerns
            2. 🏷️ Remove the \`safe to test\` label
            3. 🏷️ Re-add the \`safe to test\` label if the new commits are safe
            
            This ensures that all commits have been properly reviewed before testing with repository secrets.
            
            ---
            *This is an automated security check to prevent malicious code execution. Learn more about [GitHub Security Lab recommendations](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/).*`;
            } else {
              commentBody = `🔒 **Security Approval Required**
            
            This fork PR requires manual approval before automated testing can run.
            
            **For security, a maintainer must:**
            1. 📝 Review the code changes carefully
            2. 🏷️ Add the \`safe to test\` label if the changes are safe to execute
            
            This protects against malicious code execution in fork contributions.
            
            ---
            *This is an automated security check to prevent malicious code execution. Learn more about [GitHub Security Lab recommendations](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/).*`;
            }
            
            if (existingComment) {
              // Update existing comment
              console.log('📝 Updating existing comment (ID: ' + existingComment.id + ')');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('✅ Updated existing security guidance comment');
            } else {
              // Create new comment
              console.log('📝 Creating new comment');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('✅ Created new security guidance comment');
            }

  Run-ASim-TemplateValidation:
    name: Run ASim Template Validation tests
    needs: security-gate
    if: needs.security-gate.outputs.approved == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v3
        with:
            ref: ${{github.event.pull_request.head.ref}}
            repository: ${{github.event.pull_request.head.repo.full_name}}
            persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
            fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      - name: Setup git config
        run: |
              git config --local user.name "github-actions[bot]"
              git config --local user.email "<>"
      - name: Merge master into pull request branch
        run: |
              git merge origin/master
              Conflicts=$(git ls-files -u | wc -l)
              if [ "$Conflicts" -gt 0 ] ; then
                echo "There is a merge conflict. Aborting"
                git merge --abort
                exit 1
              fi
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
              python -m pip install --upgrade pip
              pip install requests
              pip install PyYAML
              pip install tabulate
      - name: Run ASim parsers template validations python script
        run: |
              filePath=".script/tests/asimParsersTest/VerifyASimParserTemplate.py"
              url="https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/VerifyASimParserTemplate.py" 
              # Check if file exists and delete if it does
              if [ -f "$filePath" ]; then
                rm -f "$filePath"
              fi
              # Download the file
              echo "Downloading script from the master: $url"
              curl -o "$filePath" "$url"
              # Execute the script
              python "$filePath" 
  Run-ASim-Sample-Data-Ingest:
    needs: Run-ASim-TemplateValidation
    name: Run ASim Sample Data Ingestion
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v4
        with:
            ref: ${{github.event.pull_request.head.ref}}
            repository: ${{github.event.pull_request.head.repo.full_name}}
            persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
            fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      - name: Setup git config
        run: |
              git config --local user.name "github-actions[bot]"
              git config --local user.email "<>"
      - name: Merge master into pull request branch
        run: |
              git merge origin/master
              Conflicts=$(git ls-files -u | wc -l)
              if [ "$Conflicts" -gt 0 ] ; then
                echo "There is a merge conflict. Aborting"
                git merge --abort
                exit 1
              fi
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
              python -m pip install --upgrade pip
              pip install azure-identity
              pip install requests
              pip install PyYAML
              pip install azure-monitor-ingestion
              pip install azure-core
      - name: Login to Azure Public Cloud
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Asim Sample Log Ingestion
        id: Ingestlogs
        run: |
              filePath=".script/tests/asimParsersTest/ingestASimSampleData.py"
              url="https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/ingestASimSampleData.py" 
              # Check if file exists and delete if it does
              if [ -f "$filePath" ]; then
                rm -f "$filePath"
              fi
              # Download the file
              echo "Downloading script from the master: $url"
              curl -o "$filePath" "$url"
              chmod +x "$filePath"
              # Execute the script
              python "$filePath" "${{ github.event.pull_request.number }}"
  Run-ASim-Schema-Data-tests:
    needs: Run-ASim-Sample-Data-Ingest
    name: Run ASim Schema and Data tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          persist-credentials: false
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      
      - name: Login to Azure Public Cloud with AzPowershell
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: Setup git config
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "<>"

      - name: Merge master into pull request branch
        run: |
          git merge origin/master
          Conflicts=$(git ls-files -u | wc -l)
          if [ "$Conflicts" -gt 0 ] ; then
            echo "There is a merge conflict. Aborting"
            git merge --abort
            exit 1
          fi
      - name: Run ASIM Schema and Data tests PowerShell script
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $filePath = ".script/tests/asimParsersTest/runAsimTesters.ps1"
            $url = "https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/runAsimTesters.ps1"
            # Check if file exists and delete if it does
            if (Test-Path $filePath) {
              Remove-Item $filePath -Force
            }
            # Download the runAsimTesters file
            Write-Host "Downloading script from the master: $url"
            Invoke-WebRequest -Uri $url -OutFile $filePath
            # download the convertYamlToObject.ps1 script form master
            $filePath_convert_yaml = ".script/tests/asimParsersTest/convertYamlToObject.ps1"
            $url_convert_yaml = "https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/convertYamlToObject.ps1"
            # Check if file exists and delete if it does
            if (Test-Path $filePath_convert_yaml) {
              Remove-Item $filePath_convert_yaml -Force
            }
            # Download the convertYamlToObject file
            Write-Host "Downloading script from the master: $url_convert_yaml"
            Invoke-WebRequest -Uri $url_convert_yaml -OutFile $filePath_convert_yaml 
            # Execute the script
            & $filePath
          azPSVersion: "latest"
  Run-ASim-Parser-Filtering-Tests:
    needs: Run-ASim-Sample-Data-Ingest
    name: Run ASim Parser Filtering tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      - name: Setup git config
        run: |
              git config --local user.name "github-actions[bot]"
              git config --local user.email "<>"
      - name: Merge master into pull request branch
        run: |
          git merge origin/master
          Conflicts=$(git ls-files -u | wc -l)
          if [ "$Conflicts" -gt 0 ] ; then
            echo "There is a merge conflict. Aborting"
            git merge --abort
            exit 1
          fi
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
              python -m pip install --upgrade pip
              pip install PyYAML
              pip install azure-identity
              pip install azure-monitor-query
      - name: Login to Azure Public Cloud
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_ASIM_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Run ASim parsers filtering tests python script
        run: |
          filePath=".script/tests/asimParsersTest/ASimFilteringTest.py"
          url="https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.script/tests/asimParsersTest/ASimFilteringTest.py"
          # Check if file exists and delete if it does
          if [ -f "$filePath" ]; then
            rm -f "$filePath"
          fi
          # Download the file
          echo "Downloading script from the master: $url"
          curl -o "$filePath" "$url"
          # Execute the script
          python "$filePath"